#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
type UH0 =
    | UH0_0 of uint8 * (unit -> UH0)
    | UH0_1
and UH1 =
    | UH1_0
    | UH1_1 of uint8 * UH1
and [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : string
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : US0
    | US2_1
and [<Struct>] US3 =
    | US3_0 of f0_0 : int64
    | US3_1
and [<Struct>] US4 =
    | US4_0 of f0_0 : (unit -> UH0)
    | US4_1 of f1_0 : UH0
and Mut5 = {mutable l0 : US4}
and [<Struct>] US5 =
    | US5_0 of f0_0 : uint8
    | US5_1
and Mut6 = {mutable l0 : US5}
and [<Struct>] US6 =
    | US6_0 of f0_0 : uint64 * f0_1 : UH1
    | US6_1
and UH2 =
    | UH2_0 of uint64 * (unit -> UH2)
    | UH2_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : uint64
    | US7_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : int64 * f0_1 : UH1
    | US8_1
let rec closure2 (v0 : UH0) () : UH0 =
    v0
and method0 (v0 : int64, v1 : UH0, v2 : UH0) : UH0 =
    match v1 with
    | UH0_0(v3, v4) -> (* StreamCons *)
        let v5 : UH0 = v4 ()
        let v6 : UH0 = method0(v0, v5, v2)
        let v7 : int64 = int64 v3
        let v8 : int64 = v7 - 1L
        let v9 : int64 = v8 + v0
        let v10 : int64 = v9 % v0
        let v11 : int64 = v10 + 1L
        let v12 : uint8 = uint8 v11
        let v13 : (unit -> UH0) = closure2(v6)
        UH0_0(v12, v13)
    | UH0_1 -> (* StreamNil *)
        v2
and closure1 (v0 : int64) (v1 : UH0) : UH0 =
    let v2 : UH0 = UH0_1
    method0(v0, v1, v2)
and closure0 () (v0 : int64) : (UH0 -> UH0) =
    closure1(v0)
and method2 () : string =
    let v0 : string = "TRACE_LEVEL"
    v0
and method4 () : string =
    let v0 : string = ""
    v0
and closure6 (v0 : US1 option ref) (v1 : US1 option) : US1 option ref =
    v0.Value <- v1 
    v0
and closure7 (v0 : string option, v1 : (US1 option -> US1 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : string = x
    let v3 : US1 = US1_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method3 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::env::var(&*$0)"
    let v3 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "fable_library_rust::String_::fromString($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_result_map_"
    let v13 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = method4()
    let v15 : string = "$0.unwrap_or($1)"
    let v16 : string = Fable.Core.RustInterop.emitRustExpr struct (v13, v14) v15 
    let _v1 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "std::env::var(&*$0)"
    let v18 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "x"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = "fable_library_rust::String_::fromString($0)"
    let v24 : string = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "true; $0 })"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "_result_map_"
    let v28 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = method4()
    let v30 : string = "$0.unwrap_or($1)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr struct (v28, v29) v30 
    let _v1 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "std::env::var(&*$0)"
    let v33 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v35 : bool = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "x"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "true; $0 })"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "_result_map_"
    let v43 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = method4()
    let v45 : string = "$0.unwrap_or($1)"
    let v46 : string = Fable.Core.RustInterop.emitRustExpr struct (v43, v44) v45 
    let _v1 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : string = "process.env[$0] ?? \"\""
    let v48 : string = Fable.Core.JsInterop.emitJsExpr v0 v47 
    let _v1 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = "os"
    let v50 : IOsEnviron = Fable.Core.PyInterop.importAll v49 
    let v51 : string = "v50.environ"
    let v52 : obj = Fable.Core.PyInterop.emitPyExpr () v51 
    let v55 : string = "v52.get($0)"
    let v56 : string = Fable.Core.PyInterop.emitPyExpr v0 v55 
    let mutable _v56 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v59 : (string -> string option) = Option.ofObj
    let v60 : string option = v59 v56
    v60 
    #else
    Some v56 
    #endif
    |> fun x -> _v56 <- Some x
    let v61 : string option = match _v56 with Some x -> x | None -> failwith "optionm'.of_obj / _v56=None"
    let v64 : US1 option = None
    let _v64 = ref v64 
    let v65 : US1 option ref = _v64 
    let v66 : (US1 option -> US1 option ref) = closure6(v65)
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v61, v66)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : US1 option = _v64.Value 
    let v83 : US1 = US1_1
    let v84 : US1 = v72 |> Option.defaultValue v83 
    let v91 : string =
        match v84 with
        | US1_1 -> (* None *)
            let v89 : string = ""
            v89
        | US1_0(v88) -> (* Some *)
            v88
    let _v1 = v91 
    #endif
#else
    let v92 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v93 : string = v92 v0
    let mutable _v93 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v94 : (string -> string option) = Option.ofObj
    let v95 : string option = v94 v93
    v95 
    #else
    Some v93 
    #endif
    |> fun x -> _v93 <- Some x
    let v96 : string option = match _v93 with Some x -> x | None -> failwith "optionm'.of_obj / _v93=None"
    let v99 : US1 option = None
    let _v99 = ref v99 
    let v100 : US1 option ref = _v99 
    let v101 : (US1 option -> US1 option ref) = closure6(v100)
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v96, v101)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : US1 option = _v99.Value 
    let v118 : US1 = US1_1
    let v119 : US1 = v107 |> Option.defaultValue v118 
    let v126 : string =
        match v119 with
        | US1_1 -> (* None *)
            let v124 : string = ""
            v124
        | US1_0(v123) -> (* Some *)
            v123
    let _v1 = v126 
    #endif
    let v127 : string = _v1 
    v127
and method5 () : string =
    let v0 : string = "AUTOMATION"
    v0
and closure8 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method2()
    let v3 : string = method3(v2)
    
    
    
    
    
    let v4 : bool = "Verbose" = v3
    let v8 : US2 =
        if v4 then
            let v5 : US0 = US0_0
            US2_0(v5)
        else
            US2_1
    let v49 : US2 =
        match v8 with
        | US2_1 -> (* None *)
            let v11 : bool = "Debug" = v3
            let v15 : US2 =
                if v11 then
                    let v12 : US0 = US0_1
                    US2_0(v12)
                else
                    US2_1
            match v15 with
            | US2_1 -> (* None *)
                let v18 : bool = "Info" = v3
                let v22 : US2 =
                    if v18 then
                        let v19 : US0 = US0_2
                        US2_0(v19)
                    else
                        US2_1
                match v22 with
                | US2_1 -> (* None *)
                    let v25 : bool = "Warning" = v3
                    let v29 : US2 =
                        if v25 then
                            let v26 : US0 = US0_3
                            US2_0(v26)
                        else
                            US2_1
                    match v29 with
                    | US2_1 -> (* None *)
                        let v32 : bool = "Critical" = v3
                        let v36 : US2 =
                            if v32 then
                                let v33 : US0 = US0_4
                                US2_0(v33)
                            else
                                US2_1
                        match v36 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v37) -> (* Some *)
                            US2_0(v37)
                    | US2_0(v30) -> (* Some *)
                        US2_0(v30)
                | US2_0(v23) -> (* Some *)
                    US2_0(v23)
            | US2_0(v16) -> (* Some *)
                US2_0(v16)
        | US2_0(v9) -> (* Some *)
            US2_0(v9)
    let v50 : string = method5()
    let v51 : string = method3(v50)
    let v52 : bool = v51 = "True"
    let v62 : US3 =
        if v52 then
            let v53 : System.DateTime = System.DateTime.Now
            let v56 : (System.DateTime -> int64) = _.Ticks
            let v57 : int64 = v56 v53
            US3_0(v57)
        else
            US3_1
    let _v1 = struct (v49, v62) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : US2 = US2_1
    let v64 : US3 = US3_1
    let _v1 = struct (v63, v64) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "AUTOMATION"
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "env!(\"" + v65 + "\")"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "env!(\"" + v65 + "\")"
    let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "fable_library_rust::String_::fromString($0)"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let _v66 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "env!(\"" + v65 + "\")"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "fable_library_rust::String_::fromString($0)"
    let v84 : string = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let _v66 = v84 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = null |> unbox<string>
    let _v66 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : string = null |> unbox<string>
    let _v66 = v88 
    #endif
#else
    let v91 : string = null |> unbox<string>
    let _v66 = v91 
    #endif
    let v94 : string = _v66 
    let v99 : string = "True"
    let v100 : bool = v94 <> v99 
    let v109 : US3 =
        if v100 then
            US3_1
        else
            let v104 : string = $"near_sdk::env::block_timestamp()"
            let v105 : uint64 = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : (uint64 -> int64) = int64
            let v107 : int64 = v106 v105
            US3_0(v107)
    let v110 : US2 = US2_1
    let _v1 = struct (v110, v109) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : string = method2()
    let v112 : string = method3(v111)
    
    
    
    
    
    let v113 : bool = "Verbose" = v112
    let v117 : US2 =
        if v113 then
            let v114 : US0 = US0_0
            US2_0(v114)
        else
            US2_1
    let v158 : US2 =
        match v117 with
        | US2_1 -> (* None *)
            let v120 : bool = "Debug" = v112
            let v124 : US2 =
                if v120 then
                    let v121 : US0 = US0_1
                    US2_0(v121)
                else
                    US2_1
            match v124 with
            | US2_1 -> (* None *)
                let v127 : bool = "Info" = v112
                let v131 : US2 =
                    if v127 then
                        let v128 : US0 = US0_2
                        US2_0(v128)
                    else
                        US2_1
                match v131 with
                | US2_1 -> (* None *)
                    let v134 : bool = "Warning" = v112
                    let v138 : US2 =
                        if v134 then
                            let v135 : US0 = US0_3
                            US2_0(v135)
                        else
                            US2_1
                    match v138 with
                    | US2_1 -> (* None *)
                        let v141 : bool = "Critical" = v112
                        let v145 : US2 =
                            if v141 then
                                let v142 : US0 = US0_4
                                US2_0(v142)
                            else
                                US2_1
                        match v145 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v146) -> (* Some *)
                            US2_0(v146)
                    | US2_0(v139) -> (* Some *)
                        US2_0(v139)
                | US2_0(v132) -> (* Some *)
                    US2_0(v132)
            | US2_0(v125) -> (* Some *)
                US2_0(v125)
        | US2_0(v118) -> (* Some *)
            US2_0(v118)
    let v159 : string = method5()
    let v160 : string = method3(v159)
    let v161 : bool = v160 = "True"
    let v171 : US3 =
        if v161 then
            let v162 : System.DateTime = System.DateTime.Now
            let v165 : (System.DateTime -> int64) = _.Ticks
            let v166 : int64 = v165 v162
            US3_0(v166)
        else
            US3_1
    let _v1 = struct (v158, v171) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : string = method2()
    let v173 : string = method3(v172)
    
    
    
    
    
    let v174 : bool = "Verbose" = v173
    let v178 : US2 =
        if v174 then
            let v175 : US0 = US0_0
            US2_0(v175)
        else
            US2_1
    let v219 : US2 =
        match v178 with
        | US2_1 -> (* None *)
            let v181 : bool = "Debug" = v173
            let v185 : US2 =
                if v181 then
                    let v182 : US0 = US0_1
                    US2_0(v182)
                else
                    US2_1
            match v185 with
            | US2_1 -> (* None *)
                let v188 : bool = "Info" = v173
                let v192 : US2 =
                    if v188 then
                        let v189 : US0 = US0_2
                        US2_0(v189)
                    else
                        US2_1
                match v192 with
                | US2_1 -> (* None *)
                    let v195 : bool = "Warning" = v173
                    let v199 : US2 =
                        if v195 then
                            let v196 : US0 = US0_3
                            US2_0(v196)
                        else
                            US2_1
                    match v199 with
                    | US2_1 -> (* None *)
                        let v202 : bool = "Critical" = v173
                        let v206 : US2 =
                            if v202 then
                                let v203 : US0 = US0_4
                                US2_0(v203)
                            else
                                US2_1
                        match v206 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v207) -> (* Some *)
                            US2_0(v207)
                    | US2_0(v200) -> (* Some *)
                        US2_0(v200)
                | US2_0(v193) -> (* Some *)
                    US2_0(v193)
            | US2_0(v186) -> (* Some *)
                US2_0(v186)
        | US2_0(v179) -> (* Some *)
            US2_0(v179)
    let v220 : string = method5()
    let v221 : string = method3(v220)
    let v222 : bool = v221 = "True"
    let v232 : US3 =
        if v222 then
            let v223 : System.DateTime = System.DateTime.Now
            let v226 : (System.DateTime -> int64) = _.Ticks
            let v227 : int64 = v226 v223
            US3_0(v227)
        else
            US3_1
    let _v1 = struct (v219, v232) 
    #endif
#else
    let v233 : string = method2()
    let v234 : string = method3(v233)
    
    
    
    
    
    let v235 : bool = "Verbose" = v234
    let v239 : US2 =
        if v235 then
            let v236 : US0 = US0_0
            US2_0(v236)
        else
            US2_1
    let v280 : US2 =
        match v239 with
        | US2_1 -> (* None *)
            let v242 : bool = "Debug" = v234
            let v246 : US2 =
                if v242 then
                    let v243 : US0 = US0_1
                    US2_0(v243)
                else
                    US2_1
            match v246 with
            | US2_1 -> (* None *)
                let v249 : bool = "Info" = v234
                let v253 : US2 =
                    if v249 then
                        let v250 : US0 = US0_2
                        US2_0(v250)
                    else
                        US2_1
                match v253 with
                | US2_1 -> (* None *)
                    let v256 : bool = "Warning" = v234
                    let v260 : US2 =
                        if v256 then
                            let v257 : US0 = US0_3
                            US2_0(v257)
                        else
                            US2_1
                    match v260 with
                    | US2_1 -> (* None *)
                        let v263 : bool = "Critical" = v234
                        let v267 : US2 =
                            if v263 then
                                let v264 : US0 = US0_4
                                US2_0(v264)
                            else
                                US2_1
                        match v267 with
                        | US2_1 -> (* None *)
                            US2_1
                        | US2_0(v268) -> (* Some *)
                            US2_0(v268)
                    | US2_0(v261) -> (* Some *)
                        US2_0(v261)
                | US2_0(v254) -> (* Some *)
                    US2_0(v254)
            | US2_0(v247) -> (* Some *)
                US2_0(v247)
        | US2_0(v240) -> (* Some *)
            US2_0(v240)
    let v281 : string = method5()
    let v282 : string = method3(v281)
    let v283 : bool = v282 = "True"
    let v293 : US3 =
        if v283 then
            let v284 : System.DateTime = System.DateTime.Now
            let v287 : (System.DateTime -> int64) = _.Ticks
            let v288 : int64 = v287 v284
            US3_0(v288)
        else
            US3_1
    let _v1 = struct (v280, v293) 
    #endif
    let struct (v294 : US2, v295 : US3) = _v1 
    let v359 : Mut0 = {l0 = 0L} : Mut0
    let v360 : (string -> unit) = closure8()
    let v361 : Mut1 = {l0 = v360} : Mut1
    let v362 : Mut2 = {l0 = true} : Mut2
    let v363 : string = ""
    let v364 : Mut3 = {l0 = v363} : Mut3
    let v367 : US0 =
        match v294 with
        | US2_1 -> (* None *)
            v0
        | US2_0(v365) -> (* Some *)
            v365
    let v368 : Mut4 = {l0 = v367} : Mut4
    let v375 : int64 option =
        match v295 with
        | US3_1 -> (* None *)
            let v373 : int64 option = None
            v373
        | US3_0(v369) -> (* Some *)
            let v370 : int64 option = Some v369 
            v370
    struct (v359, v361, v362, v364, v368, v375)
and closure5 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v8 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v8 
        ()
and closure9 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : US3 option ref) (v1 : US3 option) : US3 option ref =
    v0.Value <- v1 
    v0
and closure11 (v0 : int64 option, v1 : (US3 option -> US3 option ref)) () : unit =
    match v0 with
    | Some x -> (
    (fun () ->
    (fun () ->
    let v2 : int64 = x
    let v3 : US3 = US3_0(v2)
    v3 
    )
    |> fun x -> x () |> Some
    ) () ) | None -> None
    |> v1 |> ignore
    ()
and method6 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method7 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method9 () : string =
    let v0 : string = ""
    v0
and closure13 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure12 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure13(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and closure4 () () : unit =
    let v0 : unit = ()
    let v1 : (unit -> unit) = closure5()
    let v2 : unit = (fun () -> v1 (); v0) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : Mut4, v21 : int64 option) = TraceState.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v1 (); v34) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 1 >= v70
            v71
    if v72 then
        let v73 : unit = ()
        let v74 : (unit -> unit) = closure9(v16)
        let v75 : unit = (fun () -> v74 (); v73) ()
        let v78 : unit = ()
        let v79 : unit = (fun () -> v1 (); v78) ()
        let struct (v93 : Mut0, v94 : Mut1, v95 : Mut2, v96 : Mut3, v97 : Mut4, v98 : int64 option) = TraceState.trace_state.Value
        let v111 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v112 : US3 option = None
        let _v112 = ref v112 
        let v113 : US3 option ref = _v112 
        let v114 : (US3 option -> US3 option ref) = closure10(v113)
        let v115 : unit = ()
        let v116 : (unit -> unit) = closure11(v98, v114)
        let v117 : unit = (fun () -> v116 (); v115) ()
        let v120 : US3 option = _v112.Value 
        let v131 : US3 = US3_1
        let v132 : US3 = v120 |> Option.defaultValue v131 
        let v172 : System.DateTime =
            match v132 with
            | US3_1 -> (* None *)
                let v168 : System.DateTime = System.DateTime.Now
                v168
            | US3_0(v136) -> (* Some *)
                let v137 : System.DateTime = System.DateTime.Now
                let v140 : (System.DateTime -> int64) = _.Ticks
                let v141 : int64 = v140 v137
                let v144 : int64 = v141 - v136
                let v145 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v146 : System.TimeSpan = v145 v144
                let v149 : (System.TimeSpan -> int32) = _.Hours
                let v150 : int32 = v149 v146
                let v153 : (System.TimeSpan -> int32) = _.Minutes
                let v154 : int32 = v153 v146
                let v157 : (System.TimeSpan -> int32) = _.Seconds
                let v158 : int32 = v157 v146
                let v161 : (System.TimeSpan -> int32) = _.Milliseconds
                let v162 : int32 = v161 v146
                let v165 : System.DateTime = System.DateTime (1, 1, 1, v150, v154, v158, v162)
                v165
        let v173 : string = method6()
        let v176 : (string -> string) = v172.ToString
        let v177 : string = v176 v173
        let _v111 = v177 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v180 : US3 option = None
        let _v180 = ref v180 
        let v181 : US3 option ref = _v180 
        let v182 : (US3 option -> US3 option ref) = closure10(v181)
        let v183 : unit = ()
        let v184 : (unit -> unit) = closure11(v98, v182)
        let v185 : unit = (fun () -> v184 (); v183) ()
        let v188 : US3 option = _v180.Value 
        let v199 : US3 = US3_1
        let v200 : US3 = v188 |> Option.defaultValue v199 
        let v240 : System.DateTime =
            match v200 with
            | US3_1 -> (* None *)
                let v236 : System.DateTime = System.DateTime.Now
                v236
            | US3_0(v204) -> (* Some *)
                let v205 : System.DateTime = System.DateTime.Now
                let v208 : (System.DateTime -> int64) = _.Ticks
                let v209 : int64 = v208 v205
                let v212 : int64 = v209 - v204
                let v213 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v214 : System.TimeSpan = v213 v212
                let v217 : (System.TimeSpan -> int32) = _.Hours
                let v218 : int32 = v217 v214
                let v221 : (System.TimeSpan -> int32) = _.Minutes
                let v222 : int32 = v221 v214
                let v225 : (System.TimeSpan -> int32) = _.Seconds
                let v226 : int32 = v225 v214
                let v229 : (System.TimeSpan -> int32) = _.Milliseconds
                let v230 : int32 = v229 v214
                let v233 : System.DateTime = System.DateTime (1, 1, 1, v218, v222, v226, v230)
                v233
        let v241 : string = method6()
        let v244 : (string -> string) = v240.ToString
        let v245 : string = v244 v241
        let _v111 = v245 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v248 : string = $"near_sdk::env::block_timestamp()"
        let v249 : uint64 = Fable.Core.RustInterop.emitRustExpr () v248 
        let v250 : US3 option = None
        let _v250 = ref v250 
        let v251 : US3 option ref = _v250 
        let v252 : (US3 option -> US3 option ref) = closure10(v251)
        let v253 : unit = ()
        let v254 : (unit -> unit) = closure11(v98, v252)
        let v255 : unit = (fun () -> v254 (); v253) ()
        let v258 : US3 option = _v250.Value 
        let v269 : US3 = US3_1
        let v270 : US3 = v258 |> Option.defaultValue v269 
        let v279 : uint64 =
            match v270 with
            | US3_1 -> (* None *)
                v249
            | US3_0(v274) -> (* Some *)
                let v275 : (int64 -> uint64) = uint64
                let v276 : uint64 = v275 v274
                let v277 : uint64 = v249 - v276
                v277
        let v280 : uint64 = v279 / 1000000000UL
        let v281 : uint64 = v280 % 60UL
        let v282 : uint64 = v280 / 60UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v280 / 3600UL
        let v285 : uint64 = v284 % 24UL
        let v286 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v287 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v285, v283, v281) v286 
        let v288 : string = "fable_library_rust::String_::fromString($0)"
        let v289 : string = Fable.Core.RustInterop.emitRustExpr v287 v288 
        let _v111 = v289 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v290 : US3 option = None
        let _v290 = ref v290 
        let v291 : US3 option ref = _v290 
        let v292 : (US3 option -> US3 option ref) = closure10(v291)
        let v293 : unit = ()
        let v294 : (unit -> unit) = closure11(v98, v292)
        let v295 : unit = (fun () -> v294 (); v293) ()
        let v298 : US3 option = _v290.Value 
        let v309 : US3 = US3_1
        let v310 : US3 = v298 |> Option.defaultValue v309 
        let v350 : System.DateTime =
            match v310 with
            | US3_1 -> (* None *)
                let v346 : System.DateTime = System.DateTime.Now
                v346
            | US3_0(v314) -> (* Some *)
                let v315 : System.DateTime = System.DateTime.Now
                let v318 : (System.DateTime -> int64) = _.Ticks
                let v319 : int64 = v318 v315
                let v322 : int64 = v319 - v314
                let v323 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v324 : System.TimeSpan = v323 v322
                let v327 : (System.TimeSpan -> int32) = _.Hours
                let v328 : int32 = v327 v324
                let v331 : (System.TimeSpan -> int32) = _.Minutes
                let v332 : int32 = v331 v324
                let v335 : (System.TimeSpan -> int32) = _.Seconds
                let v336 : int32 = v335 v324
                let v339 : (System.TimeSpan -> int32) = _.Milliseconds
                let v340 : int32 = v339 v324
                let v343 : System.DateTime = System.DateTime (1, 1, 1, v328, v332, v336, v340)
                v343
        let v351 : string = method7()
        let v354 : (string -> string) = v350.ToString
        let v355 : string = v354 v351
        let _v111 = v355 
        #endif
#if FABLE_COMPILER_PYTHON
        let v358 : US3 option = None
        let _v358 = ref v358 
        let v359 : US3 option ref = _v358 
        let v360 : (US3 option -> US3 option ref) = closure10(v359)
        let v361 : unit = ()
        let v362 : (unit -> unit) = closure11(v98, v360)
        let v363 : unit = (fun () -> v362 (); v361) ()
        let v366 : US3 option = _v358.Value 
        let v377 : US3 = US3_1
        let v378 : US3 = v366 |> Option.defaultValue v377 
        let v418 : System.DateTime =
            match v378 with
            | US3_1 -> (* None *)
                let v414 : System.DateTime = System.DateTime.Now
                v414
            | US3_0(v382) -> (* Some *)
                let v383 : System.DateTime = System.DateTime.Now
                let v386 : (System.DateTime -> int64) = _.Ticks
                let v387 : int64 = v386 v383
                let v390 : int64 = v387 - v382
                let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v392 : System.TimeSpan = v391 v390
                let v395 : (System.TimeSpan -> int32) = _.Hours
                let v396 : int32 = v395 v392
                let v399 : (System.TimeSpan -> int32) = _.Minutes
                let v400 : int32 = v399 v392
                let v403 : (System.TimeSpan -> int32) = _.Seconds
                let v404 : int32 = v403 v392
                let v407 : (System.TimeSpan -> int32) = _.Milliseconds
                let v408 : int32 = v407 v392
                let v411 : System.DateTime = System.DateTime (1, 1, 1, v396, v400, v404, v408)
                v411
        let v419 : string = method7()
        let v422 : (string -> string) = v418.ToString
        let v423 : string = v422 v419
        let _v111 = v423 
        #endif
#else
        let v426 : US3 option = None
        let _v426 = ref v426 
        let v427 : US3 option ref = _v426 
        let v428 : (US3 option -> US3 option ref) = closure10(v427)
        let v429 : unit = ()
        let v430 : (unit -> unit) = closure11(v98, v428)
        let v431 : unit = (fun () -> v430 (); v429) ()
        let v434 : US3 option = _v426.Value 
        let v445 : US3 = US3_1
        let v446 : US3 = v434 |> Option.defaultValue v445 
        let v486 : System.DateTime =
            match v446 with
            | US3_1 -> (* None *)
                let v482 : System.DateTime = System.DateTime.Now
                v482
            | US3_0(v450) -> (* Some *)
                let v451 : System.DateTime = System.DateTime.Now
                let v454 : (System.DateTime -> int64) = _.Ticks
                let v455 : int64 = v454 v451
                let v458 : int64 = v455 - v450
                let v459 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v460 : System.TimeSpan = v459 v458
                let v463 : (System.TimeSpan -> int32) = _.Hours
                let v464 : int32 = v463 v460
                let v467 : (System.TimeSpan -> int32) = _.Minutes
                let v468 : int32 = v467 v460
                let v471 : (System.TimeSpan -> int32) = _.Seconds
                let v472 : int32 = v471 v460
                let v475 : (System.TimeSpan -> int32) = _.Milliseconds
                let v476 : int32 = v475 v460
                let v479 : System.DateTime = System.DateTime (1, 1, 1, v464, v468, v472, v476)
                v479
        let v487 : string = method7()
        let v490 : (string -> string) = v486.ToString
        let v491 : string = v490 v487
        let _v111 = v491 
        #endif
        let v494 : string = _v111 
        
        
        
        
        
        let v564 : string = "Debug"
        let v565 : (unit -> string) = v564.ToLower
        let v566 : string = v565 ()
        let v569 : string = v566.PadLeft (7, ' ')
        let v583 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v584 : string = "inline_colorization::color_bright_blue"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v583 = v594 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v595 : string = "inline_colorization::color_bright_blue"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v583 = v605 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v606 : string = "inline_colorization::color_bright_blue"
        let v607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "&*$0"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v608 
        let v610 : string = "inline_colorization::color_reset"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "\"{v607}{v609}{v611}\""
        let v613 : string = @$"format!(" + v612 + ")"
        let v614 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "fable_library_rust::String_::fromString($0)"
        let v616 : string = Fable.Core.RustInterop.emitRustExpr v614 v615 
        let _v583 = v616 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v617 : string = "\u001b[94m"
        let v618 : string = method8()
        let v619 : string = v617 + v569 
        let v620 : string = v619 + v618 
        let _v583 = v620 
        #endif
#if FABLE_COMPILER_PYTHON
        let v621 : string = "\u001b[94m"
        let v622 : string = method8()
        let v623 : string = v621 + v569 
        let v624 : string = v623 + v622 
        let _v583 = v624 
        #endif
#else
        let v625 : string = "\u001b[94m"
        let v626 : string = method8()
        let v627 : string = v625 + v569 
        let v628 : string = v627 + v626 
        let _v583 = v628 
        #endif
        let v629 : string = _v583 
        let v635 : int64 = v93.l0
        let v636 : string = method9()
        let v637 : Mut3 = {l0 = v636} : Mut3
        let v638 : string = v637.l0
        let v639 : string = $"dice.create_sequential_roller ()"
        let v640 : bool = v639 = ""
        let v697 : string =
            if v640 then
                let v641 : string = ""
                v641
            else
                let v642 : string = $"{v494} {v629} #{v635} %s{v639} / {v638}"
                let v645 : char list = []
                let v646 : (char list -> (char [])) = List.toArray
                let v647 : (char []) = v646 v645
                let v650 : string = v642.TrimStart v647 
                let v668 : char list = []
                let v669 : char list = '/' :: v668 
                let v672 : char list = ' ' :: v669 
                let v675 : (char list -> (char [])) = List.toArray
                let v676 : (char []) = v675 v672
                let v679 : string = v650.TrimEnd v676 
                v679
        let v698 : (string -> unit) = closure12()
        let v699 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v700 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v697 v700 
        let _v699 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v701 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v697 v701 
        let _v699 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v702 : string = v19.l0
        let v703 : bool = v702 = ""
        let v711 : string =
            if v703 then
                v697
            else
                let v704 : bool = v697 = ""
                if v704 then
                    let v705 : string = v19.l0
                    v705
                else
                    let v706 : string = v19.l0
                    let v707 : string = "\n"
                    let v708 : string = v706 + v707 
                    let v709 : string = v708 + v697 
                    v709
        let v712 : string = "&*$0"
        let v713 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let v714 : string = $"$0.chars()"
        let v715 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v713 v714 
        let v716 : string = "v715"
        let v717 : _ = Fable.Core.RustInterop.emitRustExpr () v716 
        let v718 : string = "v717.collect::<Vec<_>>()"
        let v719 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v718 
        let v720 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v721 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v719 v720 
        let v722 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v723 : bool = Fable.Core.RustInterop.emitRustExpr v721 v722 
        let v724 : string = "x"
        let v725 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v724 
        let v726 : string = "String::from_iter($0)"
        let v727 : std_string_String = Fable.Core.RustInterop.emitRustExpr v725 v726 
        let v728 : string = "true; $0 }).collect::<Vec<_>>()"
        let v729 : bool = Fable.Core.RustInterop.emitRustExpr v727 v728 
        let v730 : string = "_vec_map"
        let v731 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v730 
        let v732 : string = "$0.len()"
        let v733 : unativeint = Fable.Core.RustInterop.emitRustExpr v731 v732 
        let v734 : (unativeint -> int32) = int32
        let v735 : int32 = v734 v733
        let v736 : string = ""
        let v737 : bool = v697 <> v736 
        let v741 : bool =
            if v737 then
                let v740 : bool = v735 <= 1
                v740
            else
                false
        if v741 then
            v19.l0 <- v711
            ()
        else
            v19.l0 <- v736
            let v742 : string = "true; $0.into_iter().for_each(|x| { //"
            let v743 : bool = Fable.Core.RustInterop.emitRustExpr v731 v742 
            let v744 : string = "x"
            let v745 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v744 
            let v746 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v745 v746 
            let v747 : string = $"true;"
            let v748 : bool = Fable.Core.RustInterop.emitRustExpr () v747 
            let v749 : string = "true; }}); { //"
            let v750 : bool = Fable.Core.RustInterop.emitRustExpr () v749 
            ()
        let _v699 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v698 v697
        let _v699 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v698 v697
        let _v699 = () 
        #endif
#else
        v698 v697
        let _v699 = () 
        #endif
        _v699 
        let v751 : (string -> unit) = v17.l0
        v751 v697
and method10 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_1(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_1(v2, v1)
        method10(v3, v4)
    | UH1_0 -> (* Nil *)
        v1
and method11 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_1(v2, v3) -> (* Cons *)
        let v4 : UH1 = method11(v3, v1)
        UH1_1(v2, v4)
    | UH1_0 -> (* Nil *)
        v1
and closure14 (v0 : UH0) () : UH0 =
    v0
and method12 (v0 : UH1, v1 : UH0) : UH0 =
    match v0 with
    | UH1_1(v2, v3) -> (* Cons *)
        let v4 : UH0 = method12(v3, v1)
        let v5 : (unit -> UH0) = closure14(v4)
        UH0_0(v2, v5)
    | UH1_0 -> (* Nil *)
        v1
and closure15 (v0 : UH0) () : UH0 =
    v0
and closure16 (v0 : UH0, v1 : Mut5) () : UH0 =
    let v2 : US4 = v1.l0
    match v2 with
    | US4_1(v3) -> (* Computed *)
        v3
    | US4_0(v4) -> (* NotComputed *)
        let v5 : UH0 = v4 ()
        let v12 : UH0 =
            match v5 with
            | UH0_0(v7, v8) -> (* StreamCons *)
                let v9 : (unit -> UH0) = method13(v0, v8)
                UH0_0(v7, v9)
            | UH0_1 -> (* StreamNil *)
                UH0_1
        let v13 : US4 = US4_1(v12)
        v1.l0 <- v13
        v12
and method13 (v0 : UH0, v1 : (unit -> UH0)) : (unit -> UH0) =
    let v2 : US4 = US4_0(v1)
    let v3 : Mut5 = {l0 = v2} : Mut5
    closure16(v0, v3)
and closure19 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and closure18 (v0 : int64, v1 : int64, v2 : int64, v3 : uint8 option) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure5()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 1 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure9(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure10(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure11(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure10(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure11(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure10(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure11(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure10(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure11(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure10(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure11(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure10(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure11(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Debug"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_blue"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_blue"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_blue"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[94m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[94m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[94m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure19(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "current_index"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure19(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure19(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = $"{v0}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure19(v641, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = "; "
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure19(v641, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = "acc"
        let v687 : string = $"{v686}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure19(v641, v687)
        let v692 : unit = (fun () -> v691 (); v690) ()
        let v695 : string = $"{v660}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure19(v641, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = $"{v1}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure19(v641, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = $"{v677}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure19(v641, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = "len"
        let v720 : string = $"{v719}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure19(v641, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v660}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure19(v641, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = $"{v2}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure19(v641, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = $"{v677}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure19(v641, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = "last_item"
        let v753 : string = $"{v752}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure19(v641, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"{v660}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure19(v641, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v770 : string = "format!(\"{:#?}\", $0)"
        let v771 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v770 
        let v772 : string = "fable_library_rust::String_::fromString($0)"
        let v773 : string = Fable.Core.RustInterop.emitRustExpr v771 v772 
        let _v769 = v773 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v774 : string = "format!(\"{:#?}\", $0)"
        let v775 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v774 
        let v776 : string = "fable_library_rust::String_::fromString($0)"
        let v777 : string = Fable.Core.RustInterop.emitRustExpr v775 v776 
        let _v769 = v777 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v778 : string = "format!(\"{:#?}\", $0)"
        let v779 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v778 
        let v780 : string = "fable_library_rust::String_::fromString($0)"
        let v781 : string = Fable.Core.RustInterop.emitRustExpr v779 v780 
        let _v769 = v781 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v782 : string = $"%A{v3}"
        let _v769 = v782 
        #endif
#if FABLE_COMPILER_PYTHON
        let v785 : string = $"%A{v3}"
        let _v769 = v785 
        #endif
#else
        let v788 : string = $"%A{v3}"
        let _v769 = v788 
        #endif
        let v791 : string = _v769 
        let v796 : string = $"{v791}"
        let v799 : unit = ()
        let v800 : (unit -> unit) = closure19(v641, v796)
        let v801 : unit = (fun () -> v800 (); v799) ()
        let v804 : string = " }"
        let v805 : string = $"{v804}"
        let v808 : unit = ()
        let v809 : (unit -> unit) = closure19(v641, v805)
        let v810 : unit = (fun () -> v809 (); v808) ()
        let v813 : string = v641.l0
        let v814 : string = $"dice.create_sequential_roller / roll"
        let v815 : bool = v814 = ""
        let v872 : string =
            if v815 then
                let v816 : string = ""
                v816
            else
                let v817 : string = $"{v498} {v633} #{v639} %s{v814} / {v813}"
                let v820 : char list = []
                let v821 : (char list -> (char [])) = List.toArray
                let v822 : (char []) = v821 v820
                let v825 : string = v817.TrimStart v822 
                let v843 : char list = []
                let v844 : char list = '/' :: v843 
                let v847 : char list = ' ' :: v844 
                let v850 : (char list -> (char [])) = List.toArray
                let v851 : (char []) = v850 v847
                let v854 : string = v825.TrimEnd v851 
                v854
        let v873 : (string -> unit) = closure12()
        let v874 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v875 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v872 v875 
        let _v874 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v876 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v872 v876 
        let _v874 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v877 : string = v23.l0
        let v878 : bool = v877 = ""
        let v886 : string =
            if v878 then
                v872
            else
                let v879 : bool = v872 = ""
                if v879 then
                    let v880 : string = v23.l0
                    v880
                else
                    let v881 : string = v23.l0
                    let v882 : string = "\n"
                    let v883 : string = v881 + v882 
                    let v884 : string = v883 + v872 
                    v884
        let v887 : string = "&*$0"
        let v888 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v886 v887 
        let v889 : string = $"$0.chars()"
        let v890 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v888 v889 
        let v891 : string = "v890"
        let v892 : _ = Fable.Core.RustInterop.emitRustExpr () v891 
        let v893 : string = "v892.collect::<Vec<_>>()"
        let v894 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v893 
        let v895 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v896 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v894 v895 
        let v897 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v898 : bool = Fable.Core.RustInterop.emitRustExpr v896 v897 
        let v899 : string = "x"
        let v900 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v899 
        let v901 : string = "String::from_iter($0)"
        let v902 : std_string_String = Fable.Core.RustInterop.emitRustExpr v900 v901 
        let v903 : string = "true; $0 }).collect::<Vec<_>>()"
        let v904 : bool = Fable.Core.RustInterop.emitRustExpr v902 v903 
        let v905 : string = "_vec_map"
        let v906 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v905 
        let v907 : string = "$0.len()"
        let v908 : unativeint = Fable.Core.RustInterop.emitRustExpr v906 v907 
        let v909 : (unativeint -> int32) = int32
        let v910 : int32 = v909 v908
        let v911 : string = ""
        let v912 : bool = v872 <> v911 
        let v916 : bool =
            if v912 then
                let v915 : bool = v910 <= 1
                v915
            else
                false
        if v916 then
            v23.l0 <- v886
            ()
        else
            v23.l0 <- v911
            let v917 : string = "true; $0.into_iter().for_each(|x| { //"
            let v918 : bool = Fable.Core.RustInterop.emitRustExpr v906 v917 
            let v919 : string = "x"
            let v920 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v919 
            let v921 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v920 v921 
            let v922 : string = $"true;"
            let v923 : bool = Fable.Core.RustInterop.emitRustExpr () v922 
            let v924 : string = "true; }}); { //"
            let v925 : bool = Fable.Core.RustInterop.emitRustExpr () v924 
            ()
        let _v874 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v873 v872
        let _v874 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v873 v872
        let _v874 = () 
        #endif
#else
        v873 v872
        let _v874 = () 
        #endif
        _v874 
        let v926 : (string -> unit) = v21.l0
        v926 v872
and method15 (v0 : int64, v1 : UH0) : US5 =
    match v1 with
    | UH0_0(v2, v3) -> (* StreamCons *)
        let v4 : bool = v0 <= 0L
        if v4 then
            US5_0(v2)
        else
            let v6 : int64 = v0 - 1L
            let v7 : UH0 = v3 ()
            method15(v6, v7)
    | UH0_1 -> (* StreamNil *)
        US5_1
and closure20 () () : unit =
    let v0 : unit = ()
    let v1 : (unit -> unit) = closure5()
    let v2 : unit = (fun () -> v1 (); v0) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : Mut4, v21 : int64 option) = TraceState.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v1 (); v34) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 1 >= v70
            v71
    if v72 then
        let v73 : unit = ()
        let v74 : (unit -> unit) = closure9(v16)
        let v75 : unit = (fun () -> v74 (); v73) ()
        let v78 : unit = ()
        let v79 : unit = (fun () -> v1 (); v78) ()
        let struct (v93 : Mut0, v94 : Mut1, v95 : Mut2, v96 : Mut3, v97 : Mut4, v98 : int64 option) = TraceState.trace_state.Value
        let v111 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v112 : US3 option = None
        let _v112 = ref v112 
        let v113 : US3 option ref = _v112 
        let v114 : (US3 option -> US3 option ref) = closure10(v113)
        let v115 : unit = ()
        let v116 : (unit -> unit) = closure11(v98, v114)
        let v117 : unit = (fun () -> v116 (); v115) ()
        let v120 : US3 option = _v112.Value 
        let v131 : US3 = US3_1
        let v132 : US3 = v120 |> Option.defaultValue v131 
        let v172 : System.DateTime =
            match v132 with
            | US3_1 -> (* None *)
                let v168 : System.DateTime = System.DateTime.Now
                v168
            | US3_0(v136) -> (* Some *)
                let v137 : System.DateTime = System.DateTime.Now
                let v140 : (System.DateTime -> int64) = _.Ticks
                let v141 : int64 = v140 v137
                let v144 : int64 = v141 - v136
                let v145 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v146 : System.TimeSpan = v145 v144
                let v149 : (System.TimeSpan -> int32) = _.Hours
                let v150 : int32 = v149 v146
                let v153 : (System.TimeSpan -> int32) = _.Minutes
                let v154 : int32 = v153 v146
                let v157 : (System.TimeSpan -> int32) = _.Seconds
                let v158 : int32 = v157 v146
                let v161 : (System.TimeSpan -> int32) = _.Milliseconds
                let v162 : int32 = v161 v146
                let v165 : System.DateTime = System.DateTime (1, 1, 1, v150, v154, v158, v162)
                v165
        let v173 : string = method6()
        let v176 : (string -> string) = v172.ToString
        let v177 : string = v176 v173
        let _v111 = v177 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v180 : US3 option = None
        let _v180 = ref v180 
        let v181 : US3 option ref = _v180 
        let v182 : (US3 option -> US3 option ref) = closure10(v181)
        let v183 : unit = ()
        let v184 : (unit -> unit) = closure11(v98, v182)
        let v185 : unit = (fun () -> v184 (); v183) ()
        let v188 : US3 option = _v180.Value 
        let v199 : US3 = US3_1
        let v200 : US3 = v188 |> Option.defaultValue v199 
        let v240 : System.DateTime =
            match v200 with
            | US3_1 -> (* None *)
                let v236 : System.DateTime = System.DateTime.Now
                v236
            | US3_0(v204) -> (* Some *)
                let v205 : System.DateTime = System.DateTime.Now
                let v208 : (System.DateTime -> int64) = _.Ticks
                let v209 : int64 = v208 v205
                let v212 : int64 = v209 - v204
                let v213 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v214 : System.TimeSpan = v213 v212
                let v217 : (System.TimeSpan -> int32) = _.Hours
                let v218 : int32 = v217 v214
                let v221 : (System.TimeSpan -> int32) = _.Minutes
                let v222 : int32 = v221 v214
                let v225 : (System.TimeSpan -> int32) = _.Seconds
                let v226 : int32 = v225 v214
                let v229 : (System.TimeSpan -> int32) = _.Milliseconds
                let v230 : int32 = v229 v214
                let v233 : System.DateTime = System.DateTime (1, 1, 1, v218, v222, v226, v230)
                v233
        let v241 : string = method6()
        let v244 : (string -> string) = v240.ToString
        let v245 : string = v244 v241
        let _v111 = v245 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v248 : string = $"near_sdk::env::block_timestamp()"
        let v249 : uint64 = Fable.Core.RustInterop.emitRustExpr () v248 
        let v250 : US3 option = None
        let _v250 = ref v250 
        let v251 : US3 option ref = _v250 
        let v252 : (US3 option -> US3 option ref) = closure10(v251)
        let v253 : unit = ()
        let v254 : (unit -> unit) = closure11(v98, v252)
        let v255 : unit = (fun () -> v254 (); v253) ()
        let v258 : US3 option = _v250.Value 
        let v269 : US3 = US3_1
        let v270 : US3 = v258 |> Option.defaultValue v269 
        let v279 : uint64 =
            match v270 with
            | US3_1 -> (* None *)
                v249
            | US3_0(v274) -> (* Some *)
                let v275 : (int64 -> uint64) = uint64
                let v276 : uint64 = v275 v274
                let v277 : uint64 = v249 - v276
                v277
        let v280 : uint64 = v279 / 1000000000UL
        let v281 : uint64 = v280 % 60UL
        let v282 : uint64 = v280 / 60UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v280 / 3600UL
        let v285 : uint64 = v284 % 24UL
        let v286 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v287 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v285, v283, v281) v286 
        let v288 : string = "fable_library_rust::String_::fromString($0)"
        let v289 : string = Fable.Core.RustInterop.emitRustExpr v287 v288 
        let _v111 = v289 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v290 : US3 option = None
        let _v290 = ref v290 
        let v291 : US3 option ref = _v290 
        let v292 : (US3 option -> US3 option ref) = closure10(v291)
        let v293 : unit = ()
        let v294 : (unit -> unit) = closure11(v98, v292)
        let v295 : unit = (fun () -> v294 (); v293) ()
        let v298 : US3 option = _v290.Value 
        let v309 : US3 = US3_1
        let v310 : US3 = v298 |> Option.defaultValue v309 
        let v350 : System.DateTime =
            match v310 with
            | US3_1 -> (* None *)
                let v346 : System.DateTime = System.DateTime.Now
                v346
            | US3_0(v314) -> (* Some *)
                let v315 : System.DateTime = System.DateTime.Now
                let v318 : (System.DateTime -> int64) = _.Ticks
                let v319 : int64 = v318 v315
                let v322 : int64 = v319 - v314
                let v323 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v324 : System.TimeSpan = v323 v322
                let v327 : (System.TimeSpan -> int32) = _.Hours
                let v328 : int32 = v327 v324
                let v331 : (System.TimeSpan -> int32) = _.Minutes
                let v332 : int32 = v331 v324
                let v335 : (System.TimeSpan -> int32) = _.Seconds
                let v336 : int32 = v335 v324
                let v339 : (System.TimeSpan -> int32) = _.Milliseconds
                let v340 : int32 = v339 v324
                let v343 : System.DateTime = System.DateTime (1, 1, 1, v328, v332, v336, v340)
                v343
        let v351 : string = method7()
        let v354 : (string -> string) = v350.ToString
        let v355 : string = v354 v351
        let _v111 = v355 
        #endif
#if FABLE_COMPILER_PYTHON
        let v358 : US3 option = None
        let _v358 = ref v358 
        let v359 : US3 option ref = _v358 
        let v360 : (US3 option -> US3 option ref) = closure10(v359)
        let v361 : unit = ()
        let v362 : (unit -> unit) = closure11(v98, v360)
        let v363 : unit = (fun () -> v362 (); v361) ()
        let v366 : US3 option = _v358.Value 
        let v377 : US3 = US3_1
        let v378 : US3 = v366 |> Option.defaultValue v377 
        let v418 : System.DateTime =
            match v378 with
            | US3_1 -> (* None *)
                let v414 : System.DateTime = System.DateTime.Now
                v414
            | US3_0(v382) -> (* Some *)
                let v383 : System.DateTime = System.DateTime.Now
                let v386 : (System.DateTime -> int64) = _.Ticks
                let v387 : int64 = v386 v383
                let v390 : int64 = v387 - v382
                let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v392 : System.TimeSpan = v391 v390
                let v395 : (System.TimeSpan -> int32) = _.Hours
                let v396 : int32 = v395 v392
                let v399 : (System.TimeSpan -> int32) = _.Minutes
                let v400 : int32 = v399 v392
                let v403 : (System.TimeSpan -> int32) = _.Seconds
                let v404 : int32 = v403 v392
                let v407 : (System.TimeSpan -> int32) = _.Milliseconds
                let v408 : int32 = v407 v392
                let v411 : System.DateTime = System.DateTime (1, 1, 1, v396, v400, v404, v408)
                v411
        let v419 : string = method7()
        let v422 : (string -> string) = v418.ToString
        let v423 : string = v422 v419
        let _v111 = v423 
        #endif
#else
        let v426 : US3 option = None
        let _v426 = ref v426 
        let v427 : US3 option ref = _v426 
        let v428 : (US3 option -> US3 option ref) = closure10(v427)
        let v429 : unit = ()
        let v430 : (unit -> unit) = closure11(v98, v428)
        let v431 : unit = (fun () -> v430 (); v429) ()
        let v434 : US3 option = _v426.Value 
        let v445 : US3 = US3_1
        let v446 : US3 = v434 |> Option.defaultValue v445 
        let v486 : System.DateTime =
            match v446 with
            | US3_1 -> (* None *)
                let v482 : System.DateTime = System.DateTime.Now
                v482
            | US3_0(v450) -> (* Some *)
                let v451 : System.DateTime = System.DateTime.Now
                let v454 : (System.DateTime -> int64) = _.Ticks
                let v455 : int64 = v454 v451
                let v458 : int64 = v455 - v450
                let v459 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v460 : System.TimeSpan = v459 v458
                let v463 : (System.TimeSpan -> int32) = _.Hours
                let v464 : int32 = v463 v460
                let v467 : (System.TimeSpan -> int32) = _.Minutes
                let v468 : int32 = v467 v460
                let v471 : (System.TimeSpan -> int32) = _.Seconds
                let v472 : int32 = v471 v460
                let v475 : (System.TimeSpan -> int32) = _.Milliseconds
                let v476 : int32 = v475 v460
                let v479 : System.DateTime = System.DateTime (1, 1, 1, v464, v468, v472, v476)
                v479
        let v487 : string = method7()
        let v490 : (string -> string) = v486.ToString
        let v491 : string = v490 v487
        let _v111 = v491 
        #endif
        let v494 : string = _v111 
        
        
        
        
        
        let v564 : string = "Debug"
        let v565 : (unit -> string) = v564.ToLower
        let v566 : string = v565 ()
        let v569 : string = v566.PadLeft (7, ' ')
        let v583 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v584 : string = "inline_colorization::color_bright_blue"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v583 = v594 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v595 : string = "inline_colorization::color_bright_blue"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v583 = v605 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v606 : string = "inline_colorization::color_bright_blue"
        let v607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "&*$0"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v608 
        let v610 : string = "inline_colorization::color_reset"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "\"{v607}{v609}{v611}\""
        let v613 : string = @$"format!(" + v612 + ")"
        let v614 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "fable_library_rust::String_::fromString($0)"
        let v616 : string = Fable.Core.RustInterop.emitRustExpr v614 v615 
        let _v583 = v616 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v617 : string = "\u001b[94m"
        let v618 : string = method8()
        let v619 : string = v617 + v569 
        let v620 : string = v619 + v618 
        let _v583 = v620 
        #endif
#if FABLE_COMPILER_PYTHON
        let v621 : string = "\u001b[94m"
        let v622 : string = method8()
        let v623 : string = v621 + v569 
        let v624 : string = v623 + v622 
        let _v583 = v624 
        #endif
#else
        let v625 : string = "\u001b[94m"
        let v626 : string = method8()
        let v627 : string = v625 + v569 
        let v628 : string = v627 + v626 
        let _v583 = v628 
        #endif
        let v629 : string = _v583 
        let v635 : int64 = v93.l0
        let v636 : string = method9()
        let v637 : Mut3 = {l0 = v636} : Mut3
        let v638 : string = v637.l0
        let v639 : string = $"dice.create_sequential_roller / roll / None"
        let v640 : bool = v639 = ""
        let v697 : string =
            if v640 then
                let v641 : string = ""
                v641
            else
                let v642 : string = $"{v494} {v629} #{v635} %s{v639} / {v638}"
                let v645 : char list = []
                let v646 : (char list -> (char [])) = List.toArray
                let v647 : (char []) = v646 v645
                let v650 : string = v642.TrimStart v647 
                let v668 : char list = []
                let v669 : char list = '/' :: v668 
                let v672 : char list = ' ' :: v669 
                let v675 : (char list -> (char [])) = List.toArray
                let v676 : (char []) = v675 v672
                let v679 : string = v650.TrimEnd v676 
                v679
        let v698 : (string -> unit) = closure12()
        let v699 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v700 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v697 v700 
        let _v699 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v701 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v697 v701 
        let _v699 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v702 : string = v19.l0
        let v703 : bool = v702 = ""
        let v711 : string =
            if v703 then
                v697
            else
                let v704 : bool = v697 = ""
                if v704 then
                    let v705 : string = v19.l0
                    v705
                else
                    let v706 : string = v19.l0
                    let v707 : string = "\n"
                    let v708 : string = v706 + v707 
                    let v709 : string = v708 + v697 
                    v709
        let v712 : string = "&*$0"
        let v713 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v711 v712 
        let v714 : string = $"$0.chars()"
        let v715 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v713 v714 
        let v716 : string = "v715"
        let v717 : _ = Fable.Core.RustInterop.emitRustExpr () v716 
        let v718 : string = "v717.collect::<Vec<_>>()"
        let v719 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v718 
        let v720 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v721 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v719 v720 
        let v722 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v723 : bool = Fable.Core.RustInterop.emitRustExpr v721 v722 
        let v724 : string = "x"
        let v725 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v724 
        let v726 : string = "String::from_iter($0)"
        let v727 : std_string_String = Fable.Core.RustInterop.emitRustExpr v725 v726 
        let v728 : string = "true; $0 }).collect::<Vec<_>>()"
        let v729 : bool = Fable.Core.RustInterop.emitRustExpr v727 v728 
        let v730 : string = "_vec_map"
        let v731 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v730 
        let v732 : string = "$0.len()"
        let v733 : unativeint = Fable.Core.RustInterop.emitRustExpr v731 v732 
        let v734 : (unativeint -> int32) = int32
        let v735 : int32 = v734 v733
        let v736 : string = ""
        let v737 : bool = v697 <> v736 
        let v741 : bool =
            if v737 then
                let v740 : bool = v735 <= 1
                v740
            else
                false
        if v741 then
            v19.l0 <- v711
            ()
        else
            v19.l0 <- v736
            let v742 : string = "true; $0.into_iter().for_each(|x| { //"
            let v743 : bool = Fable.Core.RustInterop.emitRustExpr v731 v742 
            let v744 : string = "x"
            let v745 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v744 
            let v746 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v745 v746 
            let v747 : string = $"true;"
            let v748 : bool = Fable.Core.RustInterop.emitRustExpr () v747 
            let v749 : string = "true; }}); { //"
            let v750 : bool = Fable.Core.RustInterop.emitRustExpr () v749 
            ()
        let _v699 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v698 v697
        let _v699 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v698 v697
        let _v699 = () 
        #endif
#else
        v698 v697
        let _v699 = () 
        #endif
        _v699 
        let v751 : (string -> unit) = v17.l0
        v751 v697
and method14 (v0 : (unit -> UH0), v1 : Mut0, v2 : Mut0, v3 : Mut0, v4 : Mut6) : uint8 =
    let v5 : int64 = v1.l0
    let v6 : int64 = v2.l0
    let v7 : int64 = v3.l0
    let v8 : US5 = v4.l0
    let v15 : uint8 option =
        match v8 with
        | US5_1 -> (* None *)
            let v13 : uint8 option = None
            v13
        | US5_0(v9) -> (* Some *)
            let v10 : uint8 option = Some v9 
            v10
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure18(v5, v6, v7, v15)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v942 : UH0 = v0 ()
    let v943 : int64 = v1.l0
    let v944 : US5 = method15(v943, v942)
    match v944 with
    | US5_1 -> (* None *)
        let v949 : unit = ()
        let v950 : (unit -> unit) = closure20()
        let v951 : unit = (fun () -> v950 (); v949) ()
        let v1704 : int64 = v3.l0
        let v1705 : bool = v1704 = -1L
        if v1705 then
            let v1706 : int64 = v1.l0
            v3.l0 <- v1706
            ()
        let v1707 : int64 = v2.l0
        let v1708 : int64 = v3.l0
        let v1709 : bool = v1707 >= v1708
        let v1712 : int64 =
            if v1709 then
                1L
            else
                let v1710 : int64 = v2.l0
                let v1711 : int64 = v1710 + 1L
                v1711
        v2.l0 <- v1712
        let v1713 : int64 = v2.l0
        let v1714 : int64 = v1713 - 1L
        v1.l0 <- v1714
        let v1715 : US5 = US5_1
        v4.l0 <- v1715
        method14(v0, v1, v2, v3, v4)
    | US5_0(v945) -> (* Some *)
        let v946 : int64 = v1.l0
        let v947 : int64 = v946 + 1L
        v1.l0 <- v947
        let v948 : US5 = US5_0(v945)
        v4.l0 <- v948
        v945
and closure17 (v0 : (unit -> UH0), v1 : Mut0, v2 : Mut0, v3 : Mut0, v4 : Mut6) () : uint8 =
    method14(v0, v1, v2, v3, v4)
and closure3 () (v0 : UH1) : (unit -> uint8) =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure4()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let v756 : UH1 = UH1_0
    let v757 : UH1 = method10(v0, v756)
    let v758 : UH1 = method11(v0, v757)
    let v759 : UH0 = UH0_1
    let v760 : UH0 = method12(v758, v759)
    let v761 : (unit -> UH0) = closure15(v760)
    let v762 : (unit -> UH0) = method13(v760, v761)
    let v763 : Mut0 = {l0 = 0L} : Mut0
    let v764 : Mut0 = {l0 = 1L} : Mut0
    let v765 : Mut0 = {l0 = -1L} : Mut0
    let v766 : US5 = US5_1
    let v767 : Mut6 = {l0 = v766} : Mut6
    closure17(v762, v763, v764, v765, v767)
and closure24 (v0 : uint64, v1 : int8, v2 : uint64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "max"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v0}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "n"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v1}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "p"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v2}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = " }"
        let v744 : string = $"{v743}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure19(v640, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = v640.l0
        let v753 : string = $"dice.calculate_dice_count"
        let v754 : bool = v753 = ""
        let v811 : string =
            if v754 then
                let v755 : string = ""
                v755
            else
                let v756 : string = $"{v497} {v632} #{v638} %s{v753} / {v752}"
                let v759 : char list = []
                let v760 : (char list -> (char [])) = List.toArray
                let v761 : (char []) = v760 v759
                let v764 : string = v756.TrimStart v761 
                let v782 : char list = []
                let v783 : char list = '/' :: v782 
                let v786 : char list = ' ' :: v783 
                let v789 : (char list -> (char [])) = List.toArray
                let v790 : (char []) = v789 v786
                let v793 : string = v764.TrimEnd v790 
                v793
        let v812 : (string -> unit) = closure12()
        let v813 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v814 
        let _v813 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v815 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v815 
        let _v813 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v816 : string = v22.l0
        let v817 : bool = v816 = ""
        let v825 : string =
            if v817 then
                v811
            else
                let v818 : bool = v811 = ""
                if v818 then
                    let v819 : string = v22.l0
                    v819
                else
                    let v820 : string = v22.l0
                    let v821 : string = "\n"
                    let v822 : string = v820 + v821 
                    let v823 : string = v822 + v811 
                    v823
        let v826 : string = "&*$0"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = $"$0.chars()"
        let v829 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v827 v828 
        let v830 : string = "v829"
        let v831 : _ = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "v831.collect::<Vec<_>>()"
        let v833 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v835 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let v836 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v837 : bool = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : string = "x"
        let v839 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v838 
        let v840 : string = "String::from_iter($0)"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr v839 v840 
        let v842 : string = "true; $0 }).collect::<Vec<_>>()"
        let v843 : bool = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let v844 : string = "_vec_map"
        let v845 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "$0.len()"
        let v847 : unativeint = Fable.Core.RustInterop.emitRustExpr v845 v846 
        let v848 : (unativeint -> int32) = int32
        let v849 : int32 = v848 v847
        let v850 : string = ""
        let v851 : bool = v811 <> v850 
        let v855 : bool =
            if v851 then
                let v854 : bool = v849 <= 1
                v854
            else
                false
        if v855 then
            v22.l0 <- v825
            ()
        else
            v22.l0 <- v850
            let v856 : string = "true; $0.into_iter().for_each(|x| { //"
            let v857 : bool = Fable.Core.RustInterop.emitRustExpr v845 v856 
            let v858 : string = "x"
            let v859 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v858 
            let v860 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v859 v860 
            let v861 : string = $"true;"
            let v862 : bool = Fable.Core.RustInterop.emitRustExpr () v861 
            let v863 : string = "true; }}); { //"
            let v864 : bool = Fable.Core.RustInterop.emitRustExpr () v863 
            ()
        let _v813 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v812 v811
        let _v813 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v812 v811
        let _v813 = () 
        #endif
#else
        v812 v811
        let _v813 = () 
        #endif
        _v813 
        let v865 : (string -> unit) = v20.l0
        v865 v811
and method16 (v0 : uint64, v1 : int8, v2 : uint64) : int8 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : uint64 = v2 * 6UL
        let v5 : bool = v4 > v2
        if v5 then
            let v6 : int8 = v1 + 1y
            method16(v0, v6, v4)
        else
            let v8 : unit = ()
            let v9 : (unit -> unit) = closure24(v0, v1, v2)
            let v10 : unit = (fun () -> v9 (); v8) ()
            v1
    else
        let v875 : unit = ()
        let v876 : (unit -> unit) = closure24(v0, v1, v2)
        let v877 : unit = (fun () -> v876 (); v875) ()
        v1
and closure25 (v0 : uint64, v1 : int8, v2 : uint64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v1}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "result"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v2}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = " }"
        let v744 : string = $"{v743}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure19(v640, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = v640.l0
        let v753 : string = $"dice.accumulate_dice_rolls"
        let v754 : bool = v753 = ""
        let v811 : string =
            if v754 then
                let v755 : string = ""
                v755
            else
                let v756 : string = $"{v497} {v632} #{v638} %s{v753} / {v752}"
                let v759 : char list = []
                let v760 : (char list -> (char [])) = List.toArray
                let v761 : (char []) = v760 v759
                let v764 : string = v756.TrimStart v761 
                let v782 : char list = []
                let v783 : char list = '/' :: v782 
                let v786 : char list = ' ' :: v783 
                let v789 : (char list -> (char [])) = List.toArray
                let v790 : (char []) = v789 v786
                let v793 : string = v764.TrimEnd v790 
                v793
        let v812 : (string -> unit) = closure12()
        let v813 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v814 
        let _v813 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v815 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v815 
        let _v813 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v816 : string = v22.l0
        let v817 : bool = v816 = ""
        let v825 : string =
            if v817 then
                v811
            else
                let v818 : bool = v811 = ""
                if v818 then
                    let v819 : string = v22.l0
                    v819
                else
                    let v820 : string = v22.l0
                    let v821 : string = "\n"
                    let v822 : string = v820 + v821 
                    let v823 : string = v822 + v811 
                    v823
        let v826 : string = "&*$0"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = $"$0.chars()"
        let v829 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v827 v828 
        let v830 : string = "v829"
        let v831 : _ = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "v831.collect::<Vec<_>>()"
        let v833 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v835 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let v836 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v837 : bool = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : string = "x"
        let v839 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v838 
        let v840 : string = "String::from_iter($0)"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr v839 v840 
        let v842 : string = "true; $0 }).collect::<Vec<_>>()"
        let v843 : bool = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let v844 : string = "_vec_map"
        let v845 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "$0.len()"
        let v847 : unativeint = Fable.Core.RustInterop.emitRustExpr v845 v846 
        let v848 : (unativeint -> int32) = int32
        let v849 : int32 = v848 v847
        let v850 : string = ""
        let v851 : bool = v811 <> v850 
        let v855 : bool =
            if v851 then
                let v854 : bool = v849 <= 1
                v854
            else
                false
        if v855 then
            v22.l0 <- v825
            ()
        else
            v22.l0 <- v850
            let v856 : string = "true; $0.into_iter().for_each(|x| { //"
            let v857 : bool = Fable.Core.RustInterop.emitRustExpr v845 v856 
            let v858 : string = "x"
            let v859 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v858 
            let v860 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v859 v860 
            let v861 : string = $"true;"
            let v862 : bool = Fable.Core.RustInterop.emitRustExpr () v861 
            let v863 : string = "true; }}); { //"
            let v864 : bool = Fable.Core.RustInterop.emitRustExpr () v863 
            ()
        let _v813 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v812 v811
        let _v813 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v812 v811
        let _v813 = () 
        #endif
#else
        v812 v811
        let _v813 = () 
        #endif
        _v813 
        let v865 : (string -> unit) = v20.l0
        v865 v811
and closure89 () () : UH2 =
    let v0 : (unit -> UH2) = closure89()
    UH2_0(0UL, v0)
and closure88 () () : UH2 =
    let v0 : (unit -> UH2) = closure89()
    UH2_0(9223372036854775808UL, v0)
and closure87 () () : UH2 =
    let v0 : (unit -> UH2) = closure88()
    UH2_0(4611686018427387904UL, v0)
and closure86 () () : UH2 =
    let v0 : (unit -> UH2) = closure87()
    UH2_0(6917529027641081856UL, v0)
and closure85 () () : UH2 =
    let v0 : (unit -> UH2) = closure86()
    UH2_0(1152921504606846976UL, v0)
and closure84 () () : UH2 =
    let v0 : (unit -> UH2) = closure85()
    UH2_0(15564440312192434176UL, v0)
and closure83 () () : UH2 =
    let v0 : (unit -> UH2) = closure84()
    UH2_0(11817445422220181504UL, v0)
and closure82 () () : UH2 =
    let v0 : (unit -> UH2) = closure83()
    UH2_0(5044031582654955520UL, v0)
and closure81 () () : UH2 =
    let v0 : (unit -> UH2) = closure82()
    UH2_0(6989586621679009792UL, v0)
and closure80 () () : UH2 =
    let v0 : (unit -> UH2) = closure81()
    UH2_0(16537217831704461312UL, v0)
and closure79 () () : UH2 =
    let v0 : (unit -> UH2) = closure80()
    UH2_0(11979575008805519360UL, v0)
and closure78 () () : UH2 =
    let v0 : (unit -> UH2) = closure79()
    UH2_0(14294425217273954304UL, v0)
and closure77 () () : UH2 =
    let v0 : (unit -> UH2) = closure78()
    UH2_0(2382404202878992384UL, v0)
and closure76 () () : UH2 =
    let v0 : (unit -> UH2) = closure77()
    UH2_0(6545982058383015936UL, v0)
and closure75 () () : UH2 =
    let v0 : (unit -> UH2) = closure76()
    UH2_0(10314369046585278464UL, v0)
and closure74 () () : UH2 =
    let v0 : (unit -> UH2) = closure75()
    UH2_0(4793518853382471680UL, v0)
and closure73 () () : UH2 =
    let v0 : (unit -> UH2) = closure74()
    UH2_0(3873377154515337216UL, v0)
and closure72 () () : UH2 =
    let v0 : (unit -> UH2) = closure73()
    UH2_0(645562859085889536UL, v0)
and closure71 () () : UH2 =
    let v0 : (unit -> UH2) = closure72()
    UH2_0(107593809847648256UL, v0)
and closure70 () () : UH2 =
    let v0 : (unit -> UH2) = closure71()
    UH2_0(3092389647259533312UL, v0)
and closure69 () () : UH2 =
    let v0 : (unit -> UH2) = closure70()
    UH2_0(9738770311398031360UL, v0)
and closure68 () () : UH2 =
    let v0 : (unit -> UH2) = closure69()
    UH2_0(16995415113324298240UL, v0)
and closure67 () () : UH2 =
    let v0 : (unit -> UH2) = closure68()
    UH2_0(8981483876790566912UL, v0)
and closure66 () () : UH2 =
    let v0 : (unit -> UH2) = closure67()
    UH2_0(13794743361938128896UL, v0)
and closure65 () () : UH2 =
    let v0 : (unit -> UH2) = closure66()
    UH2_0(2299123893656354816UL, v0)
and closure64 () () : UH2 =
    let v0 : (unit -> UH2) = closure65()
    UH2_0(3457644661227651072UL, v0)
and closure63 () () : UH2 =
    let v0 : (unit -> UH2) = closure64()
    UH2_0(576274110204608512UL, v0)
and closure62 () () : UH2 =
    let v0 : (unit -> UH2) = closure63()
    UH2_0(6244960376270618624UL, v0)
and closure61 () () : UH2 =
    let v0 : (unit -> UH2) = closure62()
    UH2_0(13338656111851470848UL, v0)
and closure60 () () : UH2 =
    let v0 : (unit -> UH2) = closure61()
    UH2_0(14520938734448279552UL, v0)
and closure59 () () : UH2 =
    let v0 : (unit -> UH2) = closure60()
    UH2_0(14717985838214414336UL, v0)
and closure58 () () : UH2 =
    let v0 : (unit -> UH2) = closure59()
    UH2_0(5527454985320660992UL, v0)
and closure57 () () : UH2 =
    let v0 : (unit -> UH2) = closure58()
    UH2_0(16293529225644736512UL, v0)
and closure56 () () : UH2 =
    let v0 : (unit -> UH2) = closure57()
    UH2_0(11938960241128898560UL, v0)
and closure55 () () : UH2 =
    let v0 : (unit -> UH2) = closure56()
    UH2_0(8138741398091333632UL, v0)
and closure54 () () : UH2 =
    let v0 : (unit -> UH2) = closure55()
    UH2_0(7505371590918406144UL, v0)
and closure53 () () : UH2 =
    let v0 : (unit -> UH2) = closure54()
    UH2_0(16623181993244360704UL, v0)
and closure52 () () : UH2 =
    let v0 : (unit -> UH2) = closure53()
    UH2_0(8919445023443910656UL, v0)
and closure51 () () : UH2 =
    let v0 : (unit -> UH2) = closure52()
    UH2_0(4561031516192243712UL, v0)
and closure50 () () : UH2 =
    let v0 : (unit -> UH2) = closure51()
    UH2_0(9983543956220149760UL, v0)
and closure49 () () : UH2 =
    let v0 : (unit -> UH2) = closure50()
    UH2_0(4738381338321616896UL, v0)
and closure48 () () : UH2 =
    let v0 : (unit -> UH2) = closure49()
    UH2_0(789730223053602816UL, v0)
and closure47 () () : UH2 =
    let v0 : (unit -> UH2) = closure48()
    UH2_0(131621703842267136UL, v0)
and closure46 () () : UH2 =
    let v0 : (unit -> UH2) = closure47()
    UH2_0(21936950640377856UL, v0)
and closure45 () () : UH2 =
    let v0 : (unit -> UH2) = closure46()
    UH2_0(3656158440062976UL, v0)
and closure44 () () : UH2 =
    let v0 : (unit -> UH2) = closure45()
    UH2_0(609359740010496UL, v0)
and closure43 () () : UH2 =
    let v0 : (unit -> UH2) = closure44()
    UH2_0(101559956668416UL, v0)
and closure42 () () : UH2 =
    let v0 : (unit -> UH2) = closure43()
    UH2_0(16926659444736UL, v0)
and closure41 () () : UH2 =
    let v0 : (unit -> UH2) = closure42()
    UH2_0(2821109907456UL, v0)
and closure40 () () : UH2 =
    let v0 : (unit -> UH2) = closure41()
    UH2_0(470184984576UL, v0)
and closure39 () () : UH2 =
    let v0 : (unit -> UH2) = closure40()
    UH2_0(78364164096UL, v0)
and closure38 () () : UH2 =
    let v0 : (unit -> UH2) = closure39()
    UH2_0(13060694016UL, v0)
and closure37 () () : UH2 =
    let v0 : (unit -> UH2) = closure38()
    UH2_0(2176782336UL, v0)
and closure36 () () : UH2 =
    let v0 : (unit -> UH2) = closure37()
    UH2_0(362797056UL, v0)
and closure35 () () : UH2 =
    let v0 : (unit -> UH2) = closure36()
    UH2_0(60466176UL, v0)
and closure34 () () : UH2 =
    let v0 : (unit -> UH2) = closure35()
    UH2_0(10077696UL, v0)
and closure33 () () : UH2 =
    let v0 : (unit -> UH2) = closure34()
    UH2_0(1679616UL, v0)
and closure32 () () : UH2 =
    let v0 : (unit -> UH2) = closure33()
    UH2_0(279936UL, v0)
and closure31 () () : UH2 =
    let v0 : (unit -> UH2) = closure32()
    UH2_0(46656UL, v0)
and closure30 () () : UH2 =
    let v0 : (unit -> UH2) = closure31()
    UH2_0(7776UL, v0)
and closure29 () () : UH2 =
    let v0 : (unit -> UH2) = closure30()
    UH2_0(1296UL, v0)
and closure28 () () : UH2 =
    let v0 : (unit -> UH2) = closure29()
    UH2_0(216UL, v0)
and closure27 () () : UH2 =
    let v0 : (unit -> UH2) = closure28()
    UH2_0(36UL, v0)
and closure26 () () : UH2 =
    let v0 : (unit -> UH2) = closure27()
    UH2_0(6UL, v0)
and method19 (v0 : int8, v1 : UH2) : US7 =
    match v1 with
    | UH2_0(v2, v3) -> (* StreamCons *)
        let v4 : bool = v0 <= 0y
        if v4 then
            US7_0(v2)
        else
            let v6 : int8 = v0 - 1y
            let v7 : UH2 = v3 ()
            method19(v6, v7)
    | UH2_1 -> (* StreamNil *)
        US7_1
and closure90 (v0 : uint64, v1 : int8, v2 : uint8, v3 : uint64) () : unit =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure5()
    let v6 : unit = (fun () -> v5 (); v4) ()
    let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
    let v38 : unit = ()
    let v39 : unit = (fun () -> v5 (); v38) ()
    let struct (v53 : Mut0, v54 : Mut1, v55 : Mut2, v56 : Mut3, v57 : Mut4, v58 : int64 option) = TraceState.trace_state.Value
    let v71 : US0 = v57.l0
    let v72 : bool = v55.l0
    let v73 : bool = v72 = false
    let v76 : bool =
        if v73 then
            false
        else
            let v74 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v71
            let v75 : bool = 1 >= v74
            v75
    if v76 then
        let v77 : unit = ()
        let v78 : (unit -> unit) = closure9(v20)
        let v79 : unit = (fun () -> v78 (); v77) ()
        let v82 : unit = ()
        let v83 : unit = (fun () -> v5 (); v82) ()
        let struct (v97 : Mut0, v98 : Mut1, v99 : Mut2, v100 : Mut3, v101 : Mut4, v102 : int64 option) = TraceState.trace_state.Value
        let v115 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v116 : US3 option = None
        let _v116 = ref v116 
        let v117 : US3 option ref = _v116 
        let v118 : (US3 option -> US3 option ref) = closure10(v117)
        let v119 : unit = ()
        let v120 : (unit -> unit) = closure11(v102, v118)
        let v121 : unit = (fun () -> v120 (); v119) ()
        let v124 : US3 option = _v116.Value 
        let v135 : US3 = US3_1
        let v136 : US3 = v124 |> Option.defaultValue v135 
        let v176 : System.DateTime =
            match v136 with
            | US3_1 -> (* None *)
                let v172 : System.DateTime = System.DateTime.Now
                v172
            | US3_0(v140) -> (* Some *)
                let v141 : System.DateTime = System.DateTime.Now
                let v144 : (System.DateTime -> int64) = _.Ticks
                let v145 : int64 = v144 v141
                let v148 : int64 = v145 - v140
                let v149 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v150 : System.TimeSpan = v149 v148
                let v153 : (System.TimeSpan -> int32) = _.Hours
                let v154 : int32 = v153 v150
                let v157 : (System.TimeSpan -> int32) = _.Minutes
                let v158 : int32 = v157 v150
                let v161 : (System.TimeSpan -> int32) = _.Seconds
                let v162 : int32 = v161 v150
                let v165 : (System.TimeSpan -> int32) = _.Milliseconds
                let v166 : int32 = v165 v150
                let v169 : System.DateTime = System.DateTime (1, 1, 1, v154, v158, v162, v166)
                v169
        let v177 : string = method6()
        let v180 : (string -> string) = v176.ToString
        let v181 : string = v180 v177
        let _v115 = v181 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v184 : US3 option = None
        let _v184 = ref v184 
        let v185 : US3 option ref = _v184 
        let v186 : (US3 option -> US3 option ref) = closure10(v185)
        let v187 : unit = ()
        let v188 : (unit -> unit) = closure11(v102, v186)
        let v189 : unit = (fun () -> v188 (); v187) ()
        let v192 : US3 option = _v184.Value 
        let v203 : US3 = US3_1
        let v204 : US3 = v192 |> Option.defaultValue v203 
        let v244 : System.DateTime =
            match v204 with
            | US3_1 -> (* None *)
                let v240 : System.DateTime = System.DateTime.Now
                v240
            | US3_0(v208) -> (* Some *)
                let v209 : System.DateTime = System.DateTime.Now
                let v212 : (System.DateTime -> int64) = _.Ticks
                let v213 : int64 = v212 v209
                let v216 : int64 = v213 - v208
                let v217 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v218 : System.TimeSpan = v217 v216
                let v221 : (System.TimeSpan -> int32) = _.Hours
                let v222 : int32 = v221 v218
                let v225 : (System.TimeSpan -> int32) = _.Minutes
                let v226 : int32 = v225 v218
                let v229 : (System.TimeSpan -> int32) = _.Seconds
                let v230 : int32 = v229 v218
                let v233 : (System.TimeSpan -> int32) = _.Milliseconds
                let v234 : int32 = v233 v218
                let v237 : System.DateTime = System.DateTime (1, 1, 1, v222, v226, v230, v234)
                v237
        let v245 : string = method6()
        let v248 : (string -> string) = v244.ToString
        let v249 : string = v248 v245
        let _v115 = v249 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v252 : string = $"near_sdk::env::block_timestamp()"
        let v253 : uint64 = Fable.Core.RustInterop.emitRustExpr () v252 
        let v254 : US3 option = None
        let _v254 = ref v254 
        let v255 : US3 option ref = _v254 
        let v256 : (US3 option -> US3 option ref) = closure10(v255)
        let v257 : unit = ()
        let v258 : (unit -> unit) = closure11(v102, v256)
        let v259 : unit = (fun () -> v258 (); v257) ()
        let v262 : US3 option = _v254.Value 
        let v273 : US3 = US3_1
        let v274 : US3 = v262 |> Option.defaultValue v273 
        let v283 : uint64 =
            match v274 with
            | US3_1 -> (* None *)
                v253
            | US3_0(v278) -> (* Some *)
                let v279 : (int64 -> uint64) = uint64
                let v280 : uint64 = v279 v278
                let v281 : uint64 = v253 - v280
                v281
        let v284 : uint64 = v283 / 1000000000UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v284 / 60UL
        let v287 : uint64 = v286 % 60UL
        let v288 : uint64 = v284 / 3600UL
        let v289 : uint64 = v288 % 24UL
        let v290 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v291 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v289, v287, v285) v290 
        let v292 : string = "fable_library_rust::String_::fromString($0)"
        let v293 : string = Fable.Core.RustInterop.emitRustExpr v291 v292 
        let _v115 = v293 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v294 : US3 option = None
        let _v294 = ref v294 
        let v295 : US3 option ref = _v294 
        let v296 : (US3 option -> US3 option ref) = closure10(v295)
        let v297 : unit = ()
        let v298 : (unit -> unit) = closure11(v102, v296)
        let v299 : unit = (fun () -> v298 (); v297) ()
        let v302 : US3 option = _v294.Value 
        let v313 : US3 = US3_1
        let v314 : US3 = v302 |> Option.defaultValue v313 
        let v354 : System.DateTime =
            match v314 with
            | US3_1 -> (* None *)
                let v350 : System.DateTime = System.DateTime.Now
                v350
            | US3_0(v318) -> (* Some *)
                let v319 : System.DateTime = System.DateTime.Now
                let v322 : (System.DateTime -> int64) = _.Ticks
                let v323 : int64 = v322 v319
                let v326 : int64 = v323 - v318
                let v327 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v328 : System.TimeSpan = v327 v326
                let v331 : (System.TimeSpan -> int32) = _.Hours
                let v332 : int32 = v331 v328
                let v335 : (System.TimeSpan -> int32) = _.Minutes
                let v336 : int32 = v335 v328
                let v339 : (System.TimeSpan -> int32) = _.Seconds
                let v340 : int32 = v339 v328
                let v343 : (System.TimeSpan -> int32) = _.Milliseconds
                let v344 : int32 = v343 v328
                let v347 : System.DateTime = System.DateTime (1, 1, 1, v332, v336, v340, v344)
                v347
        let v355 : string = method7()
        let v358 : (string -> string) = v354.ToString
        let v359 : string = v358 v355
        let _v115 = v359 
        #endif
#if FABLE_COMPILER_PYTHON
        let v362 : US3 option = None
        let _v362 = ref v362 
        let v363 : US3 option ref = _v362 
        let v364 : (US3 option -> US3 option ref) = closure10(v363)
        let v365 : unit = ()
        let v366 : (unit -> unit) = closure11(v102, v364)
        let v367 : unit = (fun () -> v366 (); v365) ()
        let v370 : US3 option = _v362.Value 
        let v381 : US3 = US3_1
        let v382 : US3 = v370 |> Option.defaultValue v381 
        let v422 : System.DateTime =
            match v382 with
            | US3_1 -> (* None *)
                let v418 : System.DateTime = System.DateTime.Now
                v418
            | US3_0(v386) -> (* Some *)
                let v387 : System.DateTime = System.DateTime.Now
                let v390 : (System.DateTime -> int64) = _.Ticks
                let v391 : int64 = v390 v387
                let v394 : int64 = v391 - v386
                let v395 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v396 : System.TimeSpan = v395 v394
                let v399 : (System.TimeSpan -> int32) = _.Hours
                let v400 : int32 = v399 v396
                let v403 : (System.TimeSpan -> int32) = _.Minutes
                let v404 : int32 = v403 v396
                let v407 : (System.TimeSpan -> int32) = _.Seconds
                let v408 : int32 = v407 v396
                let v411 : (System.TimeSpan -> int32) = _.Milliseconds
                let v412 : int32 = v411 v396
                let v415 : System.DateTime = System.DateTime (1, 1, 1, v400, v404, v408, v412)
                v415
        let v423 : string = method7()
        let v426 : (string -> string) = v422.ToString
        let v427 : string = v426 v423
        let _v115 = v427 
        #endif
#else
        let v430 : US3 option = None
        let _v430 = ref v430 
        let v431 : US3 option ref = _v430 
        let v432 : (US3 option -> US3 option ref) = closure10(v431)
        let v433 : unit = ()
        let v434 : (unit -> unit) = closure11(v102, v432)
        let v435 : unit = (fun () -> v434 (); v433) ()
        let v438 : US3 option = _v430.Value 
        let v449 : US3 = US3_1
        let v450 : US3 = v438 |> Option.defaultValue v449 
        let v490 : System.DateTime =
            match v450 with
            | US3_1 -> (* None *)
                let v486 : System.DateTime = System.DateTime.Now
                v486
            | US3_0(v454) -> (* Some *)
                let v455 : System.DateTime = System.DateTime.Now
                let v458 : (System.DateTime -> int64) = _.Ticks
                let v459 : int64 = v458 v455
                let v462 : int64 = v459 - v454
                let v463 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v464 : System.TimeSpan = v463 v462
                let v467 : (System.TimeSpan -> int32) = _.Hours
                let v468 : int32 = v467 v464
                let v471 : (System.TimeSpan -> int32) = _.Minutes
                let v472 : int32 = v471 v464
                let v475 : (System.TimeSpan -> int32) = _.Seconds
                let v476 : int32 = v475 v464
                let v479 : (System.TimeSpan -> int32) = _.Milliseconds
                let v480 : int32 = v479 v464
                let v483 : System.DateTime = System.DateTime (1, 1, 1, v468, v472, v476, v480)
                v483
        let v491 : string = method7()
        let v494 : (string -> string) = v490.ToString
        let v495 : string = v494 v491
        let _v115 = v495 
        #endif
        let v498 : string = _v115 
        
        
        
        
        
        let v568 : string = "Debug"
        let v569 : (unit -> string) = v568.ToLower
        let v570 : string = v569 ()
        let v573 : string = v570.PadLeft (7, ' ')
        let v587 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v588 : string = "inline_colorization::color_bright_blue"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "&*$0"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v590 
        let v592 : string = "inline_colorization::color_reset"
        let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "\"{v589}{v591}{v593}\""
        let v595 : string = @$"format!(" + v594 + ")"
        let v596 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "fable_library_rust::String_::fromString($0)"
        let v598 : string = Fable.Core.RustInterop.emitRustExpr v596 v597 
        let _v587 = v598 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v599 : string = "inline_colorization::color_bright_blue"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "&*$0"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v601 
        let v603 : string = "inline_colorization::color_reset"
        let v604 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "\"{v600}{v602}{v604}\""
        let v606 : string = @$"format!(" + v605 + ")"
        let v607 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "fable_library_rust::String_::fromString($0)"
        let v609 : string = Fable.Core.RustInterop.emitRustExpr v607 v608 
        let _v587 = v609 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v610 : string = "inline_colorization::color_bright_blue"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "&*$0"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v573 v612 
        let v614 : string = "inline_colorization::color_reset"
        let v615 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "\"{v611}{v613}{v615}\""
        let v617 : string = @$"format!(" + v616 + ")"
        let v618 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v617 
        let v619 : string = "fable_library_rust::String_::fromString($0)"
        let v620 : string = Fable.Core.RustInterop.emitRustExpr v618 v619 
        let _v587 = v620 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : string = "\u001b[94m"
        let v622 : string = method8()
        let v623 : string = v621 + v573 
        let v624 : string = v623 + v622 
        let _v587 = v624 
        #endif
#if FABLE_COMPILER_PYTHON
        let v625 : string = "\u001b[94m"
        let v626 : string = method8()
        let v627 : string = v625 + v573 
        let v628 : string = v627 + v626 
        let _v587 = v628 
        #endif
#else
        let v629 : string = "\u001b[94m"
        let v630 : string = method8()
        let v631 : string = v629 + v573 
        let v632 : string = v631 + v630 
        let _v587 = v632 
        #endif
        let v633 : string = _v587 
        let v639 : int64 = v97.l0
        let v640 : string = method9()
        let v641 : Mut3 = {l0 = v640} : Mut3
        let v642 : string = "{ "
        let v643 : string = $"{v642}"
        let v646 : unit = ()
        let v647 : (unit -> unit) = closure19(v641, v643)
        let v648 : unit = (fun () -> v647 (); v646) ()
        let v651 : string = "power"
        let v652 : string = $"{v651}"
        let v655 : unit = ()
        let v656 : (unit -> unit) = closure19(v641, v652)
        let v657 : unit = (fun () -> v656 (); v655) ()
        let v660 : string = " = "
        let v661 : string = $"{v660}"
        let v664 : unit = ()
        let v665 : (unit -> unit) = closure19(v641, v661)
        let v666 : unit = (fun () -> v665 (); v664) ()
        let v669 : string = $"{v1}"
        let v672 : unit = ()
        let v673 : (unit -> unit) = closure19(v641, v669)
        let v674 : unit = (fun () -> v673 (); v672) ()
        let v677 : string = "; "
        let v678 : string = $"{v677}"
        let v681 : unit = ()
        let v682 : (unit -> unit) = closure19(v641, v678)
        let v683 : unit = (fun () -> v682 (); v681) ()
        let v686 : string = "acc"
        let v687 : string = $"{v686}"
        let v690 : unit = ()
        let v691 : (unit -> unit) = closure19(v641, v687)
        let v692 : unit = (fun () -> v691 (); v690) ()
        let v695 : string = $"{v660}"
        let v698 : unit = ()
        let v699 : (unit -> unit) = closure19(v641, v695)
        let v700 : unit = (fun () -> v699 (); v698) ()
        let v703 : string = $"{v0}"
        let v706 : unit = ()
        let v707 : (unit -> unit) = closure19(v641, v703)
        let v708 : unit = (fun () -> v707 (); v706) ()
        let v711 : string = $"{v677}"
        let v714 : unit = ()
        let v715 : (unit -> unit) = closure19(v641, v711)
        let v716 : unit = (fun () -> v715 (); v714) ()
        let v719 : string = "roll"
        let v720 : string = $"{v719}"
        let v723 : unit = ()
        let v724 : (unit -> unit) = closure19(v641, v720)
        let v725 : unit = (fun () -> v724 (); v723) ()
        let v728 : string = $"{v660}"
        let v731 : unit = ()
        let v732 : (unit -> unit) = closure19(v641, v728)
        let v733 : unit = (fun () -> v732 (); v731) ()
        let v736 : string = $"{v2}"
        let v739 : unit = ()
        let v740 : (unit -> unit) = closure19(v641, v736)
        let v741 : unit = (fun () -> v740 (); v739) ()
        let v744 : string = $"{v677}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure19(v641, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = "value"
        let v753 : string = $"{v752}"
        let v756 : unit = ()
        let v757 : (unit -> unit) = closure19(v641, v753)
        let v758 : unit = (fun () -> v757 (); v756) ()
        let v761 : string = $"{v660}"
        let v764 : unit = ()
        let v765 : (unit -> unit) = closure19(v641, v761)
        let v766 : unit = (fun () -> v765 (); v764) ()
        let v769 : string = $"{v3}"
        let v772 : unit = ()
        let v773 : (unit -> unit) = closure19(v641, v769)
        let v774 : unit = (fun () -> v773 (); v772) ()
        let v777 : string = " }"
        let v778 : string = $"{v777}"
        let v781 : unit = ()
        let v782 : (unit -> unit) = closure19(v641, v778)
        let v783 : unit = (fun () -> v782 (); v781) ()
        let v786 : string = v641.l0
        let v787 : string = $"dice.accumulate_dice_rolls"
        let v788 : bool = v787 = ""
        let v845 : string =
            if v788 then
                let v789 : string = ""
                v789
            else
                let v790 : string = $"{v498} {v633} #{v639} %s{v787} / {v786}"
                let v793 : char list = []
                let v794 : (char list -> (char [])) = List.toArray
                let v795 : (char []) = v794 v793
                let v798 : string = v790.TrimStart v795 
                let v816 : char list = []
                let v817 : char list = '/' :: v816 
                let v820 : char list = ' ' :: v817 
                let v823 : (char list -> (char [])) = List.toArray
                let v824 : (char []) = v823 v820
                let v827 : string = v798.TrimEnd v824 
                v827
        let v846 : (string -> unit) = closure12()
        let v847 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v845 v848 
        let _v847 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v849 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v845 v849 
        let _v847 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v850 : string = v23.l0
        let v851 : bool = v850 = ""
        let v859 : string =
            if v851 then
                v845
            else
                let v852 : bool = v845 = ""
                if v852 then
                    let v853 : string = v23.l0
                    v853
                else
                    let v854 : string = v23.l0
                    let v855 : string = "\n"
                    let v856 : string = v854 + v855 
                    let v857 : string = v856 + v845 
                    v857
        let v860 : string = "&*$0"
        let v861 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v859 v860 
        let v862 : string = $"$0.chars()"
        let v863 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v861 v862 
        let v864 : string = "v863"
        let v865 : _ = Fable.Core.RustInterop.emitRustExpr () v864 
        let v866 : string = "v865.collect::<Vec<_>>()"
        let v867 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v866 
        let v868 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v869 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v867 v868 
        let v870 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v871 : bool = Fable.Core.RustInterop.emitRustExpr v869 v870 
        let v872 : string = "x"
        let v873 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v872 
        let v874 : string = "String::from_iter($0)"
        let v875 : std_string_String = Fable.Core.RustInterop.emitRustExpr v873 v874 
        let v876 : string = "true; $0 }).collect::<Vec<_>>()"
        let v877 : bool = Fable.Core.RustInterop.emitRustExpr v875 v876 
        let v878 : string = "_vec_map"
        let v879 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v878 
        let v880 : string = "$0.len()"
        let v881 : unativeint = Fable.Core.RustInterop.emitRustExpr v879 v880 
        let v882 : (unativeint -> int32) = int32
        let v883 : int32 = v882 v881
        let v884 : string = ""
        let v885 : bool = v845 <> v884 
        let v889 : bool =
            if v885 then
                let v888 : bool = v883 <= 1
                v888
            else
                false
        if v889 then
            v23.l0 <- v859
            ()
        else
            v23.l0 <- v884
            let v890 : string = "true; $0.into_iter().for_each(|x| { //"
            let v891 : bool = Fable.Core.RustInterop.emitRustExpr v879 v890 
            let v892 : string = "x"
            let v893 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v892 
            let v894 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v893 v894 
            let v895 : string = $"true;"
            let v896 : bool = Fable.Core.RustInterop.emitRustExpr () v895 
            let v897 : string = "true; }}); { //"
            let v898 : bool = Fable.Core.RustInterop.emitRustExpr () v897 
            ()
        let _v847 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v846 v845
        let _v847 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v846 v845
        let _v847 = () 
        #endif
#else
        v846 v845
        let _v847 = () 
        #endif
        _v847 
        let v899 : (string -> unit) = v21.l0
        v899 v845
and closure91 (v0 : uint64, v1 : int8, v2 : uint8) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{v1}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v2}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = " }"
        let v744 : string = $"{v743}"
        let v747 : unit = ()
        let v748 : (unit -> unit) = closure19(v640, v744)
        let v749 : unit = (fun () -> v748 (); v747) ()
        let v752 : string = v640.l0
        let v753 : string = $"dice.accumulate_dice_rolls"
        let v754 : bool = v753 = ""
        let v811 : string =
            if v754 then
                let v755 : string = ""
                v755
            else
                let v756 : string = $"{v497} {v632} #{v638} %s{v753} / {v752}"
                let v759 : char list = []
                let v760 : (char list -> (char [])) = List.toArray
                let v761 : (char []) = v760 v759
                let v764 : string = v756.TrimStart v761 
                let v782 : char list = []
                let v783 : char list = '/' :: v782 
                let v786 : char list = ' ' :: v783 
                let v789 : (char list -> (char [])) = List.toArray
                let v790 : (char []) = v789 v786
                let v793 : string = v764.TrimEnd v790 
                v793
        let v812 : (string -> unit) = closure12()
        let v813 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v814 
        let _v813 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v815 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v811 v815 
        let _v813 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v816 : string = v22.l0
        let v817 : bool = v816 = ""
        let v825 : string =
            if v817 then
                v811
            else
                let v818 : bool = v811 = ""
                if v818 then
                    let v819 : string = v22.l0
                    v819
                else
                    let v820 : string = v22.l0
                    let v821 : string = "\n"
                    let v822 : string = v820 + v821 
                    let v823 : string = v822 + v811 
                    v823
        let v826 : string = "&*$0"
        let v827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v825 v826 
        let v828 : string = $"$0.chars()"
        let v829 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v827 v828 
        let v830 : string = "v829"
        let v831 : _ = Fable.Core.RustInterop.emitRustExpr () v830 
        let v832 : string = "v831.collect::<Vec<_>>()"
        let v833 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v832 
        let v834 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v835 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v833 v834 
        let v836 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v837 : bool = Fable.Core.RustInterop.emitRustExpr v835 v836 
        let v838 : string = "x"
        let v839 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v838 
        let v840 : string = "String::from_iter($0)"
        let v841 : std_string_String = Fable.Core.RustInterop.emitRustExpr v839 v840 
        let v842 : string = "true; $0 }).collect::<Vec<_>>()"
        let v843 : bool = Fable.Core.RustInterop.emitRustExpr v841 v842 
        let v844 : string = "_vec_map"
        let v845 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v844 
        let v846 : string = "$0.len()"
        let v847 : unativeint = Fable.Core.RustInterop.emitRustExpr v845 v846 
        let v848 : (unativeint -> int32) = int32
        let v849 : int32 = v848 v847
        let v850 : string = ""
        let v851 : bool = v811 <> v850 
        let v855 : bool =
            if v851 then
                let v854 : bool = v849 <= 1
                v854
            else
                false
        if v855 then
            v22.l0 <- v825
            ()
        else
            v22.l0 <- v850
            let v856 : string = "true; $0.into_iter().for_each(|x| { //"
            let v857 : bool = Fable.Core.RustInterop.emitRustExpr v845 v856 
            let v858 : string = "x"
            let v859 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v858 
            let v860 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v859 v860 
            let v861 : string = $"true;"
            let v862 : bool = Fable.Core.RustInterop.emitRustExpr () v861 
            let v863 : string = "true; }}); { //"
            let v864 : bool = Fable.Core.RustInterop.emitRustExpr () v863 
            ()
        let _v813 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v812 v811
        let _v813 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v812 v811
        let _v813 = () 
        #endif
#else
        v812 v811
        let _v813 = () 
        #endif
        _v813 
        let v865 : (string -> unit) = v20.l0
        v865 v811
and method18 (v0 : int8, v1 : UH1, v2 : uint64) : US6 =
    let v3 : bool = v0 < 0y
    if v3 then
        let v4 : uint64 = v2 + 1UL
        let v5 : unit = ()
        let v6 : (unit -> unit) = closure25(v2, v0, v4)
        let v7 : unit = (fun () -> v6 (); v5) ()
        US6_0(v4, v1)
    else
        match v1 with
        | UH1_1(v873, v874) -> (* Cons *)
            let v875 : bool = v873 > 1uy
            if v875 then
                let v876 : uint64 = 1UL
                let v877 : (unit -> UH2) = closure26()
                let v878 : UH2 = UH2_0(v876, v877)
                let v879 : US7 = method19(v0, v878)
                let v883 : uint64 =
                    match v879 with
                    | US7_1 -> (* None *)
                        failwith<uint64> "Option does not have a value."
                    | US7_0(v880) -> (* Some *)
                        v880
                let v884 : uint8 = v873 - 1uy
                let v885 : uint64 = uint64 v884
                let v886 : uint64 = v885 * v883
                let v887 : unit = ()
                let v888 : (unit -> unit) = closure90(v2, v0, v873, v886)
                let v889 : unit = (fun () -> v888 (); v887) ()
                let v1786 : uint64 = v2 + v886
                let v1787 : int8 = v0 - 1y
                method18(v1787, v874, v1786)
            else
                let v1789 : unit = ()
                let v1790 : (unit -> unit) = closure91(v2, v0, v873)
                let v1791 : unit = (fun () -> v1790 (); v1789) ()
                let v2655 : int8 = v0 - 1y
                method18(v2655, v874, v2)
        | UH1_0 -> (* Nil *)
            US6_1
and method20 (v0 : int8, v1 : (unit -> uint8), v2 : int8) : UH1 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : uint8 = v1 ()
        let v5 : int8 = v2 + 1y
        let v6 : UH1 = method20(v0, v1, v5)
        UH1_1(v4, v6)
    else
        UH1_0
and method21 (v0 : (unit -> uint8), v1 : bool, v2 : uint64, v3 : int8, v4 : UH1) : uint64 =
    let v5 : int8 = v3 + 1y
    let v6 : bool = v3 < v5
    if v6 then
        let v7 : uint8 = v0 ()
        let v8 : UH1 = UH1_1(v7, v4)
        method17(v0, v1, v2, v3, v8, v5)
    else
        let v10 : uint64 = 0UL
        let v11 : US6 = method18(v3, v4, v10)
        match v11 with
        | US6_0(v12, v13) -> (* Some *)
            let v14 : bool = v12 <= v2
            if v14 then
                v12
            else
                if v1 then
                    let v15 : int8 = 0y
                    let v16 : UH1 = method20(v3, v0, v15)
                    method21(v0, v1, v2, v3, v16)
                else
                    let v18 : uint8 = v0 ()
                    let v19 : UH1 = UH1_1(v18, v4)
                    method17(v0, v1, v2, v3, v19, v5)
        | _ ->
            if v1 then
                let v23 : int8 = 0y
                let v24 : UH1 = method20(v3, v0, v23)
                method21(v0, v1, v2, v3, v24)
            else
                let v26 : uint8 = v0 ()
                let v27 : UH1 = UH1_1(v26, v4)
                method17(v0, v1, v2, v3, v27, v5)
and method17 (v0 : (unit -> uint8), v1 : bool, v2 : uint64, v3 : int8, v4 : UH1, v5 : int8) : uint64 =
    let v6 : int8 = v3 + 1y
    let v7 : bool = v5 < v6
    if v7 then
        let v8 : uint8 = v0 ()
        let v9 : UH1 = UH1_1(v8, v4)
        let v10 : int8 = v5 + 1y
        method17(v0, v1, v2, v3, v9, v10)
    else
        let v12 : uint64 = 0UL
        let v13 : US6 = method18(v3, v4, v12)
        match v13 with
        | US6_0(v14, v15) -> (* Some *)
            let v16 : bool = v14 <= v2
            if v16 then
                v14
            else
                if v1 then
                    let v17 : int8 = 0y
                    let v18 : UH1 = method20(v3, v0, v17)
                    method21(v0, v1, v2, v3, v18)
                else
                    let v20 : uint8 = v0 ()
                    let v21 : UH1 = UH1_1(v20, v4)
                    let v22 : int8 = v5 + 1y
                    method17(v0, v1, v2, v3, v21, v22)
        | _ ->
            if v1 then
                let v26 : int8 = 0y
                let v27 : UH1 = method20(v3, v0, v26)
                method21(v0, v1, v2, v3, v27)
            else
                let v29 : uint8 = v0 ()
                let v30 : UH1 = UH1_1(v29, v4)
                let v31 : int8 = v5 + 1y
                method17(v0, v1, v2, v3, v30, v31)
and closure23 (v0 : (unit -> uint8), v1 : bool) (v2 : uint64) : uint64 =
    let v3 : bool = v2 = 1UL
    let v7 : int8 =
        if v3 then
            1y
        else
            let v4 : int8 = 0y
            let v5 : uint64 = 1UL
            method16(v2, v4, v5)
    let v8 : int8 = v7 - 1y
    let v9 : UH1 = UH1_0
    let v10 : int8 = 0y
    method17(v0, v1, v2, v8, v9, v10)
and closure22 (v0 : (unit -> uint8)) (v1 : bool) : (uint64 -> uint64) =
    closure23(v0, v1)
and closure21 () (v0 : (unit -> uint8)) : (bool -> (uint64 -> uint64)) =
    closure22(v0)
and method22 (v0 : UH1, v1 : int8) : int8 =
    match v0 with
    | UH1_1(v2, v3) -> (* Cons *)
        let v4 : int8 = v1 + 1y
        method22(v3, v4)
    | UH1_0 -> (* Nil *)
        v1
and closure93 (v0 : uint64) (v1 : UH1) : uint64 option =
    let v2 : int8 = 0y
    let v3 : int8 = method22(v1, v2)
    let v4 : int8 = v3 - 1y
    let v5 : uint64 = 0UL
    let v6 : US6 = method18(v4, v1, v5)
    let v16 : US7 =
        match v6 with
        | US6_0(v7, v8) -> (* Some *)
            let v9 : bool = v7 >= 1UL
            let v11 : bool =
                if v9 then
                    let v10 : bool = v7 <= v0
                    v10
                else
                    false
            if v11 then
                US7_0(v7)
            else
                US7_1
        | _ ->
            US7_1
    match v16 with
    | US7_1 -> (* None *)
        let v21 : uint64 option = None
        v21
    | US7_0(v17) -> (* Some *)
        let v18 : uint64 option = Some v17 
        v18
and closure92 () (v0 : uint64) : (UH1 -> uint64 option) =
    closure93(v0)
and closure95 () () : unit =
    let v0 : unit = ()
    let v1 : (unit -> unit) = closure5()
    let v2 : unit = (fun () -> v1 (); v0) ()
    let struct (v16 : Mut0, v17 : Mut1, v18 : Mut2, v19 : Mut3, v20 : Mut4, v21 : int64 option) = TraceState.trace_state.Value
    let v34 : unit = ()
    let v35 : unit = (fun () -> v1 (); v34) ()
    let struct (v49 : Mut0, v50 : Mut1, v51 : Mut2, v52 : Mut3, v53 : Mut4, v54 : int64 option) = TraceState.trace_state.Value
    let v67 : US0 = v53.l0
    let v68 : bool = v51.l0
    let v69 : bool = v68 = false
    let v72 : bool =
        if v69 then
            false
        else
            let v70 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v67
            let v71 : bool = 1 >= v70
            v71
    if v72 then
        let v73 : unit = ()
        let v74 : (unit -> unit) = closure9(v16)
        let v75 : unit = (fun () -> v74 (); v73) ()
        let v78 : unit = ()
        let v79 : unit = (fun () -> v1 (); v78) ()
        let struct (v93 : Mut0, v94 : Mut1, v95 : Mut2, v96 : Mut3, v97 : Mut4, v98 : int64 option) = TraceState.trace_state.Value
        let v111 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v112 : US3 option = None
        let _v112 = ref v112 
        let v113 : US3 option ref = _v112 
        let v114 : (US3 option -> US3 option ref) = closure10(v113)
        let v115 : unit = ()
        let v116 : (unit -> unit) = closure11(v98, v114)
        let v117 : unit = (fun () -> v116 (); v115) ()
        let v120 : US3 option = _v112.Value 
        let v131 : US3 = US3_1
        let v132 : US3 = v120 |> Option.defaultValue v131 
        let v172 : System.DateTime =
            match v132 with
            | US3_1 -> (* None *)
                let v168 : System.DateTime = System.DateTime.Now
                v168
            | US3_0(v136) -> (* Some *)
                let v137 : System.DateTime = System.DateTime.Now
                let v140 : (System.DateTime -> int64) = _.Ticks
                let v141 : int64 = v140 v137
                let v144 : int64 = v141 - v136
                let v145 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v146 : System.TimeSpan = v145 v144
                let v149 : (System.TimeSpan -> int32) = _.Hours
                let v150 : int32 = v149 v146
                let v153 : (System.TimeSpan -> int32) = _.Minutes
                let v154 : int32 = v153 v146
                let v157 : (System.TimeSpan -> int32) = _.Seconds
                let v158 : int32 = v157 v146
                let v161 : (System.TimeSpan -> int32) = _.Milliseconds
                let v162 : int32 = v161 v146
                let v165 : System.DateTime = System.DateTime (1, 1, 1, v150, v154, v158, v162)
                v165
        let v173 : string = method6()
        let v176 : (string -> string) = v172.ToString
        let v177 : string = v176 v173
        let _v111 = v177 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v180 : US3 option = None
        let _v180 = ref v180 
        let v181 : US3 option ref = _v180 
        let v182 : (US3 option -> US3 option ref) = closure10(v181)
        let v183 : unit = ()
        let v184 : (unit -> unit) = closure11(v98, v182)
        let v185 : unit = (fun () -> v184 (); v183) ()
        let v188 : US3 option = _v180.Value 
        let v199 : US3 = US3_1
        let v200 : US3 = v188 |> Option.defaultValue v199 
        let v240 : System.DateTime =
            match v200 with
            | US3_1 -> (* None *)
                let v236 : System.DateTime = System.DateTime.Now
                v236
            | US3_0(v204) -> (* Some *)
                let v205 : System.DateTime = System.DateTime.Now
                let v208 : (System.DateTime -> int64) = _.Ticks
                let v209 : int64 = v208 v205
                let v212 : int64 = v209 - v204
                let v213 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v214 : System.TimeSpan = v213 v212
                let v217 : (System.TimeSpan -> int32) = _.Hours
                let v218 : int32 = v217 v214
                let v221 : (System.TimeSpan -> int32) = _.Minutes
                let v222 : int32 = v221 v214
                let v225 : (System.TimeSpan -> int32) = _.Seconds
                let v226 : int32 = v225 v214
                let v229 : (System.TimeSpan -> int32) = _.Milliseconds
                let v230 : int32 = v229 v214
                let v233 : System.DateTime = System.DateTime (1, 1, 1, v218, v222, v226, v230)
                v233
        let v241 : string = method6()
        let v244 : (string -> string) = v240.ToString
        let v245 : string = v244 v241
        let _v111 = v245 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v248 : string = $"near_sdk::env::block_timestamp()"
        let v249 : uint64 = Fable.Core.RustInterop.emitRustExpr () v248 
        let v250 : US3 option = None
        let _v250 = ref v250 
        let v251 : US3 option ref = _v250 
        let v252 : (US3 option -> US3 option ref) = closure10(v251)
        let v253 : unit = ()
        let v254 : (unit -> unit) = closure11(v98, v252)
        let v255 : unit = (fun () -> v254 (); v253) ()
        let v258 : US3 option = _v250.Value 
        let v269 : US3 = US3_1
        let v270 : US3 = v258 |> Option.defaultValue v269 
        let v279 : uint64 =
            match v270 with
            | US3_1 -> (* None *)
                v249
            | US3_0(v274) -> (* Some *)
                let v275 : (int64 -> uint64) = uint64
                let v276 : uint64 = v275 v274
                let v277 : uint64 = v249 - v276
                v277
        let v280 : uint64 = v279 / 1000000000UL
        let v281 : uint64 = v280 % 60UL
        let v282 : uint64 = v280 / 60UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v280 / 3600UL
        let v285 : uint64 = v284 % 24UL
        let v286 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v287 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v285, v283, v281) v286 
        let v288 : string = "fable_library_rust::String_::fromString($0)"
        let v289 : string = Fable.Core.RustInterop.emitRustExpr v287 v288 
        let _v111 = v289 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v290 : US3 option = None
        let _v290 = ref v290 
        let v291 : US3 option ref = _v290 
        let v292 : (US3 option -> US3 option ref) = closure10(v291)
        let v293 : unit = ()
        let v294 : (unit -> unit) = closure11(v98, v292)
        let v295 : unit = (fun () -> v294 (); v293) ()
        let v298 : US3 option = _v290.Value 
        let v309 : US3 = US3_1
        let v310 : US3 = v298 |> Option.defaultValue v309 
        let v350 : System.DateTime =
            match v310 with
            | US3_1 -> (* None *)
                let v346 : System.DateTime = System.DateTime.Now
                v346
            | US3_0(v314) -> (* Some *)
                let v315 : System.DateTime = System.DateTime.Now
                let v318 : (System.DateTime -> int64) = _.Ticks
                let v319 : int64 = v318 v315
                let v322 : int64 = v319 - v314
                let v323 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v324 : System.TimeSpan = v323 v322
                let v327 : (System.TimeSpan -> int32) = _.Hours
                let v328 : int32 = v327 v324
                let v331 : (System.TimeSpan -> int32) = _.Minutes
                let v332 : int32 = v331 v324
                let v335 : (System.TimeSpan -> int32) = _.Seconds
                let v336 : int32 = v335 v324
                let v339 : (System.TimeSpan -> int32) = _.Milliseconds
                let v340 : int32 = v339 v324
                let v343 : System.DateTime = System.DateTime (1, 1, 1, v328, v332, v336, v340)
                v343
        let v351 : string = method7()
        let v354 : (string -> string) = v350.ToString
        let v355 : string = v354 v351
        let _v111 = v355 
        #endif
#if FABLE_COMPILER_PYTHON
        let v358 : US3 option = None
        let _v358 = ref v358 
        let v359 : US3 option ref = _v358 
        let v360 : (US3 option -> US3 option ref) = closure10(v359)
        let v361 : unit = ()
        let v362 : (unit -> unit) = closure11(v98, v360)
        let v363 : unit = (fun () -> v362 (); v361) ()
        let v366 : US3 option = _v358.Value 
        let v377 : US3 = US3_1
        let v378 : US3 = v366 |> Option.defaultValue v377 
        let v418 : System.DateTime =
            match v378 with
            | US3_1 -> (* None *)
                let v414 : System.DateTime = System.DateTime.Now
                v414
            | US3_0(v382) -> (* Some *)
                let v383 : System.DateTime = System.DateTime.Now
                let v386 : (System.DateTime -> int64) = _.Ticks
                let v387 : int64 = v386 v383
                let v390 : int64 = v387 - v382
                let v391 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v392 : System.TimeSpan = v391 v390
                let v395 : (System.TimeSpan -> int32) = _.Hours
                let v396 : int32 = v395 v392
                let v399 : (System.TimeSpan -> int32) = _.Minutes
                let v400 : int32 = v399 v392
                let v403 : (System.TimeSpan -> int32) = _.Seconds
                let v404 : int32 = v403 v392
                let v407 : (System.TimeSpan -> int32) = _.Milliseconds
                let v408 : int32 = v407 v392
                let v411 : System.DateTime = System.DateTime (1, 1, 1, v396, v400, v404, v408)
                v411
        let v419 : string = method7()
        let v422 : (string -> string) = v418.ToString
        let v423 : string = v422 v419
        let _v111 = v423 
        #endif
#else
        let v426 : US3 option = None
        let _v426 = ref v426 
        let v427 : US3 option ref = _v426 
        let v428 : (US3 option -> US3 option ref) = closure10(v427)
        let v429 : unit = ()
        let v430 : (unit -> unit) = closure11(v98, v428)
        let v431 : unit = (fun () -> v430 (); v429) ()
        let v434 : US3 option = _v426.Value 
        let v445 : US3 = US3_1
        let v446 : US3 = v434 |> Option.defaultValue v445 
        let v486 : System.DateTime =
            match v446 with
            | US3_1 -> (* None *)
                let v482 : System.DateTime = System.DateTime.Now
                v482
            | US3_0(v450) -> (* Some *)
                let v451 : System.DateTime = System.DateTime.Now
                let v454 : (System.DateTime -> int64) = _.Ticks
                let v455 : int64 = v454 v451
                let v458 : int64 = v455 - v450
                let v459 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v460 : System.TimeSpan = v459 v458
                let v463 : (System.TimeSpan -> int32) = _.Hours
                let v464 : int32 = v463 v460
                let v467 : (System.TimeSpan -> int32) = _.Minutes
                let v468 : int32 = v467 v460
                let v471 : (System.TimeSpan -> int32) = _.Seconds
                let v472 : int32 = v471 v460
                let v475 : (System.TimeSpan -> int32) = _.Milliseconds
                let v476 : int32 = v475 v460
                let v479 : System.DateTime = System.DateTime (1, 1, 1, v464, v468, v472, v476)
                v479
        let v487 : string = method7()
        let v490 : (string -> string) = v486.ToString
        let v491 : string = v490 v487
        let _v111 = v491 
        #endif
        let v494 : string = _v111 
        
        
        
        
        
        let v564 : string = "Debug"
        let v565 : (unit -> string) = v564.ToLower
        let v566 : string = v565 ()
        let v569 : string = v566.PadLeft (7, ' ')
        let v583 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v584 : string = "inline_colorization::color_bright_blue"
        let v585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v584 
        let v586 : string = "&*$0"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v586 
        let v588 : string = "inline_colorization::color_reset"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v588 
        let v590 : string = "\"{v585}{v587}{v589}\""
        let v591 : string = @$"format!(" + v590 + ")"
        let v592 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "fable_library_rust::String_::fromString($0)"
        let v594 : string = Fable.Core.RustInterop.emitRustExpr v592 v593 
        let _v583 = v594 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v595 : string = "inline_colorization::color_bright_blue"
        let v596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v595 
        let v597 : string = "&*$0"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v597 
        let v599 : string = "inline_colorization::color_reset"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v599 
        let v601 : string = "\"{v596}{v598}{v600}\""
        let v602 : string = @$"format!(" + v601 + ")"
        let v603 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "fable_library_rust::String_::fromString($0)"
        let v605 : string = Fable.Core.RustInterop.emitRustExpr v603 v604 
        let _v583 = v605 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v606 : string = "inline_colorization::color_bright_blue"
        let v607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v606 
        let v608 : string = "&*$0"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v569 v608 
        let v610 : string = "inline_colorization::color_reset"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v610 
        let v612 : string = "\"{v607}{v609}{v611}\""
        let v613 : string = @$"format!(" + v612 + ")"
        let v614 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "fable_library_rust::String_::fromString($0)"
        let v616 : string = Fable.Core.RustInterop.emitRustExpr v614 v615 
        let _v583 = v616 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v617 : string = "\u001b[94m"
        let v618 : string = method8()
        let v619 : string = v617 + v569 
        let v620 : string = v619 + v618 
        let _v583 = v620 
        #endif
#if FABLE_COMPILER_PYTHON
        let v621 : string = "\u001b[94m"
        let v622 : string = method8()
        let v623 : string = v621 + v569 
        let v624 : string = v623 + v622 
        let _v583 = v624 
        #endif
#else
        let v625 : string = "\u001b[94m"
        let v626 : string = method8()
        let v627 : string = v625 + v569 
        let v628 : string = v627 + v626 
        let _v583 = v628 
        #endif
        let v629 : string = _v583 
        let v635 : int64 = v93.l0
        let v636 : string = method9()
        let v637 : Mut3 = {l0 = v636} : Mut3
        let v638 : string = "{ "
        let v639 : string = $"{v638}"
        let v642 : unit = ()
        let v643 : (unit -> unit) = closure19(v637, v639)
        let v644 : unit = (fun () -> v643 (); v642) ()
        let v647 : string = "max"
        let v648 : string = $"{v647}"
        let v651 : unit = ()
        let v652 : (unit -> unit) = closure19(v637, v648)
        let v653 : unit = (fun () -> v652 (); v651) ()
        let v656 : string = " = "
        let v657 : string = $"{v656}"
        let v660 : unit = ()
        let v661 : (unit -> unit) = closure19(v637, v657)
        let v662 : unit = (fun () -> v661 (); v660) ()
        let v665 : string = $"{9223372036854775807L}"
        let v668 : unit = ()
        let v669 : (unit -> unit) = closure19(v637, v665)
        let v670 : unit = (fun () -> v669 (); v668) ()
        let v673 : string = "; "
        let v674 : string = $"{v673}"
        let v677 : unit = ()
        let v678 : (unit -> unit) = closure19(v637, v674)
        let v679 : unit = (fun () -> v678 (); v677) ()
        let v682 : string = "n"
        let v683 : string = $"{v682}"
        let v686 : unit = ()
        let v687 : (unit -> unit) = closure19(v637, v683)
        let v688 : unit = (fun () -> v687 (); v686) ()
        let v691 : string = $"{v656}"
        let v694 : unit = ()
        let v695 : (unit -> unit) = closure19(v637, v691)
        let v696 : unit = (fun () -> v695 (); v694) ()
        let v699 : string = $"{24y}"
        let v702 : unit = ()
        let v703 : (unit -> unit) = closure19(v637, v699)
        let v704 : unit = (fun () -> v703 (); v702) ()
        let v707 : string = $"{v673}"
        let v710 : unit = ()
        let v711 : (unit -> unit) = closure19(v637, v707)
        let v712 : unit = (fun () -> v711 (); v710) ()
        let v715 : string = "p"
        let v716 : string = $"{v715}"
        let v719 : unit = ()
        let v720 : (unit -> unit) = closure19(v637, v716)
        let v721 : unit = (fun () -> v720 (); v719) ()
        let v724 : string = $"{v656}"
        let v727 : unit = ()
        let v728 : (unit -> unit) = closure19(v637, v724)
        let v729 : unit = (fun () -> v728 (); v727) ()
        let v732 : string = $"{4738381338321616896L}"
        let v735 : unit = ()
        let v736 : (unit -> unit) = closure19(v637, v732)
        let v737 : unit = (fun () -> v736 (); v735) ()
        let v740 : string = " }"
        let v741 : string = $"{v740}"
        let v744 : unit = ()
        let v745 : (unit -> unit) = closure19(v637, v741)
        let v746 : unit = (fun () -> v745 (); v744) ()
        let v749 : string = v637.l0
        let v750 : string = $"dice.calculate_dice_count"
        let v751 : bool = v750 = ""
        let v808 : string =
            if v751 then
                let v752 : string = ""
                v752
            else
                let v753 : string = $"{v494} {v629} #{v635} %s{v750} / {v749}"
                let v756 : char list = []
                let v757 : (char list -> (char [])) = List.toArray
                let v758 : (char []) = v757 v756
                let v761 : string = v753.TrimStart v758 
                let v779 : char list = []
                let v780 : char list = '/' :: v779 
                let v783 : char list = ' ' :: v780 
                let v786 : (char list -> (char [])) = List.toArray
                let v787 : (char []) = v786 v783
                let v790 : string = v761.TrimEnd v787 
                v790
        let v809 : (string -> unit) = closure12()
        let v810 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v811 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v808 v811 
        let _v810 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v812 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v808 v812 
        let _v810 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v813 : string = v19.l0
        let v814 : bool = v813 = ""
        let v822 : string =
            if v814 then
                v808
            else
                let v815 : bool = v808 = ""
                if v815 then
                    let v816 : string = v19.l0
                    v816
                else
                    let v817 : string = v19.l0
                    let v818 : string = "\n"
                    let v819 : string = v817 + v818 
                    let v820 : string = v819 + v808 
                    v820
        let v823 : string = "&*$0"
        let v824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v822 v823 
        let v825 : string = $"$0.chars()"
        let v826 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = "v826"
        let v828 : _ = Fable.Core.RustInterop.emitRustExpr () v827 
        let v829 : string = "v828.collect::<Vec<_>>()"
        let v830 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v832 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v830 v831 
        let v833 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v834 : bool = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "x"
        let v836 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v835 
        let v837 : string = "String::from_iter($0)"
        let v838 : std_string_String = Fable.Core.RustInterop.emitRustExpr v836 v837 
        let v839 : string = "true; $0 }).collect::<Vec<_>>()"
        let v840 : bool = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "_vec_map"
        let v842 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v841 
        let v843 : string = "$0.len()"
        let v844 : unativeint = Fable.Core.RustInterop.emitRustExpr v842 v843 
        let v845 : (unativeint -> int32) = int32
        let v846 : int32 = v845 v844
        let v847 : string = ""
        let v848 : bool = v808 <> v847 
        let v852 : bool =
            if v848 then
                let v851 : bool = v846 <= 1
                v851
            else
                false
        if v852 then
            v19.l0 <- v822
            ()
        else
            v19.l0 <- v847
            let v853 : string = "true; $0.into_iter().for_each(|x| { //"
            let v854 : bool = Fable.Core.RustInterop.emitRustExpr v842 v853 
            let v855 : string = "x"
            let v856 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v855 
            let v857 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v856 v857 
            let v858 : string = $"true;"
            let v859 : bool = Fable.Core.RustInterop.emitRustExpr () v858 
            let v860 : string = "true; }}); { //"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            ()
        let _v810 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v809 v808
        let _v810 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v809 v808
        let _v810 = () 
        #endif
#else
        v809 v808
        let _v810 = () 
        #endif
        _v810 
        let v862 : (string -> unit) = v17.l0
        v862 v808
and method24 () : uint8 =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "rand::Rng::gen_range(&mut rand::thread_rng(), $0..$1)"
    let v2 : uint8 = Fable.Core.RustInterop.emitRustExpr struct (1uy, 7uy) v1 
    let _v0 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : string = "rand::Rng::gen_range(&mut rand::thread_rng(), $0..$1)"
    let v4 : uint8 = Fable.Core.RustInterop.emitRustExpr struct (1uy, 7uy) v3 
    let _v0 = v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : uint8 = failwith<uint8> "common.random' / target=Rust(Contract)"
    let _v0 = v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : (unit -> System.Random) = System.Random 
    let v7 : System.Random = v6 ()
    let v8 : (uint8 -> int32) = int32
    let v9 : int32 = v8 1uy
    let v10 : (uint8 -> int32) = int32
    let v11 : int32 = v10 7uy
    let v12 : int32 = v7.Next (v9, v11)
    let v13 : uint8 = v12 |> uint8 
    let _v0 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : (unit -> System.Random) = System.Random 
    let v17 : System.Random = v16 ()
    let v18 : (uint8 -> int32) = int32
    let v19 : int32 = v18 1uy
    let v20 : (uint8 -> int32) = int32
    let v21 : int32 = v20 7uy
    let v22 : int32 = v17.Next (v19, v21)
    let v23 : uint8 = v22 |> uint8 
    let _v0 = v23 
    #endif
#else
    let v26 : (unit -> System.Random) = System.Random 
    let v27 : System.Random = v26 ()
    let v28 : (uint8 -> int32) = int32
    let v29 : int32 = v28 1uy
    let v30 : (uint8 -> int32) = int32
    let v31 : int32 = v30 7uy
    let v32 : int32 = v27.Next (v29, v31)
    let v33 : uint8 = v32 |> uint8 
    let _v0 = v33 
    #endif
    let v36 : uint8 = _v0 
    v36
and closure96 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{23y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure97 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{22y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure98 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{21y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure99 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{20y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure100 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{19y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure101 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{18y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure102 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{17y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure103 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{16y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure104 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{15y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure105 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{14y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure106 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{13y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure107 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{12y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure108 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{11y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure109 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{10y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure110 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{9y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure111 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{8y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure112 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{7y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure113 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{6y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure114 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{5y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure115 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{4y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure116 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{3y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure117 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{2y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure118 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{1y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure119 (v0 : int64, v1 : uint8, v2 : int64) () : unit =
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure5()
    let v5 : unit = (fun () -> v4 (); v3) ()
    let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
    let v37 : unit = ()
    let v38 : unit = (fun () -> v4 (); v37) ()
    let struct (v52 : Mut0, v53 : Mut1, v54 : Mut2, v55 : Mut3, v56 : Mut4, v57 : int64 option) = TraceState.trace_state.Value
    let v70 : US0 = v56.l0
    let v71 : bool = v54.l0
    let v72 : bool = v71 = false
    let v75 : bool =
        if v72 then
            false
        else
            let v73 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v70
            let v74 : bool = 1 >= v73
            v74
    if v75 then
        let v76 : unit = ()
        let v77 : (unit -> unit) = closure9(v19)
        let v78 : unit = (fun () -> v77 (); v76) ()
        let v81 : unit = ()
        let v82 : unit = (fun () -> v4 (); v81) ()
        let struct (v96 : Mut0, v97 : Mut1, v98 : Mut2, v99 : Mut3, v100 : Mut4, v101 : int64 option) = TraceState.trace_state.Value
        let v114 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v115 : US3 option = None
        let _v115 = ref v115 
        let v116 : US3 option ref = _v115 
        let v117 : (US3 option -> US3 option ref) = closure10(v116)
        let v118 : unit = ()
        let v119 : (unit -> unit) = closure11(v101, v117)
        let v120 : unit = (fun () -> v119 (); v118) ()
        let v123 : US3 option = _v115.Value 
        let v134 : US3 = US3_1
        let v135 : US3 = v123 |> Option.defaultValue v134 
        let v175 : System.DateTime =
            match v135 with
            | US3_1 -> (* None *)
                let v171 : System.DateTime = System.DateTime.Now
                v171
            | US3_0(v139) -> (* Some *)
                let v140 : System.DateTime = System.DateTime.Now
                let v143 : (System.DateTime -> int64) = _.Ticks
                let v144 : int64 = v143 v140
                let v147 : int64 = v144 - v139
                let v148 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v149 : System.TimeSpan = v148 v147
                let v152 : (System.TimeSpan -> int32) = _.Hours
                let v153 : int32 = v152 v149
                let v156 : (System.TimeSpan -> int32) = _.Minutes
                let v157 : int32 = v156 v149
                let v160 : (System.TimeSpan -> int32) = _.Seconds
                let v161 : int32 = v160 v149
                let v164 : (System.TimeSpan -> int32) = _.Milliseconds
                let v165 : int32 = v164 v149
                let v168 : System.DateTime = System.DateTime (1, 1, 1, v153, v157, v161, v165)
                v168
        let v176 : string = method6()
        let v179 : (string -> string) = v175.ToString
        let v180 : string = v179 v176
        let _v114 = v180 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v183 : US3 option = None
        let _v183 = ref v183 
        let v184 : US3 option ref = _v183 
        let v185 : (US3 option -> US3 option ref) = closure10(v184)
        let v186 : unit = ()
        let v187 : (unit -> unit) = closure11(v101, v185)
        let v188 : unit = (fun () -> v187 (); v186) ()
        let v191 : US3 option = _v183.Value 
        let v202 : US3 = US3_1
        let v203 : US3 = v191 |> Option.defaultValue v202 
        let v243 : System.DateTime =
            match v203 with
            | US3_1 -> (* None *)
                let v239 : System.DateTime = System.DateTime.Now
                v239
            | US3_0(v207) -> (* Some *)
                let v208 : System.DateTime = System.DateTime.Now
                let v211 : (System.DateTime -> int64) = _.Ticks
                let v212 : int64 = v211 v208
                let v215 : int64 = v212 - v207
                let v216 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v217 : System.TimeSpan = v216 v215
                let v220 : (System.TimeSpan -> int32) = _.Hours
                let v221 : int32 = v220 v217
                let v224 : (System.TimeSpan -> int32) = _.Minutes
                let v225 : int32 = v224 v217
                let v228 : (System.TimeSpan -> int32) = _.Seconds
                let v229 : int32 = v228 v217
                let v232 : (System.TimeSpan -> int32) = _.Milliseconds
                let v233 : int32 = v232 v217
                let v236 : System.DateTime = System.DateTime (1, 1, 1, v221, v225, v229, v233)
                v236
        let v244 : string = method6()
        let v247 : (string -> string) = v243.ToString
        let v248 : string = v247 v244
        let _v114 = v248 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v251 : string = $"near_sdk::env::block_timestamp()"
        let v252 : uint64 = Fable.Core.RustInterop.emitRustExpr () v251 
        let v253 : US3 option = None
        let _v253 = ref v253 
        let v254 : US3 option ref = _v253 
        let v255 : (US3 option -> US3 option ref) = closure10(v254)
        let v256 : unit = ()
        let v257 : (unit -> unit) = closure11(v101, v255)
        let v258 : unit = (fun () -> v257 (); v256) ()
        let v261 : US3 option = _v253.Value 
        let v272 : US3 = US3_1
        let v273 : US3 = v261 |> Option.defaultValue v272 
        let v282 : uint64 =
            match v273 with
            | US3_1 -> (* None *)
                v252
            | US3_0(v277) -> (* Some *)
                let v278 : (int64 -> uint64) = uint64
                let v279 : uint64 = v278 v277
                let v280 : uint64 = v252 - v279
                v280
        let v283 : uint64 = v282 / 1000000000UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v283 / 60UL
        let v286 : uint64 = v285 % 60UL
        let v287 : uint64 = v283 / 3600UL
        let v288 : uint64 = v287 % 24UL
        let v289 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v288, v286, v284) v289 
        let v291 : string = "fable_library_rust::String_::fromString($0)"
        let v292 : string = Fable.Core.RustInterop.emitRustExpr v290 v291 
        let _v114 = v292 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v293 : US3 option = None
        let _v293 = ref v293 
        let v294 : US3 option ref = _v293 
        let v295 : (US3 option -> US3 option ref) = closure10(v294)
        let v296 : unit = ()
        let v297 : (unit -> unit) = closure11(v101, v295)
        let v298 : unit = (fun () -> v297 (); v296) ()
        let v301 : US3 option = _v293.Value 
        let v312 : US3 = US3_1
        let v313 : US3 = v301 |> Option.defaultValue v312 
        let v353 : System.DateTime =
            match v313 with
            | US3_1 -> (* None *)
                let v349 : System.DateTime = System.DateTime.Now
                v349
            | US3_0(v317) -> (* Some *)
                let v318 : System.DateTime = System.DateTime.Now
                let v321 : (System.DateTime -> int64) = _.Ticks
                let v322 : int64 = v321 v318
                let v325 : int64 = v322 - v317
                let v326 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v327 : System.TimeSpan = v326 v325
                let v330 : (System.TimeSpan -> int32) = _.Hours
                let v331 : int32 = v330 v327
                let v334 : (System.TimeSpan -> int32) = _.Minutes
                let v335 : int32 = v334 v327
                let v338 : (System.TimeSpan -> int32) = _.Seconds
                let v339 : int32 = v338 v327
                let v342 : (System.TimeSpan -> int32) = _.Milliseconds
                let v343 : int32 = v342 v327
                let v346 : System.DateTime = System.DateTime (1, 1, 1, v331, v335, v339, v343)
                v346
        let v354 : string = method7()
        let v357 : (string -> string) = v353.ToString
        let v358 : string = v357 v354
        let _v114 = v358 
        #endif
#if FABLE_COMPILER_PYTHON
        let v361 : US3 option = None
        let _v361 = ref v361 
        let v362 : US3 option ref = _v361 
        let v363 : (US3 option -> US3 option ref) = closure10(v362)
        let v364 : unit = ()
        let v365 : (unit -> unit) = closure11(v101, v363)
        let v366 : unit = (fun () -> v365 (); v364) ()
        let v369 : US3 option = _v361.Value 
        let v380 : US3 = US3_1
        let v381 : US3 = v369 |> Option.defaultValue v380 
        let v421 : System.DateTime =
            match v381 with
            | US3_1 -> (* None *)
                let v417 : System.DateTime = System.DateTime.Now
                v417
            | US3_0(v385) -> (* Some *)
                let v386 : System.DateTime = System.DateTime.Now
                let v389 : (System.DateTime -> int64) = _.Ticks
                let v390 : int64 = v389 v386
                let v393 : int64 = v390 - v385
                let v394 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v395 : System.TimeSpan = v394 v393
                let v398 : (System.TimeSpan -> int32) = _.Hours
                let v399 : int32 = v398 v395
                let v402 : (System.TimeSpan -> int32) = _.Minutes
                let v403 : int32 = v402 v395
                let v406 : (System.TimeSpan -> int32) = _.Seconds
                let v407 : int32 = v406 v395
                let v410 : (System.TimeSpan -> int32) = _.Milliseconds
                let v411 : int32 = v410 v395
                let v414 : System.DateTime = System.DateTime (1, 1, 1, v399, v403, v407, v411)
                v414
        let v422 : string = method7()
        let v425 : (string -> string) = v421.ToString
        let v426 : string = v425 v422
        let _v114 = v426 
        #endif
#else
        let v429 : US3 option = None
        let _v429 = ref v429 
        let v430 : US3 option ref = _v429 
        let v431 : (US3 option -> US3 option ref) = closure10(v430)
        let v432 : unit = ()
        let v433 : (unit -> unit) = closure11(v101, v431)
        let v434 : unit = (fun () -> v433 (); v432) ()
        let v437 : US3 option = _v429.Value 
        let v448 : US3 = US3_1
        let v449 : US3 = v437 |> Option.defaultValue v448 
        let v489 : System.DateTime =
            match v449 with
            | US3_1 -> (* None *)
                let v485 : System.DateTime = System.DateTime.Now
                v485
            | US3_0(v453) -> (* Some *)
                let v454 : System.DateTime = System.DateTime.Now
                let v457 : (System.DateTime -> int64) = _.Ticks
                let v458 : int64 = v457 v454
                let v461 : int64 = v458 - v453
                let v462 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v463 : System.TimeSpan = v462 v461
                let v466 : (System.TimeSpan -> int32) = _.Hours
                let v467 : int32 = v466 v463
                let v470 : (System.TimeSpan -> int32) = _.Minutes
                let v471 : int32 = v470 v463
                let v474 : (System.TimeSpan -> int32) = _.Seconds
                let v475 : int32 = v474 v463
                let v478 : (System.TimeSpan -> int32) = _.Milliseconds
                let v479 : int32 = v478 v463
                let v482 : System.DateTime = System.DateTime (1, 1, 1, v467, v471, v475, v479)
                v482
        let v490 : string = method7()
        let v493 : (string -> string) = v489.ToString
        let v494 : string = v493 v490
        let _v114 = v494 
        #endif
        let v497 : string = _v114 
        
        
        
        
        
        let v567 : string = "Debug"
        let v568 : (unit -> string) = v567.ToLower
        let v569 : string = v568 ()
        let v572 : string = v569.PadLeft (7, ' ')
        let v586 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v587 : string = "inline_colorization::color_bright_blue"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v587 
        let v589 : string = "&*$0"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v589 
        let v591 : string = "inline_colorization::color_reset"
        let v592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v591 
        let v593 : string = "\"{v588}{v590}{v592}\""
        let v594 : string = @$"format!(" + v593 + ")"
        let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v594 
        let v596 : string = "fable_library_rust::String_::fromString($0)"
        let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
        let _v586 = v597 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v598 : string = "inline_colorization::color_bright_blue"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v598 
        let v600 : string = "&*$0"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v600 
        let v602 : string = "inline_colorization::color_reset"
        let v603 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v602 
        let v604 : string = "\"{v599}{v601}{v603}\""
        let v605 : string = @$"format!(" + v604 + ")"
        let v606 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v605 
        let v607 : string = "fable_library_rust::String_::fromString($0)"
        let v608 : string = Fable.Core.RustInterop.emitRustExpr v606 v607 
        let _v586 = v608 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v609 : string = "inline_colorization::color_bright_blue"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v609 
        let v611 : string = "&*$0"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v572 v611 
        let v613 : string = "inline_colorization::color_reset"
        let v614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v613 
        let v615 : string = "\"{v610}{v612}{v614}\""
        let v616 : string = @$"format!(" + v615 + ")"
        let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v616 
        let v618 : string = "fable_library_rust::String_::fromString($0)"
        let v619 : string = Fable.Core.RustInterop.emitRustExpr v617 v618 
        let _v586 = v619 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v620 : string = "\u001b[94m"
        let v621 : string = method8()
        let v622 : string = v620 + v572 
        let v623 : string = v622 + v621 
        let _v586 = v623 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : string = "\u001b[94m"
        let v625 : string = method8()
        let v626 : string = v624 + v572 
        let v627 : string = v626 + v625 
        let _v586 = v627 
        #endif
#else
        let v628 : string = "\u001b[94m"
        let v629 : string = method8()
        let v630 : string = v628 + v572 
        let v631 : string = v630 + v629 
        let _v586 = v631 
        #endif
        let v632 : string = _v586 
        let v638 : int64 = v96.l0
        let v639 : string = method9()
        let v640 : Mut3 = {l0 = v639} : Mut3
        let v641 : string = "{ "
        let v642 : string = $"{v641}"
        let v645 : unit = ()
        let v646 : (unit -> unit) = closure19(v640, v642)
        let v647 : unit = (fun () -> v646 (); v645) ()
        let v650 : string = "power"
        let v651 : string = $"{v650}"
        let v654 : unit = ()
        let v655 : (unit -> unit) = closure19(v640, v651)
        let v656 : unit = (fun () -> v655 (); v654) ()
        let v659 : string = " = "
        let v660 : string = $"{v659}"
        let v663 : unit = ()
        let v664 : (unit -> unit) = closure19(v640, v660)
        let v665 : unit = (fun () -> v664 (); v663) ()
        let v668 : string = $"{0y}"
        let v671 : unit = ()
        let v672 : (unit -> unit) = closure19(v640, v668)
        let v673 : unit = (fun () -> v672 (); v671) ()
        let v676 : string = "; "
        let v677 : string = $"{v676}"
        let v680 : unit = ()
        let v681 : (unit -> unit) = closure19(v640, v677)
        let v682 : unit = (fun () -> v681 (); v680) ()
        let v685 : string = "acc"
        let v686 : string = $"{v685}"
        let v689 : unit = ()
        let v690 : (unit -> unit) = closure19(v640, v686)
        let v691 : unit = (fun () -> v690 (); v689) ()
        let v694 : string = $"{v659}"
        let v697 : unit = ()
        let v698 : (unit -> unit) = closure19(v640, v694)
        let v699 : unit = (fun () -> v698 (); v697) ()
        let v702 : string = $"{v0}"
        let v705 : unit = ()
        let v706 : (unit -> unit) = closure19(v640, v702)
        let v707 : unit = (fun () -> v706 (); v705) ()
        let v710 : string = $"{v676}"
        let v713 : unit = ()
        let v714 : (unit -> unit) = closure19(v640, v710)
        let v715 : unit = (fun () -> v714 (); v713) ()
        let v718 : string = "roll"
        let v719 : string = $"{v718}"
        let v722 : unit = ()
        let v723 : (unit -> unit) = closure19(v640, v719)
        let v724 : unit = (fun () -> v723 (); v722) ()
        let v727 : string = $"{v659}"
        let v730 : unit = ()
        let v731 : (unit -> unit) = closure19(v640, v727)
        let v732 : unit = (fun () -> v731 (); v730) ()
        let v735 : string = $"{v1}"
        let v738 : unit = ()
        let v739 : (unit -> unit) = closure19(v640, v735)
        let v740 : unit = (fun () -> v739 (); v738) ()
        let v743 : string = $"{v676}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v640, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = "value"
        let v752 : string = $"{v751}"
        let v755 : unit = ()
        let v756 : (unit -> unit) = closure19(v640, v752)
        let v757 : unit = (fun () -> v756 (); v755) ()
        let v760 : string = $"{v659}"
        let v763 : unit = ()
        let v764 : (unit -> unit) = closure19(v640, v760)
        let v765 : unit = (fun () -> v764 (); v763) ()
        let v768 : string = $"{v2}"
        let v771 : unit = ()
        let v772 : (unit -> unit) = closure19(v640, v768)
        let v773 : unit = (fun () -> v772 (); v771) ()
        let v776 : string = " }"
        let v777 : string = $"{v776}"
        let v780 : unit = ()
        let v781 : (unit -> unit) = closure19(v640, v777)
        let v782 : unit = (fun () -> v781 (); v780) ()
        let v785 : string = v640.l0
        let v786 : string = $"dice.accumulate_dice_rolls"
        let v787 : bool = v786 = ""
        let v844 : string =
            if v787 then
                let v788 : string = ""
                v788
            else
                let v789 : string = $"{v497} {v632} #{v638} %s{v786} / {v785}"
                let v792 : char list = []
                let v793 : (char list -> (char [])) = List.toArray
                let v794 : (char []) = v793 v792
                let v797 : string = v789.TrimStart v794 
                let v815 : char list = []
                let v816 : char list = '/' :: v815 
                let v819 : char list = ' ' :: v816 
                let v822 : (char list -> (char [])) = List.toArray
                let v823 : (char []) = v822 v819
                let v826 : string = v797.TrimEnd v823 
                v826
        let v845 : (string -> unit) = closure12()
        let v846 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v847 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v847 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v848 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v844 v848 
        let _v846 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v849 : string = v22.l0
        let v850 : bool = v849 = ""
        let v858 : string =
            if v850 then
                v844
            else
                let v851 : bool = v844 = ""
                if v851 then
                    let v852 : string = v22.l0
                    v852
                else
                    let v853 : string = v22.l0
                    let v854 : string = "\n"
                    let v855 : string = v853 + v854 
                    let v856 : string = v855 + v844 
                    v856
        let v859 : string = "&*$0"
        let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v858 v859 
        let v861 : string = $"$0.chars()"
        let v862 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v860 v861 
        let v863 : string = "v862"
        let v864 : _ = Fable.Core.RustInterop.emitRustExpr () v863 
        let v865 : string = "v864.collect::<Vec<_>>()"
        let v866 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v865 
        let v867 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v868 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v866 v867 
        let v869 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v870 : bool = Fable.Core.RustInterop.emitRustExpr v868 v869 
        let v871 : string = "x"
        let v872 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v871 
        let v873 : string = "String::from_iter($0)"
        let v874 : std_string_String = Fable.Core.RustInterop.emitRustExpr v872 v873 
        let v875 : string = "true; $0 }).collect::<Vec<_>>()"
        let v876 : bool = Fable.Core.RustInterop.emitRustExpr v874 v875 
        let v877 : string = "_vec_map"
        let v878 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v877 
        let v879 : string = "$0.len()"
        let v880 : unativeint = Fable.Core.RustInterop.emitRustExpr v878 v879 
        let v881 : (unativeint -> int32) = int32
        let v882 : int32 = v881 v880
        let v883 : string = ""
        let v884 : bool = v844 <> v883 
        let v888 : bool =
            if v884 then
                let v887 : bool = v882 <= 1
                v887
            else
                false
        if v888 then
            v22.l0 <- v858
            ()
        else
            v22.l0 <- v883
            let v889 : string = "true; $0.into_iter().for_each(|x| { //"
            let v890 : bool = Fable.Core.RustInterop.emitRustExpr v878 v889 
            let v891 : string = "x"
            let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v892 v893 
            let v894 : string = $"true;"
            let v895 : bool = Fable.Core.RustInterop.emitRustExpr () v894 
            let v896 : string = "true; }}); { //"
            let v897 : bool = Fable.Core.RustInterop.emitRustExpr () v896 
            ()
        let _v846 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v845 v844
        let _v846 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v845 v844
        let _v846 = () 
        #endif
#else
        v845 v844
        let _v846 = () 
        #endif
        _v846 
        let v898 : (string -> unit) = v20.l0
        v898 v844
and closure120 (v0 : int64, v1 : int64) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{-1y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "result"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method49 (v0 : UH1, v1 : int64) : US8 =
    let v2 : int64 = v1 + 1L
    let v3 : unit = ()
    let v4 : (unit -> unit) = closure120(v1, v2)
    let v5 : unit = (fun () -> v4 (); v3) ()
    US8_0(v2, v0)
and closure121 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{0y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method48 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : unit = ()
            let v9 : (unit -> unit) = closure119(v1, v3, v7)
            let v10 : unit = (fun () -> v9 (); v8) ()
            let v907 : int64 = v1 + v7
            method49(v4, v907)
        else
            let v909 : unit = ()
            let v910 : (unit -> unit) = closure121(v1, v3)
            let v911 : unit = (fun () -> v910 (); v909) ()
            method49(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure122 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{1y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method47 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 6L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure118(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method48(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure122(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method48(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure123 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{2y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method46 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 36L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure117(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method47(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure123(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method47(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure124 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{3y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method45 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 216L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure116(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method46(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure124(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method46(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure125 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{4y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method44 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 1296L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure115(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method45(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure125(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method45(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure126 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{5y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method43 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 7776L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure114(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method44(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure126(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method44(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure127 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{6y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method42 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 46656L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure113(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method43(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure127(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method43(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure128 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{7y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method41 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 279936L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure112(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method42(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure128(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method42(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure129 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{8y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method40 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 1679616L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure111(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method41(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure129(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method41(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure130 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{9y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method39 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 10077696L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure110(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method40(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure130(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method40(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure131 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{10y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method38 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 60466176L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure109(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method39(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure131(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method39(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure132 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{11y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method37 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 362797056L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure108(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method38(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure132(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method38(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure133 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{12y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method36 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 2176782336L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure107(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method37(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure133(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method37(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure134 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{13y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method35 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 13060694016L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure106(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method36(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure134(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method36(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure135 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{14y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method34 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 78364164096L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure105(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method35(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure135(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method35(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure136 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{15y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method33 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 470184984576L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure104(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method34(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure136(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method34(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure137 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{16y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method32 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 2821109907456L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure103(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method33(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure137(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method33(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure138 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{17y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method31 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 16926659444736L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure102(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method32(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure138(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method32(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure139 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{18y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method30 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 101559956668416L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure101(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method31(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure139(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method31(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure140 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{19y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method29 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 609359740010496L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure100(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method30(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure140(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method30(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure141 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{20y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method28 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 3656158440062976L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure99(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method29(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure141(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method29(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure142 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{21y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method27 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 21936950640377856L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure98(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method28(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure142(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method28(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure143 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{22y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method26 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 131621703842267136L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure97(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method27(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure143(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method27(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and closure144 (v0 : int64, v1 : uint8) () : unit =
    let v2 : unit = ()
    let v3 : (unit -> unit) = closure5()
    let v4 : unit = (fun () -> v3 (); v2) ()
    let struct (v18 : Mut0, v19 : Mut1, v20 : Mut2, v21 : Mut3, v22 : Mut4, v23 : int64 option) = TraceState.trace_state.Value
    let v36 : unit = ()
    let v37 : unit = (fun () -> v3 (); v36) ()
    let struct (v51 : Mut0, v52 : Mut1, v53 : Mut2, v54 : Mut3, v55 : Mut4, v56 : int64 option) = TraceState.trace_state.Value
    let v69 : US0 = v55.l0
    let v70 : bool = v53.l0
    let v71 : bool = v70 = false
    let v74 : bool =
        if v71 then
            false
        else
            let v72 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v69
            let v73 : bool = 1 >= v72
            v73
    if v74 then
        let v75 : unit = ()
        let v76 : (unit -> unit) = closure9(v18)
        let v77 : unit = (fun () -> v76 (); v75) ()
        let v80 : unit = ()
        let v81 : unit = (fun () -> v3 (); v80) ()
        let struct (v95 : Mut0, v96 : Mut1, v97 : Mut2, v98 : Mut3, v99 : Mut4, v100 : int64 option) = TraceState.trace_state.Value
        let v113 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v114 : US3 option = None
        let _v114 = ref v114 
        let v115 : US3 option ref = _v114 
        let v116 : (US3 option -> US3 option ref) = closure10(v115)
        let v117 : unit = ()
        let v118 : (unit -> unit) = closure11(v100, v116)
        let v119 : unit = (fun () -> v118 (); v117) ()
        let v122 : US3 option = _v114.Value 
        let v133 : US3 = US3_1
        let v134 : US3 = v122 |> Option.defaultValue v133 
        let v174 : System.DateTime =
            match v134 with
            | US3_1 -> (* None *)
                let v170 : System.DateTime = System.DateTime.Now
                v170
            | US3_0(v138) -> (* Some *)
                let v139 : System.DateTime = System.DateTime.Now
                let v142 : (System.DateTime -> int64) = _.Ticks
                let v143 : int64 = v142 v139
                let v146 : int64 = v143 - v138
                let v147 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v148 : System.TimeSpan = v147 v146
                let v151 : (System.TimeSpan -> int32) = _.Hours
                let v152 : int32 = v151 v148
                let v155 : (System.TimeSpan -> int32) = _.Minutes
                let v156 : int32 = v155 v148
                let v159 : (System.TimeSpan -> int32) = _.Seconds
                let v160 : int32 = v159 v148
                let v163 : (System.TimeSpan -> int32) = _.Milliseconds
                let v164 : int32 = v163 v148
                let v167 : System.DateTime = System.DateTime (1, 1, 1, v152, v156, v160, v164)
                v167
        let v175 : string = method6()
        let v178 : (string -> string) = v174.ToString
        let v179 : string = v178 v175
        let _v113 = v179 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v182 : US3 option = None
        let _v182 = ref v182 
        let v183 : US3 option ref = _v182 
        let v184 : (US3 option -> US3 option ref) = closure10(v183)
        let v185 : unit = ()
        let v186 : (unit -> unit) = closure11(v100, v184)
        let v187 : unit = (fun () -> v186 (); v185) ()
        let v190 : US3 option = _v182.Value 
        let v201 : US3 = US3_1
        let v202 : US3 = v190 |> Option.defaultValue v201 
        let v242 : System.DateTime =
            match v202 with
            | US3_1 -> (* None *)
                let v238 : System.DateTime = System.DateTime.Now
                v238
            | US3_0(v206) -> (* Some *)
                let v207 : System.DateTime = System.DateTime.Now
                let v210 : (System.DateTime -> int64) = _.Ticks
                let v211 : int64 = v210 v207
                let v214 : int64 = v211 - v206
                let v215 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v216 : System.TimeSpan = v215 v214
                let v219 : (System.TimeSpan -> int32) = _.Hours
                let v220 : int32 = v219 v216
                let v223 : (System.TimeSpan -> int32) = _.Minutes
                let v224 : int32 = v223 v216
                let v227 : (System.TimeSpan -> int32) = _.Seconds
                let v228 : int32 = v227 v216
                let v231 : (System.TimeSpan -> int32) = _.Milliseconds
                let v232 : int32 = v231 v216
                let v235 : System.DateTime = System.DateTime (1, 1, 1, v220, v224, v228, v232)
                v235
        let v243 : string = method6()
        let v246 : (string -> string) = v242.ToString
        let v247 : string = v246 v243
        let _v113 = v247 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v250 : string = $"near_sdk::env::block_timestamp()"
        let v251 : uint64 = Fable.Core.RustInterop.emitRustExpr () v250 
        let v252 : US3 option = None
        let _v252 = ref v252 
        let v253 : US3 option ref = _v252 
        let v254 : (US3 option -> US3 option ref) = closure10(v253)
        let v255 : unit = ()
        let v256 : (unit -> unit) = closure11(v100, v254)
        let v257 : unit = (fun () -> v256 (); v255) ()
        let v260 : US3 option = _v252.Value 
        let v271 : US3 = US3_1
        let v272 : US3 = v260 |> Option.defaultValue v271 
        let v281 : uint64 =
            match v272 with
            | US3_1 -> (* None *)
                v251
            | US3_0(v276) -> (* Some *)
                let v277 : (int64 -> uint64) = uint64
                let v278 : uint64 = v277 v276
                let v279 : uint64 = v251 - v278
                v279
        let v282 : uint64 = v281 / 1000000000UL
        let v283 : uint64 = v282 % 60UL
        let v284 : uint64 = v282 / 60UL
        let v285 : uint64 = v284 % 60UL
        let v286 : uint64 = v282 / 3600UL
        let v287 : uint64 = v286 % 24UL
        let v288 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v289 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v287, v285, v283) v288 
        let v290 : string = "fable_library_rust::String_::fromString($0)"
        let v291 : string = Fable.Core.RustInterop.emitRustExpr v289 v290 
        let _v113 = v291 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v292 : US3 option = None
        let _v292 = ref v292 
        let v293 : US3 option ref = _v292 
        let v294 : (US3 option -> US3 option ref) = closure10(v293)
        let v295 : unit = ()
        let v296 : (unit -> unit) = closure11(v100, v294)
        let v297 : unit = (fun () -> v296 (); v295) ()
        let v300 : US3 option = _v292.Value 
        let v311 : US3 = US3_1
        let v312 : US3 = v300 |> Option.defaultValue v311 
        let v352 : System.DateTime =
            match v312 with
            | US3_1 -> (* None *)
                let v348 : System.DateTime = System.DateTime.Now
                v348
            | US3_0(v316) -> (* Some *)
                let v317 : System.DateTime = System.DateTime.Now
                let v320 : (System.DateTime -> int64) = _.Ticks
                let v321 : int64 = v320 v317
                let v324 : int64 = v321 - v316
                let v325 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v326 : System.TimeSpan = v325 v324
                let v329 : (System.TimeSpan -> int32) = _.Hours
                let v330 : int32 = v329 v326
                let v333 : (System.TimeSpan -> int32) = _.Minutes
                let v334 : int32 = v333 v326
                let v337 : (System.TimeSpan -> int32) = _.Seconds
                let v338 : int32 = v337 v326
                let v341 : (System.TimeSpan -> int32) = _.Milliseconds
                let v342 : int32 = v341 v326
                let v345 : System.DateTime = System.DateTime (1, 1, 1, v330, v334, v338, v342)
                v345
        let v353 : string = method7()
        let v356 : (string -> string) = v352.ToString
        let v357 : string = v356 v353
        let _v113 = v357 
        #endif
#if FABLE_COMPILER_PYTHON
        let v360 : US3 option = None
        let _v360 = ref v360 
        let v361 : US3 option ref = _v360 
        let v362 : (US3 option -> US3 option ref) = closure10(v361)
        let v363 : unit = ()
        let v364 : (unit -> unit) = closure11(v100, v362)
        let v365 : unit = (fun () -> v364 (); v363) ()
        let v368 : US3 option = _v360.Value 
        let v379 : US3 = US3_1
        let v380 : US3 = v368 |> Option.defaultValue v379 
        let v420 : System.DateTime =
            match v380 with
            | US3_1 -> (* None *)
                let v416 : System.DateTime = System.DateTime.Now
                v416
            | US3_0(v384) -> (* Some *)
                let v385 : System.DateTime = System.DateTime.Now
                let v388 : (System.DateTime -> int64) = _.Ticks
                let v389 : int64 = v388 v385
                let v392 : int64 = v389 - v384
                let v393 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v394 : System.TimeSpan = v393 v392
                let v397 : (System.TimeSpan -> int32) = _.Hours
                let v398 : int32 = v397 v394
                let v401 : (System.TimeSpan -> int32) = _.Minutes
                let v402 : int32 = v401 v394
                let v405 : (System.TimeSpan -> int32) = _.Seconds
                let v406 : int32 = v405 v394
                let v409 : (System.TimeSpan -> int32) = _.Milliseconds
                let v410 : int32 = v409 v394
                let v413 : System.DateTime = System.DateTime (1, 1, 1, v398, v402, v406, v410)
                v413
        let v421 : string = method7()
        let v424 : (string -> string) = v420.ToString
        let v425 : string = v424 v421
        let _v113 = v425 
        #endif
#else
        let v428 : US3 option = None
        let _v428 = ref v428 
        let v429 : US3 option ref = _v428 
        let v430 : (US3 option -> US3 option ref) = closure10(v429)
        let v431 : unit = ()
        let v432 : (unit -> unit) = closure11(v100, v430)
        let v433 : unit = (fun () -> v432 (); v431) ()
        let v436 : US3 option = _v428.Value 
        let v447 : US3 = US3_1
        let v448 : US3 = v436 |> Option.defaultValue v447 
        let v488 : System.DateTime =
            match v448 with
            | US3_1 -> (* None *)
                let v484 : System.DateTime = System.DateTime.Now
                v484
            | US3_0(v452) -> (* Some *)
                let v453 : System.DateTime = System.DateTime.Now
                let v456 : (System.DateTime -> int64) = _.Ticks
                let v457 : int64 = v456 v453
                let v460 : int64 = v457 - v452
                let v461 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v462 : System.TimeSpan = v461 v460
                let v465 : (System.TimeSpan -> int32) = _.Hours
                let v466 : int32 = v465 v462
                let v469 : (System.TimeSpan -> int32) = _.Minutes
                let v470 : int32 = v469 v462
                let v473 : (System.TimeSpan -> int32) = _.Seconds
                let v474 : int32 = v473 v462
                let v477 : (System.TimeSpan -> int32) = _.Milliseconds
                let v478 : int32 = v477 v462
                let v481 : System.DateTime = System.DateTime (1, 1, 1, v466, v470, v474, v478)
                v481
        let v489 : string = method7()
        let v492 : (string -> string) = v488.ToString
        let v493 : string = v492 v489
        let _v113 = v493 
        #endif
        let v496 : string = _v113 
        
        
        
        
        
        let v566 : string = "Debug"
        let v567 : (unit -> string) = v566.ToLower
        let v568 : string = v567 ()
        let v571 : string = v568.PadLeft (7, ' ')
        let v585 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v586 : string = "inline_colorization::color_bright_blue"
        let v587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v586 
        let v588 : string = "&*$0"
        let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v588 
        let v590 : string = "inline_colorization::color_reset"
        let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v590 
        let v592 : string = "\"{v587}{v589}{v591}\""
        let v593 : string = @$"format!(" + v592 + ")"
        let v594 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v593 
        let v595 : string = "fable_library_rust::String_::fromString($0)"
        let v596 : string = Fable.Core.RustInterop.emitRustExpr v594 v595 
        let _v585 = v596 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v597 : string = "inline_colorization::color_bright_blue"
        let v598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v597 
        let v599 : string = "&*$0"
        let v600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v599 
        let v601 : string = "inline_colorization::color_reset"
        let v602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v601 
        let v603 : string = "\"{v598}{v600}{v602}\""
        let v604 : string = @$"format!(" + v603 + ")"
        let v605 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v604 
        let v606 : string = "fable_library_rust::String_::fromString($0)"
        let v607 : string = Fable.Core.RustInterop.emitRustExpr v605 v606 
        let _v585 = v607 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v608 : string = "inline_colorization::color_bright_blue"
        let v609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v608 
        let v610 : string = "&*$0"
        let v611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v571 v610 
        let v612 : string = "inline_colorization::color_reset"
        let v613 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v612 
        let v614 : string = "\"{v609}{v611}{v613}\""
        let v615 : string = @$"format!(" + v614 + ")"
        let v616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v615 
        let v617 : string = "fable_library_rust::String_::fromString($0)"
        let v618 : string = Fable.Core.RustInterop.emitRustExpr v616 v617 
        let _v585 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v619 : string = "\u001b[94m"
        let v620 : string = method8()
        let v621 : string = v619 + v571 
        let v622 : string = v621 + v620 
        let _v585 = v622 
        #endif
#if FABLE_COMPILER_PYTHON
        let v623 : string = "\u001b[94m"
        let v624 : string = method8()
        let v625 : string = v623 + v571 
        let v626 : string = v625 + v624 
        let _v585 = v626 
        #endif
#else
        let v627 : string = "\u001b[94m"
        let v628 : string = method8()
        let v629 : string = v627 + v571 
        let v630 : string = v629 + v628 
        let _v585 = v630 
        #endif
        let v631 : string = _v585 
        let v637 : int64 = v95.l0
        let v638 : string = method9()
        let v639 : Mut3 = {l0 = v638} : Mut3
        let v640 : string = "{ "
        let v641 : string = $"{v640}"
        let v644 : unit = ()
        let v645 : (unit -> unit) = closure19(v639, v641)
        let v646 : unit = (fun () -> v645 (); v644) ()
        let v649 : string = "power"
        let v650 : string = $"{v649}"
        let v653 : unit = ()
        let v654 : (unit -> unit) = closure19(v639, v650)
        let v655 : unit = (fun () -> v654 (); v653) ()
        let v658 : string = " = "
        let v659 : string = $"{v658}"
        let v662 : unit = ()
        let v663 : (unit -> unit) = closure19(v639, v659)
        let v664 : unit = (fun () -> v663 (); v662) ()
        let v667 : string = $"{23y}"
        let v670 : unit = ()
        let v671 : (unit -> unit) = closure19(v639, v667)
        let v672 : unit = (fun () -> v671 (); v670) ()
        let v675 : string = "; "
        let v676 : string = $"{v675}"
        let v679 : unit = ()
        let v680 : (unit -> unit) = closure19(v639, v676)
        let v681 : unit = (fun () -> v680 (); v679) ()
        let v684 : string = "acc"
        let v685 : string = $"{v684}"
        let v688 : unit = ()
        let v689 : (unit -> unit) = closure19(v639, v685)
        let v690 : unit = (fun () -> v689 (); v688) ()
        let v693 : string = $"{v658}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure19(v639, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        let v701 : string = $"{v0}"
        let v704 : unit = ()
        let v705 : (unit -> unit) = closure19(v639, v701)
        let v706 : unit = (fun () -> v705 (); v704) ()
        let v709 : string = $"{v675}"
        let v712 : unit = ()
        let v713 : (unit -> unit) = closure19(v639, v709)
        let v714 : unit = (fun () -> v713 (); v712) ()
        let v717 : string = "roll"
        let v718 : string = $"{v717}"
        let v721 : unit = ()
        let v722 : (unit -> unit) = closure19(v639, v718)
        let v723 : unit = (fun () -> v722 (); v721) ()
        let v726 : string = $"{v658}"
        let v729 : unit = ()
        let v730 : (unit -> unit) = closure19(v639, v726)
        let v731 : unit = (fun () -> v730 (); v729) ()
        let v734 : string = $"{v1}"
        let v737 : unit = ()
        let v738 : (unit -> unit) = closure19(v639, v734)
        let v739 : unit = (fun () -> v738 (); v737) ()
        let v742 : string = " }"
        let v743 : string = $"{v742}"
        let v746 : unit = ()
        let v747 : (unit -> unit) = closure19(v639, v743)
        let v748 : unit = (fun () -> v747 (); v746) ()
        let v751 : string = v639.l0
        let v752 : string = $"dice.accumulate_dice_rolls"
        let v753 : bool = v752 = ""
        let v810 : string =
            if v753 then
                let v754 : string = ""
                v754
            else
                let v755 : string = $"{v496} {v631} #{v637} %s{v752} / {v751}"
                let v758 : char list = []
                let v759 : (char list -> (char [])) = List.toArray
                let v760 : (char []) = v759 v758
                let v763 : string = v755.TrimStart v760 
                let v781 : char list = []
                let v782 : char list = '/' :: v781 
                let v785 : char list = ' ' :: v782 
                let v788 : (char list -> (char [])) = List.toArray
                let v789 : (char []) = v788 v785
                let v792 : string = v763.TrimEnd v789 
                v792
        let v811 : (string -> unit) = closure12()
        let v812 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v813 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v814 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v810 v814 
        let _v812 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v815 : string = v21.l0
        let v816 : bool = v815 = ""
        let v824 : string =
            if v816 then
                v810
            else
                let v817 : bool = v810 = ""
                if v817 then
                    let v818 : string = v21.l0
                    v818
                else
                    let v819 : string = v21.l0
                    let v820 : string = "\n"
                    let v821 : string = v819 + v820 
                    let v822 : string = v821 + v810 
                    v822
        let v825 : string = "&*$0"
        let v826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v824 v825 
        let v827 : string = $"$0.chars()"
        let v828 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v826 v827 
        let v829 : string = "v828"
        let v830 : _ = Fable.Core.RustInterop.emitRustExpr () v829 
        let v831 : string = "v830.collect::<Vec<_>>()"
        let v832 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v831 
        let v833 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v834 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v832 v833 
        let v835 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v836 : bool = Fable.Core.RustInterop.emitRustExpr v834 v835 
        let v837 : string = "x"
        let v838 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v837 
        let v839 : string = "String::from_iter($0)"
        let v840 : std_string_String = Fable.Core.RustInterop.emitRustExpr v838 v839 
        let v841 : string = "true; $0 }).collect::<Vec<_>>()"
        let v842 : bool = Fable.Core.RustInterop.emitRustExpr v840 v841 
        let v843 : string = "_vec_map"
        let v844 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v843 
        let v845 : string = "$0.len()"
        let v846 : unativeint = Fable.Core.RustInterop.emitRustExpr v844 v845 
        let v847 : (unativeint -> int32) = int32
        let v848 : int32 = v847 v846
        let v849 : string = ""
        let v850 : bool = v810 <> v849 
        let v854 : bool =
            if v850 then
                let v853 : bool = v848 <= 1
                v853
            else
                false
        if v854 then
            v21.l0 <- v824
            ()
        else
            v21.l0 <- v849
            let v855 : string = "true; $0.into_iter().for_each(|x| { //"
            let v856 : bool = Fable.Core.RustInterop.emitRustExpr v844 v855 
            let v857 : string = "x"
            let v858 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v858 v859 
            let v860 : string = $"true;"
            let v861 : bool = Fable.Core.RustInterop.emitRustExpr () v860 
            let v862 : string = "true; }}); { //"
            let v863 : bool = Fable.Core.RustInterop.emitRustExpr () v862 
            ()
        let _v812 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v811 v810
        let _v812 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v811 v810
        let _v812 = () 
        #endif
#else
        v811 v810
        let _v812 = () 
        #endif
        _v812 
        let v864 : (string -> unit) = v19.l0
        v864 v810
and method25 (v0 : UH1, v1 : int64) : US8 =
    match v0 with
    | UH1_1(v3, v4) -> (* Cons *)
        let v5 : bool = v3 > 1uy
        if v5 then
            let v6 : uint8 = v3 - 1uy
            let v7 : int64 = int64 v6
            let v8 : int64 = v7 * 789730223053602816L
            let v9 : unit = ()
            let v10 : (unit -> unit) = closure96(v1, v3, v8)
            let v11 : unit = (fun () -> v10 (); v9) ()
            let v908 : int64 = v1 + v8
            method26(v4, v908)
        else
            let v910 : unit = ()
            let v911 : (unit -> unit) = closure144(v1, v3)
            let v912 : unit = (fun () -> v911 (); v910) ()
            method26(v4, v1)
    | UH1_0 -> (* Nil *)
        US8_1
and method23 (v0 : UH1, v1 : int8) : int64 =
    let v2 : bool = v1 < 24y
    if v2 then
        let v3 : uint8 = method24()
        let v4 : UH1 = UH1_1(v3, v0)
        let v5 : int8 = v1 + 1y
        method23(v4, v5)
    else
        let v7 : int64 = 0L
        let v8 : US8 = method25(v0, v7)
        match v8 with
        | US8_0(v9, v10) -> (* Some *)
            let v11 : bool = v9 <= 9223372036854775807L
            if v11 then
                v9
            else
                let v12 : uint8 = method24()
                let v13 : uint8 = method24()
                let v14 : uint8 = method24()
                let v15 : uint8 = method24()
                let v16 : uint8 = method24()
                let v17 : uint8 = method24()
                let v18 : uint8 = method24()
                let v19 : uint8 = method24()
                let v20 : uint8 = method24()
                let v21 : uint8 = method24()
                let v22 : uint8 = method24()
                let v23 : uint8 = method24()
                let v24 : uint8 = method24()
                let v25 : uint8 = method24()
                let v26 : uint8 = method24()
                let v27 : uint8 = method24()
                let v28 : uint8 = method24()
                let v29 : uint8 = method24()
                let v30 : uint8 = method24()
                let v31 : uint8 = method24()
                let v32 : uint8 = method24()
                let v33 : uint8 = method24()
                let v34 : uint8 = method24()
                let v35 : UH1 = UH1_0
                let v36 : UH1 = UH1_1(v34, v35)
                let v37 : UH1 = UH1_1(v33, v36)
                let v38 : UH1 = UH1_1(v32, v37)
                let v39 : UH1 = UH1_1(v31, v38)
                let v40 : UH1 = UH1_1(v30, v39)
                let v41 : UH1 = UH1_1(v29, v40)
                let v42 : UH1 = UH1_1(v28, v41)
                let v43 : UH1 = UH1_1(v27, v42)
                let v44 : UH1 = UH1_1(v26, v43)
                let v45 : UH1 = UH1_1(v25, v44)
                let v46 : UH1 = UH1_1(v24, v45)
                let v47 : UH1 = UH1_1(v23, v46)
                let v48 : UH1 = UH1_1(v22, v47)
                let v49 : UH1 = UH1_1(v21, v48)
                let v50 : UH1 = UH1_1(v20, v49)
                let v51 : UH1 = UH1_1(v19, v50)
                let v52 : UH1 = UH1_1(v18, v51)
                let v53 : UH1 = UH1_1(v17, v52)
                let v54 : UH1 = UH1_1(v16, v53)
                let v55 : UH1 = UH1_1(v15, v54)
                let v56 : UH1 = UH1_1(v14, v55)
                let v57 : UH1 = UH1_1(v13, v56)
                let v58 : UH1 = UH1_1(v12, v57)
                let v59 : int8 = 23y
                method23(v58, v59)
        | _ ->
            let v62 : uint8 = method24()
            let v63 : uint8 = method24()
            let v64 : uint8 = method24()
            let v65 : uint8 = method24()
            let v66 : uint8 = method24()
            let v67 : uint8 = method24()
            let v68 : uint8 = method24()
            let v69 : uint8 = method24()
            let v70 : uint8 = method24()
            let v71 : uint8 = method24()
            let v72 : uint8 = method24()
            let v73 : uint8 = method24()
            let v74 : uint8 = method24()
            let v75 : uint8 = method24()
            let v76 : uint8 = method24()
            let v77 : uint8 = method24()
            let v78 : uint8 = method24()
            let v79 : uint8 = method24()
            let v80 : uint8 = method24()
            let v81 : uint8 = method24()
            let v82 : uint8 = method24()
            let v83 : uint8 = method24()
            let v84 : uint8 = method24()
            let v85 : UH1 = UH1_0
            let v86 : UH1 = UH1_1(v84, v85)
            let v87 : UH1 = UH1_1(v83, v86)
            let v88 : UH1 = UH1_1(v82, v87)
            let v89 : UH1 = UH1_1(v81, v88)
            let v90 : UH1 = UH1_1(v80, v89)
            let v91 : UH1 = UH1_1(v79, v90)
            let v92 : UH1 = UH1_1(v78, v91)
            let v93 : UH1 = UH1_1(v77, v92)
            let v94 : UH1 = UH1_1(v76, v93)
            let v95 : UH1 = UH1_1(v75, v94)
            let v96 : UH1 = UH1_1(v74, v95)
            let v97 : UH1 = UH1_1(v73, v96)
            let v98 : UH1 = UH1_1(v72, v97)
            let v99 : UH1 = UH1_1(v71, v98)
            let v100 : UH1 = UH1_1(v70, v99)
            let v101 : UH1 = UH1_1(v69, v100)
            let v102 : UH1 = UH1_1(v68, v101)
            let v103 : UH1 = UH1_1(v67, v102)
            let v104 : UH1 = UH1_1(v66, v103)
            let v105 : UH1 = UH1_1(v65, v104)
            let v106 : UH1 = UH1_1(v64, v105)
            let v107 : UH1 = UH1_1(v63, v106)
            let v108 : UH1 = UH1_1(v62, v107)
            let v109 : int8 = 23y
            method23(v108, v109)
and closure145 (v0 : int64) () : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure5()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : unit = (fun () -> v2 (); v35) ()
    let struct (v50 : Mut0, v51 : Mut1, v52 : Mut2, v53 : Mut3, v54 : Mut4, v55 : int64 option) = TraceState.trace_state.Value
    let v68 : US0 = v54.l0
    let v69 : bool = v52.l0
    let v70 : bool = v69 = false
    let v73 : bool =
        if v70 then
            false
        else
            let v71 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v68
            let v72 : bool = 1 >= v71
            v72
    if v73 then
        let v74 : unit = ()
        let v75 : (unit -> unit) = closure9(v17)
        let v76 : unit = (fun () -> v75 (); v74) ()
        let v79 : unit = ()
        let v80 : unit = (fun () -> v2 (); v79) ()
        let struct (v94 : Mut0, v95 : Mut1, v96 : Mut2, v97 : Mut3, v98 : Mut4, v99 : int64 option) = TraceState.trace_state.Value
        let v112 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v113 : US3 option = None
        let _v113 = ref v113 
        let v114 : US3 option ref = _v113 
        let v115 : (US3 option -> US3 option ref) = closure10(v114)
        let v116 : unit = ()
        let v117 : (unit -> unit) = closure11(v99, v115)
        let v118 : unit = (fun () -> v117 (); v116) ()
        let v121 : US3 option = _v113.Value 
        let v132 : US3 = US3_1
        let v133 : US3 = v121 |> Option.defaultValue v132 
        let v173 : System.DateTime =
            match v133 with
            | US3_1 -> (* None *)
                let v169 : System.DateTime = System.DateTime.Now
                v169
            | US3_0(v137) -> (* Some *)
                let v138 : System.DateTime = System.DateTime.Now
                let v141 : (System.DateTime -> int64) = _.Ticks
                let v142 : int64 = v141 v138
                let v145 : int64 = v142 - v137
                let v146 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v147 : System.TimeSpan = v146 v145
                let v150 : (System.TimeSpan -> int32) = _.Hours
                let v151 : int32 = v150 v147
                let v154 : (System.TimeSpan -> int32) = _.Minutes
                let v155 : int32 = v154 v147
                let v158 : (System.TimeSpan -> int32) = _.Seconds
                let v159 : int32 = v158 v147
                let v162 : (System.TimeSpan -> int32) = _.Milliseconds
                let v163 : int32 = v162 v147
                let v166 : System.DateTime = System.DateTime (1, 1, 1, v151, v155, v159, v163)
                v166
        let v174 : string = method6()
        let v177 : (string -> string) = v173.ToString
        let v178 : string = v177 v174
        let _v112 = v178 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v181 : US3 option = None
        let _v181 = ref v181 
        let v182 : US3 option ref = _v181 
        let v183 : (US3 option -> US3 option ref) = closure10(v182)
        let v184 : unit = ()
        let v185 : (unit -> unit) = closure11(v99, v183)
        let v186 : unit = (fun () -> v185 (); v184) ()
        let v189 : US3 option = _v181.Value 
        let v200 : US3 = US3_1
        let v201 : US3 = v189 |> Option.defaultValue v200 
        let v241 : System.DateTime =
            match v201 with
            | US3_1 -> (* None *)
                let v237 : System.DateTime = System.DateTime.Now
                v237
            | US3_0(v205) -> (* Some *)
                let v206 : System.DateTime = System.DateTime.Now
                let v209 : (System.DateTime -> int64) = _.Ticks
                let v210 : int64 = v209 v206
                let v213 : int64 = v210 - v205
                let v214 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v215 : System.TimeSpan = v214 v213
                let v218 : (System.TimeSpan -> int32) = _.Hours
                let v219 : int32 = v218 v215
                let v222 : (System.TimeSpan -> int32) = _.Minutes
                let v223 : int32 = v222 v215
                let v226 : (System.TimeSpan -> int32) = _.Seconds
                let v227 : int32 = v226 v215
                let v230 : (System.TimeSpan -> int32) = _.Milliseconds
                let v231 : int32 = v230 v215
                let v234 : System.DateTime = System.DateTime (1, 1, 1, v219, v223, v227, v231)
                v234
        let v242 : string = method6()
        let v245 : (string -> string) = v241.ToString
        let v246 : string = v245 v242
        let _v112 = v246 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v249 : string = $"near_sdk::env::block_timestamp()"
        let v250 : uint64 = Fable.Core.RustInterop.emitRustExpr () v249 
        let v251 : US3 option = None
        let _v251 = ref v251 
        let v252 : US3 option ref = _v251 
        let v253 : (US3 option -> US3 option ref) = closure10(v252)
        let v254 : unit = ()
        let v255 : (unit -> unit) = closure11(v99, v253)
        let v256 : unit = (fun () -> v255 (); v254) ()
        let v259 : US3 option = _v251.Value 
        let v270 : US3 = US3_1
        let v271 : US3 = v259 |> Option.defaultValue v270 
        let v280 : uint64 =
            match v271 with
            | US3_1 -> (* None *)
                v250
            | US3_0(v275) -> (* Some *)
                let v276 : (int64 -> uint64) = uint64
                let v277 : uint64 = v276 v275
                let v278 : uint64 = v250 - v277
                v278
        let v281 : uint64 = v280 / 1000000000UL
        let v282 : uint64 = v281 % 60UL
        let v283 : uint64 = v281 / 60UL
        let v284 : uint64 = v283 % 60UL
        let v285 : uint64 = v281 / 3600UL
        let v286 : uint64 = v285 % 24UL
        let v287 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
        let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v286, v284, v282) v287 
        let v289 : string = "fable_library_rust::String_::fromString($0)"
        let v290 : string = Fable.Core.RustInterop.emitRustExpr v288 v289 
        let _v112 = v290 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v291 : US3 option = None
        let _v291 = ref v291 
        let v292 : US3 option ref = _v291 
        let v293 : (US3 option -> US3 option ref) = closure10(v292)
        let v294 : unit = ()
        let v295 : (unit -> unit) = closure11(v99, v293)
        let v296 : unit = (fun () -> v295 (); v294) ()
        let v299 : US3 option = _v291.Value 
        let v310 : US3 = US3_1
        let v311 : US3 = v299 |> Option.defaultValue v310 
        let v351 : System.DateTime =
            match v311 with
            | US3_1 -> (* None *)
                let v347 : System.DateTime = System.DateTime.Now
                v347
            | US3_0(v315) -> (* Some *)
                let v316 : System.DateTime = System.DateTime.Now
                let v319 : (System.DateTime -> int64) = _.Ticks
                let v320 : int64 = v319 v316
                let v323 : int64 = v320 - v315
                let v324 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v325 : System.TimeSpan = v324 v323
                let v328 : (System.TimeSpan -> int32) = _.Hours
                let v329 : int32 = v328 v325
                let v332 : (System.TimeSpan -> int32) = _.Minutes
                let v333 : int32 = v332 v325
                let v336 : (System.TimeSpan -> int32) = _.Seconds
                let v337 : int32 = v336 v325
                let v340 : (System.TimeSpan -> int32) = _.Milliseconds
                let v341 : int32 = v340 v325
                let v344 : System.DateTime = System.DateTime (1, 1, 1, v329, v333, v337, v341)
                v344
        let v352 : string = method7()
        let v355 : (string -> string) = v351.ToString
        let v356 : string = v355 v352
        let _v112 = v356 
        #endif
#if FABLE_COMPILER_PYTHON
        let v359 : US3 option = None
        let _v359 = ref v359 
        let v360 : US3 option ref = _v359 
        let v361 : (US3 option -> US3 option ref) = closure10(v360)
        let v362 : unit = ()
        let v363 : (unit -> unit) = closure11(v99, v361)
        let v364 : unit = (fun () -> v363 (); v362) ()
        let v367 : US3 option = _v359.Value 
        let v378 : US3 = US3_1
        let v379 : US3 = v367 |> Option.defaultValue v378 
        let v419 : System.DateTime =
            match v379 with
            | US3_1 -> (* None *)
                let v415 : System.DateTime = System.DateTime.Now
                v415
            | US3_0(v383) -> (* Some *)
                let v384 : System.DateTime = System.DateTime.Now
                let v387 : (System.DateTime -> int64) = _.Ticks
                let v388 : int64 = v387 v384
                let v391 : int64 = v388 - v383
                let v392 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v393 : System.TimeSpan = v392 v391
                let v396 : (System.TimeSpan -> int32) = _.Hours
                let v397 : int32 = v396 v393
                let v400 : (System.TimeSpan -> int32) = _.Minutes
                let v401 : int32 = v400 v393
                let v404 : (System.TimeSpan -> int32) = _.Seconds
                let v405 : int32 = v404 v393
                let v408 : (System.TimeSpan -> int32) = _.Milliseconds
                let v409 : int32 = v408 v393
                let v412 : System.DateTime = System.DateTime (1, 1, 1, v397, v401, v405, v409)
                v412
        let v420 : string = method7()
        let v423 : (string -> string) = v419.ToString
        let v424 : string = v423 v420
        let _v112 = v424 
        #endif
#else
        let v427 : US3 option = None
        let _v427 = ref v427 
        let v428 : US3 option ref = _v427 
        let v429 : (US3 option -> US3 option ref) = closure10(v428)
        let v430 : unit = ()
        let v431 : (unit -> unit) = closure11(v99, v429)
        let v432 : unit = (fun () -> v431 (); v430) ()
        let v435 : US3 option = _v427.Value 
        let v446 : US3 = US3_1
        let v447 : US3 = v435 |> Option.defaultValue v446 
        let v487 : System.DateTime =
            match v447 with
            | US3_1 -> (* None *)
                let v483 : System.DateTime = System.DateTime.Now
                v483
            | US3_0(v451) -> (* Some *)
                let v452 : System.DateTime = System.DateTime.Now
                let v455 : (System.DateTime -> int64) = _.Ticks
                let v456 : int64 = v455 v452
                let v459 : int64 = v456 - v451
                let v460 : (int64 -> System.TimeSpan) = System.TimeSpan 
                let v461 : System.TimeSpan = v460 v459
                let v464 : (System.TimeSpan -> int32) = _.Hours
                let v465 : int32 = v464 v461
                let v468 : (System.TimeSpan -> int32) = _.Minutes
                let v469 : int32 = v468 v461
                let v472 : (System.TimeSpan -> int32) = _.Seconds
                let v473 : int32 = v472 v461
                let v476 : (System.TimeSpan -> int32) = _.Milliseconds
                let v477 : int32 = v476 v461
                let v480 : System.DateTime = System.DateTime (1, 1, 1, v465, v469, v473, v477)
                v480
        let v488 : string = method7()
        let v491 : (string -> string) = v487.ToString
        let v492 : string = v491 v488
        let _v112 = v492 
        #endif
        let v495 : string = _v112 
        
        
        
        
        
        let v565 : string = "Debug"
        let v566 : (unit -> string) = v565.ToLower
        let v567 : string = v566 ()
        let v570 : string = v567.PadLeft (7, ' ')
        let v584 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v585 : string = "inline_colorization::color_bright_blue"
        let v586 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v585 
        let v587 : string = "&*$0"
        let v588 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v587 
        let v589 : string = "inline_colorization::color_reset"
        let v590 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v589 
        let v591 : string = "\"{v586}{v588}{v590}\""
        let v592 : string = @$"format!(" + v591 + ")"
        let v593 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v592 
        let v594 : string = "fable_library_rust::String_::fromString($0)"
        let v595 : string = Fable.Core.RustInterop.emitRustExpr v593 v594 
        let _v584 = v595 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v596 : string = "inline_colorization::color_bright_blue"
        let v597 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v596 
        let v598 : string = "&*$0"
        let v599 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v598 
        let v600 : string = "inline_colorization::color_reset"
        let v601 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v600 
        let v602 : string = "\"{v597}{v599}{v601}\""
        let v603 : string = @$"format!(" + v602 + ")"
        let v604 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v603 
        let v605 : string = "fable_library_rust::String_::fromString($0)"
        let v606 : string = Fable.Core.RustInterop.emitRustExpr v604 v605 
        let _v584 = v606 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v607 : string = "inline_colorization::color_bright_blue"
        let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v607 
        let v609 : string = "&*$0"
        let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v570 v609 
        let v611 : string = "inline_colorization::color_reset"
        let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
        let v613 : string = "\"{v608}{v610}{v612}\""
        let v614 : string = @$"format!(" + v613 + ")"
        let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v614 
        let v616 : string = "fable_library_rust::String_::fromString($0)"
        let v617 : string = Fable.Core.RustInterop.emitRustExpr v615 v616 
        let _v584 = v617 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v618 : string = "\u001b[94m"
        let v619 : string = method8()
        let v620 : string = v618 + v570 
        let v621 : string = v620 + v619 
        let _v584 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v622 : string = "\u001b[94m"
        let v623 : string = method8()
        let v624 : string = v622 + v570 
        let v625 : string = v624 + v623 
        let _v584 = v625 
        #endif
#else
        let v626 : string = "\u001b[94m"
        let v627 : string = method8()
        let v628 : string = v626 + v570 
        let v629 : string = v628 + v627 
        let _v584 = v629 
        #endif
        let v630 : string = _v584 
        let v636 : int64 = v94.l0
        let v637 : string = method9()
        let v638 : Mut3 = {l0 = v637} : Mut3
        let v639 : string = "{ "
        let v640 : string = $"{v639}"
        let v643 : unit = ()
        let v644 : (unit -> unit) = closure19(v638, v640)
        let v645 : unit = (fun () -> v644 (); v643) ()
        let v648 : string = "result"
        let v649 : string = $"{v648}"
        let v652 : unit = ()
        let v653 : (unit -> unit) = closure19(v638, v649)
        let v654 : unit = (fun () -> v653 (); v652) ()
        let v657 : string = " = "
        let v658 : string = $"{v657}"
        let v661 : unit = ()
        let v662 : (unit -> unit) = closure19(v638, v658)
        let v663 : unit = (fun () -> v662 (); v661) ()
        let v666 : string = $"{v0}"
        let v669 : unit = ()
        let v670 : (unit -> unit) = closure19(v638, v666)
        let v671 : unit = (fun () -> v670 (); v669) ()
        let v674 : string = " }"
        let v675 : string = $"{v674}"
        let v678 : unit = ()
        let v679 : (unit -> unit) = closure19(v638, v675)
        let v680 : unit = (fun () -> v679 (); v678) ()
        let v683 : string = v638.l0
        let v684 : string = $"dice.main"
        let v685 : bool = v684 = ""
        let v742 : string =
            if v685 then
                let v686 : string = ""
                v686
            else
                let v687 : string = $"{v495} {v630} #{v636} %s{v684} / {v683}"
                let v690 : char list = []
                let v691 : (char list -> (char [])) = List.toArray
                let v692 : (char []) = v691 v690
                let v695 : string = v687.TrimStart v692 
                let v713 : char list = []
                let v714 : char list = '/' :: v713 
                let v717 : char list = ' ' :: v714 
                let v720 : (char list -> (char [])) = List.toArray
                let v721 : (char []) = v720 v717
                let v724 : string = v695.TrimEnd v721 
                v724
        let v743 : (string -> unit) = closure12()
        let v744 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v745 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v742 v745 
        let _v744 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v746 : string = @"println!(""{}"", $0)"
        Fable.Core.RustInterop.emitRustExpr v742 v746 
        let _v744 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v747 : string = v20.l0
        let v748 : bool = v747 = ""
        let v756 : string =
            if v748 then
                v742
            else
                let v749 : bool = v742 = ""
                if v749 then
                    let v750 : string = v20.l0
                    v750
                else
                    let v751 : string = v20.l0
                    let v752 : string = "\n"
                    let v753 : string = v751 + v752 
                    let v754 : string = v753 + v742 
                    v754
        let v757 : string = "&*$0"
        let v758 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v756 v757 
        let v759 : string = $"$0.chars()"
        let v760 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v758 v759 
        let v761 : string = "v760"
        let v762 : _ = Fable.Core.RustInterop.emitRustExpr () v761 
        let v763 : string = "v762.collect::<Vec<_>>()"
        let v764 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v763 
        let v765 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
        let v766 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v764 v765 
        let v767 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
        let v768 : bool = Fable.Core.RustInterop.emitRustExpr v766 v767 
        let v769 : string = "x"
        let v770 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v769 
        let v771 : string = "String::from_iter($0)"
        let v772 : std_string_String = Fable.Core.RustInterop.emitRustExpr v770 v771 
        let v773 : string = "true; $0 }).collect::<Vec<_>>()"
        let v774 : bool = Fable.Core.RustInterop.emitRustExpr v772 v773 
        let v775 : string = "_vec_map"
        let v776 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v775 
        let v777 : string = "$0.len()"
        let v778 : unativeint = Fable.Core.RustInterop.emitRustExpr v776 v777 
        let v779 : (unativeint -> int32) = int32
        let v780 : int32 = v779 v778
        let v781 : string = ""
        let v782 : bool = v742 <> v781 
        let v786 : bool =
            if v782 then
                let v785 : bool = v780 <= 1
                v785
            else
                false
        if v786 then
            v20.l0 <- v756
            ()
        else
            v20.l0 <- v781
            let v787 : string = "true; $0.into_iter().for_each(|x| { //"
            let v788 : bool = Fable.Core.RustInterop.emitRustExpr v776 v787 
            let v789 : string = "x"
            let v790 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v789 
            let v791 : string = $"near_sdk::log!(\"{{}}\", $0)"
            Fable.Core.RustInterop.emitRustExpr v790 v791 
            let v792 : string = $"true;"
            let v793 : bool = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : string = "true; }}); { //"
            let v795 : bool = Fable.Core.RustInterop.emitRustExpr () v794 
            ()
        let _v744 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        v743 v742
        let _v744 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        v743 v742
        let _v744 = () 
        #endif
#else
        v743 v742
        let _v744 = () 
        #endif
        _v744 
        let v796 : (string -> unit) = v18.l0
        v796 v742
and closure94 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure95()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let v867 : UH1 = UH1_0
    let v868 : int8 = 0y
    let v869 : int64 = method23(v867, v868)
    let v870 : unit = ()
    let v871 : (unit -> unit) = closure145(v869)
    let v872 : unit = (fun () -> v871 (); v870) ()
    0
let v0 : (int64 -> (UH0 -> UH0)) = closure0()
let rotate_numbers x = v0 x
let v1 : (UH1 -> (unit -> uint8)) = closure3()
let create_sequential_roller x = v1 x
let v2 : ((unit -> uint8) -> (bool -> (uint64 -> uint64))) = closure21()
let roll_progressively x = v2 x
let v3 : (uint64 -> (UH1 -> uint64 option)) = closure92()
let roll_within_bounds x = v3 x
let v4 : ((string []) -> int32) = closure94()
let main args = v4 args
()
