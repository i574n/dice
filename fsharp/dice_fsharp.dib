#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!markdown

# DiceFSharp (Dice)

#!fsharp

#!import ../../polyglot/lib/fsharp/Notebooks.dib
#!import ../../polyglot/lib/fsharp/Testing.dib

#!fsharp

#!import ../../polyglot/lib/spiral/common.fsx
#!import ../../polyglot/lib/spiral/sm.fsx
#!import ../../polyglot/lib/spiral/date_time.fsx
#!import ../../polyglot/lib/spiral/file_system.fsx
#!import ../../polyglot/lib/spiral/lib.fsx
#!import ../../polyglot/lib/fsharp/Common.fs

#!fsharp

#if !INTERACTIVE
open Polyglot
open Lib
#endif

open Common

#!markdown

## sixthPowerSequence

#!fsharp

let sixthPowerSequence = 1 |> Seq.unfold (fun state -> Some (state, state * 6)) |> Seq.cache

#!fsharp

//// test

sixthPowerSequence
|> Seq.take 8
|> Seq.toList
|> _assertEqual [ 1; 6; 36; 216; 1296; 7776; 46656; 279936 ]

#!markdown

## accumulateDiceRolls

#!fsharp

let rec accumulateDiceRolls log rolls power acc =
    match rolls with
    | _ when power < 0 ->
        log |> Option.iter ((|>) $"accumulateDiceRolls / power: {power} / acc: {acc}")
        Some (acc + 1, rolls)
    | [] -> None
    | roll :: rest when roll > 1 ->
        let coeff = sixthPowerSequence |> Seq.item power
        let value = (roll - 1) * coeff
        log |> Option.iter ((|>) $"accumulateDiceRolls / \
            power: {power} / acc: {acc} / roll: {roll} / value: {value}"
        )
        accumulateDiceRolls log rest (power - 1) (acc + value)
    | roll :: rest ->
        log |> Option.iter ((|>) $"accumulateDiceRolls / power: {power} / acc: {acc} / roll: {roll}")
        accumulateDiceRolls log rest (power - 1) acc

#!fsharp

//// test

accumulateDiceRolls (Some (printfn "%s")) [ 6; 5; 4; 3; 2 ] 0 1000
|> _assertEqual (Some (1006, [ 5; 4; 3; 2 ]))

#!fsharp

//// test

accumulateDiceRolls (Some (printfn "%s")) [ 6; 5; 4; 3; 2 ] 1 1000
|> _assertEqual (Some (1035, [ 4; 3; 2 ]))

#!fsharp

//// test

accumulateDiceRolls (Some (printfn "%s")) [ 6; 5; 4; 3; 2 ] 2 1000
|> _assertEqual (Some (1208, [ 3; 2 ]))

#!markdown

## rollWithinBounds

#!fsharp

let rollWithinBounds log max rolls =
    let power = List.length rolls - 1
    match accumulateDiceRolls log rolls power 0 with
    | Some (result, _) when result >= 1 && result <= max -> Some result
    | _ -> None

#!fsharp

//// test

rollWithinBounds (Some (printfn "%s")) 2000 [ 1; 5; 4; 4; 5 ]
|> _assertEqual (Some 995)

#!fsharp

//// test

rollWithinBounds (Some (printfn "%s")) 2000 [ 2; 2; 6; 4; 5 ]
|> _assertEqual (Some 1715)

#!fsharp

//// test

rollWithinBounds (Some (printfn "%s")) 2000 [ 4; 1; 1; 2; 3 ]
|> _assertEqual None

#!markdown

## calculateDiceCount

#!fsharp

let inline calculateDiceCount log max =
    let rec loop n p =
        if p < max
        then loop (n + 1) (p * 6)
        else
            log |> Option.iter ((|>) $"calculateDiceCount / max: {max} / n: {n} / p: {p}")
            n
    if max = 1
    then 1
    else loop 0 1

#!fsharp

//// test

calculateDiceCount (Some (printfn "%s")) 36
|> _assertEqual 2

#!fsharp

//// test

calculateDiceCount (Some (printfn "%s")) 7777
|> _assertEqual 6

#!markdown

## rollDice

#!fsharp

#if FABLE_COMPILER_RUST
let rollDice () : int =
#if !WASM
    Fable.Core.RustInterop.emitRustExpr () "rand::Rng::gen_range(&mut rand::thread_rng(), 1..7)"
#else
    1
#endif
#else
let private random = System.Random ()
let rollDice () =
    random.Next (1, 7)
#endif

#!markdown

## rotateNumber

#!fsharp

let rotateNumber max n =
    (n - 1 + max) % max + 1

#!markdown

## rotateNumbers

#!fsharp

let rotateNumbers max items =
    items |> Seq.map (rotateNumber max)

#!fsharp

//// test

[ -1 .. 14 ]
|> rotateNumbers 6
|> Seq.toList
|> _assertEqual [ 5; 6; 1; 2; 3; 4; 5; 6; 1; 2; 3; 4; 5; 6; 1; 2 ]

#!markdown

## createSequentialRoller

#!fsharp

let createSequentialRoller list =
    let mutable currentIndex = 0
    fun () ->
        match list |> List.tryItem currentIndex with
        | Some item ->
            currentIndex <- currentIndex + 1
            item
        | None ->
            failwith "createSequentialRoller / End of list"

#!markdown

## rollProgressively

#!fsharp

let rollProgressively log roll reroll max =
    let power = (calculateDiceCount log max) - 1
    let rec loop rolls size =
        if size < power + 1
        then loop (roll () :: rolls) (size + 1)
        else
            match accumulateDiceRolls log rolls power 0 with
            | Some (result, _) when result <= max -> result
            | _ when reroll -> loop (List.init power (fun _ -> roll ())) power
            | _ -> loop (roll () :: rolls) (size + 1)
    loop [] 0

#!fsharp

//// test

rollProgressively None rollDice false 1
|> _assertEqual 1

#!fsharp

//// test

let sequentialRoll = createSequentialRoller [ 5; 4; 4; 5; 1 ]

rollProgressively (Some (printfn "%s")) sequentialRoll false 2000
|> _assertEqual 995

#!fsharp

//// test

let sequentialRoll = createSequentialRoller [ 5; 4; 4; 5; 2 ]

fun () -> rollProgressively (Some (printfn "%s")) sequentialRoll false 2000 |> ignore
|> _throwsC (fun ex _ ->
    Sm.format_exception ex
    |> _assertEqual "System.Exception: createSequentialRoller / End of list"
)

#!fsharp

//// ignore

rollProgressively (Some (printfn "%s")) rollDice false 2000

#!fsharp

//// ignore

rollProgressively (Some (printfn "%s")) rollDice true 2000

#!fsharp

//// ignore

[ 1 .. 10000 ]
|> List.map (fun _ -> rollProgressively None rollDice false 10)
|> List.groupBy id
|> List.map (fun (k, v) -> k, v.Length)
|> List.sortBy fst

#!fsharp

//// ignore

[ 1 .. 10000 ]
|> List.map (fun _ -> rollProgressively None rollDice true 10)
|> List.groupBy id
|> List.map (fun (k, v) -> k, v.Length)
|> List.sortBy fst

#!fsharp

//// test

[ 1 .. 100 ]
|> List.iter (fun n ->
    [ 0 .. 1 ]
    |> List.iter (fun reroll ->
        [ 1 .. 3500 ]
        |> List.map (fun _ -> rollProgressively None rollDice (reroll = 1) n)
        |> List.groupBy id
        |> List.length
        |> __assertEqual false n
    )
)

#!fsharp

//// ignore

let run () =
    let inline rollMax fn max n =
        [ 1 .. n ]
        |> List.map (fun _ -> fn max)
        |> List.groupBy id
        |> List.map (fun (_, v) -> v.Length)

    let max = 10
    let n = 30
    let even = (n / max) |> int

    let rec rollN current =
        let roll = rollMax (rollProgressively None rollDice true) max n
        if roll |> List.forall ((=) even)
        then current
        else rollN (current + 1)

    rollN 0

// run ()

#!fsharp

//// ignore

// [ 1 .. 100 ]
// |> List.map (fun i ->
//     let roll = rollN 0
//     printfn $"i: {i} / roll: {roll}"
//     roll
// )
// |> List.map float
// |> List.average

#!markdown

## main

#!fsharp

let main args =
    let result = rollProgressively (Some (printfn "%s")) rollDice true (System.Int32.MaxValue / 10)
    trace Debug (fun () -> $"main / result: {result}") getLocals
    0
