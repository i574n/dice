#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# dice_contract

#!spiral

//// package=../dice

open rust
open rust.rust_operators

#!spiral

//// test

open testing

#!markdown

## dice_contract

#!markdown

### state

#!spiral

type state =
    {
        version : u32
        seeds : near.vector u8
    }

#!spiral

//// test
///! rust -c

()

#!spiral

//// test
///! rust -c

trace Verbose (fun () => "") id

#!markdown

### new

#!spiral

inl new () : state =
    {
        version = 2
        seeds = "seeds" |> sm'.byte_slice |> near.new_vector
    }

#!spiral

//// test
///! rust -c

inl state = new ()
trace Verbose (fun () => "dice_contract") fun () => { state = state |> sm'.format_debug }
trace Verbose (fun () => "") id

#!markdown

### max_seeds

#!spiral

inl max_seeds () : unativeint =
    100i32 |> convert

#!markdown

### contribute_seed

#!spiral

inl contribute_seed (seeds : rust.ref (rust.mut' (near.vector u8))) (seed : am'.vec u8) : () =
    seeds |> near.vector_extend seed

    inl seed_excess_len = (seeds |> rust.len |> fun x => x : u32 |> i32) - (max_seeds () |> i32)

    if seed_excess_len > 0 then
        inl seed_excess : am'.vec u8 =
            !\\(seed_excess_len, $'"!seeds.drain(0..$0 as u32).collect::<Vec<_>>()"')
        trace Debug
            fun () => "dice_contract.contribute_seed"
            fun () => { seed_excess_len seed_excess = seed_excess |> sm'.format_debug }
    trace Debug (fun () => "") (join id)

#!spiral

//// test
///! rust -c

inl replicate n =
    let rec loop i acc =
        if i > n
        then acc
        else
            inl i' = i % 10
            inl i' =
                if i' = 0
                then i % limit.max
                else i'
            loop (i + 1) (i' :: acc)
    loop 1 []
    |> listm.rev
    |> listm'.box
    |> listm'.to_array'

inl max_seeds : u32 = max_seeds () |> convert
inl seeds = "" |> sm'.byte_slice |> near.new_vector |> rust.to_ref_mut

conv max_seeds * 1.2f64
|> replicate
|> am'.map_base u8
|> am'.to_vec
|> contribute_seed seeds

seeds
|> rust.len
|> _assert_eq max_seeds

#!markdown

### generate_random_number

#!spiral

inl generate_random_number
    (seeds : rust.ref (rust.mut' (near.vector u8)))
    (key : sm'.std_string)
    (proof : sm'.std_string)
    (max : u64)
    : u64
    =
    inl seed = near.random_seed ()
    inl epoch_height = near.epoch_height ()
    inl block_height = near.block_height ()
    inl block_timestamp = near.block_timestamp ()
    inl account_balance = near.account_balance ()
    inl signer_account_id = near.signer_account_id ()
    inl predecessor_account_id = near.predecessor_account_id ()
    inl entropy =
        ;[
            seed
            seeds |> rust.reref |> near.vector_to_vec
            epoch_height |> am'.to_le_bytes |> am'.to_vec'
            block_height |> am'.to_le_bytes |> am'.to_vec'
            block_timestamp |> am'.to_le_bytes |> am'.to_vec'
            account_balance |> near.as_yoctonear |> am'.to_le_bytes |> am'.to_vec'
            signer_account_id |> am'.as_bytes |> am'.to_vec''
            predecessor_account_id |> am'.as_bytes |> am'.to_vec''
            proof |> sm'.into_bytes
            key |> sm'.into_bytes
        ]
        |> am'.to_vec
        |> rust.concat
    inl hash_u8 = entropy |> near.keccak512
    hash_u8 |> contribute_seed seeds
    inl rolls_list =
        hash_u8
        |> am'.from_vec_base
        |> am'.to_list_base'
        |> listm'.unbox
        |> stream.from_list
        |> lib.dice.rotate_numbers 6
        |> stream.to_list
    trace Debug
        fun () => "dice_contract.generate_random_number"
        fun () => {
            max
            key
            proof
            block_timestamp
            block_height
            epoch_height
            account_balance = account_balance |> sm'.format_debug
            signer_account_id = signer_account_id |> sm'.to_string
            predecessor_account_id = predecessor_account_id |> sm'.to_string
            seed = seed |> sm'.format_debug
            seeds = seeds |> sm'.format_debug
            entropy_len = entropy |> am'.vec_len
            entropy = entropy |> sm'.format_debug
            hash_u8 = hash_u8 |> sm'.format_debug
            rolls = rolls_list |> listm'.box |> listm'.to_array' |> am'.to_vec |> sm'.format_debug
        }
    inl sequential_roll = rolls_list |> lib.dice.create_sequential_roller
    inl result = lib.dice.roll_progressively sequential_roll true max
    trace Debug (fun () => "") (join id)
    result

#!spiral

//// test
///! rust -cd near-token

2000
|> generate_random_number
    ("" |> sm'.byte_slice |> near.new_vector |> rust.to_ref_mut)
    ("" |> sm'.to_std_string)
    ("" |> sm'.to_std_string)
|> _assert_gt 0

#!markdown

### roll_within_bounds

#!spiral

inl roll_within_bounds (max : u64) (rolls : am'.vec u8) : optionm'.option' u64 =
    inl result =
        rolls
        |> am'.from_vec_base
        |> am'.to_list_base'
        |> listm'.unbox
        |> lib.dice.roll_within_bounds max
        |> optionm'.box
    trace Debug
        fun () => "dice_contract.roll_within_bounds"
        fun () => { max rolls = rolls |> sm'.format_debug; result = result |> sm'.format_debug }
    trace Debug (fun () => "") (join id)
    result

#!spiral

//// test
///! rust -c

inl rolls = ;[ 1; 5; 4; 4; 5 ] |> am'.to_vec

rolls
|> roll_within_bounds 2000
|> _assert_eq' (optionm'.some' 995)

#!spiral

//// test
///! rust -c

inl rolls = ;[ 2; 2; 6; 4; 5 ] |> am'.to_vec

rolls
|> roll_within_bounds 2000
|> _assert_eq' (optionm'.some' 1715)

#!markdown

### main

#!spiral

///! _

inl main () =
    !\($'"} //"') : ()

    !\($'"#[derive( //"') : ()
    !\($'"  near_sdk::PanicOnDefault, //"') : ()
    !\($'"  borsh::BorshDeserialize, //"') : ()
    !\($'"  borsh::BorshSerialize, //"') : ()
    !\($'")] //"') : ()

    !\($'"pub struct OldState { //"') : ()
    !\($'"    version: u32, //"') : ()
    !\($'"    seeds: near_sdk::store::vec::Vector<u8>, //"') : ()
    !\($'"} //"') : ()

    !\($'"#[near_sdk::near_bindgen] //"') : ()

    !\($'"#[derive( //"') : ()
    !\($'"  near_sdk::PanicOnDefault, //"') : ()
    !\($'"  borsh::BorshDeserialize, //"') : ()
    !\($'"  borsh::BorshSerialize, //"') : ()
    !\($'")] //"') : ()

    !\($'"pub struct State ( //"') : ()

    !\($'"/*"') : ()
    (null () : rust.type_emit state) |> ignore
    !\($'"*/ )"') : ()

    !\($'"impl From<OldState> for State { //"') : ()
    !\($'"    fn from(old_state: OldState) -> Self { //"') : ()
    !\($'"        Self((old_state.version + 1, old_state.seeds)) //"') : ()
    !\($'"    } //"') : ()
    !\($'"} //"') : ()

    inl new_ () =
        !\($'"#[init] //"') : ()
        !\($'"pub fn new() -> Self { // 1"') : ()

        (!\($'"true; /*"') : bool) |> ignore

        (null () : rust.type_emit ()) |> ignore

        (!\($'"true; */"') : bool) |> ignore

        inl result = new ()
        $'let _result = !result in _result |> (fun x -> Fable.Core.RustInterop.emitRustExpr x $"Self($0) // x") // 2' : ()

        !\($'"} // 2."') : ()

        !\($'"} // 1."') : ()

        2

    inl contribute_seed () =
        !\($'"pub fn contribute_seed(&mut self, seed: Vec<u8>) { //"') : ()
        inl seeds : rust.ref (rust.mut' (near.vector u8)) = !\($'$"&mut self.0.1"')
        inl seed : am'.vec u8 = !\($'$"seed"')

        seed |> contribute_seed seeds

        !\($'"} //"') : ()

        !\($'"} //"') : ()

        !\($'"} //"') : ()

        3

    inl contribute_seed_borsh () =
        !\($'"pub fn contribute_seed_borsh(&mut self, #[serializer(borsh)] seed: Vec<u8>) { //"') : ()
        !\($'"    self.contribute_seed(seed) //"') : ()
        !\($'"} //"') : ()

        1

    inl generate_random_number () =
        !\($'"pub fn generate_random_number(&mut self, key: String, proof: String, max: u64) -> u64 { //"') : ()

        inl key : sm'.std_string = !\($'$"key"')
        inl proof : sm'.std_string = !\($'$"proof"')
        inl max : u64 = !\($'$"max"')

        inl seeds : rust.ref (rust.mut' (near.vector u8)) = !\($'$"&mut self.0.1"')

        inl result = generate_random_number seeds key proof max

        !\($'"!result //"') : ()

        !\($'"} //"') : ()

        !\($'"} //"') : ()

        !\($'"} //"') : ()

        3

    inl roll_within_bounds () =
        !\($'"pub fn roll_within_bounds(&self, max: u64, rolls: Vec<u8>) -> Option<u64> { //"') : ()
        inl max : u64 = !\($'$"max"')
        inl rolls : am'.vec u8 = !\($'$"rolls"')
        inl result = roll_within_bounds max rolls

        !\\(result, $'"$0 //"') : ()

        !\($'"} //"') : ()

        !\($'"} //"') : ()

        2

    inl roll_within_bounds_borsh () =
        !\($'"#[result_serializer(borsh)] //"') : ()
        !\($'"pub fn roll_within_bounds_borsh( //"') : ()
        !\($'"    &self, //"') : ()
        !\($'"    #[serializer(borsh)] max: u64, //"') : ()
        !\($'"    #[serializer(borsh)] rolls: Vec<u8>, //"') : ()
        !\($'") -> Option<u64> { //"') : ()
        !\($'"    self.roll_within_bounds(max, rolls) //"') : ()
        !\($'"} //"') : ()

        1


    inl fns =
        [
            new_
            contribute_seed
            contribute_seed_borsh
            generate_random_number
            roll_within_bounds
            roll_within_bounds_borsh
        ]

    inl rec loop acc fns i =
        match fns with
        | [] => acc
        | x :: xs =>
            !\($'"#[near_sdk::near_bindgen] //"') : ()
            !\($'"impl State { //"') : ()
            inl n = x ()
            !\($'"} /* c"') : ()
            inl rec loop' i' =
                if i' <> 1 // <= n
                then (!\($'"true; */ // ???? / i: !i / i\': !i' / acc: !acc / n: !n"') : bool) |> ignore
                else
                    (!\($'"true; // ??? / i: !i / i\': !i' / acc: !acc / n: !n"') : bool) |> ignore
                    loop' (i' + 1)
            loop' 1u8
            loop (acc + n) xs (i + 1)
    inl n = loop 0u8 fns 1u8


    // !\($'"/* a"') : ()

    // !\($'"} // b"') : ()

    !\($'"fn _main() //"') : ()
    !\($'" //"') : ()

    inl rec loop' i' =
        if i' <= n
        then
            (!\($'"true; { (); // ?? / i\': !i' / n: !n"') : bool) |> ignore
            loop' (i' + 1)
        else
            (!\($'"true; { { (); // ? / i\': !i' / n: !n"') : bool) |> ignore
            // (!\($'"true; */ // ?? / i\': !i' / n: !n"') : bool) |> ignore
    loop' 1u8

inl main () =
    $'!main |> ignore' : ()
