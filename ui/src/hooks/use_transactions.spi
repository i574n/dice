open rust_operators
open leptos

type account_transaction =
    {
        account : string;
        i : unativeint;
        txn : heap model.near.nearblocks.txn
    }

open leptos

inl render (global_state : state.global_state) =
    print_static "<use_transactions.render>"
    leptos.log $'"use_transactions.render (1)"'

    inl accounts = leptos.create_memo fun () =>
        inl data =
            leptos.signal_get_untracked global_state.core_state .data
            |> leptos.signal_get_untracked

        data.accounts
        |> am'.vec_map from_pair
        |> am'.vec_filter fst
        |> am'.vec_map snd
        |> am'.vec_map sm'.from_std_string
        |> leptos.log_format fun log => $'"use_transactions.render (2) / accounts create_memo / result: " + string !log + ""'

    inl accounts_metadata_requests = leptos.create_memo fun () =>
        accounts
        |> leptos.signal_get
        |> am'.vec_map fun account =>
            inl request : networking.request =
                {
                    url = $'"https://api2.nearblocks.io/v1/account/" + !account + ""'
                    request_type = networking.Get
                    body = ""
                    json = false
                    auto_refresh = true
                }
            request
        |> am'.from_vec
        |> fun x => x : _ i32 _
        |> leptos.log_format fun log => $'"use_transactions.render (3) / accounts_metadata create_memo / result: " + string !log + ""'

    // inl root' :
    //     leptos.memo (am'.vec (
    //         resultm.result'
    //             (optionm'.option' model.near.nearblocks.root)
    //             sm'.std_string
    //         )
    //     )
    //     =
    //     state_core.use_requests accounts_metadata_requests model.near.nearblocks.root_unbox
    //     |> leptos.log_format fun log => $'"use_transactions.render (3.1) / root func0 / result: " + string !log + ""'


    inl accounts_txns_requests = leptos.create_memo fun () =>
        inl data =
            leptos.signal_get_untracked global_state.core_state .data
            |> leptos.signal_get_untracked

        accounts
        |> leptos.signal_get
        |> am'.vec_map fun account =>
            inl per_page = 25i32
            inl requests =
                am.init data.transactions_pages id
                |> fun (a x) => x
                |> am'.to_vec
                |> am'.vec_map fun i =>
                    inl page = i + 1
                    {
                        url = $'"https://api2.nearblocks.io/v1/account/" + !account + "/txns?&order=desc&page=" + string !page + "&per_page=" + string !per_page + ""'
                        request_type = networking.Get
                        body = ""
                        json = false
                        auto_refresh = true
                    } : networking.request
            account, requests
        |> leptos.log_format fun log => $'"use_transactions.render (4) / accounts_requests create_memo / result: " + string !log + ""'

    inl txns_requests = leptos.create_memo fun () =>
        accounts_txns_requests
        |> leptos.signal_get
        |> am'.vec_map snd
        |> am'.vec_collect id
        |> am'.from_vec
        |> leptos.log_format fun log => $'"use_transactions.render (5) / txns_requests create_memo / result: " + string !log + ""'

    inl txns_accounts = leptos.create_memo fun () =>
        accounts_txns_requests
        |> leptos.signal_get
        |> am'.vec_map fun account, x =>
            x
            |> am'.vec_map fun _ => account
        |> am'.vec_collect id
        |> am'.from_vec
        |> leptos.log_format fun log => $'"use_transactions.render (6) / urls_accounts create_memo / result: " + string !log + ""'

    inl root :
        leptos.memo (a i32 (
            resultm.result'
                (optionm'.option' model.near.nearblocks.root)
                sm'.std_string
            )
        )
        =
        state_core.use_requests txns_requests model.near.nearblocks.root_unbox
        |> leptos.log_format fun log => $'"use_transactions.render (7) / root func0 / result: " + string !log + ""'

    inl txns :
        leptos.memo (
            resultm.result'
                (optionm'.option' (array_base account_transaction))
                sm'.std_string
        )
        =
        leptos.create_memo fun () =>
            inl root =
                root
                |> leptos.signal_get
                |> fun (a x) => x
                |> am'.to_vec
                |> am'.vec_map resultm.unbox
                |> am'.vec_map (resultm.map optionm'.unbox)

            inl root_log = root |> sm'.format_ellipsis
            leptos.log $'"transactions.render (8) / txns move / root: " + string !root_log + ""'

            inl loading =
                root
                |> am'.vec_filter function
                    | Ok (None) => true
                    | _ => false
                |> am'.from_vec
                |> fun x => length x = length (root |> am'.from_vec : _ i32 _)

            if loading
            then Ok None
            else
                inl urls_accounts = txns_accounts |> leptos.signal_get

                root
                |> am'.vec_mapi fun (i : i32) x =>
                    inl account = index urls_accounts i
                    x
                    |> resultm.map fun result =>
                        result
                        |> optionm.map fun result =>
                            (a result.txns : _ i32 _)
                            |> am'.enumerate
                            |> fun (a x) => x
                            |> am'.to_vec
                            |> am'.vec_map fun i', x' => { account i = i'; txn = heap x' }
                |> am'.vec_map (resultm.map optionm'.box)
                |> am'.vec_map resultm.box
                |> am'.vec_collect_option
                |> resultm.map (am'.vec_sort_by_key fun { txn } => txn.block_timestamp)
                |> resultm.map (am'.vec_reverse >> am'.from_vec)
                |> resultm.map fun (a x : _ i32 _) => x |> Some
            |> resultm.map optionm'.box
            |> resultm.box
            |> leptos.log_format fun log => $'"use_transactions.render (9) / txns create_memo / result: " + string !log + " / loading: " + string !loading + ""'

    inl rpc_requests :
        leptos.memo (
            resultm.result'
                (optionm'.option' (array_base networking.request))
                sm'.std_string
            )
        =
        leptos.create_memo fun () =>
            txns
            |> leptos.signal_get
            |> resultm.unbox
            |> resultm.map optionm'.unbox
            |> function
                | Ok (Some txns) =>
                    txns
                    |> am'.to_vec
                    |> am'.vec_map fun { txn } =>
                        {
                            jsonrpc = "2.0" |> sm'.to_std_string
                            id = "dontcare" |> sm'.to_std_string
                            method = "EXPERIMENTAL_tx_status" |> sm'.to_std_string
                            params = ;[
                                txn.transaction_hash
                                "bowen" |> sm'.to_std_string
                            ]
                        }
                        |> model.near.rpc.rpc_input_box
                        |> sm'.serialize
                        |> resultm.map_error' sm'.format'
                        |> resultm.map' sm'.from_std_string
                        |> resultm.map' fun body =>
                            ({
                                url = "https://rpc.mainnet.near.org"
                                request_type = networking.Post
                                body
                                json = true
                                auto_refresh = false
                            } : networking.request)
                    |> am'.vec_collect_into
                    |> resultm.try'
                    |> am'.from_vec
                    |> fun (a x : _ i32 _) => x
                    |> Some
                    |> Ok
                | Error error => Error error
                | _ => Ok None
                |> resultm.map optionm'.box
                |> resultm.box
            |> leptos.log_format fun log => $'"use_transactions.render (10) / rpc_requests create_memo / result: " + string !log + ""'

    inl rpc_requests' = leptos.create_memo fun () =>
        rpc_requests
        |> leptos.signal_get
        |> resultm.unbox
        |> resultm.map optionm'.unbox
        |> function
            | Ok (Some x) => x
            | _ => ;[]
        |> a
        |> fun x => x : _ i32 _
        |> leptos.log_format fun log => $'"use_transactions.render (11) / rpc_requests\' create_memo / result: " + string !log + ""'

    inl rpc_responses :
        leptos.memo (a i32 (
            resultm.result'
                (optionm'.option' model.near.rpc.rpc_response)
                sm'.std_string
            )
        )
        =
        state_core.use_requests rpc_requests' model.near.rpc.rpc_response_unbox
        |> leptos.log_format fun log => $'"use_transactions.render (12) / rpc_response func0 / result: " + string !log + ""'
    
    { accounts_txns_requests txns rpc_requests rpc_responses }
