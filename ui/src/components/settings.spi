open rust_operators

inl global_state_log_render () : _ leptos.pre =
    leptos.log $'"settings.global_state_log_render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap

    inl global_state_json = leptos.create_memo fun () =>
        leptos.log $'"settings.global_state_log_render () / global_state_json memo"'

        inl global_state = join global_state
        inl json : resultm.result' rust.std_string rust.std_string =
            !\($'"serde_json::to_string_pretty(&!global_state).map_err(|x| x.to_string())"')
        match json |> resultm.unbox with
        | Ok json => json |> sm'.from_std_string
        | Error error => $'"Error: " + string !error + ""'

    global_state_json |> leptos.memo_get |> leptos.text_block_pre ""

union button_type =
    | Add
    | Delete

inl button_type index accounts_count =
    if index + 1 = accounts_count
    then Add
    else Delete

inl render () =
    print_static "<settings.render>"
    leptos.log $'"settings.render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap
    
    inl accounts =
        leptos.create_memo fun () =>
            leptos.signal_get_untracked global_state.core_state .data
            |> leptos.signal_get
            |> fun data =>
                data.accounts
                |> am'.vec_mapi fun (i : i32) account =>
                    new_pair i (new_pair (new_raw_guid () |> sm'.format') account)

    inl accounts_count =
        leptos.create_memo fun () =>
            accounts
            |> leptos.memo_get
            |> am'.from_vec
            |> length : i32
    
    inl button index guid =
        inl on_click () =
            leptos.signal_get_untracked global_state.core_state .data
            |> leptos.signal_update fun data =>
                inl data = !data
                heap { data with
                    accounts =
                        accounts
                        |> leptos.memo_get
                        // |> am'.from_vec
                        // |> am'.map_vec snd
                        |> fun accounts =>
                            // inl x' = x |> rust.to_mut
                            // rust.emit_expr () $"\"let mut !x = !x\""
                            inl accounts_count = accounts |> am'.from_vec |> length
                            match accounts_count |> button_type index with
                            | Delete =>
                                accounts
                                // |> am'.vec_retain (from_pair >> fun i', _ => i' <> index)
                                // |> am'.vec_retain (from_pair >> function i', _ when i' <> index => true | _ => false)
                                |> am'.vec_retain (fun x => x |> from_pair |> fun i, _ => i = index |> join fun x => x |> not)
                            | Add =>
                                accounts
                                |> am'.vec_push (new_pair accounts_count (new_pair (new_raw_guid () |> sm'.format') ("" |> sm'.to_std_string)))
                            // |> am'.map_vec fun x => x
                        // |> fun (a x : _ i32 _) => x
                        // |> am'.to_vec
                        // |> am'.vec_map from_pair
                        |> am'.vec_map (from_pair >> snd >> from_pair >> snd)
                }
        inl on_click = join on_click
        !\($'"let on_click = !on_click"')

        inl class () =
            if true
            then ##""
            else ##" bg-gray-100"

        // if accounts_count |> leptos.memo_get |> (=) (i + 1)
        // then add_button ()
        // else delete_button ()

        inl aria_label () =
            match accounts_count |> leptos.memo_get |> button_type index with
            | Delete => ##"Delete"
            | Add => ##"Add"
        inl aria_label = join aria_label
        !\($'"let aria_label = !aria_label"')

        leptos.icon_button
            match accounts_count |> leptos.memo_get |> button_type index with
            | Delete => leptos.cross_svg ()
            | Add => leptos.plus_svg ()
            class
            [
                $'"on:click=move |_| on_click()"'
                $'"aria-label=move || aria_label()"'
            ]

    ;[
        leptos.accordion "Accounts" true None fun () =>
            leptos.for
                accounts
                fun pair => pair |> from_pair |> snd |> from_pair |> fst
                fun pair =>
                    inl i, pair = pair |> from_pair
                    inl guid, account = pair |> from_pair
                    leptos.div [
                        $'"class=\\\"pl-[10px] py-[6px] [display:flex] [align-items:center]\\\""'
                    ] fun () =>
                        :>(;[
                            leptos.input' None [
                            ] 
                                fun () => account // |> leptos.signal_get
                                // fun value => () // account |> leptos.signal_set value
                                // fun value =>
                                //     leptos.signal_get_untracked global_state.core_state .data
                                //     |> leptos.signal_get_untracked
                                //     |> fun data => data.accounts
                                //     |> am'.from_vec
                                //     |> fun x => x : _ i32 _
                                //     |> am.iteri fun i' account' =>
                                //                 // if $"!i' = !i"
                                //                 if i' = i
                                //                 then account' |> leptos.signal_set value

                                fun value =>
                                    inl data =
                                        leptos.signal_get_untracked global_state.core_state .data
                                        |> leptos.signal_get_untracked
                                        |> fun data => !data

                                    leptos.signal_get_untracked global_state.core_state .data
                                    |> leptos.signal_set (heap { data with
                                        accounts =
                                            data.accounts
                                            // |> am'.from_vec
                                            // |> am.mapi fun i' account' =>
                                            |> am'.vec_mapi fun i' account' =>
                                                // if $"!i' = !i"
                                                if i' = i
                                                then value
                                                else account'
                                            // |> fun (a x : _ i32 _) => x
                                            // |> am'.to_vec
                                    })
                            |> leptos.element_to_view

                            button i guid
                            |> leptos.element_to_view
                        ])
                    |> leptos.element_to_fragment
            |> leptos.view_to_fragment

            // accounts_signals
            // |> rust.func0_get
            // |> fun accounts =>
            //     accounts
            //     |> am.mapi fun i (account, set_account) =>
            //         leptos.div [
            //             $'"class=\\\"[display:flex] [align-items:center]\\\""'
            //         ] fun () =>
            //             :>(;[
            //                 leptos.input' None [
            //                 ] 
            //                     fun () => account |> leptos.signal_get
            //                     fun value => set_account |> leptos.signal_set value
            //                 |> leptos.element_to_view

            //                 add_button i
            //                 |> leptos.element_to_view
            //             ])
            //         |> leptos.element_to_view
            //     |> fun (a x) => x |> leptos.views_to_fragment
            // |> fun x => :>x
        |> leptos.element_to_view

        leptos.accordion "View" true None fun () =>
            :>(;[
                leptos.grid_pair
                    { padding = None; cols = None; class = $'"items-center"' }
                    fun () => "Dark Mode" |> leptos.text_fragment
                    fun () =>
                        leptos.toggle
                            "dark-mode"
                            fun () =>
                                leptos.signal_get_untracked global_state.core_state .dark_mode
                                |> leptos.signal_get
                            fun _ =>
                                leptos.signal_get_untracked global_state.core_state .dark_mode
                                |> leptos.signal_update not
                            |> leptos.element_to_fragment

                leptos.grid_pair
                    { padding = None; cols = None; class = $'"items-center"' }
                    fun () => "Debug" |> leptos.text_fragment
                    fun () =>
                        leptos.toggle
                            "debug"
                            fun () =>
                                leptos.signal_get_untracked global_state.core_state .debug
                                |> leptos.signal_get
                            fun _ =>
                                leptos.signal_get_untracked global_state.core_state .debug
                                |> leptos.signal_update not
                            |> leptos.element_to_fragment
            ])
        |> leptos.element_to_view

        if leptos.signal_get_untracked global_state.core_state .debug |> leptos.signal_get then
            leptos.accordion "Debug" true None fun () =>
                leptos.grid_pair
                    { padding = None; cols = None; class = "" }
                    fun () => "Global State" |> leptos.text_fragment
                    fun () => global_state_log_render () |> leptos.element_to_fragment
                |> leptos.element_to_fragment
            |> leptos.element_to_view
        else ;[] |> leptos.views_to_view
    ]
    |> leptos.view_array_to_fragment
