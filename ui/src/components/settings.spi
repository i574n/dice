open rust_operators

inl global_state_log_render () : _ leptos.pre =
    leptos.log $'"settings.global_state_log_render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap

    inl global_state_json = leptos.create_memo fun () =>
        leptos.log $'"settings.global_state_log_render () / global_state_json memo"'

        inl global_state = join global_state
        inl json : resultm.result' rust.std_string rust.std_string =
            !\($'"serde_json::to_string_pretty(&!global_state).map_err(|x| x.to_string())"')
        match json |> resultm.unbox with
        | Ok json => json |> sm'.from_std_string
        | Error error => $'"Error: " + string !error + ""'

    leptos.pre [
        $'"class=\\\"[padding:7px] [font-size:11px] [line-height:11px]\\\""'
    ] fun () =>
        global_state_json |> leptos.memo_get |> leptos.text_fragment

inl render () =
    print_static "<settings.render>"
    leptos.log $'"settings.render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap

    ;[
        leptos.accordion "View" true None fun () =>
            :>(;[
                leptos.grid_pair
                    { padding = None; cols = None; class = $'"items-center"' }
                    fun () => "Dark Mode" |> leptos.text_fragment
                    fun () =>
                        leptos.toggle
                            "dark-mode"
                            fun () =>
                                leptos.signal_get_untracked global_state.core_state .dark_mode
                                |> leptos.signal_get
                            fun _ =>
                                leptos.signal_get_untracked global_state.core_state .dark_mode
                                |> leptos.signal_update not
                            |> leptos.element_to_fragment

                leptos.grid_pair
                    { padding = None; cols = None; class = $'"items-center"' }
                    fun () => "Debug" |> leptos.text_fragment
                    fun () =>
                        leptos.toggle
                            "debug"
                            fun () =>
                                leptos.signal_get_untracked global_state.core_state .debug
                                |> leptos.signal_get
                            fun _ =>
                                leptos.signal_get_untracked global_state.core_state .debug
                                |> leptos.signal_update not
                            |> leptos.element_to_fragment
            ])
        |> leptos.element_to_view

        // leptos.accordion "Connection" true fun () =>
        //     leptos.grid_pair
        //         { padding = None; cols = None; class = $'"items-baseline"' }
        //         fun () => "Explorer Backend Host" |> leptos.text_fragment
        //         fun () =>
        //             leptos.input
        //                 fun () =>
        //                     leptos.signal_get_untracked global_state.state .explorer_backend_host
        //                     |> leptos.read_only
        //                     |> leptos.signal_get

        //                 fun value =>
        //                     value
        //                     |> leptos.signal_set (
        //                         leptos.signal_get_untracked global_state.state .explorer_backend_host
        //                         |> leptos.write_only
        //                     )
        //                 |> leptos.element_to_fragment
        //     |> leptos.element_to_fragment
        // |> leptos.element_to_view

        if leptos.signal_get_untracked global_state.core_state .debug |> leptos.signal_get then
            leptos.accordion "Debug" true None fun () =>
                leptos.grid_pair
                    { padding = None; cols = None; class = "" }
                    fun () => "Global State" |> leptos.text_fragment
                    fun () => global_state_log_render () |> leptos.element_to_fragment
                |> leptos.element_to_fragment
            |> leptos.element_to_view
        else ;[] |> leptos.views_to_view
    ]
