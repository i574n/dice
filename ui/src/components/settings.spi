open rust_operators

inl global_state_log_render () : _ leptos.pre =
    leptos.log $'"settings.global_state_log_render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap

    inl global_state_json = leptos.create_memo fun () =>
        leptos.log $'"settings.global_state_log_render () / global_state_json memo"'

        inl global_state = join global_state
        inl json : resultm.result' rust.std_string rust.std_string =
            !\($'"serde_json::to_string_pretty(&!global_state).map_err(|x| x.to_string())"')
        match json |> resultm.unbox with
        | Ok json => json |> sm'.from_std_string
        | Error error => $'"Error: " + string !error + ""'

    global_state_json |> leptos.memo_get |> leptos.text_block_pre ""

inl render () =
    print_static "<settings.render>"
    leptos.log $'"settings.render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap
    
    inl accounts =
        leptos.create_memo fun () =>
            leptos.signal_get_untracked global_state.core_state .data
            |> leptos.signal_get
            |> fun data =>
                data.accounts
                |> am'.vec_mapi fun (i : i32) account =>
                    new_pair
                        i
                        (leptos.create_signal account)
    
    inl edit_count, set_edit_count = leptos.create_signal 0i32

    inl accounts_data =
        leptos.create_memo fun () =>
            inl edit_count = edit_count |> leptos.signal_get
            accounts
            |> leptos.memo_get
            |> am'.vec_map from_pair
            |> am'.vec_map fun i, x =>
                (edit_count, i), x |> fst
    
    inl accounts_count =
        leptos.create_memo fun () =>
            accounts_data |> leptos.memo_get |> am'.from_vec |> length : i32

    inl delete_button index guid =
        inl on_click () =
            rust.move fun () =>
                leptos.signal_get_untracked global_state.core_state .data
                |> leptos.signal_update fun data =>
                    inl data = !data
                    inl accounts = accounts |> leptos.memo_get
                    heap { data with
                        accounts =
                            accounts
                            |> am'.vec_retain (from_pair >> fun i, _ => i = index |> join fun x => x |> not)
                            |> am'.vec_map (from_pair >> snd >> fst >> leptos.signal_get)
                    }
                
                set_edit_count |> leptos.signal_update ((+) 1)
            |> leptos.batch
        inl on_click = join on_click
        !\($'"let on_click = !on_click"')

        leptos.icon_button
            (leptos.cross_svg ())
            fun () => ##""
            [
                $'"on:click=move |_| on_click()"'
                $'"aria-label=\\\"Delete\\\""'
            ]

    inl add_button () =
        inl on_click () =
            rust.move fun () =>
                leptos.signal_get_untracked global_state.core_state .data
                |> leptos.signal_update fun data =>
                    inl data = !data
                    inl accounts = accounts |> leptos.memo_get
                    inl accounts_count = accounts |> am'.from_vec |> length
                    heap { data with
                        accounts =
                            accounts
                            |> am'.vec_push (
                                new_pair
                                    accounts_count
                                    ("" |> sm'.to_std_string |> leptos.create_signal)
                            )
                            |> am'.vec_map (from_pair >> snd >> fst >> leptos.signal_get)
                    }

                set_edit_count |> leptos.signal_update ((+) 1)
            |> leptos.batch
        inl on_click = join on_click
        !\($'"let on_click = !on_click"')

        leptos.icon_button
            (leptos.plus_svg ())
            fun () => ##" bg-gray-100"
            [
                $'"on:click=move |_| on_click()"'
                $'"aria-label=\\\"Add\\\""'
            ]

    ;[
        leptos.accordion "Accounts" true (Some (add_button () |> leptos.element_to_view)) fun () =>
            leptos.for
                accounts_data
                fun pair =>
                    inl i, _ = pair
                    i
                fun pair =>
                    inl (_, i), account = pair
                    leptos.div [
                        $'"class=\\\"pl-[10px] py-[7px] pr-[4px] [display:flex] [align-items:center]\\\""'
                    ] fun () =>
                        :>(;[
                            leptos.input' None [
                            ]
                                fun () =>
                                    account |> leptos.signal_get

                                fun value =>
                                    inl data =
                                        leptos.signal_get_untracked global_state.core_state .data
                                        |> leptos.signal_get_untracked
                                        |> fun data => !data

                                    leptos.signal_get_untracked global_state.core_state .data
                                    |> leptos.signal_set (heap { data with
                                        accounts =
                                            data.accounts
                                            |> am'.vec_mapi fun i' account' =>
                                                if i' = i
                                                then value
                                                else account'
                                    })
                            |> leptos.element_to_view

                            if (accounts_count |> leptos.memo_get) = 1i32
                            then ;[] |> leptos.views_to_view
                            else delete_button i guid |> leptos.element_to_view
                        ])
                    |> leptos.element_to_fragment
            |> leptos.view_to_fragment
        |> leptos.element_to_view

        leptos.accordion "View" true None fun () =>
            :>(;[
                leptos.grid_pair
                    { padding = None; cols = None; class = $'"items-center"' }
                    fun () => "Dark Mode" |> leptos.text_fragment
                    fun () =>
                        leptos.toggle
                            "dark-mode"
                            fun () =>
                                leptos.signal_get_untracked global_state.core_state .dark_mode
                                |> leptos.signal_get
                            fun _ =>
                                leptos.signal_get_untracked global_state.core_state .dark_mode
                                |> leptos.signal_update not
                            |> leptos.element_to_fragment

                leptos.grid_pair
                    { padding = None; cols = None; class = $'"items-center"' }
                    fun () => "Debug" |> leptos.text_fragment
                    fun () =>
                        leptos.toggle
                            "debug"
                            fun () =>
                                leptos.signal_get_untracked global_state.core_state .debug
                                |> leptos.signal_get
                            fun _ =>
                                leptos.signal_get_untracked global_state.core_state .debug
                                |> leptos.signal_update not
                            |> leptos.element_to_fragment
            ])
        |> leptos.element_to_view

        if leptos.signal_get_untracked global_state.core_state .debug |> leptos.signal_get then
            leptos.accordion "Debug" true None fun () =>
                leptos.grid_pair
                    { padding = None; cols = None; class = "" }
                    fun () => "Global State" |> leptos.text_fragment
                    fun () => global_state_log_render () |> leptos.element_to_fragment
                |> leptos.element_to_fragment
            |> leptos.element_to_view
        else ;[] |> leptos.views_to_view
    ]
    |> leptos.view_array_to_fragment
