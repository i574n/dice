open rust_operators

inl render () =
    print_static "<dice.render>"
    leptos.log $'"dice.render (1)"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap
    
    inl { accounts_requests txns } = hooks.use_transactions.render global_state

    inl roll_action = leptos.create_action fun (value : heap i32) =>
        inl value_log = value |> sm'.format_debug
        leptos.log $'"dice.render (2) / set_max_action / value: " + string !value_log + ""'
        fun () =>
            inl url = "https://rpc.mainnet.near.org"
            
            inl body =
                {
                    jsonrpc = "2.0" |> sm'.to_std_string
                    id = "dontcare" |> sm'.to_std_string
                    method = "EXPERIMENTAL_tx_status" |> sm'.to_std_string
                    params = ;[
                        "9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS" |> sm'.to_std_string
                        "bowen" |> sm'.to_std_string
                    ]
                }
                |> model.near.rpc.rpc_input_box
            
            inl result =
                url
                |> networking.new_request_post
                |> networking.request_json body
                |> networking.request_send
                |> async.await
                |> resultm.map_error' sm'.format'
                |> resultm.try'
                |> networking.response_text
                |> async.await
                |> resultm.map_error' sm'.format'
                |> resultm.try'
                |> Some
                |> Ok
                |> resultm.box : _ _ rust.std_string

            inl result_log = result |> sm'.format_debug |> sm'.ellipsis 200i32
            leptos.log $'"dice.render (3) / roll_action / result: " + string !result_log + ""'

            inl result' =
                match result |> resultm.unbox with
                | Ok (Some value) =>
                    value
                    |> sm'.from_std_string
                    |> sm'.deserialize
                    |> resultm.unbox
                    |> resultm.map model.near.rpc.rpc_response_unbox
                    |> resultm.map Some
                | _ => Ok None
                |> resultm.box

            inl result_log = result' |> sm'.format_debug |> sm'.ellipsis 200i32
            leptos.log $'"dice.render (4) / roll_action / result: " + string !result_log + ""'

            result'
        |> async.future_init 5 1

    inl roll = leptos.create_memo fun () =>
        inl roll =
            roll_action
            |> leptos.action_value
            |> leptos.signal_get
            |> optionm'.map resultm.unbox
            |> optionm'.unbox
            |> resultm.flatten_option
            |> resultm.map optionm'.box
            |> resultm.box

        inl roll_log = roll |> sm'.format_debug |> sm'.ellipsis 200i32
        leptos.log $'"dice.render (5) / transactions memo / roll: " + string !roll_log + ""'
        roll
    
    inl error_message = leptos.create_memo fun () =>
        inl error_message : _ string =
            match roll |> leptos.memo_get |> resultm.unbox |> resultm.map optionm'.unbox with
            | Ok (Some { error }) =>
                match error |> optionm'.unbox with
                | Some { cause = { name = cause_name } data name message } =>
                    Some $'string !name + ": " + string !message + " - " + string !data + " (" + string !cause_name + ")"'
                | _ => None
            | _ => None
            |> optionm'.box

        inl message_log = error_message |> sm'.format_debug |> sm'.ellipsis 200i32
        leptos.log $'"dice.render (6) / error_message memo / error_message: " + string !message_log + ""'
        error_message

    ;[
        leptos.accordion "Roll" true None fun () =>
            :>(;[
                leptos.div [
                    $'"class=\\\"p-[10px] flex [flex-direction:column] gap-[8px]\\\""'
                ] fun () =>
                    :>(;[
                        leptos.div [
                            $'"class=\\\"flex [flex-direction:column] [align-items:flex-start]\\\""'
                        ] fun () =>
                            :>(;[
                                "Max" |> leptos.text_view

                                leptos.text_input None [
                                
                                ]
                                    fun () =>
                                        leptos.signal_get_untracked global_state.core_state .data
                                        |> leptos.signal_get_untracked
                                        |> fun x => x.max

                                    fun value =>
                                        inl data =
                                            leptos.signal_get_untracked global_state.core_state .data
                                            |> leptos.signal_get_untracked
                                            |> fun data => !data

                                        leptos.signal_get_untracked global_state.core_state .data
                                        |> leptos.signal_set (heap { data with
                                            max =
                                                match $"!value |> string" with
                                                | "" => 1
                                                | x => $"!x |> int32"
                                        })
                                |> leptos.element_to_view
                            ])
                        
                        leptos.div [
                            $'"class=\\\"flex\\\""'
                        ] fun () =>
                            :>(;[
                                loading_button.render
                                    "Roll"
                                    fun () =>
                                        roll_action
                                        |> leptos.action_pending
                                        |> leptos.signal_get
                                    fun () =>
                                        inl max =
                                            leptos.signal_get_untracked global_state.core_state .data
                                            |> leptos.signal_get_untracked
                                            |> fun x => heap x.max

                                        roll_action |> leptos.action_dispatch max
                                |> leptos.element_to_view

                                match error_message |> leptos.memo_get |> optionm'.unbox with
                                | Some error_message =>
                                    error_message
                                    |> error_label.render
                                    |> leptos.element_to_view
                                | _ => ;[] |> leptos.views_to_view
                            ])
                    ])
            ])
        |> leptos.element_to_view

        leptos.accordion "History" true None fun () =>
            :>(;[
                match accounts_requests |> leptos.memo_get with
                | a ;[] =>
                    "No account selected"
                    |> error_label.render
                    |> leptos.element_to_view
                | _ =>
                    txns
                    |> leptos.memo_get
                    |> resultm.unbox
                    |> resultm.map optionm'.unbox
                    |> function
                        | Ok (Some transactions) =>
                            inl transactions =
                                a transactions
                                |> am'.filter_vec function
                                    | { account txn } =>
                                        inl is_call =
                                            a txn.actions
                                            |> am'.map_vec fun transaction =>
                                                {
                                                    action =
                                                        transaction.action
                                                        |> sm'.from_std_string
                                                    method =
                                                        transaction.method
                                                        |> optionm'.unbox
                                                        |> optionm.map sm'.from_std_string
                                                }
                                            |> am'.filter_vec fun transaction =>
                                                {
                                                    action = "FUNCTION_CALL"
                                                    method = Some "generate_random_number"
                                                } = transaction
                                            |> fun (x : _ i32 _) => length x > 0
                                        inl is_receiver =
                                            account = (txn.receiver_account_id |> sm'.from_std_string)
                                        is_call && is_receiver
                                    | _ => false
                                |> fun (a x : _ i32 _) => x

                            table.render
                                (
                                    leptos.tr [

                                    ] fun () =>
                                        :>(;[
                                            leptos.th [
                                                $'"class=\\\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\\\""'
                                            ] fun () =>
                                                "Block Timestamp" |> leptos.text_fragment
                                            |> leptos.element_to_view

                                            leptos.th [
                                                $'"class=\\\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\\\""'
                                            ] fun () =>
                                                "Predecessor" |> leptos.text_fragment
                                            |> leptos.element_to_view

                                            leptos.th [
                                                $'"class=\\\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\\\""'
                                            ] fun () =>
                                                "Receiver" |> leptos.text_fragment
                                            |> leptos.element_to_view

                                            leptos.th [
                                                $'"class=\\\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\\\""'
                                            ] fun () =>
                                                "Fee" |> leptos.text_fragment
                                            |> leptos.element_to_view

                                            leptos.th [
                                                $'"class=\\\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\\\""'
                                            ] fun () =>
                                                "Result" |> leptos.text_fragment
                                            |> leptos.element_to_view

                                            leptos.th [
                                                $'"class=\\\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\\\""'
                                            ] fun () =>
                                                "Outcome Status" |> leptos.text_fragment
                                            |> leptos.element_to_view
                                        ])
                                    |> leptos.element_to_fragment
                                )
                                (
                                    a transactions
                                    |> am'.map_vec fun { txn } =>
                                        leptos.tr [
                                            $'"class=\\\"odd:bg-gray-50 dark:odd:bg-gray-800/50\\\""'
                                        ] fun () =>
                                            :>(;[
                                                leptos.td [
                                                    $'"class=\\\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\\\""'
                                                ] fun () =>
                                                    txn.block_timestamp
                                                    |> date_time.format_timestamp
                                                    |> to_string
                                                    |> leptos.text_fragment
                                                |> leptos.element_to_view

                                                leptos.td [
                                                    $'"class=\\\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\\\""'
                                                ] fun () =>
                                                    txn.predecessor_account_id
                                                    |> to_string
                                                    |> leptos.text_fragment
                                                |> leptos.element_to_view

                                                leptos.td [
                                                    $'"class=\\\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\\\""'
                                                ] fun () =>
                                                    txn.receiver_account_id
                                                    |> to_string
                                                    |> leptos.text_fragment
                                                |> leptos.element_to_view

                                                leptos.td [
                                                    $'"class=\\\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\\\""'
                                                ] fun () =>
                                                    txn.outcomes_agg.transaction_fee
                                                    |> sm'.obj_to_string
                                                    |> leptos.text_fragment
                                                |> leptos.element_to_view

                                                leptos.td [
                                                    $'"class=\\\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\\\""'
                                                ] fun () =>
                                                    match txn.logs with
                                                    | ;[] => "" |> leptos.text_fragment
                                                    | _ =>
                                                        (a txn.logs : _ i32 _)
                                                        |> am'.map_vec sm'.from_std_string
                                                        |> fun x =>
                                                            (x, None)
                                                            ||> am.foldBack fun x acc =>
                                                                inl logs = x |> sm'.split " / result: "
                                                                match acc, logs with
                                                                | None, ;[ _; result ] => Some result
                                                                | _ => acc
                                                        |> optionm'.default_value "?"
                                                        |> leptos.text_fragment
                                                |> leptos.element_to_view

                                                leptos.td [
                                                    $'"class=\\\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\\\""'
                                                ] fun () =>
                                                    txn.outcomes.status
                                                    |> sm'.obj_to_string
                                                    |> leptos.text_fragment
                                                |> leptos.element_to_view
                                            ])
                                        |> leptos.element_to_view
                                    |> fun (a x : _ i32 _) => x
                                    |> leptos.view_array_to_fragment
                                )
                                |> leptos.element_to_view
                        | Error error =>
                            error
                            |> sm'.from_std_string
                            |> error_label.render
                            |> leptos.element_to_view
                        | _ =>
                            loading_panel.render ()
                            |> leptos.element_to_view
            ])
        |> leptos.element_to_view
    ]
    |> leptos.view_array_to_fragment
