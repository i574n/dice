open rust.rust_operators
open sm'_operators
open leptos

inl render () : _ leptos.div =
    print_static "<content.render>"
    leptos.log $'"content.render ()"'

    inl location = leptos.use_location ()
    inl navigate = leptos.use_navigate ()
    inl url = leptos.use_url ()
    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap
    inl (tab, set_tab) = menu_tabs.Blank |> leptos.create_signal

    inl (loaded, set_loaded) = false |> leptos.create_signal

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get

        inl hash = location |> leptos.location_hash |> leptos.signal_get
        let url = url |> leptos.signal_get
        inl new_url_hash : string = $'$"{!url}{!hash}"'
        leptos.log $'"content.render () / effect 1 / new_url_hash: " + !new_url_hash + " / loaded: " + string !loaded + ""'

        if not loaded then
            inl hash = join hash
            if !\($'"!hash == \\\"\\\""') then
                inl url_hash =
                    leptos.signal_get_untracked global_state.core_state .url_hash
                    |> leptos.signal_get
                    |> sm'.from_std_string

                leptos.log $'"content.render () / effect 1 / url_hash: " + !url_hash + ""'

                if url_hash |> sm'.contains "#" then
                    navigate url_hash

            set_loaded |> leptos.signal_set true
        else
            leptos.signal_get_untracked global_state.core_state .url_hash
            |> leptos.signal_set (new_url_hash |> sm'.to_std_string)

    leptos.create_effect fun () =>
        inl hash = location |> leptos.location_hash |> leptos.signal_get
        inl hash = hash |> sm'.strip_prefix '#' |> optionm'.unwrap_or #""
        inl hash_url = hash |> leptos.url_try_from |> resultm.unbox

        inl hash_url_log = hash_url |> sm'.format_pretty'
        leptos.log $'"content.render () / effect 2 / hash_url: " + string !hash_url_log + ""'

        match hash_url with
        | Ok hash_url =>
            inl tab : menu_tabs.menu_tab =
                inl tabs = menu_tabs.tabs () |> a
                tabs
                |> fun x => x : _ i32 _
                |> am.fold
                    fun acc tab' =>
                        match acc with
                        | Some acc => Some acc
                        | None =>
                            inl id = tab' |> menu_tabs.menu_tab_id
                            if hash_url
                                |> leptos.url_pathname
                                |> sm'.from_std_string
                                |> sm'.starts_with $'"/" + !id + ""'
                            then Some tab'
                            else None
                    None
                |> optionm'.default_value (index tabs 0)

            inl tab_log = tab |> sm'.format_pretty'
            leptos.log $'"content.render () / effect 2 / new_tab: " + string !tab_log + ""'

            set_tab |> leptos.signal_set tab
        | Error error =>
            leptos.log $'"content.render () / effect 2 / hash_url error: " + string !error + ""'

    leptos.div [
        $'"class=\\\"flex flex-1 max-[100px]:[overflow-x:auto]\\\""'
    ] fun () =>
        leptos.div [
            $'"class=\\\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\\\""'
        ] fun () =>
            :>(;[
                leptos.main [
                    $'"class=\\\"flex flex-1 flex-col [overflow:hidden]\\\""'
                ] fun () =>
                    open menu_tabs
                    match tab |> leptos.signal_get with
                    | Dice _ => dice_view.render () |> Some
                    | Lists => lists_view.render () |> Some
                    | Transactions => transactions_view.render () |> Some
                    | Settings => settings_view.render () |> Some
                    | _ => None
                    |> function
                        | Some fragment =>
                            leptos.div [
                                $'"class=\\\"flex flex-1 flex-col [overflow-y:auto]\\\""'
                            ] fun () =>
                                fragment
                            |> leptos.element_to_view
                        | None => ;[] |> leptos.views_to_view
                    |> leptos.view_to_fragment
                |> leptos.element_to_view

                leptos.div [
                    $'"class=\\\"flex\\\""'
                ] fun () =>
                    menu_tabs.render tab
                |> leptos.element_to_view
            ])
        |> leptos.element_to_fragment
