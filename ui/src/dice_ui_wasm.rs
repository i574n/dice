#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_eef1bd43 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::NativeArray_::count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl Dice_ui::US0 {
            pub fn get_IsUS0_0(this_: &MutCell<Dice_ui::US0>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS0_1(this_: &MutCell<Dice_ui::US0>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl Dice_ui::US1 {
            pub fn get_IsUS1_0(this_: &MutCell<Dice_ui::US1>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS1_1(this_: &MutCell<Dice_ui::US1>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Option<std::string::String>,
            pub l1: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Dice_ui::Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::RwSignal<bool>,
            pub l1: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>>,
            pub l2: leptos::RwSignal<bool>,
            pub l3: leptos::RwSignal<std::string::String>,
        }
        impl core::fmt::Display for Dice_ui::Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::RwSignal<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Dice_ui::Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0,
            US2_1,
        }
        impl Dice_ui::US2 {
            pub fn get_IsUS2_0(this_: &MutCell<Dice_ui::US2>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS2_1(this_: &MutCell<Dice_ui::US2>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(rexie::Rexie),
            US3_1(rexie::Error),
        }
        impl Dice_ui::US3 {
            pub fn get_IsUS3_0(this_: &MutCell<Dice_ui::US3>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS3_1(this_: &MutCell<Dice_ui::US3>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: LrcPtr<Dice_ui::Heap0>,
            pub l2: bool,
            pub l3: std::string::String,
        }
        impl core::fmt::Display for Dice_ui::Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(LrcPtr<Dice_ui::Heap3>),
            US4_1,
        }
        impl Dice_ui::US4 {
            pub fn get_IsUS4_0(this_: &MutCell<Dice_ui::US4>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS4_1(this_: &MutCell<Dice_ui::US4>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(rexie::Rexie),
            US5_1,
        }
        impl Dice_ui::US5 {
            pub fn get_IsUS5_0(this_: &MutCell<Dice_ui::US5>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS5_1(this_: &MutCell<Dice_ui::US5>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US6_1,
        }
        impl Dice_ui::US6 {
            pub fn get_IsUS6_0(this_: &MutCell<Dice_ui::US6>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS6_1(this_: &MutCell<Dice_ui::US6>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(serde_json::Value),
            US7_1,
        }
        impl Dice_ui::US7 {
            pub fn get_IsUS7_0(this_: &MutCell<Dice_ui::US7>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS7_1(this_: &MutCell<Dice_ui::US7>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US8_1(std::string::String),
        }
        impl Dice_ui::US8 {
            pub fn get_IsUS8_0(this_: &MutCell<Dice_ui::US8>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS8_1(this_: &MutCell<Dice_ui::US8>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Dice_ui::US4),
            US9_1,
        }
        impl Dice_ui::US9 {
            pub fn get_IsUS9_0(this_: &MutCell<Dice_ui::US9>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS9_1(this_: &MutCell<Dice_ui::US9>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Option<web_sys::Storage>),
            US10_1(wasm_bindgen::JsValue),
        }
        impl Dice_ui::US10 {
            pub fn get_IsUS10_0(this_: &MutCell<Dice_ui::US10>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS10_1(this_: &MutCell<Dice_ui::US10>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(web_sys::Storage),
            US12_1,
        }
        impl Dice_ui::US12 {
            pub fn get_IsUS12_0(this_: &MutCell<Dice_ui::US12>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS12_1(this_: &MutCell<Dice_ui::US12>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(Dice_ui::US12),
            US11_1(wasm_bindgen::JsValue),
        }
        impl Dice_ui::US11 {
            pub fn get_IsUS11_0(this_: &MutCell<Dice_ui::US11>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS11_1(this_: &MutCell<Dice_ui::US11>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Option<std::string::String>),
            US13_1(wasm_bindgen::JsValue),
        }
        impl Dice_ui::US13 {
            pub fn get_IsUS13_0(this_: &MutCell<Dice_ui::US13>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS13_1(this_: &MutCell<Dice_ui::US13>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(std::string::String),
            US15_1,
        }
        impl Dice_ui::US15 {
            pub fn get_IsUS15_0(this_: &MutCell<Dice_ui::US15>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS15_1(this_: &MutCell<Dice_ui::US15>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(Dice_ui::US15),
            US14_1(wasm_bindgen::JsValue),
        }
        impl Dice_ui::US14 {
            pub fn get_IsUS14_0(this_: &MutCell<Dice_ui::US14>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS14_1(this_: &MutCell<Dice_ui::US14>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(Dice_ui::US15),
            US16_1,
        }
        impl Dice_ui::US16 {
            pub fn get_IsUS16_0(this_: &MutCell<Dice_ui::US16>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS16_1(this_: &MutCell<Dice_ui::US16>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US17 {
            US17_0,
            US17_1(rexie::Error),
        }
        impl Dice_ui::US17 {
            pub fn get_IsUS17_0(this_: &MutCell<Dice_ui::US17>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS17_1(this_: &MutCell<Dice_ui::US17>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(leptos::RwSignal<bool>),
            US18_1,
        }
        impl Dice_ui::US18 {
            pub fn get_IsUS18_0(this_: &MutCell<Dice_ui::US18>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS18_1(this_: &MutCell<Dice_ui::US18>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US19 {
            US19_0(bool),
            US19_1,
        }
        impl Dice_ui::US19 {
            pub fn get_IsUS19_0(this_: &MutCell<Dice_ui::US19>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS19_1(this_: &MutCell<Dice_ui::US19>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US21 {
            US21_0,
        }
        impl Dice_ui::US21 {
            pub fn get_IsUS21_0(this_: &MutCell<Dice_ui::US21>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US20 {
            US20_0,
            US20_1(Dice_ui::US21),
            US20_2,
            US20_3,
            US20_4,
        }
        impl Dice_ui::US20 {
            pub fn get_IsUS20_0(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS20_1(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS20_2(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS20_3(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS20_4(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(leptos_router::Url),
            US22_1(std::string::String),
        }
        impl Dice_ui::US22 {
            pub fn get_IsUS22_0(this_: &MutCell<Dice_ui::US22>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS22_1(this_: &MutCell<Dice_ui::US22>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US23 {
            US23_0(Dice_ui::US20),
            US23_1,
        }
        impl Dice_ui::US23 {
            pub fn get_IsUS23_0(this_: &MutCell<Dice_ui::US23>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS23_1(this_: &MutCell<Dice_ui::US23>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US23>,
        }
        impl core::fmt::Display for Dice_ui::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(leptos::Fragment),
            US24_1,
        }
        impl Dice_ui::US24 {
            pub fn get_IsUS24_0(this_: &MutCell<Dice_ui::US24>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS24_1(this_: &MutCell<Dice_ui::US24>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US25 {
            US25_0,
            US25_1,
        }
        impl Dice_ui::US25 {
            pub fn get_IsUS25_0(this_: &MutCell<Dice_ui::US25>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS25_1(this_: &MutCell<Dice_ui::US25>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Dice_ui::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<(bool, string, bool, Dice_ui::US25, string)>>,
        }
        impl core::fmt::Display for Dice_ui::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default)]
        pub struct Mut3 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<string>>,
        }
        impl core::fmt::Display for Dice_ui::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Default,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Dice_ui::Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(Option<LrcPtr<Dice_ui::Heap4>>),
            US26_1(std::string::String),
        }
        impl Dice_ui::US26 {
            pub fn get_IsUS26_0(this_: &MutCell<Dice_ui::US26>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS26_1(this_: &MutCell<Dice_ui::US26>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(LrcPtr<Dice_ui::Heap4>),
            US27_1,
        }
        impl Dice_ui::US27 {
            pub fn get_IsUS27_0(this_: &MutCell<Dice_ui::US27>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS27_1(this_: &MutCell<Dice_ui::US27>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US28 {
            US28_0(Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US28_1,
        }
        impl Dice_ui::US28 {
            pub fn get_IsUS28_0(this_: &MutCell<Dice_ui::US28>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS28_1(this_: &MutCell<Dice_ui::US28>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Array<Dice_ui::US27>),
            US30_1(std::string::String),
        }
        impl Dice_ui::US30 {
            pub fn get_IsUS30_0(this_: &MutCell<Dice_ui::US30>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS30_1(this_: &MutCell<Dice_ui::US30>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Dice_ui::US30),
            US29_1,
        }
        impl Dice_ui::US29 {
            pub fn get_IsUS29_0(this_: &MutCell<Dice_ui::US29>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS29_1(this_: &MutCell<Dice_ui::US29>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Array<Option<LrcPtr<Dice_ui::Heap4>>>),
            US31_1(std::string::String),
        }
        impl Dice_ui::US31 {
            pub fn get_IsUS31_0(this_: &MutCell<Dice_ui::US31>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS31_1(this_: &MutCell<Dice_ui::US31>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US34 {
            US34_0(string),
            US34_1,
        }
        impl Dice_ui::US34 {
            pub fn get_IsUS34_0(this_: &MutCell<Dice_ui::US34>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS34_1(this_: &MutCell<Dice_ui::US34>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Dice_ui::US34),
            US33_1(std::string::String),
        }
        impl Dice_ui::US33 {
            pub fn get_IsUS33_0(this_: &MutCell<Dice_ui::US33>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS33_1(this_: &MutCell<Dice_ui::US33>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(Dice_ui::US33),
            US32_1,
        }
        impl Dice_ui::US32 {
            pub fn get_IsUS32_0(this_: &MutCell<Dice_ui::US32>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS32_1(this_: &MutCell<Dice_ui::US32>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Dice_ui::US27),
            US35_1,
        }
        impl Dice_ui::US35 {
            pub fn get_IsUS35_0(this_: &MutCell<Dice_ui::US35>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS35_1(this_: &MutCell<Dice_ui::US35>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Option<string>),
            US36_1(std::string::String),
        }
        impl Dice_ui::US36 {
            pub fn get_IsUS36_0(this_: &MutCell<Dice_ui::US36>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS36_1(this_: &MutCell<Dice_ui::US36>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0,
            US37_1(std::string::String),
        }
        impl Dice_ui::US37 {
            pub fn get_IsUS37_0(this_: &MutCell<Dice_ui::US37>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS37_1(this_: &MutCell<Dice_ui::US37>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(Result<Array<Option<string>>, std::string::String>),
            US38_1,
        }
        impl Dice_ui::US38 {
            pub fn get_IsUS38_0(this_: &MutCell<Dice_ui::US38>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS38_1(this_: &MutCell<Dice_ui::US38>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Array<Option<string>>),
            US40_1(std::string::String),
        }
        impl Dice_ui::US40 {
            pub fn get_IsUS40_0(this_: &MutCell<Dice_ui::US40>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS40_1(this_: &MutCell<Dice_ui::US40>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Dice_ui::US40),
            US39_1,
        }
        impl Dice_ui::US39 {
            pub fn get_IsUS39_0(this_: &MutCell<Dice_ui::US39>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS39_1(this_: &MutCell<Dice_ui::US39>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US42 {
            US42_0(Array<Dice_ui::US34>),
            US42_1(std::string::String),
        }
        impl Dice_ui::US42 {
            pub fn get_IsUS42_0(this_: &MutCell<Dice_ui::US42>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS42_1(this_: &MutCell<Dice_ui::US42>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Dice_ui::US42),
            US41_1,
        }
        impl Dice_ui::US41 {
            pub fn get_IsUS41_0(this_: &MutCell<Dice_ui::US41>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS41_1(this_: &MutCell<Dice_ui::US41>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US43 {
            US43_0(Dice_ui::US34),
            US43_1,
        }
        impl Dice_ui::US43 {
            pub fn get_IsUS43_0(this_: &MutCell<Dice_ui::US43>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS43_1(this_: &MutCell<Dice_ui::US43>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US44 {
            US44_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US44_1,
        }
        impl Dice_ui::US44 {
            pub fn get_IsUS44_0(this_: &MutCell<Dice_ui::US44>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS44_1(this_: &MutCell<Dice_ui::US44>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US45_1(std::string::String),
        }
        impl Dice_ui::US45 {
            pub fn get_IsUS45_0(this_: &MutCell<Dice_ui::US45>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS45_1(this_: &MutCell<Dice_ui::US45>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq)]
        pub struct Heap5 {
            pub l0: Array<(std::string::String, Option<std::string::String>)>,
            pub l1: f64,
            pub l2: u32,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: Array<std::string::String>,
            pub l6: bool,
            pub l7: f64,
            pub l8: std::string::String,
            pub l9: std::string::String,
            pub l10: std::string::String,
            pub l11: std::string::String,
        }
        impl core::fmt::Display for Dice_ui::Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
            ),
            US46_1(std::string::String),
        }
        impl Dice_ui::US46 {
            pub fn get_IsUS46_0(this_: &MutCell<Dice_ui::US46>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS46_1(this_: &MutCell<Dice_ui::US46>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(
                Array<(
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
            ),
            US48_1,
        }
        impl Dice_ui::US48 {
            pub fn get_IsUS48_0(this_: &MutCell<Dice_ui::US48>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS48_1(this_: &MutCell<Dice_ui::US48>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Dice_ui::US48),
            US47_1(std::string::String),
        }
        impl Dice_ui::US47 {
            pub fn get_IsUS47_0(this_: &MutCell<Dice_ui::US47>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS47_1(this_: &MutCell<Dice_ui::US47>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US50_1,
        }
        impl Dice_ui::US50 {
            pub fn get_IsUS50_0(this_: &MutCell<Dice_ui::US50>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS50_1(this_: &MutCell<Dice_ui::US50>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Dice_ui::US50),
            US49_1(std::string::String),
        }
        impl Dice_ui::US49 {
            pub fn get_IsUS49_0(this_: &MutCell<Dice_ui::US49>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS49_1(this_: &MutCell<Dice_ui::US49>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1,
        }
        impl Dice_ui::US52 {
            pub fn get_IsUS52_0(this_: &MutCell<Dice_ui::US52>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS52_1(this_: &MutCell<Dice_ui::US52>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Dice_ui::US52),
            US51_1(std::string::String),
        }
        impl Dice_ui::US51 {
            pub fn get_IsUS51_0(this_: &MutCell<Dice_ui::US51>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS51_1(this_: &MutCell<Dice_ui::US51>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US53_1(std::string::String),
        }
        impl Dice_ui::US53 {
            pub fn get_IsUS53_0(this_: &MutCell<Dice_ui::US53>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS53_1(this_: &MutCell<Dice_ui::US53>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US54_1(std::string::String),
        }
        impl Dice_ui::US54 {
            pub fn get_IsUS54_0(this_: &MutCell<Dice_ui::US54>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS54_1(this_: &MutCell<Dice_ui::US54>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut4 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US54>,
        }
        impl core::fmt::Display for Dice_ui::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US55 {
            US55_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US55_1(std::string::String),
        }
        impl Dice_ui::US55 {
            pub fn get_IsUS55_0(this_: &MutCell<Dice_ui::US55>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS55_1(this_: &MutCell<Dice_ui::US55>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US56 {
            US56_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US56_1(std::string::String),
        }
        impl Dice_ui::US56 {
            pub fn get_IsUS56_0(this_: &MutCell<Dice_ui::US56>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS56_1(this_: &MutCell<Dice_ui::US56>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US58 {
            US58_0(Array<(bool, string, bool, Dice_ui::US25, string)>),
            US58_1,
        }
        impl Dice_ui::US58 {
            pub fn get_IsUS58_0(this_: &MutCell<Dice_ui::US58>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS58_1(this_: &MutCell<Dice_ui::US58>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Dice_ui::US58),
            US57_1(std::string::String),
        }
        impl Dice_ui::US57 {
            pub fn get_IsUS57_0(this_: &MutCell<Dice_ui::US57>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS57_1(this_: &MutCell<Dice_ui::US57>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(Option<Array<(bool, string, bool, Dice_ui::US25, string)>>),
            US59_1(std::string::String),
        }
        impl Dice_ui::US59 {
            pub fn get_IsUS59_0(this_: &MutCell<Dice_ui::US59>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS59_1(this_: &MutCell<Dice_ui::US59>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Dice_ui::Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    Option<std::string::String>,
                                    std::string::String,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Option<Array<(std::string::String, std::string::String)>>,
                    )>,
                )>,
            ),
            US60_1,
        }
        impl Dice_ui::US60 {
            pub fn get_IsUS60_0(this_: &MutCell<Dice_ui::US60>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS60_1(this_: &MutCell<Dice_ui::US60>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(Dice_ui::US15),
            US61_1(std::string::String),
        }
        impl Dice_ui::US61 {
            pub fn get_IsUS61_0(this_: &MutCell<Dice_ui::US61>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS61_1(this_: &MutCell<Dice_ui::US61>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(Dice_ui::US60),
            US62_1(std::string::String),
        }
        impl Dice_ui::US62 {
            pub fn get_IsUS62_0(this_: &MutCell<Dice_ui::US62>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS62_1(this_: &MutCell<Dice_ui::US62>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(crate::model::near::rpc::RpcResponse),
            US63_1(std::string::String),
        }
        impl Dice_ui::US63 {
            pub fn get_IsUS63_0(this_: &MutCell<Dice_ui::US63>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS63_1(this_: &MutCell<Dice_ui::US63>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    Option<std::string::String>,
                                    std::string::String,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Option<Array<(std::string::String, std::string::String)>>,
                    )>,
                )>,
            ),
            US64_1(std::string::String),
        }
        impl Dice_ui::US64 {
            pub fn get_IsUS64_0(this_: &MutCell<Dice_ui::US64>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS64_1(this_: &MutCell<Dice_ui::US64>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(Dice_ui::US62),
            US65_1,
        }
        impl Dice_ui::US65 {
            pub fn get_IsUS65_0(this_: &MutCell<Dice_ui::US65>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS65_1(this_: &MutCell<Dice_ui::US65>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )>,
            ),
            US66_1(std::string::String),
        }
        impl Dice_ui::US66 {
            pub fn get_IsUS66_0(this_: &MutCell<Dice_ui::US66>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS66_1(this_: &MutCell<Dice_ui::US66>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
            US67_1,
        }
        impl Dice_ui::US67 {
            pub fn get_IsUS67_0(this_: &MutCell<Dice_ui::US67>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS67_1(this_: &MutCell<Dice_ui::US67>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>),
            US68_1,
        }
        impl Dice_ui::US68 {
            pub fn get_IsUS68_0(this_: &MutCell<Dice_ui::US68>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS68_1(this_: &MutCell<Dice_ui::US68>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US69 {
            US69_0(Array<(i32, leptos::ReadSignal<std::string::String>)>),
            US69_1,
        }
        impl Dice_ui::US69 {
            pub fn get_IsUS69_0(this_: &MutCell<Dice_ui::US69>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS69_1(this_: &MutCell<Dice_ui::US69>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US70 {
            US70_0(leptos::Memo<Dice_ui::US34>),
            US70_1,
        }
        impl Dice_ui::US70 {
            pub fn get_IsUS70_0(this_: &MutCell<Dice_ui::US70>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS70_1(this_: &MutCell<Dice_ui::US70>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US71 {
            US71_0(chrono::DateTime<chrono::Utc>),
            US71_1,
        }
        impl Dice_ui::US71 {
            pub fn get_IsUS71_0(this_: &MutCell<Dice_ui::US71>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS71_1(this_: &MutCell<Dice_ui::US71>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US71 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US72 {
            US72_0(string),
            US72_1(string),
        }
        impl Dice_ui::US72 {
            pub fn get_IsUS72_0(this_: &MutCell<Dice_ui::US72>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS72_1(this_: &MutCell<Dice_ui::US72>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US72 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US34>,
        }
        impl core::fmt::Display for Dice_ui::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US73 {
            US73_0(std::string::String),
            US73_1(std::string::String),
        }
        impl Dice_ui::US73 {
            pub fn get_IsUS73_0(this_: &MutCell<Dice_ui::US73>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS73_1(this_: &MutCell<Dice_ui::US73>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US73 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn method4() -> string {
            string("")
        }
        pub fn method5() -> string {
            string("i574n.near")
        }
        pub fn method6() -> string {
            string("luckier.near")
        }
        pub fn closure6(unitVar: (), unitVar_1: ()) -> Dice_ui::US2 {
            Dice_ui::US2::US2_1
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Rexie) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn closure8(unitVar: (), v0_1: rexie::Error) -> Dice_ui::US3 {
            Dice_ui::US3::US3_1(v0_1)
        }
        pub fn method12(v0_1: Dice_ui::US3) -> Dice_ui::US3 {
            v0_1
        }
        pub fn method11() -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>> {
            let __result = Box::pin(async {
                //;
                {
                    let v1: string =
                    string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                    let v2: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Result<rexie::Rexie, rexie::Error>>>,
                    > = Box::pin(
                        rexie::Rexie::builder("database")
                            .version(1)
                            .add_object_store(rexie::ObjectStore::new("store"))
                            .build(),
                    );
                    let v4: Result<rexie::Rexie, rexie::Error> = v2.await;
                    let v8: Dice_ui::US3 = Dice_ui::method12(match &v4 {
                        Err(v4_1_0) => Dice_ui::closure8((), v4_1_0.clone()),
                        Ok(v4_0_0) => Dice_ui::closure7((), v4_0_0.clone()),
                    });
                    v8
                }
            });
            {
                //;
                __result
            }
        }
        pub fn method13(v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method10() -> std::pin::Pin<Box<dyn std::future::Future<Output = rexie::Rexie>>> {
            let __result = Box::pin(async move {
                //;
                leptos::logging::log!(
                    "{}",
                    string("state_core.use_database (2) / database create_local_resource")
                );
                leptos::logging::log!("{}", string("state_core.build_database ()"));
                {
                    let v5: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>> =
                        Dice_ui::method11();
                    let v7: Dice_ui::US3 = v5.await;
                    let v13: rexie::Rexie = match &v7 {
                        Dice_ui::US3::US3_0(v7_0_0) => v7_0_0.clone(),
                        Dice_ui::US3::US3_1(v7_1_0) => panic!(
                            "{}",
                            sprintf!("resultm.get / Result value was Error: {}", v7_1_0.clone()),
                        ),
                    };
                    let v15: string =
                    append(append(string("state_core.use_database (3) / database create_local_resource / result: "),
                                  sprintf!("{:?}", v13.clone())), string(""));
                    let v20: string = if length(v15.clone()) <= 200_i32 {
                        v15.clone()
                    } else {
                        append(getSlice(v15, Some(0_i32), Some(199_i32)), string("..."))
                    };
                    leptos::logging::log!("{}", v20);
                    {
                        let v22: rexie::Rexie = Dice_ui::method13(v13);
                        v22
                    }
                }
            });
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn method14(
            v0_1: std::pin::Pin<Box<dyn std::future::Future<Output = rexie::Rexie>>>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = rexie::Rexie>>> {
            v0_1
        }
        pub fn method9() -> leptos::Resource<Dice_ui::US2, rexie::Rexie> {
            let __result = leptos::create_local_resource(
                move || Func0::new(move || Dice_ui::closure6((), ()))(),
                |x| async move {
                    //;
                    {
                        let v3: Dice_ui::US2 = x;
                        let v5: std::pin::Pin<Box<dyn std::future::Future<Output = rexie::Rexie>>> =
                            Dice_ui::method14(Dice_ui::method10());
                        let v7: rexie::Rexie = v5.await;
                        v7
                    }
                },
            );
            {
                //;
                __result
            }
        }
        pub fn closure9(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            unitVar: (),
        ) -> Option<rexie::Rexie> {
            leptos::SignalGet::get(&v0_1)
        }
        pub fn closure10(unitVar: (), v0_1: rexie::Rexie) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method17() -> Func1<rexie::Rexie, Dice_ui::US5> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure10((), v))
        }
        pub fn method19(v0_1: string) -> string {
            v0_1
        }
        pub fn closure11(unitVar: (), v0_1: string) -> std::string::String {
            let v1: string = Dice_ui::method19(v0_1);
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            String::from(v3)
        }
        pub fn method20(v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn closure12(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method21() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure12((), v))
        }
        pub fn method22(
            v0_1: Result<rexie::Transaction, rexie::Error>,
        ) -> Result<rexie::Transaction, rexie::Error> {
            v0_1
        }
        pub fn method23() -> string {
            string("store")
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method24() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn method25(
            v0_1: Result<rexie::Store, rexie::Error>,
        ) -> Result<rexie::Store, rexie::Error> {
            v0_1
        }
        pub fn method26() -> string {
            string("core-state-heap")
        }
        pub fn closure14(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method27() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure14((), v))
        }
        pub fn method28(
            v0_1: Result<wasm_bindgen::JsValue, rexie::Error>,
        ) -> Result<wasm_bindgen::JsValue, rexie::Error> {
            v0_1
        }
        pub fn method29(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure15(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method30() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure15((), v))
        }
        pub fn method31(
            v0_1: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error>,
        ) -> Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> {
            v0_1
        }
        pub fn closure16(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method32() -> Func1<serde_json::Value, Dice_ui::US7> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure16((), v))
        }
        pub fn method33(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method34() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure17((), v))
        }
        pub fn method35(
            v0_1: Result<Vec<u8>, serde_json::Error>,
        ) -> Result<Vec<u8>, serde_json::Error> {
            v0_1
        }
        pub fn closure18(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method36() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure18((), v))
        }
        pub fn method37(
            v0_1: Result<Option<LrcPtr<Dice_ui::Heap3>>, borsh::io::Error>,
        ) -> Result<Option<LrcPtr<Dice_ui::Heap3>>, borsh::io::Error> {
            v0_1
        }
        pub fn method38(
            v0_1: Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String>,
        ) -> Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String> {
            v0_1
        }
        pub fn method18(
            v0_1: rexie::Rexie,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async {
                //;
                {
                    let v3: Array<string> = new_array(&[string("store")]);
                    let v5: Vec<string> = v3.to_vec();
                    let v8: Vec<std::string::String> = v5
                        .iter()
                        .map(|x| Func1::new(move |v: string| Dice_ui::closure11((), v))(x.clone()))
                        .collect();
                    let v9: rexie::Rexie = Dice_ui::method20(v0_1);
                    let v11: Result<rexie::Transaction, rexie::Error> =
                        v9.transaction(&v8, rexie::TransactionMode::ReadOnly);
                    let v12 = Dice_ui::method21();
                    let v13: Result<rexie::Transaction, rexie::Error> = Dice_ui::method22(v11);
                    let v15: Result<rexie::Transaction, std::string::String> =
                        v13.map_err(|x| v12(x));
                    let v17: rexie::Transaction = v15?;
                    let v18: string = Dice_ui::method23();
                    let v20: &str = fable_library_rust::String_::LrcStr::as_str(&v18);
                    let v22: Result<rexie::Store, rexie::Error> = v17.store(v20);
                    let v23 = Dice_ui::method24();
                    let v24: Result<rexie::Store, rexie::Error> = Dice_ui::method25(v22);
                    let v26: Result<rexie::Store, std::string::String> = v24.map_err(|x| v23(x));
                    let v28: rexie::Store = v26?;
                    let v29: string = Dice_ui::method26();
                    let v31: &str = fable_library_rust::String_::LrcStr::as_str(&v29);
                    let v33: wasm_bindgen::JsValue = wasm_bindgen::JsValue::from_str(v31);
                    let v35: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<wasm_bindgen::JsValue, rexie::Error>,
                            >,
                        >,
                    > = Box::pin(rexie::Store::get(&v28, &v33));
                    let v37: Result<wasm_bindgen::JsValue, rexie::Error> = v35.await;
                    let v38 = Dice_ui::method27();
                    let v39: Result<wasm_bindgen::JsValue, rexie::Error> = Dice_ui::method28(v37);
                    let v41: Result<wasm_bindgen::JsValue, std::string::String> =
                        v39.map_err(|x| v38(x));
                    let v44: wasm_bindgen::JsValue = Dice_ui::method29(v41?);
                    let v46: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                        serde_wasm_bindgen::from_value(v44);
                    let v47 = Dice_ui::method30();
                    let v48: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                        Dice_ui::method31(v46);
                    let v50: Result<Option<serde_json::Value>, std::string::String> =
                        v48.map_err(|x| v47(x));
                    let v52: Option<serde_json::Value> = v50?;
                    let v55: Dice_ui::US7 =
                        defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method32(), v52));
                    let v87: Dice_ui::US6 = match &v55 {
                        Dice_ui::US7::US7_0(v55_0_0) => {
                            let v57: serde_json::Value = Dice_ui::method33(match &v55 {
                                Dice_ui::US7::US7_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            let v59: Result<Vec<u8>, serde_json::Error> =
                                serde_json::from_value(v57);
                            let v60 = Dice_ui::method34();
                            let v61: Result<Vec<u8>, serde_json::Error> = Dice_ui::method35(v59);
                            let v63: Result<Vec<u8>, std::string::String> = v61.map_err(|x| v60(x));
                            let v65: Vec<u8> = v63?;
                            let v67: Array<u8> = fable_library_rust::NativeArray_::array_from(v65);
                            let v69: string = append(
                                append(
                                    string("state_core.get_data () / data_len: "),
                                    toString(count(v67.clone())),
                                ),
                                string(""),
                            );
                            leptos::logging::log!("{}", v69);
                            {
                                let v72: Vec<u8> = v67.to_vec();
                                let v74: &[u8] = v72.as_slice();
                                let mut v74 = v74;
                                {
                                    let v77: Result<
                                        Option<LrcPtr<Dice_ui::Heap3>>,
                                        borsh::io::Error,
                                    > = borsh::BorshDeserialize::deserialize(&mut v74);
                                    let v78 = Dice_ui::method36();
                                    let v79: Result<
                                        Option<LrcPtr<Dice_ui::Heap3>>,
                                        borsh::io::Error,
                                    > = Dice_ui::method37(v77);
                                    let v81: Result<
                                        Option<LrcPtr<Dice_ui::Heap3>>,
                                        std::string::String,
                                    > = v79.map_err(|x| v78(x));
                                    Dice_ui::US6::US6_0(v81?)
                                }
                            }
                        }
                        _ => Dice_ui::US6::US6_1,
                    };
                    let v94: Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String> =
                        Dice_ui::method38(Ok::<
                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                            std::string::String,
                        >(match &v87 {
                            Dice_ui::US6::US6_0(v87_0_0) => Some(match &v87 {
                                Dice_ui::US6::US6_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                        }));
                    v94
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure19(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn closure20(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            Dice_ui::US8::US8_1(v0_1)
        }
        pub fn closure21(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method39() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US6> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure21((), v))
        }
        pub fn closure22(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method40() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US4> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure22((), v))
        }
        pub fn method41(v0_1: Dice_ui::US4) -> Dice_ui::US4 {
            v0_1
        }
        pub fn method16(
            v0_1: Option<rexie::Rexie>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US4>>> {
            let __result = Box::pin(async {
                //;
                {
                    let v3: string =
                    append(append(string("state_core.use_core_database (2) / core_state_heap create_local_resource / database: "),
                                  sprintf!("{:?}", v0_1.clone())),
                           string(""));
                    leptos::logging::log!("{}", v3);
                    {
                        let v7: Dice_ui::US5 =
                            defaultValue(Dice_ui::US5::US5_1, map(Dice_ui::method17(), v0_1));
                        let v30: Dice_ui::US6 = match &v7 {
                            Dice_ui::US5::US5_0(v7_0_0) => {
                                let v10: string =
                                    string("state_core.get_data () / id: core-state-heap");
                                leptos::logging::log!("{}", v10);
                                {
                                    let v12: std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    > = Dice_ui::method18(match &v7 {
                                        Dice_ui::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                    let v14: Result<
                                        Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                        std::string::String,
                                    > = v12.await;
                                    let v17: Dice_ui::US8 = match &v14 {
                                        Err(v14_1_0) => Dice_ui::closure20((), v14_1_0.clone()),
                                        Ok(v14_0_0) => Dice_ui::closure19((), v14_0_0.clone()),
                                    };
                                    match &v17 {
                                        Dice_ui::US8::US8_0(v17_0_0) => defaultValue(
                                            Dice_ui::US6::US6_1,
                                            map(Dice_ui::method39(), v17_0_0.clone()),
                                        ),
                                        Dice_ui::US8::US8_1(v17_1_0) => {
                                            let v23: string =
                                                append(append(string("state_core.use_core_database (3) / error: "),
                                                              toString(v17_1_0.clone())),
                                                       string(""));
                                            leptos::logging::log!("{}", v23);
                                            Dice_ui::US6::US6_1
                                        }
                                    }
                                }
                            }
                            _ => Dice_ui::US6::US6_1,
                        };
                        let v38: Dice_ui::US9 = match &v30 {
                            Dice_ui::US6::US6_0(v30_0_0) => Dice_ui::US9::US9_0(defaultValue(
                                Dice_ui::US4::US4_1,
                                map(
                                    Dice_ui::method40(),
                                    match &v30 {
                                        Dice_ui::US6::US6_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                ),
                            )),
                            _ => Dice_ui::US9::US9_1,
                        };
                        let v46: Dice_ui::US4 =
                            Dice_ui::method41(if let Dice_ui::US9::US9_0(v38_0_0) = &v38 {
                                let v39: Dice_ui::US4 = match &v38 {
                                    Dice_ui::US9::US9_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US4::US4_0(v39_0_0) = &v39 {
                                    Dice_ui::US4::US4_0(match &v39 {
                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US4::US4_1
                                }
                            } else {
                                Dice_ui::US4::US4_1
                            });
                        v46
                    }
                }
            });
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn method42(
            v0_1: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US4>>>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US4>>> {
            v0_1
        }
        pub fn method15(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
        ) -> leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4> {
            let __result = leptos::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        move || Dice_ui::closure9(v0_1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let v6: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US4>>> =
                            Dice_ui::method42(Dice_ui::method16(x));
                        let v8: Dice_ui::US4 = v6.await;
                        v8
                    }
                },
            );
            {
                //;
                __result
            }
        }
        pub fn method43() -> web_sys::Window {
            leptos::leptos_dom::window()
        }
        pub fn method44(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure24(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US10 {
            Dice_ui::US10::US10_0(v0_1)
        }
        pub fn closure25(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US10 {
            Dice_ui::US10::US10_1(v0_1)
        }
        pub fn closure26(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method45() -> Func1<web_sys::Storage, Dice_ui::US12> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure26((), v))
        }
        pub fn closure27(unitVar: (), v0_1: Dice_ui::US4) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method46() -> Func1<Dice_ui::US4, Dice_ui::US9> {
            Func1::new(move |v: Dice_ui::US4| Dice_ui::closure27((), v))
        }
        pub fn method47(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method48() -> string {
            string("core-state-heap")
        }
        pub fn closure28(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US13 {
            Dice_ui::US13::US13_0(v0_1)
        }
        pub fn closure29(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US13 {
            Dice_ui::US13::US13_1(v0_1)
        }
        pub fn method49(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure30(unitVar: (), v0_1: std::string::String) -> Dice_ui::US15 {
            Dice_ui::US15::US15_0(v0_1)
        }
        pub fn method50() -> Func1<std::string::String, Dice_ui::US15> {
            Func1::new(move |v: std::string::String| Dice_ui::closure30((), v))
        }
        pub fn method51(v0_1: string) -> string {
            v0_1
        }
        pub fn closure32(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method52() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure32((), v))
        }
        pub fn method53(
            v0_1: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error>,
        ) -> Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> {
            v0_1
        }
        pub fn closure31(unitVar: (), v0_1: std::string::String) -> Dice_ui::US4 {
            let v3: string = Dice_ui::method51(fable_library_rust::String_::fromString(v0_1));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v5);
            let v8 = Dice_ui::method52();
            let v9: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = Dice_ui::method53(v7);
            let v11: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v9.map_err(|x| v8(x));
            let v13: Option<LrcPtr<Dice_ui::Heap3>> = v11.ok();
            defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method40(), v13))
        }
        pub fn closure34(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            leptos::logging::log!("{}", string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            v0_1.l0
        }
        pub fn closure35(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            leptos::logging::log!("{}", string("state_core.use_core_database (8) / effect core_state_heap / debug signal_update"));
            v0_1.l2
        }
        pub fn closure36(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            leptos::logging::log!("{}", string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            v0_1.l3.clone()
        }
        pub fn closure37(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            leptos::logging::log!("{}", string("state_core.use_core_database (10) / effect core_state_heap / data signal_update"));
            v0_1.l1.clone()
        }
        pub fn closure33(v0_1: LrcPtr<Dice_ui::Heap2>, v1: LrcPtr<Dice_ui::Heap3>, unitVar: ()) {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v4: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v2.clone());
            leptos::SignalUpdate::update(&v4.l0.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v: bool| Dice_ui::closure34(v1.clone(), v)
                })(x.clone())
            });
            {
                let v9: LrcPtr<Dice_ui::Heap1> =
                    leptos::SignalGetUntracked::get_untracked(&v2.clone());
                leptos::SignalUpdate::update(&v9.l2.clone(), |x| {
                    *x = Func1::new({
                        let v1 = v1.clone();
                        move |v_1: bool| Dice_ui::closure35(v1.clone(), v_1)
                    })(x.clone())
                });
                {
                    let v14: LrcPtr<Dice_ui::Heap1> =
                        leptos::SignalGetUntracked::get_untracked(&v2.clone());
                    leptos::SignalUpdate::update(&v14.l3.clone(), |x| {
                        *x = Func1::new({
                            let v1 = v1.clone();
                            move |v_2: std::string::String| Dice_ui::closure36(v1.clone(), v_2)
                        })(x.clone())
                    });
                    {
                        let v19: LrcPtr<Dice_ui::Heap1> =
                            leptos::SignalGetUntracked::get_untracked(&v2);
                        leptos::SignalUpdate::update(&v19.l1.clone(), |x| {
                            *x = Func1::new({
                                let v1 = v1.clone();
                                move |v_3: LrcPtr<Dice_ui::Heap0>| {
                                    Dice_ui::closure37(v1.clone(), v_3)
                                }
                            })(x.clone())
                        });
                        ()
                    }
                }
            }
        }
        pub fn closure23(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4>,
            unitVar: (),
        ) {
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (4) / effect core_state_heap / ##1")
            );
            {
                let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method44(Dice_ui::method43());
                let v8: Dice_ui::US10 = match &v5 {
                    Err(v5_1_0) => Dice_ui::closure25((), v5_1_0.clone()),
                    Ok(v5_0_0) => Dice_ui::closure24((), v5_0_0.clone()),
                };
                let v17: Dice_ui::US11 = match &v8 {
                    Dice_ui::US10::US10_0(v8_0_0) => Dice_ui::US11::US11_0(defaultValue(
                        Dice_ui::US12::US12_1,
                        map(Dice_ui::method45(), v8_0_0.clone()),
                    )),
                    Dice_ui::US10::US10_1(v8_1_0) => Dice_ui::US11::US11_1(v8_1_0.clone()),
                };
                if let Dice_ui::US11::US11_0(v17_0_0) = &v17 {
                    let v18: Dice_ui::US12 = match &v17 {
                        Dice_ui::US11::US11_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US12::US12_0(v18_0_0) = &v18 {
                        let v19: web_sys::Storage = match &v18 {
                            Dice_ui::US12::US12_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v21: Option<Dice_ui::US4> = leptos::SignalGet::get(&v1);
                        let v24: Dice_ui::US9 =
                            defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method46(), v21));
                        let v26: string =
                            append(append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                          sprintf!("{:?}", v24.clone())),
                                   string(""));
                        leptos::logging::log!("{}", v26);
                        {
                            let v134: Dice_ui::US4 = if let Dice_ui::US9::US9_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US4 = match &v24 {
                                    Dice_ui::US9::US9_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US4::US4_0(v28_0_0) = &v28 {
                                    Dice_ui::US4::US4_0(match &v28 {
                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    let v31: web_sys::Storage = Dice_ui::method47(v19.clone());
                                    let v32: string = Dice_ui::method48();
                                    let v34: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v32);
                                    let v36: Result<
                                        Option<std::string::String>,
                                        wasm_bindgen::JsValue,
                                    > = web_sys::Storage::get_item(&v31, v34);
                                    let v39: Dice_ui::US13 = match &v36 {
                                        Err(v36_1_0) => Dice_ui::closure29((), v36_1_0.clone()),
                                        Ok(v36_0_0) => Dice_ui::closure28((), v36_0_0.clone()),
                                    };
                                    let v51: Dice_ui::US14 = match &v39 {
                                        Dice_ui::US13::US13_0(v39_0_0) => {
                                            let v41: Option<std::string::String> =
                                                Dice_ui::method49(v39_0_0.clone());
                                            let v43: Option<std::string::String> =
                                                serde_json::from_value(v41.into()).unwrap();
                                            Dice_ui::US14::US14_0(defaultValue(
                                                Dice_ui::US15::US15_1,
                                                map(Dice_ui::method50(), v43),
                                            ))
                                        }
                                        Dice_ui::US13::US13_1(v39_1_0) => {
                                            Dice_ui::US14::US14_1(v39_1_0.clone())
                                        }
                                    };
                                    let v57: Dice_ui::US16 = match &v51 {
                                        Dice_ui::US14::US14_0(v51_0_0) => {
                                            Dice_ui::US16::US16_0(v51_0_0.clone())
                                        }
                                        _ => Dice_ui::US16::US16_1,
                                    };
                                    let v64: Dice_ui::US15 =
                                        if let Dice_ui::US16::US16_0(v57_0_0) = &v57 {
                                            let v58: Dice_ui::US15 = match &v57 {
                                                Dice_ui::US16::US16_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            };
                                            if let Dice_ui::US15::US15_0(v58_0_0) = &v58 {
                                                Dice_ui::US15::US15_0(match &v58 {
                                                    Dice_ui::US15::US15_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            } else {
                                                Dice_ui::US15::US15_1
                                            }
                                        } else {
                                            Dice_ui::US15::US15_1
                                        };
                                    let v71: Option<Dice_ui::US4> = map(
                                        Func1::new(move |v_4: std::string::String| {
                                            Dice_ui::closure31((), v_4)
                                        }),
                                        match &v64 {
                                            Dice_ui::US15::US15_0(v64_0_0) => Some(match &v64 {
                                                Dice_ui::US15::US15_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }),
                                            _ => None::<std::string::String>,
                                        },
                                    );
                                    let v74: Dice_ui::US9 = defaultValue(
                                        Dice_ui::US9::US9_1,
                                        map(Dice_ui::method46(), v71),
                                    );
                                    if let Dice_ui::US9::US9_0(v74_0_0) = &v74 {
                                        let v75: Dice_ui::US4 = match &v74 {
                                            Dice_ui::US9::US9_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if let Dice_ui::US4::US4_0(v75_0_0) = &v75 {
                                            Dice_ui::US4::US4_0(match &v75 {
                                                Dice_ui::US4::US4_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        } else {
                                            Dice_ui::US4::US4_1
                                        }
                                    } else {
                                        Dice_ui::US4::US4_1
                                    }
                                }
                            } else {
                                let v83: web_sys::Storage = Dice_ui::method47(v19);
                                let v84: string = Dice_ui::method48();
                                let v86: &str = fable_library_rust::String_::LrcStr::as_str(&v84);
                                let v88: Result<
                                    Option<std::string::String>,
                                    wasm_bindgen::JsValue,
                                > = web_sys::Storage::get_item(&v83, v86);
                                let v91: Dice_ui::US13 = match &v88 {
                                    Err(v88_1_0) => Dice_ui::closure29((), v88_1_0.clone()),
                                    Ok(v88_0_0) => Dice_ui::closure28((), v88_0_0.clone()),
                                };
                                let v103: Dice_ui::US14 = match &v91 {
                                    Dice_ui::US13::US13_0(v91_0_0) => {
                                        let v93: Option<std::string::String> =
                                            Dice_ui::method49(v91_0_0.clone());
                                        let v95: Option<std::string::String> =
                                            serde_json::from_value(v93.into()).unwrap();
                                        Dice_ui::US14::US14_0(defaultValue(
                                            Dice_ui::US15::US15_1,
                                            map(Dice_ui::method50(), v95),
                                        ))
                                    }
                                    Dice_ui::US13::US13_1(v91_1_0) => {
                                        Dice_ui::US14::US14_1(v91_1_0.clone())
                                    }
                                };
                                let v109: Dice_ui::US16 = match &v103 {
                                    Dice_ui::US14::US14_0(v103_0_0) => {
                                        Dice_ui::US16::US16_0(v103_0_0.clone())
                                    }
                                    _ => Dice_ui::US16::US16_1,
                                };
                                let v116: Dice_ui::US15 =
                                    if let Dice_ui::US16::US16_0(v109_0_0) = &v109 {
                                        let v110: Dice_ui::US15 = match &v109 {
                                            Dice_ui::US16::US16_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if let Dice_ui::US15::US15_0(v110_0_0) = &v110 {
                                            Dice_ui::US15::US15_0(match &v110 {
                                                Dice_ui::US15::US15_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        } else {
                                            Dice_ui::US15::US15_1
                                        }
                                    } else {
                                        Dice_ui::US15::US15_1
                                    };
                                let v123: Option<Dice_ui::US4> = map(
                                    Func1::new(move |v_7: std::string::String| {
                                        Dice_ui::closure31((), v_7)
                                    }),
                                    match &v116 {
                                        Dice_ui::US15::US15_0(v116_0_0) => Some(match &v116 {
                                            Dice_ui::US15::US15_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                        _ => None::<std::string::String>,
                                    },
                                );
                                let v126: Dice_ui::US9 = defaultValue(
                                    Dice_ui::US9::US9_1,
                                    map(Dice_ui::method46(), v123),
                                );
                                if let Dice_ui::US9::US9_0(v126_0_0) = &v126 {
                                    let v127: Dice_ui::US4 = match &v126 {
                                        Dice_ui::US9::US9_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US4::US4_0(v127_0_0) = &v127 {
                                        Dice_ui::US4::US4_0(match &v127 {
                                            Dice_ui::US4::US4_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    } else {
                                        Dice_ui::US4::US4_1
                                    }
                                } else {
                                    Dice_ui::US4::US4_1
                                }
                            };
                            let v136: string =
                                append(append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                              sprintf!("{:?}", v134.clone())),
                                       string(""));
                            leptos::logging::log!("{}", v136);
                            if let Dice_ui::US4::US4_0(v134_0_0) = &v134 {
                                leptos::batch(move || {
                                    Func0::new({
                                        let v0_1 = v0_1.clone();
                                        let v134 = v134.clone();
                                        move || {
                                            Dice_ui::closure33(
                                                v0_1.clone(),
                                                match &v134 {
                                                    Dice_ui::US4::US4_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                },
                                                (),
                                            )
                                        }
                                    })()
                                });
                                ()
                            }
                        }
                    }
                }
            }
        }
        pub fn closure38(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::RwSignal<bool>> {
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading create_memo")
            );
            leptos::SignalGetUntracked::get_untracked(&v0_1.l1.clone())
        }
        pub fn method56() -> string {
            string("core-state-heap")
        }
        pub fn method57(v0_1: Result<(), rexie::Error>) -> Result<(), rexie::Error> {
            v0_1
        }
        pub fn method55(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: rexie::Rexie,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>>
        {
            let __result = Box::pin(async move {
                //;
                {
                    let v4: rexie::Transaction =
                        v1.transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                    let v6: rexie::Store = v4.store("store")?;
                    let mut data = Vec::new();
                    borsh::BorshSerialize::serialize(&v0_1, &mut data).unwrap();
                    {
                        let v10: Vec<u8> = data;
                        let v12: wasm_bindgen::JsValue =
                            serde_wasm_bindgen::to_value(&v10).unwrap();
                        let v13: string = Dice_ui::method56();
                        let v15: &str = fable_library_rust::String_::LrcStr::as_str(&v13);
                        v6.put(&v12, Some(&v15.into())).await?;
                        v4.done().await?;
                        {
                            let v19: Result<(), rexie::Error> =
                                Dice_ui::method57(Ok::<(), rexie::Error>(()));
                            v19
                        }
                    }
                }
            });
            {
                {
                    {
                        //;
                        __result
                    }
                }
            }
        }
        pub fn closure40(unitVar: (), unitVar_1: ()) -> Dice_ui::US17 {
            Dice_ui::US17::US17_0
        }
        pub fn closure41(unitVar: (), v0_1: rexie::Error) -> Dice_ui::US17 {
            Dice_ui::US17::US17_1(v0_1)
        }
        pub fn method58() {
            ();
        }
        pub fn method54(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: string,
            v2: Dice_ui::US5,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let __result = Box::pin(async move {
                //;
                match &v2 {
                    Dice_ui::US5::US5_0(v2_0_0) => {
                        let v5: string =
                        append(append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                      v1), string(""));
                        leptos::logging::log!("{}", v5);
                        {
                            let v9: string = append(
                                append(
                                    string("state_core.set_data () / data_len: "),
                                    toString(length(sprintf!("{:?}", v0_1.clone())) as i64),
                                ),
                                string(""),
                            );
                            leptos::logging::log!("{}", v9);
                            {
                                let v11: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = Dice_ui::method55(
                                    v0_1.clone(),
                                    match &v2 {
                                        Dice_ui::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                );
                                let v13: Result<(), rexie::Error> = v11.await;
                                let v16: Dice_ui::US17 = match &v13 {
                                    Err(v13_1_0) => Dice_ui::closure41((), v13_1_0.clone()),
                                    _ => Dice_ui::closure40((), ()),
                                };
                                match &v16 {
                                    Dice_ui::US17::US17_0 => (),
                                    Dice_ui::US17::US17_1(v16_1_0) => panic!(
                                        "{}",
                                        sprintf!(
                                            "resultm.get / Result value was Error: {}",
                                            match &v16 {
                                                Dice_ui::US17::US17_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                        ),
                                    ),
                                }
                            }
                        }
                    }
                    _ => {
                        leptos::logging::log!("{}", string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                        ()
                    }
                }
                Dice_ui::method58();
                ()
            });
            __result
        }
        pub fn closure39(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: string = sprintf!("{:?}", v1.clone());
            let v4: Option<rexie::Rexie> = leptos::SignalGet::get(&v0_1);
            Dice_ui::method54(
                v1,
                v2,
                defaultValue(Dice_ui::US5::US5_1, map(Dice_ui::method17(), v4)),
            )
        }
        pub fn method59() -> string {
            string("dark_mode_key")
        }
        pub fn method60(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure43(unitVar: (), v0_1: leptos::RwSignal<bool>) -> Dice_ui::US18 {
            Dice_ui::US18::US18_0(v0_1)
        }
        pub fn method61() -> Func1<leptos::RwSignal<bool>, Dice_ui::US18> {
            Func1::new(move |v: leptos::RwSignal<bool>| Dice_ui::closure43((), v))
        }
        pub fn closure44(unitVar: (), v0_1: bool) -> bool {
            leptos::logging::log!("{}", string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            true
        }
        pub fn method62(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method63() -> string {
            string("core-state-heap")
        }
        pub fn method64(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn method65(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure42(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
            v2: leptos::WriteSignal<bool>,
            v3: leptos::ReadSignal<bool>,
            v4: leptos::Action<LrcPtr<Dice_ui::Heap3>, ()>,
            unitVar: (),
        ) {
            let v6: bool = leptos::SignalGet::get(&v3);
            let v7: string =
                append(append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                              ofBoolean(v6)), string(""));
            leptos::logging::log!("{}", v7);
            {
                let v9: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
                let v11: LrcPtr<Dice_ui::Heap1> =
                    leptos::SignalGetUntracked::get_untracked(&v9.clone());
                let v14: bool = leptos::SignalGet::get(&v11.l0.clone());
                let v16: LrcPtr<Dice_ui::Heap1> =
                    leptos::SignalGetUntracked::get_untracked(&v9.clone());
                let v19: bool = leptos::SignalGet::get(&v16.l2.clone());
                let v21: LrcPtr<Dice_ui::Heap1> =
                    leptos::SignalGetUntracked::get_untracked(&v9.clone());
                let v24: std::string::String = leptos::SignalGet::get(&v21.l3.clone());
                let v26: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v9);
                let v30: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                    l0: v14,
                    l1: leptos::SignalGet::get(&v26.l1.clone()),
                    l2: v19,
                    l3: v24,
                });
                let v32: string =
                    append(append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                                  sprintf!("{:?}", v30.clone())), string(""));
                leptos::logging::log!("{}", v32);
                {
                    let v35: std::collections::HashMap<
                        std::string::String,
                        leptos::RwSignal<bool>,
                    > = v1();
                    let v36: string = Dice_ui::method59();
                    let v38: &str = fable_library_rust::String_::LrcStr::as_str(&v36);
                    let v41: std::string::String = Dice_ui::method60(String::from(v38));
                    let v43: Option<leptos::RwSignal<bool>> =
                        std::collections::HashMap::get(&v35, &v41)
                            .map(|x| x)
                            .cloned();
                    let v46: Dice_ui::US18 =
                        defaultValue(Dice_ui::US18::US18_1, map(Dice_ui::method61(), v43));
                    let v53: Dice_ui::US19 = match &v46 {
                        Dice_ui::US18::US18_0(v46_0_0) => {
                            Dice_ui::US19::US19_0(leptos::SignalGet::get(&match &v46 {
                                Dice_ui::US18::US18_0(x) => x.clone(),
                                _ => unreachable!(),
                            }))
                        }
                        _ => Dice_ui::US19::US19_1,
                    };
                    let v56: bool = match &v53 {
                        Dice_ui::US19::US19_0(v53_0_0) => match &v53 {
                            Dice_ui::US19::US19_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => false,
                    };
                    let v57: string =
                        append(append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                                      ofBoolean(v56)), string(""));
                    leptos::logging::log!("{}", v57);
                    if v56 == false {
                        if v6 == false {
                            leptos::SignalUpdate::update(&v2, |x| {
                                *x = Func1::new(move |v: bool| Dice_ui::closure44((), v))(x.clone())
                            });
                            ()
                        } else {
                            leptos::logging::log!("{}", string("state_core.use_core_database (18) / effect new_core_state_heap / ##4"));
                            {
                                let v66: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                                    Dice_ui::method44(Dice_ui::method43());
                                let v69: Dice_ui::US10 = match &v66 {
                                    Err(v66_1_0) => Dice_ui::closure25((), v66_1_0.clone()),
                                    Ok(v66_0_0) => Dice_ui::closure24((), v66_0_0.clone()),
                                };
                                let v78: Dice_ui::US11 = match &v69 {
                                    Dice_ui::US10::US10_0(v69_0_0) => {
                                        Dice_ui::US11::US11_0(defaultValue(
                                            Dice_ui::US12::US12_1,
                                            map(Dice_ui::method45(), v69_0_0.clone()),
                                        ))
                                    }
                                    Dice_ui::US10::US10_1(v69_1_0) => {
                                        Dice_ui::US11::US11_1(v69_1_0.clone())
                                    }
                                };
                                if let Dice_ui::US11::US11_0(v78_0_0) = &v78 {
                                    let v79: Dice_ui::US12 = match &v78 {
                                        Dice_ui::US11::US11_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US12::US12_0(v79_0_0) = &v79 {
                                        leptos::Action::dispatch(&v4, v30.clone().clone());
                                        {
                                            let v82: web_sys::Storage =
                                                Dice_ui::method62(match &v79 {
                                                    Dice_ui::US12::US12_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                });
                                            let v83: string = Dice_ui::method63();
                                            let v85: &str =
                                                fable_library_rust::String_::LrcStr::as_str(&v83);
                                            let v86: LrcPtr<Dice_ui::Heap3> =
                                                Dice_ui::method64(v30);
                                            let v89: std::string::String = Dice_ui::method65(
                                                serde_json::json!(v86).to_string(),
                                            );
                                            let v91: &str = v89.as_str();
                                            web_sys::Storage::set(&v82, v85, v91).unwrap();
                                            ()
                                        }
                                    }
                                }
                            }
                        };
                    }
                }
            }
        }
        pub fn closure45(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalGet::get(&v3.l0.clone())
        }
        pub fn method66(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure45(v0_1.clone(), ())
            })
        }
        pub fn closure47(v0_1: leptos_router::Location, unitVar: ()) -> string {
            let v2: leptos::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = v2();
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = v8();
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                v6,
                (if v12.clone() == string("") {
                    string("")
                } else {
                    sprintf!("?{}", v12)
                }),
            )
        }
        pub fn method68(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure48(
            v0_1: leptos_router::Location,
            v1: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)>,
            v2: leptos::Memo<string>,
            v3: LrcPtr<Dice_ui::Heap2>,
            v4: leptos::WriteSignal<bool>,
            v5: leptos::ReadSignal<bool>,
            unitVar: (),
        ) {
            let v7: bool = leptos::SignalGet::get(&v5);
            let v9: leptos::Memo<std::string::String> = v0_1.hash;
            let v11: std::string::String = v9();
            let v14: string = sprintf!("{}{}", v2(), v11.clone());
            let v15: string = append(
                append(
                    append(
                        append(
                            string("content.render () / effect 1 / new_url_hash: "),
                            v14.clone(),
                        ),
                        string(" / loaded: "),
                    ),
                    ofBoolean(v7),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v15);
            if v7 == false {
                let v18: std::string::String = Dice_ui::method68(v11);
                if v18 == "" {
                    let v23: LrcPtr<Dice_ui::Heap1> =
                        leptos::SignalGetUntracked::get_untracked(&v3.l0.clone());
                    let v26: std::string::String = leptos::SignalGet::get(&v23.l3.clone());
                    let v28: string = fable_library_rust::String_::fromString(v26);
                    let v29: string = append(
                        append(
                            string("content.render () / effect 1 / url_hash: "),
                            v28.clone(),
                        ),
                        string(""),
                    );
                    leptos::logging::log!("{}", v29);
                    if contains(v28.clone(), string("#")) {
                        let v34: &str = fable_library_rust::String_::LrcStr::as_str(&v28);
                        v1(v34, Default::default());
                        ()
                    }
                }
                leptos::SignalSet::set(&v4, true);
                ()
            } else {
                let v39: LrcPtr<Dice_ui::Heap1> =
                    leptos::SignalGetUntracked::get_untracked(&v3.l0.clone());
                let v41: string = Dice_ui::method19(v14);
                let v43: &str = fable_library_rust::String_::LrcStr::as_str(&v41);
                let v45: std::string::String = String::from(v43);
                leptos::SignalSet::set(&v39.l3.clone(), v45);
                ()
            }
        }
        pub fn method69(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure50(unitVar: (), v0_1: leptos_router::Url) -> Dice_ui::US22 {
            Dice_ui::US22::US22_0(v0_1)
        }
        pub fn closure51(unitVar: (), v0_1: std::string::String) -> Dice_ui::US22 {
            Dice_ui::US22::US22_1(v0_1)
        }
        pub fn method70(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure49(
            v0_1: leptos_router::Location,
            v1: leptos::WriteSignal<Dice_ui::US20>,
            unitVar: (),
        ) {
            let v3: leptos::Memo<std::string::String> = v0_1.hash;
            let v6: std::string::String = Dice_ui::method69(v3());
            let v8: Option<&str> = v6.strip_prefix('#');
            let v10: string = string("r#\"\"#");
            let v11: &str = r#""#;
            let v13: &str = v8.unwrap_or(v11);
            let v15: Result<leptos_router::Url, std::string::String> =
                leptos_router::Url::try_from(v13);
            let v18: Dice_ui::US22 = match &v15 {
                Err(v15_1_0) => Dice_ui::closure51((), v15_1_0.clone()),
                Ok(v15_0_0) => Dice_ui::closure50((), v15_0_0.clone()),
            };
            let v21: string = append(
                append(
                    string("content.render () / effect 2 / hash_url: "),
                    toString(format!("{:#?}", v18.clone())),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v21);
            match &v18 {
                Dice_ui::US22::US22_0(v18_0_0) => {
                    let v29: Array<Dice_ui::US20> = new_array(&[
                        Dice_ui::US20::US20_1(Dice_ui::US21::US21_0),
                        Dice_ui::US20::US20_2,
                        Dice_ui::US20::US20_3,
                        Dice_ui::US20::US20_4,
                    ]);
                    let v30: i32 = count(v29.clone());
                    let v32: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                        l0: MutCell::new(0_i32),
                        l1: MutCell::new(Dice_ui::US23::US23_1),
                    });
                    while Dice_ui::method70(v30, v32.clone()) {
                        let v34: i32 = v32.l0.get().clone();
                        let v35: Dice_ui::US23 = v32.l1.get().clone();
                        let v36: Dice_ui::US20 = v29[v34].clone();
                        let v59: Dice_ui::US23 = match &v35 {
                            Dice_ui::US23::US23_0(v35_0_0) => Dice_ui::US23::US23_0(match &v35 {
                                Dice_ui::US23::US23_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => {
                                let v48: string = match &v36 {
                                    Dice_ui::US20::US20_1(v36_1_0) => string("dice"),
                                    Dice_ui::US20::US20_2 => string("lists"),
                                    Dice_ui::US20::US20_4 => string("settings"),
                                    Dice_ui::US20::US20_3 => string("transactions"),
                                    _ => string(""),
                                };
                                let v50: std::string::String = v18_0_0.clone().pathname;
                                if startsWith(
                                    fable_library_rust::String_::fromString(v50),
                                    append(append(string("/"), v48), string("")),
                                    false,
                                ) {
                                    Dice_ui::US23::US23_0(v36.clone())
                                } else {
                                    Dice_ui::US23::US23_1
                                }
                            }
                        };
                        let v60: i32 = v34 + 1_i32;
                        v32.l0.set(v60);
                        v32.l1.set(v59);
                        ()
                    }
                    {
                        let v61: Dice_ui::US23 = v32.l1.get().clone();
                        let v62: Dice_ui::US20 = v29[0_i32].clone();
                        let v65: Dice_ui::US20 = match &v61 {
                            Dice_ui::US23::US23_0(v61_0_0) => match &v61 {
                                Dice_ui::US23::US23_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v62,
                        };
                        let v68: string = append(
                            append(
                                string("content.render () / effect 2 / new_tab: "),
                                toString(format!("{:#?}", v65.clone())),
                            ),
                            string(""),
                        );
                        leptos::logging::log!("{}", v68);
                        leptos::SignalSet::set(&v1, v65);
                        ()
                    }
                }
                Dice_ui::US22::US22_1(v18_1_0) => {
                    let v72: string = append(
                        append(
                            string("content.render () / effect 2 / hash_url error: "),
                            toString(v18_1_0.clone()),
                        ),
                        string(""),
                    );
                    leptos::logging::log!("{}", v72);
                    ()
                }
            }
        }
        pub fn closure56(
            unitVar: (),
            v0_: bool,
            v0__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v0_1: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v0_, v0__1));
            (v0_1.0.clone(), v0_1.1.clone())
        }
        pub fn closure57(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method74() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure57((), arg10_0040)
            })
        }
        pub fn method75(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure58(unitVar: (), _arg: (bool, std::string::String)) -> std::string::String {
            _arg.1.clone()
        }
        pub fn closure59(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn closure55(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v3.l1.clone());
            let v10: Vec<(bool, std::string::String)> = v6
                .l1
                .clone()
                .iter()
                .map(|x| {
                    Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                        Dice_ui::closure56((), tupledArg.0.clone(), tupledArg.1.clone())
                    })(x.clone())
                })
                .collect();
            let v11 = Dice_ui::method74();
            let v12: Vec<(bool, std::string::String)> = Dice_ui::method75(v10);
            let v14: Vec<(bool, std::string::String)> =
                v12.into_iter().filter(|x| v11(x.clone().clone())).collect();
            let v17: Vec<std::string::String> = v14
                .iter()
                .map(|x| {
                    Func1::new(move |arg10_0040_1: (bool, std::string::String)| {
                        Dice_ui::closure58((), arg10_0040_1)
                    })(x.clone())
                })
                .collect();
            let v20: Vec<string> = v17
                .iter()
                .map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(x.clone())
                })
                .collect();
            let v22: string = append(
                append(
                    string("use_transactions.render (2) / accounts create_memo / result: "),
                    sprintf!("{:?}", v20.clone()),
                ),
                string(""),
            );
            let v27: string = if length(v22.clone()) <= 200_i32 {
                v22.clone()
            } else {
                append(getSlice(v22, Some(0_i32), Some(199_i32)), string("..."))
            };
            leptos::logging::log!("{}", v27);
            v20
        }
        pub fn closure61(unitVar: (), v0_1: string) -> (bool, string, bool, Dice_ui::US25, string) {
            (
                true,
                string(""),
                false,
                Dice_ui::US25::US25_0,
                append(
                    append(string("https://api2.nearblocks.io/v1/account/"), v0_1),
                    string(""),
                ),
            )
        }
        pub fn closure60(
            v0_1: leptos::Memo<Vec<string>>,
            unitVar: (),
        ) -> Array<(bool, string, bool, Dice_ui::US25, string)> {
            let v2: Vec<string> = v0_1();
            let v5: Vec<(bool, string, bool, Dice_ui::US25, string)> = v2
                .iter()
                .map(|x| Func1::new(move |v: string| Dice_ui::closure61((), v))(x.clone()))
                .collect();
            let v7: Array<(bool, string, bool, Dice_ui::US25, string)> =
                fable_library_rust::NativeArray_::array_from(v5);
            let v9: string = append(
                append(
                    string(
                        "use_transactions.render (3) / accounts_metadata create_memo / result: ",
                    ),
                    sprintf!("{:?}", v7.clone()),
                ),
                string(""),
            );
            let v14: string = if length(v9.clone()) <= 200_i32 {
                v9.clone()
            } else {
                append(getSlice(v9, Some(0_i32), Some(199_i32)), string("..."))
            };
            leptos::logging::log!("{}", v14);
            v7
        }
        pub fn method76(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure64(v0_1: string, v1: i32) -> (bool, string, bool, Dice_ui::US25, string) {
            (
                true,
                string(""),
                false,
                Dice_ui::US25::US25_0,
                append(
                    append(
                        append(
                            append(
                                append(
                                    append(string("https://api2.nearblocks.io/v1/account/"), v0_1),
                                    string("/txns?&order=desc&page="),
                                ),
                                toString(v1 + 1_i32),
                            ),
                            string("&per_page="),
                        ),
                        toString(25_i32),
                    ),
                    string(""),
                ),
            )
        }
        pub fn closure63(
            v0_1: LrcPtr<Dice_ui::Heap0>,
            v1: string,
        ) -> (string, Vec<(bool, string, bool, Dice_ui::US25, string)>) {
            let v2: i32 = v0_1.l3;
            let v3: Array<i32> = new_init(&0_i32, v2);
            let v4: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method76(v2, v4.clone()) {
                let v6: i32 = v4.l0.get().clone();
                v3.get_mut()[v6 as usize] = v6;
                {
                    let v7: i32 = v6 + 1_i32;
                    v4.l0.set(v7);
                    ()
                }
            }
            {
                let v9: Vec<i32> = v3.clone().to_vec();
                (
                    v1.clone(),
                    v9.iter()
                        .map(|x| {
                            Func1::new({
                                let v1 = v1.clone();
                                move |v: i32| Dice_ui::closure64(v1.clone(), v)
                            })(x.clone())
                        })
                        .collect(),
                )
            }
        }
        pub fn closure62(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)> {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v4.l1.clone());
            let v9: Vec<string> = v1();
            let v12: Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)> = v9
                .iter()
                .map(|x| {
                    Func1::new({
                        let v7 = v7.clone();
                        move |v: string| Dice_ui::closure63(v7.clone(), v)
                    })(x.clone())
                })
                .collect();
            let v14: string = append(
                append(
                    string(
                        "use_transactions.render (4) / accounts_requests create_memo / result: ",
                    ),
                    sprintf!("{:?}", v12.clone()),
                ),
                string(""),
            );
            let v19: string = if length(v14.clone()) <= 200_i32 {
                v14.clone()
            } else {
                append(getSlice(v14, Some(0_i32), Some(199_i32)), string("..."))
            };
            leptos::logging::log!("{}", v19);
            v12
        }
        pub fn closure66(
            unitVar: (),
            _arg: (string, Vec<(bool, string, bool, Dice_ui::US25, string)>),
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            _arg.1.clone()
        }
        pub fn method77(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method78(
            v0_1: Vec<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn method79(
            v0_1: Vec<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn closure65(
            v0_1: leptos::Memo<Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)>>,
            unitVar: (),
        ) -> Array<(bool, string, bool, Dice_ui::US25, string)> {
            let v2: Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)> = v0_1();
            let v5: Vec<Vec<(bool, string, bool, Dice_ui::US25, string)>> = v2
                .iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (
                            string,
                            Vec<(bool, string, bool, Dice_ui::US25, string)>,
                        )| Dice_ui::closure66((), arg10_0040),
                    )(x.clone())
                })
                .collect();
            let v8: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                new_empty::<(bool, string, bool, Dice_ui::US25, string)>().to_vec();
            let v10: Array<Vec<(bool, string, bool, Dice_ui::US25, string)>> =
                fable_library_rust::NativeArray_::array_from(v5);
            let v11: i32 = count(v10.clone());
            let v12: LrcPtr<Dice_ui::Mut2> = LrcPtr::new(Dice_ui::Mut2 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v8),
            });
            while Dice_ui::method77(v11, v12.clone()) {
                let v14: i32 = v12.l0.get().clone();
                let v15: Vec<(bool, string, bool, Dice_ui::US25, string)> = v12.l1.get().clone();
                let v17: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                    Dice_ui::method78(v10[v14].clone());
                let v18: Vec<(bool, string, bool, Dice_ui::US25, string)> = Dice_ui::method79(v15);
                let mut v18 = v18;
                v18.extend(v17);
                {
                    let v22: Vec<(bool, string, bool, Dice_ui::US25, string)> = v18;
                    let v23: i32 = v14 + 1_i32;
                    v12.l0.set(v23);
                    v12.l1.set(v22);
                    ()
                }
            }
            {
                let v24: Vec<(bool, string, bool, Dice_ui::US25, string)> = v12.l1.get().clone();
                let v26: Array<(bool, string, bool, Dice_ui::US25, string)> =
                    fable_library_rust::NativeArray_::array_from(v24);
                let v28: string = append(
                    append(
                        string(
                            "use_transactions.render (5) / txns_requests create_memo / result: ",
                        ),
                        sprintf!("{:?}", v26.clone()),
                    ),
                    string(""),
                );
                let v33: string = if length(v28.clone()) <= 200_i32 {
                    v28.clone()
                } else {
                    append(getSlice(v28, Some(0_i32), Some(199_i32)), string("..."))
                };
                leptos::logging::log!("{}", v33);
                v26
            }
        }
        pub fn closure69(
            v0_1: string,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> string {
            v0_1
        }
        pub fn closure68(
            unitVar: (),
            _arg: (string, Vec<(bool, string, bool, Dice_ui::US25, string)>),
        ) -> Vec<string> {
            _arg.1
                .clone()
                .iter()
                .map(|x| {
                    Func1::new({
                        let _arg = _arg.clone();
                        move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                            Dice_ui::closure69(_arg.0.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect()
        }
        pub fn method80(v0_1: i32, v1: LrcPtr<Dice_ui::Mut3>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method81(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method82(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn closure67(
            v0_1: leptos::Memo<Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)>>,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)> = v0_1();
            let v5: Vec<Vec<string>> = v2
                .iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (
                            string,
                            Vec<(bool, string, bool, Dice_ui::US25, string)>,
                        )| Dice_ui::closure68((), arg10_0040),
                    )(x.clone())
                })
                .collect();
            let v8: Vec<string> = new_empty::<string>().to_vec();
            let v10: Array<Vec<string>> = fable_library_rust::NativeArray_::array_from(v5);
            let v11: i32 = count(v10.clone());
            let v12: LrcPtr<Dice_ui::Mut3> = LrcPtr::new(Dice_ui::Mut3 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v8),
            });
            while Dice_ui::method80(v11, v12.clone()) {
                let v14: i32 = v12.l0.get().clone();
                let v15: Vec<string> = v12.l1.get().clone();
                let v17: Vec<string> = Dice_ui::method81(v10[v14].clone());
                let v18: Vec<string> = Dice_ui::method82(v15);
                let mut v18 = v18;
                v18.extend(v17);
                {
                    let v22: Vec<string> = v18;
                    let v23: i32 = v14 + 1_i32;
                    v12.l0.set(v23);
                    v12.l1.set(v22);
                    ()
                }
            }
            {
                let v24: Vec<string> = v12.l1.get().clone();
                let v26: Array<string> = fable_library_rust::NativeArray_::array_from(v24);
                let v28: string = append(
                    append(
                        string(
                            "use_transactions.render (6) / urls_accounts create_memo / result: ",
                        ),
                        sprintf!("{:?}", v26.clone()),
                    ),
                    string(""),
                );
                let v33: string = if length(v28.clone()) <= 200_i32 {
                    v28.clone()
                } else {
                    append(getSlice(v28, Some(0_i32), Some(199_i32)), string("..."))
                };
                leptos::logging::log!("{}", v33);
                v26
            }
        }
        pub fn closure70(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            unitVar: (),
        ) -> Option<rexie::Rexie> {
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            leptos::SignalGet::get(&v0_1)
        }
        pub fn closure71(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            unitVar: (),
        ) -> (
            Option<rexie::Rexie>,
            Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) {
            (leptos::SignalGet::get(&v1), v0_1())
        }
        pub fn method87(v0_1: string) -> string {
            v0_1
        }
        pub fn method88(
            v0_1: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error>,
        ) -> Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> {
            v0_1
        }
        pub fn method89(
            v0_1: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
        ) -> Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> {
            v0_1
        }
        pub fn method86(
            v0_1: string,
            v1: rexie::Rexie,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async {
                //;
                {
                    let v4: Array<string> = new_array(&[string("store")]);
                    let v6: Vec<string> = v4.to_vec();
                    let v9: Vec<std::string::String> = v6
                        .iter()
                        .map(|x| Func1::new(move |v: string| Dice_ui::closure11((), v))(x.clone()))
                        .collect();
                    let v10: rexie::Rexie = Dice_ui::method20(v1);
                    let v12: Result<rexie::Transaction, rexie::Error> =
                        v10.transaction(&v9, rexie::TransactionMode::ReadOnly);
                    let v13 = Dice_ui::method21();
                    let v14: Result<rexie::Transaction, rexie::Error> = Dice_ui::method22(v12);
                    let v16: Result<rexie::Transaction, std::string::String> =
                        v14.map_err(|x| v13(x));
                    let v18: rexie::Transaction = v16?;
                    let v19: string = Dice_ui::method23();
                    let v21: &str = fable_library_rust::String_::LrcStr::as_str(&v19);
                    let v23: Result<rexie::Store, rexie::Error> = v18.store(v21);
                    let v24 = Dice_ui::method24();
                    let v25: Result<rexie::Store, rexie::Error> = Dice_ui::method25(v23);
                    let v27: Result<rexie::Store, std::string::String> = v25.map_err(|x| v24(x));
                    let v29: rexie::Store = v27?;
                    let v30: string = Dice_ui::method87(v0_1);
                    let v32: &str = fable_library_rust::String_::LrcStr::as_str(&v30);
                    let v34: wasm_bindgen::JsValue = wasm_bindgen::JsValue::from_str(v32);
                    let v36: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<wasm_bindgen::JsValue, rexie::Error>,
                            >,
                        >,
                    > = Box::pin(rexie::Store::get(&v29, &v34));
                    let v38: Result<wasm_bindgen::JsValue, rexie::Error> = v36.await;
                    let v39 = Dice_ui::method27();
                    let v40: Result<wasm_bindgen::JsValue, rexie::Error> = Dice_ui::method28(v38);
                    let v42: Result<wasm_bindgen::JsValue, std::string::String> =
                        v40.map_err(|x| v39(x));
                    let v45: wasm_bindgen::JsValue = Dice_ui::method29(v42?);
                    let v47: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                        serde_wasm_bindgen::from_value(v45);
                    let v48 = Dice_ui::method30();
                    let v49: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                        Dice_ui::method31(v47);
                    let v51: Result<Option<serde_json::Value>, std::string::String> =
                        v49.map_err(|x| v48(x));
                    let v53: Option<serde_json::Value> = v51?;
                    let v56: Dice_ui::US7 =
                        defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method32(), v53));
                    let v88: Dice_ui::US27 = match &v56 {
                        Dice_ui::US7::US7_0(v56_0_0) => {
                            let v58: serde_json::Value = Dice_ui::method33(match &v56 {
                                Dice_ui::US7::US7_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            let v60: Result<Vec<u8>, serde_json::Error> =
                                serde_json::from_value(v58);
                            let v61 = Dice_ui::method34();
                            let v62: Result<Vec<u8>, serde_json::Error> = Dice_ui::method35(v60);
                            let v64: Result<Vec<u8>, std::string::String> = v62.map_err(|x| v61(x));
                            let v66: Vec<u8> = v64?;
                            let v68: Array<u8> = fable_library_rust::NativeArray_::array_from(v66);
                            let v70: string = append(
                                append(
                                    string("state_core.get_data () / data_len: "),
                                    toString(count(v68.clone())),
                                ),
                                string(""),
                            );
                            leptos::logging::log!("{}", v70);
                            {
                                let v73: Vec<u8> = v68.to_vec();
                                let v75: &[u8] = v73.as_slice();
                                let mut v75 = v75;
                                {
                                    let v78: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> =
                                        borsh::BorshDeserialize::deserialize(&mut v75);
                                    let v79 = Dice_ui::method36();
                                    let v80: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> =
                                        Dice_ui::method88(v78);
                                    let v82: Result<LrcPtr<Dice_ui::Heap4>, std::string::String> =
                                        v80.map_err(|x| v79(x));
                                    Dice_ui::US27::US27_0(v82?)
                                }
                            }
                        }
                        _ => Dice_ui::US27::US27_1,
                    };
                    let v95: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                        Dice_ui::method89(
                            Ok::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(match &v88 {
                                Dice_ui::US27::US27_0(v88_0_0) => Some(match &v88 {
                                    Dice_ui::US27::US27_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }),
                                _ => None::<LrcPtr<Dice_ui::Heap4>>,
                            }),
                        );
                    v95
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure73(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap4>>) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn closure74(unitVar: (), v0_1: std::string::String) -> Dice_ui::US26 {
            Dice_ui::US26::US26_1(v0_1)
        }
        pub fn method90() -> string {
            string("database=None")
        }
        pub fn method85(
            v0_1: Option<rexie::Rexie>,
            v1: bool,
            v2: string,
            v3: bool,
            v4: Dice_ui::US25,
            v5: string,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v9: Dice_ui::US5 =
                        defaultValue(Dice_ui::US5::US5_1, map(Dice_ui::method17(), v0_1));
                    let v26: Dice_ui::US26 = if let Dice_ui::US5::US5_0(v9_0_0) = &v9 {
                        let v11: string = append(
                            append(
                                append(append(string("url["), v5), string("](")),
                                sprintf!("{:?}", v2),
                            ),
                            string(")"),
                        );
                        let v12: string = append(
                            append(string("state_core.get_data () / id: "), v11.clone()),
                            string(""),
                        );
                        leptos::logging::log!("{}", v12);
                        {
                            let v14: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method86(
                                v11,
                                match &v9 {
                                    Dice_ui::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            let v16: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                                v14.await;
                            match &v16 {
                                Err(v16_1_0) => Dice_ui::closure74((), v16_1_0.clone()),
                                Ok(v16_0_0) => Dice_ui::closure73((), v16_0_0.clone()),
                            }
                        }
                    } else {
                        let v20: string = Dice_ui::method90();
                        let v22: &str = fable_library_rust::String_::LrcStr::as_str(&v20);
                        Dice_ui::US26::US26_1(String::from(v22))
                    };
                    let v33: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                        Dice_ui::method89(match &v26 {
                            Dice_ui::US26::US26_0(v26_0_0) => {
                                Ok::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(
                                    v26_0_0.clone(),
                                )
                            }
                            Dice_ui::US26::US26_1(v26_1_0) => {
                                Err::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(
                                    v26_1_0.clone(),
                                )
                            }
                        });
                    v33
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure72(
            v0_1: Option<rexie::Rexie>,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            Dice_ui::method85(
                v0_1,
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            )
        }
        pub fn method91(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn method92(
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            v0_1
        }
        pub fn method84(
            v0_1: Array<(bool, string, bool, Dice_ui::US25, string)>,
            v1: Option<rexie::Rexie>,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v3: string = sprintf!("{:?}", v1.clone());
                    let v4: string = sprintf!("{:?}", v0_1.clone());
                    let v5: i64 = length(v4.clone()) as i64;
                    let v27: string =
                    append(append(append(append(string("state_core.use_requests (3) / state_data_resource create_local_resource / request : "),
                                                (if v5 <= 400_i64 {
                                                     v4.clone()
                                                 } else {
                                                     let v8: f64 =
                                                         400_i64 as f64 /
                                                             2.0_f64;
                                                     let v11: i64 =
                                                         v8.ceil() as i64;
                                                     let v14: i64 =
                                                         v8.floor() as i64;
                                                     join(string(""),
                                                          toArray(ofArray(new_array(&[getSlice(v4.clone(),
                                                                                               Some(0_i64
                                                                                                        as
                                                                                                        i32),
                                                                                               Some((v11
                                                                                                         -
                                                                                                         1_i64)
                                                                                                        as
                                                                                                        i32)),
                                                                                      string("..."),
                                                                                      getSlice(v4,
                                                                                               Some((v5
                                                                                                         -
                                                                                                         v14)
                                                                                                        as
                                                                                                        i32),
                                                                                               Some((v5
                                                                                                         -
                                                                                                         1_i64)
                                                                                                        as
                                                                                                        i32))]))))
                                                 })),
                                         string(" / database: ")), v3),
                           string(""));
                    leptos::logging::log!("{}", v27);
                    {
                        let v30: Vec<(bool, string, bool, Dice_ui::US25, string)> = v0_1.to_vec();
                        let v34: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method91(
                            v30.iter()
                                .map(|x| {
                                    Func1::new({
                                        let v1 = v1.clone();
                                        move |arg10_0040: (
                                            bool,
                                            string,
                                            bool,
                                            Dice_ui::US25,
                                            string,
                                        )| {
                                            Dice_ui::closure72(v1.clone(), arg10_0040)
                                        }
                                    })(x.clone())
                                })
                                .collect(),
                        );
                        let v36: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v34);
                        let v38: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            v36.await;
                        let v41: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(v38?);
                        let v43: string =
                        append(append(string("state_core.use_requests (4) / state_data_resource create_local_resource / result: "),
                                      sprintf!("{:?}", v41.clone())),
                               string(""));
                        let v48: string = if length(v43.clone()) <= 200_i32 {
                            v43.clone()
                        } else {
                            append(getSlice(v43, Some(0_i32), Some(199_i32)), string("..."))
                        };
                        leptos::logging::log!("{}", v48);
                        {
                            let v50: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = Dice_ui::method92(v41);
                            v50
                        }
                    }
                }
            });
            {
                {
                    {
                        //;
                        __result
                    }
                }
            }
        }
        pub fn method93(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                >,
            >,
        > {
            v0_1
        }
        pub fn method83(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
        ) -> leptos::Resource<
            (
                Option<rexie::Rexie>,
                Array<(bool, string, bool, Dice_ui::US25, string)>,
            ),
            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        > {
            let __result = leptos::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move || Dice_ui::closure71(v0_1.clone(), v1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Option<rexie::Rexie>,
                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                        ) = x;
                        let v8: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method93(Dice_ui::method84(
                            patternInput.1.clone(),
                            patternInput.0.clone(),
                        ));
                        let v10: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            v8.await;
                        v10
                    }
                },
            );
            {
                //;
                __result
            }
        }
        pub fn method94(
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            v0_1
        }
        pub fn closure77(
            unitVar: (),
            v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
        ) -> Array<Option<LrcPtr<Dice_ui::Heap4>>> {
            fable_library_rust::NativeArray_::array_from(v0_1)
        }
        pub fn closure76(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            let v1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                Dice_ui::method94(v0_1);
            v1.map(|x| {
                Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure77((), v))(
                    x,
                )
            })
        }
        pub fn closure75(
            v0_1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            {
                let v4: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method44(Dice_ui::method43());
                let v7: Dice_ui::US10 = match &v4 {
                    Err(v4_1_0) => Dice_ui::closure25((), v4_1_0.clone()),
                    Ok(v4_0_0) => Dice_ui::closure24((), v4_0_0.clone()),
                };
                let v16: Dice_ui::US11 = match &v7 {
                    Dice_ui::US10::US10_0(v7_0_0) => Dice_ui::US11::US11_0(defaultValue(
                        Dice_ui::US12::US12_1,
                        map(Dice_ui::method45(), v7_0_0.clone()),
                    )),
                    Dice_ui::US10::US10_1(v7_1_0) => Dice_ui::US11::US11_1(v7_1_0.clone()),
                };
                let v26: Option<
                    Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                > = if let Dice_ui::US11::US11_0(v16_0_0) = &v16 {
                    if let Dice_ui::US12::US12_0(_) = &match &v16 {
                        Dice_ui::US11::US11_0(x) => x.clone(),
                        _ => unreachable!(),
                    } {
                        map(
                            Func1::new(
                                move |v_2: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >| Dice_ui::closure76((), v_2),
                            ),
                            leptos::SignalGet::get(&v0_1),
                        )
                    } else {
                        None::<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
                let v28: string = append(
                    append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v26.clone()),
                    ),
                    string(""),
                );
                let v33: string = if length(v28.clone()) <= 200_i32 {
                    v28.clone()
                } else {
                    append(getSlice(v28, Some(0_i32), Some(199_i32)), string("..."))
                };
                leptos::logging::log!("{}", v33);
                v26
            }
        }
        pub fn closure78(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            unitVar: (),
        ) -> (
            Array<(bool, string, bool, Dice_ui::US25, string)>,
            Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
        ) {
            (v0_1(), v1())
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US28 {
            Dice_ui::US28::US28_0(v0_1)
        }
        pub fn method97(
        ) -> Func1<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US28>
        {
            Func1::new(
                move |v: Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure79((), v)
                },
            )
        }
        pub fn closure80(
            unitVar: (),
            v0_1: Array<Option<LrcPtr<Dice_ui::Heap4>>>,
        ) -> Dice_ui::US31 {
            Dice_ui::US31::US31_0(v0_1)
        }
        pub fn closure81(unitVar: (), v0_1: std::string::String) -> Dice_ui::US31 {
            Dice_ui::US31::US31_1(v0_1)
        }
        pub fn closure83(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US27 {
            Dice_ui::US27::US27_0(v0_1)
        }
        pub fn method98() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US27> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure83((), v))
        }
        pub fn closure82(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap4>>) -> Dice_ui::US27 {
            defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method98(), v0_1))
        }
        pub fn closure86(unitVar: (), v0_1: Dice_ui::US27) -> Dice_ui::US35 {
            Dice_ui::US35::US35_0(v0_1)
        }
        pub fn method101() -> Func1<Dice_ui::US27, Dice_ui::US35> {
            Func1::new(move |v: Dice_ui::US27| Dice_ui::closure86((), v))
        }
        pub fn method102(v0_1: Dice_ui::US25) -> Dice_ui::US25 {
            v0_1
        }
        pub fn method103(v0_1: string) -> string {
            v0_1
        }
        pub fn method104(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method105(v0_1: string) -> string {
            v0_1
        }
        pub fn method106(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method107(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method108() -> string {
            string("application/json")
        }
        pub fn method109(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure87(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method110() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure87((), v))
        }
        pub fn method111(
            v0_1: Result<reqwest_wasm::Response, reqwest_wasm::Error>,
        ) -> Result<reqwest_wasm::Response, reqwest_wasm::Error> {
            v0_1
        }
        pub fn method112(
            v0_1: Result<std::string::String, reqwest_wasm::Error>,
        ) -> Result<std::string::String, reqwest_wasm::Error> {
            v0_1
        }
        pub fn method113(
            v0_1: Result<Option<string>, std::string::String>,
        ) -> Result<Option<string>, std::string::String> {
            v0_1
        }
        pub fn method100(
            v0_1: Dice_ui::US29,
            v1: i32,
            v2: bool,
            v3: bool,
            v4: string,
            v5: Dice_ui::US25,
            v6: string,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v39: Dice_ui::US32 = match &v0_1 {
                        Dice_ui::US29::US29_0(v0_1_0_0) => {
                            let v8: Dice_ui::US30 = match &v0_1 {
                                Dice_ui::US29::US29_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            Dice_ui::US32::US32_0(match &v8 {
                                Dice_ui::US30::US30_0(v8_0_0) => {
                                    let v12: Option<Dice_ui::US27> = tryItem(v1, v8_0_0.clone());
                                    let v15: Dice_ui::US35 = defaultValue(
                                        Dice_ui::US35::US35_1,
                                        map(Dice_ui::method101(), v12),
                                    );
                                    let v22: Dice_ui::US27 =
                                        if let Dice_ui::US35::US35_0(v15_0_0) = &v15 {
                                            let v16: Dice_ui::US27 = match &v15 {
                                                Dice_ui::US35::US35_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            };
                                            if let Dice_ui::US27::US27_0(v16_0_0) = &v16 {
                                                Dice_ui::US27::US27_0(match &v16 {
                                                    Dice_ui::US27::US27_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            } else {
                                                Dice_ui::US27::US27_1
                                            }
                                        } else {
                                            Dice_ui::US27::US27_1
                                        };
                                    Dice_ui::US33::US33_0(match &v22 {
                                        Dice_ui::US27::US27_0(v22_0_0) => Dice_ui::US34::US34_0(
                                            fable_library_rust::String_::fromString(
                                                (match &v22 {
                                                    Dice_ui::US27::US27_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                                .l0
                                                .clone(),
                                            ),
                                        ),
                                        _ => Dice_ui::US34::US34_1,
                                    })
                                }
                                Dice_ui::US30::US30_1(v8_1_0) => {
                                    Dice_ui::US33::US33_1(v8_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US32::US32_1,
                    };
                    let v40: string = sprintf!("{:?}", (v2, v3, v5.clone()));
                    let v41: i64 = length(v40.clone()) as i64;
                    let v62: string = if v41 <= 400_i64 {
                        v40.clone()
                    } else {
                        let v44: f64 = 400_i64 as f64 / 2.0_f64;
                        let v47: i64 = v44.ceil() as i64;
                        let v50: i64 = v44.floor() as i64;
                        join(
                            string(""),
                            toArray(ofArray(new_array(&[
                                getSlice(
                                    v40.clone(),
                                    Some(0_i64 as i32),
                                    Some((v47 - 1_i64) as i32),
                                ),
                                string("..."),
                                getSlice(v40, Some((v41 - v50) as i32), Some((v41 - 1_i64) as i32)),
                            ]))),
                        )
                    };
                    let v63: string = sprintf!("{:?}", v0_1.clone());
                    let v64: i64 = length(v63.clone()) as i64;
                    let v85: string = if v64 <= 400_i64 {
                        v63.clone()
                    } else {
                        let v67: f64 = 400_i64 as f64 / 2.0_f64;
                        let v70: i64 = v67.ceil() as i64;
                        let v73: i64 = v67.floor() as i64;
                        join(
                            string(""),
                            toArray(ofArray(new_array(&[
                                getSlice(
                                    v63.clone(),
                                    Some(0_i64 as i32),
                                    Some((v70 - 1_i64) as i32),
                                ),
                                string("..."),
                                getSlice(v63, Some((v64 - v73) as i32), Some((v64 - 1_i64) as i32)),
                            ]))),
                        )
                    };
                    let v86: string = sprintf!("{:?}", v39.clone());
                    let v87: i64 = length(v86.clone()) as i64;
                    let v108: string = if v87 <= 400_i64 {
                        v86.clone()
                    } else {
                        let v90: f64 = 400_i64 as f64 / 2.0_f64;
                        let v93: i64 = v90.ceil() as i64;
                        let v96: i64 = v90.floor() as i64;
                        join(
                            string(""),
                            toArray(ofArray(new_array(&[
                                getSlice(
                                    v86.clone(),
                                    Some(0_i64 as i32),
                                    Some((v93 - 1_i64) as i32),
                                ),
                                string("..."),
                                getSlice(v86, Some((v87 - v96) as i32), Some((v87 - 1_i64) as i32)),
                            ]))),
                        )
                    };
                    let v131: bool = if v2 {
                        true
                    } else {
                        if let Dice_ui::US29::US29_0(v0_1_0_0) = &v0_1 {
                            let v109: Dice_ui::US30 = match &v0_1 {
                                Dice_ui::US29::US29_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US30::US30_0(v109_0_0) = &v109 {
                                if count(match &v109 {
                                    Dice_ui::US30::US30_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }) as u64
                                    == 0_u64
                                {
                                    false
                                } else {
                                    if let Dice_ui::US32::US32_0(v39_0_0) = &v39 {
                                        let v113: Dice_ui::US33 = match &v39 {
                                            Dice_ui::US32::US32_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if let Dice_ui::US33::US33_0(v113_0_0) = &v113 {
                                            if let Dice_ui::US34::US34_1 = &match &v113 {
                                                Dice_ui::US33::US33_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            } {
                                                true
                                            } else {
                                                false
                                            }
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                }
                            } else {
                                if let Dice_ui::US32::US32_0(v39_0_0) = &v39 {
                                    let v119: Dice_ui::US33 = match &v39 {
                                        Dice_ui::US32::US32_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US33::US33_0(v119_0_0) = &v119 {
                                        if let Dice_ui::US34::US34_1 = &match &v119 {
                                            Dice_ui::US33::US33_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        } {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US32::US32_0(v39_0_0) = &v39 {
                                let v125: Dice_ui::US33 = match &v39 {
                                    Dice_ui::US32::US32_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US33::US33_0(v125_0_0) = &v125 {
                                    if let Dice_ui::US34::US34_1 = &match &v125 {
                                        Dice_ui::US33::US33_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    } {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    };
                    let v132: string =
                    append(append(append(append(append(append(append(append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                            v85),
                                                                     string(" / state_data\': ")),
                                                              v108),
                                                       string(" / request: ")),
                                                v62),
                                         string(" / should_fetch: ")),
                                  ofBoolean(v131)), string(""));
                    leptos::logging::log!("{}", v132);
                    {
                        let v211: Dice_ui::US36 = if v131 == false {
                            Dice_ui::US36::US36_0(None::<string>)
                        } else {
                            let v137: Dice_ui::US25 = Dice_ui::method102(v5);
                            let v157: reqwest_wasm::RequestBuilder = match &v137 {
                                Dice_ui::US25::US25_1 => {
                                    let v148: string =
                                        Dice_ui::method19(Dice_ui::method105(v6.clone()));
                                    let v150: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v148);
                                    let v153: std::string::String =
                                        Dice_ui::method106(String::from(v150));
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .post(v153)
                                }
                                _ => {
                                    let v139: string =
                                        Dice_ui::method19(Dice_ui::method103(v6.clone()));
                                    let v141: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v139);
                                    let v144: std::string::String =
                                        Dice_ui::method104(String::from(v141));
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .get(v144)
                                }
                            };
                            let v158: string = Dice_ui::method19(v4);
                            let v160: &str = fable_library_rust::String_::LrcStr::as_str(&v158);
                            let v162: std::string::String = String::from(v160);
                            let v164: reqwest_wasm::RequestBuilder =
                                reqwest_wasm::RequestBuilder::body(v157, v162);
                            let v186: reqwest_wasm::RequestBuilder =
                                Dice_ui::method109(if v3 == false {
                                    v164
                                } else {
                                    let v169: std::string::String =
                                        reqwest_wasm::header::CONTENT_TYPE.to_string();
                                    let v171: string =
                                        fable_library_rust::String_::fromString(v169);
                                    let v172: reqwest_wasm::RequestBuilder =
                                        Dice_ui::method107(v164);
                                    let v173: string = Dice_ui::method19(v171);
                                    let v175: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v173);
                                    let v177: std::string::String = String::from(v175);
                                    let v178: string = Dice_ui::method108();
                                    let v180: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v178);
                                    let v182: std::string::String = String::from(v180);
                                    reqwest_wasm::RequestBuilder::header(v172, v177, v182)
                                });
                            let v188: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<
                                            reqwest_wasm::Response,
                                            reqwest_wasm::Error,
                                        >,
                                    >,
                                >,
                            > = Box::pin(reqwest_wasm::RequestBuilder::send(v186));
                            let v190: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                v188.await;
                            let v191 = Dice_ui::method110();
                            let v192: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                Dice_ui::method111(v190);
                            let v194: Result<reqwest_wasm::Response, std::string::String> =
                                v192.map_err(|x| v191(x));
                            let v196: reqwest_wasm::Response = v194?;
                            let v198: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<std::string::String, reqwest_wasm::Error>,
                                    >,
                                >,
                            > = Box::pin(reqwest_wasm::Response::text(v196));
                            let v200: Result<std::string::String, reqwest_wasm::Error> = v198.await;
                            let v201 = Dice_ui::method110();
                            let v202: Result<std::string::String, reqwest_wasm::Error> =
                                Dice_ui::method112(v200);
                            let v204: Result<std::string::String, std::string::String> =
                                v202.map_err(|x| v201(x));
                            let v206: std::string::String = v204?;
                            Dice_ui::US36::US36_0(Some(fable_library_rust::String_::fromString(
                                v206,
                            )))
                        };
                        let v218: Result<Option<string>, std::string::String> =
                            Dice_ui::method113(match &v211 {
                                Dice_ui::US36::US36_0(v211_0_0) => {
                                    Ok::<Option<string>, std::string::String>(v211_0_0.clone())
                                }
                                Dice_ui::US36::US36_1(v211_1_0) => {
                                    Err::<Option<string>, std::string::String>(v211_1_0.clone())
                                }
                            });
                        v218
                    }
                }
            });
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn closure85(
            v0_1: Dice_ui::US29,
            v1: i32,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            Dice_ui::method100(
                v0_1,
                v1,
                _arg.0.clone(),
                _arg.2.clone(),
                _arg.1.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            )
        }
        pub fn closure84(
            v0_1: Dice_ui::US29,
            v1: i32,
        ) -> Func1<
            (bool, string, bool, Dice_ui::US25, string),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                    Dice_ui::closure85(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method99(
            v0_1: Dice_ui::US29,
        ) -> Func1<
            i32,
            Func1<
                (bool, string, bool, Dice_ui::US25, string),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure84(v0_1.clone(), v)
            })
        }
        pub fn method114(
            v0_1: Vec<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn method115(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method116(
            v0_1: Result<Array<Option<string>>, std::string::String>,
        ) -> Result<Array<Option<string>>, std::string::String> {
            v0_1
        }
        pub fn method96(
            v0_1: Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            v1: Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Array<Option<string>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v5: Dice_ui::US28 =
                        defaultValue(Dice_ui::US28::US28_1, map(Dice_ui::method97(), v0_1));
                    let v26: Dice_ui::US29 = match &v5 {
                        Dice_ui::US28::US28_0(v5_0_0) => {
                            let v6: Result<
                                Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = match &v5 {
                                Dice_ui::US28::US28_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            let v9: Dice_ui::US31 = match &v6 {
                                Err(v6_1_0) => Dice_ui::closure81((), v6_1_0.clone()),
                                Ok(v6_0_0) => Dice_ui::closure80((), v6_0_0.clone()),
                            };
                            Dice_ui::US29::US29_0(match &v9 {
                                Dice_ui::US31::US31_0(v9_0_0) => {
                                    let v12: Vec<Option<LrcPtr<Dice_ui::Heap4>>> =
                                        v9_0_0.clone().to_vec();
                                    let v15: Vec<Dice_ui::US27> = v12
                                        .iter()
                                        .map(|x| {
                                            Func1::new(
                                                move |v_2: Option<LrcPtr<Dice_ui::Heap4>>| {
                                                    Dice_ui::closure82((), v_2)
                                                },
                                            )(x.clone())
                                        })
                                        .collect();
                                    Dice_ui::US30::US30_0(
                                        fable_library_rust::NativeArray_::array_from(v15),
                                    )
                                }
                                Dice_ui::US31::US31_1(v9_1_0) => {
                                    Dice_ui::US30::US30_1(v9_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US29::US29_1,
                    };
                    let v27: string = sprintf!("{:?}", v26.clone());
                    let v28: i64 = length(v27.clone()) as i64;
                    let v50: string = append(
                        append(
                            string("state_core.use_requests (8) / result_memo / state_data: "),
                            (if v28 <= 400_i64 {
                                v27.clone()
                            } else {
                                let v31: f64 = 400_i64 as f64 / 2.0_f64;
                                let v34: i64 = v31.ceil() as i64;
                                let v37: i64 = v31.floor() as i64;
                                join(
                                    string(""),
                                    toArray(ofArray(new_array(&[
                                        getSlice(
                                            v27.clone(),
                                            Some(0_i64 as i32),
                                            Some((v34 - 1_i64) as i32),
                                        ),
                                        string("..."),
                                        getSlice(
                                            v27,
                                            Some((v28 - v37) as i32),
                                            Some((v28 - 1_i64) as i32),
                                        ),
                                    ]))),
                                )
                            }),
                        ),
                        string(""),
                    );
                    leptos::logging::log!("{}", v50);
                    {
                        let v53: Vec<(bool, string, bool, Dice_ui::US25, string)> = v1.to_vec();
                        let v54 = Dice_ui::method99(v26);
                        let v55: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method114(v53);
                        let v58: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method115(
                            v55.iter()
                                .enumerate()
                                .map(|(i, x)| v54(i.try_into().unwrap())(x.clone()))
                                .collect(),
                        );
                        let v60: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v58);
                        let v62: Result<Vec<Option<string>>, std::string::String> = v60.await;
                        let v64: Vec<Option<string>> = v62?;
                        let v68: Result<Array<Option<string>>, std::string::String> =
                            Dice_ui::method116(Ok::<Array<Option<string>>, std::string::String>(
                                fable_library_rust::NativeArray_::array_from(v64),
                            ));
                        v68
                    }
                }
            });
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn method117(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Array<Option<string>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Array<Option<string>>, std::string::String>,
                >,
            >,
        > {
            v0_1
        }
        pub fn method95(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
        ) -> leptos::Resource<
            (
                Array<(bool, string, bool, Dice_ui::US25, string)>,
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            ),
            Result<Array<Option<string>>, std::string::String>,
        > {
            let __result = leptos::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move || Dice_ui::closure78(v0_1.clone(), v1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                            Option<
                                Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                            >,
                        ) = x;
                        let v5: Array<(bool, string, bool, Dice_ui::US25, string)> =
                            patternInput.0.clone();
                        let v7: string = sprintf!("{:?}", v5.clone());
                        let v8: i64 = length(v7.clone()) as i64;
                        let v30: string =
                    append(append(string("state_core.use_requests (7) / json create_local_resource / requests: "),
                                  (if v8 <= 400_i64 {
                                       v7.clone()
                                   } else {
                                       let v11: f64 =
                                           400_i64 as f64 / 2.0_f64;
                                       let v14: i64 = v11.ceil() as i64;
                                       let v17: i64 = v11.floor() as i64;
                                       join(string(""),
                                            toArray(ofArray(new_array(&[getSlice(v7.clone(),
                                                                                 Some(0_i64
                                                                                          as
                                                                                          i32),
                                                                                 Some((v14
                                                                                           -
                                                                                           1_i64)
                                                                                          as
                                                                                          i32)),
                                                                        string("..."),
                                                                        getSlice(v7,
                                                                                 Some((v8
                                                                                           -
                                                                                           v17)
                                                                                          as
                                                                                          i32),
                                                                                 Some((v8
                                                                                           -
                                                                                           1_i64)
                                                                                          as
                                                                                          i32))]))))
                                   })), string(""));
                        leptos::logging::log!("{}", v30);
                        {
                            let v33: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Array<Option<string>>, std::string::String>,
                                    >,
                                >,
                            > = Dice_ui::method117(Dice_ui::method96(patternInput.1.clone(), v5));
                            let v35: Result<Array<Option<string>>, std::string::String> = v33.await;
                            v35
                        }
                    }
                },
            );
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn method121(v0_1: string) -> string {
            v0_1
        }
        pub fn method120(
            v0_1: string,
            v1: LrcPtr<Dice_ui::Heap4>,
            v2: rexie::Rexie,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>>
        {
            let __result = Box::pin(async move {
                //;
                {
                    let v5: rexie::Transaction =
                        v2.transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                    let v7: rexie::Store = v5.store("store")?;
                    let mut data = Vec::new();
                    borsh::BorshSerialize::serialize(&v1, &mut data).unwrap();
                    {
                        let v11: Vec<u8> = data;
                        let v13: wasm_bindgen::JsValue =
                            serde_wasm_bindgen::to_value(&v11).unwrap();
                        let v14: string = Dice_ui::method121(v0_1);
                        let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
                        v7.put(&v13, Some(&v16.into())).await?;
                        v5.done().await?;
                        {
                            let v20: Result<(), rexie::Error> =
                                Dice_ui::method57(Ok::<(), rexie::Error>(()));
                            v20
                        }
                    }
                }
            });
            {
                {
                    {
                        //;
                        __result
                    }
                }
            }
        }
        pub fn closure90(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method122() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure90((), v))
        }
        pub fn method123(v0_1: Result<(), rexie::Error>) -> Result<(), rexie::Error> {
            v0_1
        }
        pub fn method124(v0_1: Result<(), std::string::String>) -> Result<(), std::string::String> {
            v0_1
        }
        pub fn method119(
            v0_1: LrcPtr<Dice_ui::Heap4>,
            v1: Dice_ui::US5,
            v2: bool,
            v3: string,
            v4: bool,
            v5: Dice_ui::US25,
            v6: string,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let __result = Box::pin(async move {
                //;
                {
                    let v28: Dice_ui::US37 = if let Dice_ui::US5::US5_0(v1_0_0) = &v1 {
                        let v9: string =
                            append(append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                          v6.clone()), string(""));
                        leptos::logging::log!("{}", v9);
                        {
                            let v11: string = append(
                                append(
                                    append(append(string("url["), v6), string("](")),
                                    sprintf!("{:?}", v3),
                                ),
                                string(")"),
                            );
                            let v14: string = append(
                                append(
                                    string("state_core.set_data () / data_len: "),
                                    toString(length(sprintf!("{:?}", v0_1.clone())) as i64),
                                ),
                                string(""),
                            );
                            leptos::logging::log!("{}", v14);
                            {
                                let v16: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = Dice_ui::method120(
                                    v11,
                                    v0_1,
                                    match &v1 {
                                        Dice_ui::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                );
                                let v18: Result<(), rexie::Error> = v16.await;
                                let v19 = Dice_ui::method122();
                                let v20: Result<(), rexie::Error> = Dice_ui::method123(v18);
                                let v22: Result<(), std::string::String> = v20.map_err(|x| v19(x));
                                v22?;
                                Dice_ui::US37::US37_0
                            }
                        }
                    } else {
                        leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                        Dice_ui::US37::US37_0
                    };
                    let v34: Result<(), std::string::String> = Dice_ui::method124(match &v28 {
                        Dice_ui::US37::US37_0 => Ok::<(), std::string::String>(()),
                        Dice_ui::US37::US37_1(v28_1_0) => {
                            Err::<(), std::string::String>(match &v28 {
                                Dice_ui::US37::US37_1(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        }
                    });
                    v34
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure89(
            v0_1: LrcPtr<Dice_ui::Heap4>,
            v1: Dice_ui::US5,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            Dice_ui::method119(
                v0_1,
                v1,
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            )
        }
        pub fn method125(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method126(
            v0_1: Result<Vec<()>, std::string::String>,
        ) -> Result<Vec<()>, std::string::String> {
            v0_1
        }
        pub fn method118(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<Option<rexie::Rexie>>,
            v2: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v5: Option<rexie::Rexie> = leptos::SignalGetUntracked::get_untracked(&v1);
                    let v8: Dice_ui::US5 =
                        defaultValue(Dice_ui::US5::US5_1, map(Dice_ui::method17(), v5));
                    let v10: Array<(bool, string, bool, Dice_ui::US25, string)> =
                        leptos::SignalGetUntracked::get_untracked(&v0_1);
                    let v12: Vec<(bool, string, bool, Dice_ui::US25, string)> = v10.to_vec();
                    let v16: Vec<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = Dice_ui::method125(
                        v12.iter()
                            .map(|x| {
                                Func1::new({
                                    let v2 = v2.clone();
                                    let v8 = v8.clone();
                                    move |arg10_0040: (
                                        bool,
                                        string,
                                        bool,
                                        Dice_ui::US25,
                                        string,
                                    )| {
                                        Dice_ui::closure89(v2.clone(), v8.clone(), arg10_0040)
                                    }
                                })(x.clone())
                            })
                            .collect(),
                    );
                    let v18: futures::future::TryJoinAll<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = futures::future::try_join_all(v16);
                    let v20: Result<Vec<()>, std::string::String> = v18.await;
                    let v24: Result<Vec<()>, std::string::String> =
                        Dice_ui::method126(Ok::<Vec<()>, std::string::String>(v20?));
                    v24
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure88(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<Option<rexie::Rexie>>,
            v2: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v5: string = append(
                append(
                    string("state_core.use_requests (10) / set_state_data_action / value_len: "),
                    toString(length(sprintf!("{:?}", v2.clone())) as i64),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v5);
            Dice_ui::method118(v0_1, v1, v2)
        }
        pub fn closure92(
            unitVar: (),
            v0_1: Result<Array<Option<string>>, std::string::String>,
        ) -> Dice_ui::US38 {
            Dice_ui::US38::US38_0(v0_1)
        }
        pub fn method127(
        ) -> Func1<Result<Array<Option<string>>, std::string::String>, Dice_ui::US38> {
            Func1::new(
                move |v: Result<Array<Option<string>>, std::string::String>| {
                    Dice_ui::closure92((), v)
                },
            )
        }
        pub fn closure93(unitVar: (), v0_1: Array<Option<string>>) -> Dice_ui::US40 {
            Dice_ui::US40::US40_0(v0_1)
        }
        pub fn closure94(unitVar: (), v0_1: std::string::String) -> Dice_ui::US40 {
            Dice_ui::US40::US40_1(v0_1)
        }
        pub fn closure96(unitVar: (), v0_1: string) -> Dice_ui::US34 {
            Dice_ui::US34::US34_0(v0_1)
        }
        pub fn method128() -> Func1<string, Dice_ui::US34> {
            Func1::new(move |v: string| Dice_ui::closure96((), v))
        }
        pub fn closure95(unitVar: (), v0_1: Option<string>) -> Dice_ui::US34 {
            defaultValue(Dice_ui::US34::US34_1, map(Dice_ui::method128(), v0_1))
        }
        pub fn closure97(
            v0_1: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
            v1: Dice_ui::US34,
        ) {
            if let Dice_ui::US34::US34_0(v1_0_0) = &v1 {
                let v3: string = Dice_ui::method19(match &v1 {
                    Dice_ui::US34::US34_0(x) => x.clone(),
                    _ => unreachable!(),
                });
                let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
                let v8: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                    l0: String::from(v5),
                });
                leptos::Action::dispatch(&v0_1, v8.clone());
                ()
            };
        }
        pub fn closure100(unitVar: (), v0_1: Dice_ui::US34) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method130() -> Func1<Dice_ui::US34, Dice_ui::US43> {
            Func1::new(move |v: Dice_ui::US34| Dice_ui::closure100((), v))
        }
        pub fn method131(
            v0_1: Result<crate::model::near::nearblocks::Root, serde_json::Error>,
        ) -> Result<crate::model::near::nearblocks::Root, serde_json::Error> {
            v0_1
        }
        pub fn method132(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure101(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn closure99(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v39: Dice_ui::US32 = match &v0_1 {
                Dice_ui::US29::US29_0(v0_1_0_0) => {
                    let v8: Dice_ui::US30 = match &v0_1 {
                        Dice_ui::US29::US29_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US32::US32_0(match &v8 {
                        Dice_ui::US30::US30_0(v8_0_0) => {
                            let v12: Option<Dice_ui::US27> = tryItem(v2, v8_0_0.clone());
                            let v15: Dice_ui::US35 =
                                defaultValue(Dice_ui::US35::US35_1, map(Dice_ui::method101(), v12));
                            let v22: Dice_ui::US27 = if let Dice_ui::US35::US35_0(v15_0_0) = &v15 {
                                let v16: Dice_ui::US27 = match &v15 {
                                    Dice_ui::US35::US35_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US27::US27_0(v16_0_0) = &v16 {
                                    Dice_ui::US27::US27_0(match &v16 {
                                        Dice_ui::US27::US27_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US27::US27_1
                                }
                            } else {
                                Dice_ui::US27::US27_1
                            };
                            Dice_ui::US33::US33_0(match &v22 {
                                Dice_ui::US27::US27_0(v22_0_0) => {
                                    Dice_ui::US34::US34_0(fable_library_rust::String_::fromString(
                                        (match &v22 {
                                            Dice_ui::US27::US27_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US34::US34_1,
                            })
                        }
                        Dice_ui::US30::US30_1(v8_1_0) => Dice_ui::US33::US33_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v40: string = sprintf!(
                "{:?}",
                (
                    _arg.0.clone(),
                    _arg.1.clone(),
                    _arg.2.clone(),
                    _arg.3.clone(),
                    _arg.4.clone()
                )
            );
            let v41: i64 = length(v40.clone()) as i64;
            let v62: string = if v41 <= 400_i64 {
                v40.clone()
            } else {
                let v44: f64 = 400_i64 as f64 / 2.0_f64;
                let v47: i64 = v44.ceil() as i64;
                let v50: i64 = v44.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v40.clone(), Some(0_i64 as i32), Some((v47 - 1_i64) as i32)),
                        string("..."),
                        getSlice(v40, Some((v41 - v50) as i32), Some((v41 - 1_i64) as i32)),
                    ]))),
                )
            };
            let v63: string = sprintf!("{:?}", v39.clone());
            let v64: i64 = length(v63.clone()) as i64;
            let v86: string = append(
                append(
                    append(
                        append(
                            string("state_core.use_request (15) / result memo / request: "),
                            v62,
                        ),
                        string(" / state_data: "),
                    ),
                    (if v64 <= 400_i64 {
                        v63.clone()
                    } else {
                        let v67: f64 = 400_i64 as f64 / 2.0_f64;
                        let v70: i64 = v67.ceil() as i64;
                        let v73: i64 = v67.floor() as i64;
                        join(
                            string(""),
                            toArray(ofArray(new_array(&[
                                getSlice(
                                    v63.clone(),
                                    Some(0_i64 as i32),
                                    Some((v70 - 1_i64) as i32),
                                ),
                                string("..."),
                                getSlice(v63, Some((v64 - v73) as i32), Some((v64 - 1_i64) as i32)),
                            ]))),
                        )
                    }),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v86);
            {
                let v88: string = sprintf!("{:?}", v1.clone());
                let v89: i64 = length(v88.clone()) as i64;
                let v111: string = append(
                    append(
                        string("state_core.use_request (16) / effect / json: "),
                        (if v89 <= 400_i64 {
                            v88.clone()
                        } else {
                            let v92: f64 = 400_i64 as f64 / 2.0_f64;
                            let v95: i64 = v92.ceil() as i64;
                            let v98: i64 = v92.floor() as i64;
                            join(
                                string(""),
                                toArray(ofArray(new_array(&[
                                    getSlice(
                                        v88.clone(),
                                        Some(0_i64 as i32),
                                        Some((v95 - 1_i64) as i32),
                                    ),
                                    string("..."),
                                    getSlice(
                                        v88,
                                        Some((v89 - v98) as i32),
                                        Some((v89 - 1_i64) as i32),
                                    ),
                                ]))),
                            )
                        }),
                    ),
                    string(""),
                );
                leptos::logging::log!("{}", v111);
                {
                    let v130: Dice_ui::US34 = match &v1 {
                        Dice_ui::US42::US42_0(v1_0_0) => {
                            let v116: Option<Dice_ui::US34> = tryItem(v2, v1_0_0.clone());
                            let v119: Dice_ui::US43 = defaultValue(
                                Dice_ui::US43::US43_1,
                                map(Dice_ui::method130(), v116),
                            );
                            if let Dice_ui::US43::US43_0(v119_0_0) = &v119 {
                                let v120: Dice_ui::US34 = match &v119 {
                                    Dice_ui::US43::US43_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US34::US34_0(v120_0_0) = &v120 {
                                    Dice_ui::US34::US34_0(match &v120 {
                                        Dice_ui::US34::US34_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US34::US34_1
                                }
                            } else {
                                Dice_ui::US34::US34_1
                            }
                        }
                        _ => Dice_ui::US34::US34_1,
                    };
                    if let Dice_ui::US34::US34_0(v130_0_0) = &v130 {
                        let v132: string = Dice_ui::method51(match &v130 {
                            Dice_ui::US34::US34_0(x) => x.clone(),
                            _ => unreachable!(),
                        });
                        let v134: &str = fable_library_rust::String_::LrcStr::as_str(&v132);
                        let v136: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                            serde_json::from_str(&v134);
                        let v137 = Dice_ui::method52();
                        let v138: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                            Dice_ui::method131(v136);
                        let v141: Result<
                            crate::model::near::nearblocks::Root,
                            std::string::String,
                        > = Dice_ui::method132(v138.map_err(|x| v137(x)));
                        v141.map(|x| {
                            Func1::new(move |v: crate::model::near::nearblocks::Root| {
                                Dice_ui::closure101((), v)
                            })(x)
                        })
                    } else {
                        if let Dice_ui::US32::US32_0(v39_0_0) = &v39 {
                            let v145: Dice_ui::US33 = match &v39 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US33::US33_0(v145_0_0) = &v145 {
                                let v146: Dice_ui::US34 = match &v145 {
                                    Dice_ui::US33::US33_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US34::US34_0(v146_0_0) = &v146 {
                                    let v148: string = Dice_ui::method51(match &v146 {
                                        Dice_ui::US34::US34_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                    let v150: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v148);
                                    let v152: Result<
                                        crate::model::near::nearblocks::Root,
                                        serde_json::Error,
                                    > = serde_json::from_str(&v150);
                                    let v153 = Dice_ui::method52();
                                    let v154: Result<
                                        crate::model::near::nearblocks::Root,
                                        serde_json::Error,
                                    > = Dice_ui::method131(v152);
                                    let v157: Result<
                                        crate::model::near::nearblocks::Root,
                                        std::string::String,
                                    > = Dice_ui::method132(v154.map_err(|x| v153(x)));
                                    v157.map(|x| {
                                        Func1::new(
                                            move |v_1: crate::model::near::nearblocks::Root| {
                                                Dice_ui::closure101((), v_1)
                                            },
                                        )(x)
                                    })
                                } else {
                                    let v162: string =
                                        append(append(string("state_core.use_request (17) / json Error / value: "),
                                                      sprintf!("{:?}",
                                                               (v130.clone(),
                                                                v39.clone()))),
                                               string(""));
                                    leptos::logging::log!("{}", v162);
                                    Ok::<
                                        Option<crate::model::near::nearblocks::Root>,
                                        std::string::String,
                                    >(
                                        None::<crate::model::near::nearblocks::Root>
                                    )
                                }
                            } else {
                                let v168: string = append(
                                    append(
                                        string(
                                            "state_core.use_request (17) / json Error / value: ",
                                        ),
                                        sprintf!("{:?}", (v130.clone(), v39.clone())),
                                    ),
                                    string(""),
                                );
                                leptos::logging::log!("{}", v168);
                                Ok::<
                                    Option<crate::model::near::nearblocks::Root>,
                                    std::string::String,
                                >(
                                    None::<crate::model::near::nearblocks::Root>
                                )
                            }
                        } else {
                            let v174: string = append(
                                append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v130, v39)),
                                ),
                                string(""),
                            );
                            leptos::logging::log!("{}", v174);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    }
                }
            }
        }
        pub fn closure98(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (bool, string, bool, Dice_ui::US25, string),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                    Dice_ui::closure99(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method129(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (bool, string, bool, Dice_ui::US25, string),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure98(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure91(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::Resource<
                (
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Array<Option<string>>, std::string::String>,
            >,
            v3: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Array<(bool, string, bool, Dice_ui::US25, string)> = v0_1();
            let v7: string = append(
                append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v7);
            {
                let v10: Option<
                    Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                > = v1();
                let v13: Dice_ui::US28 =
                    defaultValue(Dice_ui::US28::US28_1, map(Dice_ui::method97(), v10));
                let v34: Dice_ui::US29 = match &v13 {
                    Dice_ui::US28::US28_0(v13_0_0) => {
                        let v14: Result<
                            Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                            std::string::String,
                        > = match &v13 {
                            Dice_ui::US28::US28_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v17: Dice_ui::US31 = match &v14 {
                            Err(v14_1_0) => Dice_ui::closure81((), v14_1_0.clone()),
                            Ok(v14_0_0) => Dice_ui::closure80((), v14_0_0.clone()),
                        };
                        Dice_ui::US29::US29_0(match &v17 {
                            Dice_ui::US31::US31_0(v17_0_0) => {
                                let v20: Vec<Option<LrcPtr<Dice_ui::Heap4>>> =
                                    v17_0_0.clone().to_vec();
                                let v23: Vec<Dice_ui::US27> = v20
                                    .iter()
                                    .map(|x| {
                                        Func1::new(move |v_2: Option<LrcPtr<Dice_ui::Heap4>>| {
                                            Dice_ui::closure82((), v_2)
                                        })(x.clone())
                                    })
                                    .collect();
                                Dice_ui::US30::US30_0(fable_library_rust::NativeArray_::array_from(
                                    v23,
                                ))
                            }
                            Dice_ui::US31::US31_1(v17_1_0) => {
                                Dice_ui::US30::US30_1(v17_1_0.clone())
                            }
                        })
                    }
                    _ => Dice_ui::US29::US29_1,
                };
                let v35: string = sprintf!("{:?}", v34.clone());
                let v36: i64 = length(v35.clone()) as i64;
                let v58: string = append(
                    append(
                        string("state_core.use_request (14) / result_memo / state_data: "),
                        (if v36 <= 400_i64 {
                            v35.clone()
                        } else {
                            let v39: f64 = 400_i64 as f64 / 2.0_f64;
                            let v42: i64 = v39.ceil() as i64;
                            let v45: i64 = v39.floor() as i64;
                            join(
                                string(""),
                                toArray(ofArray(new_array(&[
                                    getSlice(
                                        v35.clone(),
                                        Some(0_i64 as i32),
                                        Some((v42 - 1_i64) as i32),
                                    ),
                                    string("..."),
                                    getSlice(
                                        v35,
                                        Some((v36 - v45) as i32),
                                        Some((v36 - 1_i64) as i32),
                                    ),
                                ]))),
                            )
                        }),
                    ),
                    string(""),
                );
                leptos::logging::log!("{}", v58);
                {
                    let v61: Option<Result<Array<Option<string>>, std::string::String>> =
                        leptos::SignalGet::get(&v2);
                    let v64: Dice_ui::US38 =
                        defaultValue(Dice_ui::US38::US38_1, map(Dice_ui::method127(), v61));
                    let v72: Dice_ui::US39 = match &v64 {
                        Dice_ui::US38::US38_0(v64_0_0) => {
                            let v65: Result<Array<Option<string>>, std::string::String> = match &v64
                            {
                                Dice_ui::US38::US38_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            Dice_ui::US39::US39_0(match &v65 {
                                Err(v65_1_0) => Dice_ui::closure94((), v65_1_0.clone()),
                                Ok(v65_0_0) => Dice_ui::closure93((), v65_0_0.clone()),
                            })
                        }
                        _ => Dice_ui::US39::US39_1,
                    };
                    let v90: Dice_ui::US41 = match &v72 {
                        Dice_ui::US39::US39_0(v72_0_0) => {
                            let v73: Dice_ui::US40 = match &v72 {
                                Dice_ui::US39::US39_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            Dice_ui::US41::US41_0(match &v73 {
                                Dice_ui::US40::US40_0(v73_0_0) => {
                                    let v76: Vec<Option<string>> = v73_0_0.clone().to_vec();
                                    let v79: Vec<Dice_ui::US34> = v76
                                        .iter()
                                        .map(|x| {
                                            Func1::new(move |v_5: Option<string>| {
                                                Dice_ui::closure95((), v_5)
                                            })(x.clone())
                                        })
                                        .collect();
                                    Dice_ui::US42::US42_0(
                                        fable_library_rust::NativeArray_::array_from(v79),
                                    )
                                }
                                Dice_ui::US40::US40_1(v73_1_0) => {
                                    Dice_ui::US42::US42_1(v73_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US41::US41_1,
                    };
                    let v95: Dice_ui::US42 = match &v90 {
                        Dice_ui::US41::US41_0(v90_0_0) => match &v90 {
                            Dice_ui::US41::US41_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => Dice_ui::US42::US42_0(new_empty::<Dice_ui::US34>()),
                    };
                    match &v95 {
                        Dice_ui::US42::US42_0(v95_0_0) => {
                            let v98: Vec<Dice_ui::US34> = v95_0_0.clone().to_vec();
                            let v101: Vec<()> = v98
                                .iter()
                                .map(|x| {
                                    Func1::new({
                                        let v3 = v3.clone();
                                        move |v_6: Dice_ui::US34| {
                                            Dice_ui::closure97(v3.clone(), v_6)
                                        }
                                    })(x.clone())
                                })
                                .collect();
                            ()
                        }
                        _ => (),
                    }
                    {
                        let v104: Vec<(bool, string, bool, Dice_ui::US25, string)> = v5.to_vec();
                        let v105 = Dice_ui::method129(v34, v95.clone());
                        let v106: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method114(v104);
                        let v108: Vec<
                            Result<
                                Option<crate::model::near::nearblocks::Root>,
                                std::string::String,
                            >,
                        > = v106
                            .iter()
                            .enumerate()
                            .map(|(i, x)| v105(i.try_into().unwrap())(x.clone()))
                            .collect();
                        let v110: Array<
                            Result<
                                Option<crate::model::near::nearblocks::Root>,
                                std::string::String,
                            >,
                        > = fable_library_rust::NativeArray_::array_from(v108);
                        let v112: string = append(
                            append(
                                string(
                                    "state_core.use_requests (18) / result_func func0 / result: ",
                                ),
                                sprintf!("{:?}", v110.clone()),
                            ),
                            string(""),
                        );
                        let v117: string = if length(v112.clone()) <= 200_i32 {
                            v112.clone()
                        } else {
                            append(getSlice(v112, Some(0_i32), Some(199_i32)), string("..."))
                        };
                        leptos::logging::log!("{}", v117);
                        v110
                    }
                }
            }
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US44 {
            Dice_ui::US44::US44_0(v0_1)
        }
        pub fn method133(
        ) -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US44>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure103((), v)
                },
            )
        }
        pub fn closure104(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US45 {
            Dice_ui::US45::US45_0(v0_1)
        }
        pub fn closure105(unitVar: (), v0_1: std::string::String) -> Dice_ui::US45 {
            Dice_ui::US45::US45_1(v0_1)
        }
        pub fn method134(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn closure110(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            (v0_1.clone().action, v0_1.method)
        }
        pub fn method135(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn method136(v0_1: Array<std::string::String>) -> Array<std::string::String> {
            v0_1
        }
        pub fn closure109(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Txn,
        ) -> (
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().receipt_id;
            let v4: std::string::String = v0_1.clone().predecessor_account_id;
            let v6: std::string::String = v0_1.clone().receiver_account_id;
            let v8: std::string::String = v0_1.clone().transaction_hash;
            let v10: std::string::String = v0_1.clone().included_in_block_hash;
            let v12: std::string::String = v0_1.clone().block_timestamp;
            let v14: crate::model::near::nearblocks::Block = v0_1.clone().block;
            let v16: u32 = v14.block_height;
            let v18: Vec<crate::model::near::nearblocks::Action> = v0_1.clone().actions;
            let v21: Vec<(std::string::String, Option<std::string::String>)> = v18
                .iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::nearblocks::Action| {
                        Dice_ui::closure110((), v)
                    })(x.clone())
                })
                .collect();
            let v24: Array<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method135(fable_library_rust::NativeArray_::array_from(v21));
            let v26: crate::model::near::nearblocks::ActionsAgg = v0_1.clone().actions_agg;
            let v28: f64 = v26.deposit;
            let v30: crate::model::near::nearblocks::Outcomes = v0_1.clone().outcomes;
            let v32: bool = v30.status;
            let v34: crate::model::near::nearblocks::OutcomesAgg = v0_1.clone().outcomes_agg;
            let v36: f64 = v34.transaction_fee;
            let v38: Vec<std::string::String> = v0_1.logs;
            (
                v24,
                v28,
                v16,
                v12,
                v10,
                Dice_ui::method136(fable_library_rust::NativeArray_::array_from(v38)),
                v32,
                v36,
                v4,
                v2,
                v6,
                v8,
            )
        }
        pub fn method137(
            v0_1: Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Array<(
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            v0_1
        }
        pub fn closure108(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: Vec<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::nearblocks::Txn| {
                        Dice_ui::closure109((), v)
                    })(x.clone())
                })
                .collect();
            Dice_ui::method137(fable_library_rust::NativeArray_::array_from(v5))
        }
        pub fn closure107(
            unitVar: (),
            v0_1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        > {
            map(
                Func1::new(move |v: crate::model::near::nearblocks::Root| {
                    Dice_ui::closure108((), v)
                }),
                v0_1,
            )
        }
        pub fn closure106(
            unitVar: (),
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
            >,
            std::string::String,
        > {
            let v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String> =
                Dice_ui::method134(v0_1);
            v1.map(|x| {
                Func1::new(move |v: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure107((), v)
                })(x)
            })
        }
        pub fn closure102(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            v1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v2: leptos::Memo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Array<
            Result<
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v4: leptos::Signal<bool> = leptos::Resource::loading(&v0_1.clone());
            let v6: bool = leptos::SignalGet::get(&v4);
            let v8: leptos::Signal<bool> = leptos::Resource::loading(&v1.clone());
            let v10: bool = leptos::SignalGet::get(&v8);
            let v12: Option<rexie::Rexie> = leptos::SignalGet::get(&v0_1);
            let v15: Dice_ui::US5 =
                defaultValue(Dice_ui::US5::US5_1, map(Dice_ui::method17(), v12));
            let v17: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::SignalGet::get(&v1);
            let v20: Dice_ui::US44 =
                defaultValue(Dice_ui::US44::US44_1, map(Dice_ui::method133(), v17));
            let v39: Dice_ui::US29 = match &v20 {
                Dice_ui::US44::US44_0(v20_0_0) => {
                    let v21: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v20 {
                            Dice_ui::US44::US44_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v24: Dice_ui::US45 = match &v21 {
                        Err(v21_1_0) => Dice_ui::closure105((), v21_1_0.clone()),
                        Ok(v21_0_0) => Dice_ui::closure104((), v21_0_0.clone()),
                    };
                    Dice_ui::US29::US29_0(match &v24 {
                        Dice_ui::US45::US45_0(v24_0_0) => {
                            let v28: Vec<Dice_ui::US27> = v24_0_0
                                .clone()
                                .iter()
                                .map(|x| {
                                    Func1::new(move |v_2: Option<LrcPtr<Dice_ui::Heap4>>| {
                                        Dice_ui::closure82((), v_2)
                                    })(x.clone())
                                })
                                .collect();
                            Dice_ui::US30::US30_0(fable_library_rust::NativeArray_::array_from(v28))
                        }
                        Dice_ui::US45::US45_1(v24_1_0) => Dice_ui::US30::US30_1(v24_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v40: string = sprintf!("{:?}", v15);
            let v41: i64 = length(v40.clone()) as i64;
            let v62: string = if v41 <= 400_i64 {
                v40.clone()
            } else {
                let v44: f64 = 400_i64 as f64 / 2.0_f64;
                let v47: i64 = v44.ceil() as i64;
                let v50: i64 = v44.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v40.clone(), Some(0_i64 as i32), Some((v47 - 1_i64) as i32)),
                        string("..."),
                        getSlice(v40, Some((v41 - v50) as i32), Some((v41 - 1_i64) as i32)),
                    ]))),
                )
            };
            let v63: string = sprintf!("{:?}", v39);
            let v64: i64 = length(v63.clone()) as i64;
            let v85: string = if v64 <= 400_i64 {
                v63.clone()
            } else {
                let v67: f64 = 400_i64 as f64 / 2.0_f64;
                let v70: i64 = v67.ceil() as i64;
                let v73: i64 = v67.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v63.clone(), Some(0_i64 as i32), Some((v70 - 1_i64) as i32)),
                        string("..."),
                        getSlice(v63, Some((v64 - v73) as i32), Some((v64 - 1_i64) as i32)),
                    ]))),
                )
            };
            let v86: string =
                append(append(append(append(append(append(append(append(string("state_core.use_request (19) / result move / database: "),
                                                                        v62),
                                                                 string(" / database_loading: ")),
                                                          ofBoolean(v6)),
                                                   string(" / state_data: ")),
                                            v85),
                                     string(" / state_data_loading: ")),
                              ofBoolean(v10)), string(""));
            leptos::logging::log!("{}", v86);
            {
                let v89: Array<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = v2();
                let v91: Vec<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = v89.to_vec();
                let v94: Vec<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                > = v91
                    .iter()
                    .map(|x| {
                        Func1::new(
                            move |v_3: Result<
                                Option<crate::model::near::nearblocks::Root>,
                                std::string::String,
                            >| Dice_ui::closure106((), v_3),
                        )(x.clone())
                    })
                    .collect();
                let v96: Array<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v94);
                let v98: string = append(
                    append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v96.clone()),
                    ),
                    string(""),
                );
                let v103: string = if length(v98.clone()) <= 200_i32 {
                    v98.clone()
                } else {
                    append(getSlice(v98, Some(0_i32), Some(199_i32)), string("..."))
                };
                leptos::logging::log!("{}", v103);
                v96
            }
        }
        pub fn closure113(
            unitVar: (),
            v0_1: Option<
                Array<(
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
            >,
        ) -> Dice_ui::US46 {
            Dice_ui::US46::US46_0(v0_1)
        }
        pub fn closure114(unitVar: (), v0_1: std::string::String) -> Dice_ui::US46 {
            Dice_ui::US46::US46_1(v0_1)
        }
        pub fn closure112(
            unitVar: (),
            v0_1: Result<
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US46 {
            match &v0_1 {
                Err(v0_1_1_0) => Dice_ui::closure114((), v0_1_1_0.clone()),
                Ok(v0_1_0_0) => Dice_ui::closure113((), v0_1_0_0.clone()),
            }
        }
        pub fn closure116(
            unitVar: (),
            v0_1: Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Dice_ui::US48 {
            Dice_ui::US48::US48_0(v0_1)
        }
        pub fn method138() -> Func1<
            Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Dice_ui::US48,
        > {
            Func1::new(
                move |v: Array<(
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>| Dice_ui::closure116((), v),
            )
        }
        pub fn closure115(unitVar: (), v0_1: Dice_ui::US46) -> Dice_ui::US47 {
            match &v0_1 {
                Dice_ui::US46::US46_0(v0_1_0_0) => Dice_ui::US47::US47_0(defaultValue(
                    Dice_ui::US48::US48_1,
                    map(Dice_ui::method138(), v0_1_0_0.clone()),
                )),
                Dice_ui::US46::US46_1(v0_1_1_0) => Dice_ui::US47::US47_1(v0_1_1_0.clone()),
            }
        }
        pub fn closure117(unitVar: (), v0_1: Dice_ui::US47) -> bool {
            if let Dice_ui::US47::US47_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US48::US48_1 = &match &v0_1 {
                    Dice_ui::US47::US47_0(x) => x.clone(),
                    _ => unreachable!(),
                } {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method139() -> Func1<Dice_ui::US47, bool> {
            Func1::new(move |v: Dice_ui::US47| Dice_ui::closure117((), v))
        }
        pub fn method140(v0_1: Vec<Dice_ui::US47>) -> Vec<Dice_ui::US47> {
            v0_1
        }
        pub fn closure120(
            unitVar: (),
            v0_: usize,
            v0__1: (
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        ) -> (
            usize,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v0_1: LrcPtr<(
                usize,
                (
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ) = v0_1.1.clone();
            (
                v0_1.0.clone(),
                b.0.clone(),
                b.1.clone(),
                b.2.clone(),
                b.3.clone(),
                b.4.clone(),
                b.5.clone(),
                b.6.clone(),
                b.7.clone(),
                b.8.clone(),
                b.9.clone(),
                b.10.clone(),
                b.11.clone(),
            )
        }
        pub fn closure121(
            v0_1: string,
            _arg: (
                usize,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            (
                v0_1,
                _arg.0.clone(),
                LrcPtr::new(Dice_ui::Heap5 {
                    l0: _arg.1.clone(),
                    l1: _arg.2.clone(),
                    l2: _arg.3.clone(),
                    l3: _arg.4.clone(),
                    l4: _arg.5.clone(),
                    l5: _arg.6.clone(),
                    l6: _arg.7.clone(),
                    l7: _arg.8.clone(),
                    l8: _arg.9.clone(),
                    l9: _arg.10.clone(),
                    l10: _arg.11.clone(),
                    l11: _arg.12.clone(),
                }),
            )
        }
        pub fn closure119(v0_1: Array<string>, v1: i32, v2: Dice_ui::US47) -> Dice_ui::US51 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US47::US47_0(v2_0_0) => {
                    let v4: Dice_ui::US48 = v2_0_0.clone();
                    Dice_ui::US51::US51_0(match &v4 {
                        Dice_ui::US48::US48_0(v4_0_0) => {
                            let v7: Vec<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = match &v4 {
                                Dice_ui::US48::US48_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .to_vec();
                            let v9: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        u32,
                                        std::string::String,
                                        std::string::String,
                                        Array<std::string::String>,
                                        bool,
                                        f64,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    ),
                                )>,
                            > = v7.into_iter().enumerate().map(std::rc::Rc::new).collect();
                            let v12: Vec<(
                                usize,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = v9
                                .iter()
                                .map(|x| {
                                    Func1::new(
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                u32,
                                                std::string::String,
                                                std::string::String,
                                                Array<std::string::String>,
                                                bool,
                                                f64,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            ),
                                        )>| {
                                            Dice_ui::closure120(
                                                (),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        },
                                    )(x.clone())
                                })
                                .collect();
                            let v14: Array<(
                                usize,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = fable_library_rust::NativeArray_::array_from(v12);
                            let v16: Vec<(
                                usize,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = v14.to_vec();
                            Dice_ui::US52::US52_0(
                                v16.iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v3 = v3.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                u32,
                                                std::string::String,
                                                std::string::String,
                                                Array<std::string::String>,
                                                bool,
                                                f64,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )| {
                                                Dice_ui::closure121(v3.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect(),
                            )
                        }
                        _ => Dice_ui::US52::US52_1,
                    })
                }
                Dice_ui::US47::US47_1(v2_1_0) => Dice_ui::US51::US51_1(v2_1_0.clone()),
            }
        }
        pub fn closure118(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US47, Dice_ui::US51> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US47| Dice_ui::closure119(v0_1.clone(), v1, v)
            })
        }
        pub fn method141(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US47, Dice_ui::US51>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure118(v0_1.clone(), v)
            })
        }
        pub fn method142(v0_1: Vec<Dice_ui::US47>) -> Vec<Dice_ui::US47> {
            v0_1
        }
        pub fn closure122(unitVar: (), v0_1: Dice_ui::US51) -> Dice_ui::US53 {
            match &v0_1 {
                Dice_ui::US51::US51_0(v0_1_0_0) => {
                    let v1: Dice_ui::US52 = v0_1_0_0.clone();
                    Dice_ui::US53::US53_0(match &v1 {
                        Dice_ui::US52::US52_0(v1_0_0) => Some(match &v1 {
                            Dice_ui::US52::US52_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US51::US51_1(v0_1_1_0) => Dice_ui::US53::US53_1(v0_1_1_0.clone()),
            }
        }
        pub fn closure123(
            unitVar: (),
            v0_1: Dice_ui::US53,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            match &v0_1 {
                Dice_ui::US53::US53_0(v0_1_0_0) => Ok::<
                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_0_0.clone()),
                Dice_ui::US53::US53_1(v0_1_1_0) => Err::<
                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_1_0.clone()),
            }
        }
        pub fn method143(v0_1: i32, v1: LrcPtr<Dice_ui::Mut4>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure124(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US53 {
            Dice_ui::US53::US53_0(v0_1)
        }
        pub fn closure125(unitVar: (), v0_1: std::string::String) -> Dice_ui::US53 {
            Dice_ui::US53::US53_1(v0_1)
        }
        pub fn closure126(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US52 {
            Dice_ui::US52::US52_0(v0_1)
        }
        pub fn method144() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US52> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure126((), v)
            })
        }
        pub fn method145(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method146(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method147(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure127(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l3.clone()
        }
        pub fn method148() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure127((), arg10_0040)
            })
        }
        pub fn method149(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure111(
            v0_1: leptos::Memo<Array<string>>,
            v1: leptos::Memo<
                Array<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Array<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v1();
            let v5: Vec<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v3.to_vec();
            let v8: Vec<Dice_ui::US46> = v5
                .iter()
                .map(|x| {
                    Func1::new(
                        move |v: Result<
                            Option<
                                Array<(
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    u32,
                                    std::string::String,
                                    std::string::String,
                                    Array<std::string::String>,
                                    bool,
                                    f64,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure112((), v),
                    )(x.clone())
                })
                .collect();
            let v11: Vec<Dice_ui::US47> = v8
                .iter()
                .map(|x| {
                    Func1::new(move |v_1: Dice_ui::US46| Dice_ui::closure115((), v_1))(x.clone())
                })
                .collect();
            let v12: string = sprintf!("{:?}", v11.clone());
            let v13: i64 = length(v12.clone()) as i64;
            let v35: string = append(
                append(
                    string("transactions.render (8) / txns move / root: "),
                    (if v13 <= 400_i64 {
                        v12.clone()
                    } else {
                        let v16: f64 = 400_i64 as f64 / 2.0_f64;
                        let v19: i64 = v16.ceil() as i64;
                        let v22: i64 = v16.floor() as i64;
                        join(
                            string(""),
                            toArray(ofArray(new_array(&[
                                getSlice(
                                    v12.clone(),
                                    Some(0_i64 as i32),
                                    Some((v19 - 1_i64) as i32),
                                ),
                                string("..."),
                                getSlice(v12, Some((v13 - v22) as i32), Some((v13 - 1_i64) as i32)),
                            ]))),
                        )
                    }),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v35);
            {
                let v37 = Dice_ui::method139();
                let v38: Vec<Dice_ui::US47> = Dice_ui::method140(v11.clone());
                let v40: Vec<Dice_ui::US47> =
                    v38.into_iter().filter(|x| v37(x.clone().clone())).collect();
                let v47: bool = count(fable_library_rust::NativeArray_::array_from(v40))
                    == count(fable_library_rust::NativeArray_::array_from(v11.clone()));
                let v139: Dice_ui::US49 = if v47 {
                    Dice_ui::US49::US49_0(Dice_ui::US50::US50_1)
                } else {
                    let v52 = Dice_ui::method141(v0_1());
                    let v53: Vec<Dice_ui::US47> = Dice_ui::method142(v11);
                    let v55: Vec<Dice_ui::US51> = v53
                        .iter()
                        .enumerate()
                        .map(|(i, x)| v52(i.try_into().unwrap())(x.clone()))
                        .collect();
                    let v58: Vec<Dice_ui::US53> = v55
                        .iter()
                        .map(|x| {
                            Func1::new(move |v_2: Dice_ui::US51| Dice_ui::closure122((), v_2))(
                                x.clone(),
                            )
                        })
                        .collect();
                    let v61: Vec<
                        Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = v58
                        .iter()
                        .map(|x| {
                            Func1::new(move |v_3: Dice_ui::US53| Dice_ui::closure123((), v_3))(
                                x.clone(),
                            )
                        })
                        .collect();
                    let v64: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                        new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                    let v66: Array<
                        Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = fable_library_rust::NativeArray_::array_from(v61);
                    let v67: i32 = count(v66.clone());
                    let v69: LrcPtr<Dice_ui::Mut4> = LrcPtr::new(Dice_ui::Mut4 {
                        l0: MutCell::new(0_i32),
                        l1: MutCell::new(Dice_ui::US54::US54_0(v64)),
                    });
                    while Dice_ui::method143(v67, v69.clone()) {
                        let v71: i32 = v69.l0.get().clone();
                        let v72: Dice_ui::US54 = v69.l1.get().clone();
                        let v73: Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        > = v66[v71].clone();
                        let v76: Dice_ui::US53 = match &v73 {
                            Err(v73_1_0) => Dice_ui::closure125((), v73_1_0.clone()),
                            Ok(v73_0_0) => Dice_ui::closure124((), v73_0_0.clone()),
                        };
                        let v85: Dice_ui::US51 = match &v76 {
                            Dice_ui::US53::US53_0(v76_0_0) => Dice_ui::US51::US51_0(defaultValue(
                                Dice_ui::US52::US52_1,
                                map(Dice_ui::method144(), v76_0_0.clone()),
                            )),
                            Dice_ui::US53::US53_1(v76_1_0) => {
                                Dice_ui::US51::US51_1(v76_1_0.clone())
                            }
                        };
                        let v104: Dice_ui::US54 = if let Dice_ui::US54::US54_0(v72_0_0) = &v72 {
                            match &v85 {
                                Dice_ui::US51::US51_0(v85_0_0) => {
                                    let v87: Dice_ui::US52 = v85_0_0.clone();
                                    if let Dice_ui::US52::US52_0(v87_0_0) = &v87 {
                                        let v89: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                            Dice_ui::method145(match &v87 {
                                                Dice_ui::US52::US52_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            });
                                        let v90: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                            Dice_ui::method146(match &v72 {
                                                Dice_ui::US54::US54_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            });
                                        let mut v90 = v90;
                                        v90.extend(v89);
                                        Dice_ui::US54::US54_0(v90)
                                    } else {
                                        v72.clone()
                                    }
                                }
                                Dice_ui::US51::US51_1(v85_1_0) => {
                                    Dice_ui::US54::US54_1(v85_1_0.clone())
                                }
                            }
                        } else {
                            if let Dice_ui::US51::US51_1(v85_1_0) = &v85 {
                                Dice_ui::US54::US54_1(match &v85 {
                                    Dice_ui::US51::US51_1(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                v72.clone()
                            }
                        };
                        let v105: i32 = v71 + 1_i32;
                        v69.l0.set(v105);
                        v69.l1.set(v104);
                        ()
                    }
                    {
                        let v106: Dice_ui::US54 = v69.l1.get().clone();
                        let v118: Dice_ui::US54 = match &v106 {
                            Dice_ui::US54::US54_0(v106_0_0) => {
                                let v108: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method147(v106_0_0.clone());
                                let v109 = Dice_ui::method148();
                                let mut v108 = v108;
                                v108.sort_by_key(|x| v109(x.clone()));
                                Dice_ui::US54::US54_0(v108)
                            }
                            Dice_ui::US54::US54_1(v106_1_0) => {
                                Dice_ui::US54::US54_1(v106_1_0.clone())
                            }
                        };
                        let v131: Dice_ui::US55 = match &v118 {
                            Dice_ui::US54::US54_0(v118_0_0) => {
                                let v120: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method149(v118_0_0.clone());
                                let mut v120 = v120;
                                v120.reverse();
                                {
                                    let v124: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v120;
                                    Dice_ui::US55::US55_0(
                                        fable_library_rust::NativeArray_::array_from(v124),
                                    )
                                }
                            }
                            Dice_ui::US54::US54_1(v118_1_0) => {
                                Dice_ui::US55::US55_1(v118_1_0.clone())
                            }
                        };
                        match &v131 {
                            Dice_ui::US55::US55_0(v131_0_0) => {
                                Dice_ui::US49::US49_0(Dice_ui::US50::US50_0(v131_0_0.clone()))
                            }
                            Dice_ui::US55::US55_1(v131_1_0) => {
                                Dice_ui::US49::US49_1(v131_1_0.clone())
                            }
                        }
                    }
                };
                let v150: Dice_ui::US56 = match &v139 {
                    Dice_ui::US49::US49_0(v139_0_0) => {
                        let v140: Dice_ui::US50 = v139_0_0.clone();
                        Dice_ui::US56::US56_0(match &v140 {
                            Dice_ui::US50::US50_0(v140_0_0) => Some(match &v140 {
                                Dice_ui::US50::US50_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        })
                    }
                    Dice_ui::US49::US49_1(v139_1_0) => Dice_ui::US56::US56_1(v139_1_0.clone()),
                };
                let v156: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = match &v150 {
                    Dice_ui::US56::US56_0(v150_0_0) => Ok::<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >(v150_0_0.clone()),
                    Dice_ui::US56::US56_1(v150_1_0) => Err::<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >(v150_1_0.clone()),
                };
                let v158: string = append(
                    append(
                        append(
                            append(
                                string("use_transactions.render (9) / txns create_memo / result: "),
                                sprintf!("{:?}", v156.clone()),
                            ),
                            string(" / loading: "),
                        ),
                        ofBoolean(v47),
                    ),
                    string(""),
                );
                let v163: string = if length(v158.clone()) <= 200_i32 {
                    v158.clone()
                } else {
                    append(getSlice(v158, Some(0_i32), Some(199_i32)), string("..."))
                };
                leptos::logging::log!("{}", v163);
                v156
            }
        }
        pub fn closure129(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn closure130(unitVar: (), v0_1: std::string::String) -> Dice_ui::US56 {
            Dice_ui::US56::US56_1(v0_1)
        }
        pub fn closure131(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method150() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US50> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure131((), v)
            })
        }
        pub fn method151() -> string {
            string("2.0")
        }
        pub fn method152() -> string {
            string("dontcare")
        }
        pub fn method153() -> string {
            string("EXPERIMENTAL_tx_status")
        }
        pub fn method154() -> string {
            string("bowen")
        }
        pub fn closure133(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method155() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure133((), v))
        }
        pub fn method156(
            v0_1: Result<std::string::String, serde_json::Error>,
        ) -> Result<std::string::String, serde_json::Error> {
            v0_1
        }
        pub fn method157(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn method158(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn closure134(
            unitVar: (),
            v0_1: string,
        ) -> (bool, string, bool, Dice_ui::US25, string) {
            (
                false,
                v0_1,
                true,
                Dice_ui::US25::US25_1,
                string("https://rpc.mainnet.near.org"),
            )
        }
        pub fn closure132(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(bool, string, bool, Dice_ui::US25, string), std::string::String> {
            let v3: string = Dice_ui::method151();
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v8: string = Dice_ui::method152();
            let v10: &str = fable_library_rust::String_::LrcStr::as_str(&v8);
            let v12: std::string::String = String::from(v10);
            let v13: string = Dice_ui::method153();
            let v15: &str = fable_library_rust::String_::LrcStr::as_str(&v13);
            let v17: std::string::String = String::from(v15);
            let v19: string = Dice_ui::method154();
            let v21: &str = fable_library_rust::String_::LrcStr::as_str(&v19);
            let v24: Array<std::string::String> =
                new_array(&[(_arg.2.clone()).l11.clone(), String::from(v21)]);
            let v26: Vec<std::string::String> = v24.to_vec();
            let v28: crate::model::near::rpc::RpcInput = crate::model::near::rpc::RpcInput {
                jsonrpc: v7,
                id: v12,
                method: v17,
                params: v26,
            };
            let v30: Result<std::string::String, serde_json::Error> = serde_json::to_string(&v28);
            let v31 = Dice_ui::method155();
            let v32: Result<std::string::String, serde_json::Error> = Dice_ui::method156(v30);
            let v35: Result<std::string::String, std::string::String> =
                Dice_ui::method157(v32.map_err(|x| v31(x)));
            let v39: Result<string, std::string::String> =
                Dice_ui::method158(v35.map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(x)
                }));
            v39.map(|x| Func1::new(move |v_1: string| Dice_ui::closure134((), v_1))(x))
        }
        pub fn closure128(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(bool, string, bool, Dice_ui::US25, string)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v0_1();
            let v5: Dice_ui::US56 = match &v2 {
                Err(v2_1_0) => Dice_ui::closure130((), v2_1_0.clone()),
                Ok(v2_0_0) => Dice_ui::closure129((), v2_0_0.clone()),
            };
            let v14: Dice_ui::US49 = match &v5 {
                Dice_ui::US56::US56_0(v5_0_0) => Dice_ui::US49::US49_0(defaultValue(
                    Dice_ui::US50::US50_1,
                    map(Dice_ui::method150(), v5_0_0.clone()),
                )),
                Dice_ui::US56::US56_1(v5_1_0) => Dice_ui::US49::US49_1(v5_1_0.clone()),
            };
            let v36: Dice_ui::US57 = match &v14 {
                Dice_ui::US49::US49_0(v14_0_0) => {
                    let v15: Dice_ui::US50 = v14_0_0.clone();
                    if let Dice_ui::US50::US50_0(v15_0_0) = &v15 {
                        let v18: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = match &v15 {
                            Dice_ui::US50::US50_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .to_vec();
                        let v21: Vec<
                            Result<
                                (bool, string, bool, Dice_ui::US25, string),
                                std::string::String,
                            >,
                        > = v18
                            .iter()
                            .map(|x| {
                                Func1::new(
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure132((), arg10_0040)
                                    },
                                )(x.clone())
                            })
                            .collect();
                        let v23: Result<
                            Vec<(bool, string, bool, Dice_ui::US25, string)>,
                            std::string::String,
                        > = v21.into_iter().collect();
                        let v25: Vec<(bool, string, bool, Dice_ui::US25, string)> = v23?;
                        Dice_ui::US57::US57_0(Dice_ui::US58::US58_0(
                            fable_library_rust::NativeArray_::array_from(v25),
                        ))
                    } else {
                        Dice_ui::US57::US57_0(Dice_ui::US58::US58_1)
                    }
                }
                Dice_ui::US49::US49_1(v14_1_0) => Dice_ui::US57::US57_1(v14_1_0.clone()),
            };
            let v47: Dice_ui::US59 = match &v36 {
                Dice_ui::US57::US57_0(v36_0_0) => {
                    let v37: Dice_ui::US58 = v36_0_0.clone();
                    Dice_ui::US59::US59_0(match &v37 {
                        Dice_ui::US58::US58_0(v37_0_0) => Some(match &v37 {
                            Dice_ui::US58::US58_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    })
                }
                Dice_ui::US57::US57_1(v36_1_0) => Dice_ui::US59::US59_1(v36_1_0.clone()),
            };
            let v53: Result<
                Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                std::string::String,
            > = match &v47 {
                Dice_ui::US59::US59_0(v47_0_0) => Ok::<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >(v47_0_0.clone()),
                Dice_ui::US59::US59_1(v47_1_0) => Err::<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >(v47_1_0.clone()),
            };
            let v55: string = append(
                append(
                    string("use_transactions.render (10) / rpc_requests create_memo / result: "),
                    sprintf!("{:?}", v53.clone()),
                ),
                string(""),
            );
            let v60: string = if length(v55.clone()) <= 200_i32 {
                v55.clone()
            } else {
                append(getSlice(v55, Some(0_i32), Some(199_i32)), string("..."))
            };
            leptos::logging::log!("{}", v60);
            v53
        }
        pub fn closure136(
            unitVar: (),
            v0_1: Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
        ) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(v0_1)
        }
        pub fn closure137(unitVar: (), v0_1: std::string::String) -> Dice_ui::US59 {
            Dice_ui::US59::US59_1(v0_1)
        }
        pub fn closure138(
            unitVar: (),
            v0_1: Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(v0_1)
        }
        pub fn method159(
        ) -> Func1<Array<(bool, string, bool, Dice_ui::US25, string)>, Dice_ui::US58> {
            Func1::new(
                move |v: Array<(bool, string, bool, Dice_ui::US25, string)>| {
                    Dice_ui::closure138((), v)
                },
            )
        }
        pub fn closure135(
            v0_1: leptos::Memo<
                Result<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Array<(bool, string, bool, Dice_ui::US25, string)> {
            let v2: Result<
                Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                std::string::String,
            > = v0_1();
            let v5: Dice_ui::US59 = match &v2 {
                Err(v2_1_0) => Dice_ui::closure137((), v2_1_0.clone()),
                Ok(v2_0_0) => Dice_ui::closure136((), v2_0_0.clone()),
            };
            let v14: Dice_ui::US57 = match &v5 {
                Dice_ui::US59::US59_0(v5_0_0) => Dice_ui::US57::US57_0(defaultValue(
                    Dice_ui::US58::US58_1,
                    map(Dice_ui::method159(), v5_0_0.clone()),
                )),
                Dice_ui::US59::US59_1(v5_1_0) => Dice_ui::US57::US57_1(v5_1_0.clone()),
            };
            let v20: Array<(bool, string, bool, Dice_ui::US25, string)> =
                if let Dice_ui::US57::US57_0(v14_0_0) = &v14 {
                    let v15: Dice_ui::US58 = match &v14 {
                        Dice_ui::US57::US57_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US58::US58_0(v15_0_0) = &v15 {
                        match &v15 {
                            Dice_ui::US58::US58_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                    } else {
                        new_empty::<(bool, string, bool, Dice_ui::US25, string)>()
                    }
                } else {
                    new_empty::<(bool, string, bool, Dice_ui::US25, string)>()
                };
            let v22: string = append(
                append(
                    string("use_transactions.render (11) / rpc_requests\' create_memo / result: "),
                    sprintf!("{:?}", v20.clone()),
                ),
                string(""),
            );
            let v27: string = if length(v22.clone()) <= 200_i32 {
                v22.clone()
            } else {
                append(getSlice(v22, Some(0_i32), Some(199_i32)), string("..."))
            };
            leptos::logging::log!("{}", v27);
            v20
        }
        pub fn method161(
            v0_1: Result<crate::model::near::rpc::RpcResponse, serde_json::Error>,
        ) -> Result<crate::model::near::rpc::RpcResponse, serde_json::Error> {
            v0_1
        }
        pub fn method162(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure142(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn closure141(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v39: Dice_ui::US32 = match &v0_1 {
                Dice_ui::US29::US29_0(v0_1_0_0) => {
                    let v8: Dice_ui::US30 = match &v0_1 {
                        Dice_ui::US29::US29_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US32::US32_0(match &v8 {
                        Dice_ui::US30::US30_0(v8_0_0) => {
                            let v12: Option<Dice_ui::US27> = tryItem(v2, v8_0_0.clone());
                            let v15: Dice_ui::US35 =
                                defaultValue(Dice_ui::US35::US35_1, map(Dice_ui::method101(), v12));
                            let v22: Dice_ui::US27 = if let Dice_ui::US35::US35_0(v15_0_0) = &v15 {
                                let v16: Dice_ui::US27 = match &v15 {
                                    Dice_ui::US35::US35_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US27::US27_0(v16_0_0) = &v16 {
                                    Dice_ui::US27::US27_0(match &v16 {
                                        Dice_ui::US27::US27_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US27::US27_1
                                }
                            } else {
                                Dice_ui::US27::US27_1
                            };
                            Dice_ui::US33::US33_0(match &v22 {
                                Dice_ui::US27::US27_0(v22_0_0) => {
                                    Dice_ui::US34::US34_0(fable_library_rust::String_::fromString(
                                        (match &v22 {
                                            Dice_ui::US27::US27_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US34::US34_1,
                            })
                        }
                        Dice_ui::US30::US30_1(v8_1_0) => Dice_ui::US33::US33_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v40: string = sprintf!(
                "{:?}",
                (
                    _arg.0.clone(),
                    _arg.1.clone(),
                    _arg.2.clone(),
                    _arg.3.clone(),
                    _arg.4.clone()
                )
            );
            let v41: i64 = length(v40.clone()) as i64;
            let v62: string = if v41 <= 400_i64 {
                v40.clone()
            } else {
                let v44: f64 = 400_i64 as f64 / 2.0_f64;
                let v47: i64 = v44.ceil() as i64;
                let v50: i64 = v44.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v40.clone(), Some(0_i64 as i32), Some((v47 - 1_i64) as i32)),
                        string("..."),
                        getSlice(v40, Some((v41 - v50) as i32), Some((v41 - 1_i64) as i32)),
                    ]))),
                )
            };
            let v63: string = sprintf!("{:?}", v39.clone());
            let v64: i64 = length(v63.clone()) as i64;
            let v86: string = append(
                append(
                    append(
                        append(
                            string("state_core.use_request (15) / result memo / request: "),
                            v62,
                        ),
                        string(" / state_data: "),
                    ),
                    (if v64 <= 400_i64 {
                        v63.clone()
                    } else {
                        let v67: f64 = 400_i64 as f64 / 2.0_f64;
                        let v70: i64 = v67.ceil() as i64;
                        let v73: i64 = v67.floor() as i64;
                        join(
                            string(""),
                            toArray(ofArray(new_array(&[
                                getSlice(
                                    v63.clone(),
                                    Some(0_i64 as i32),
                                    Some((v70 - 1_i64) as i32),
                                ),
                                string("..."),
                                getSlice(v63, Some((v64 - v73) as i32), Some((v64 - 1_i64) as i32)),
                            ]))),
                        )
                    }),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v86);
            {
                let v88: string = sprintf!("{:?}", v1.clone());
                let v89: i64 = length(v88.clone()) as i64;
                let v111: string = append(
                    append(
                        string("state_core.use_request (16) / effect / json: "),
                        (if v89 <= 400_i64 {
                            v88.clone()
                        } else {
                            let v92: f64 = 400_i64 as f64 / 2.0_f64;
                            let v95: i64 = v92.ceil() as i64;
                            let v98: i64 = v92.floor() as i64;
                            join(
                                string(""),
                                toArray(ofArray(new_array(&[
                                    getSlice(
                                        v88.clone(),
                                        Some(0_i64 as i32),
                                        Some((v95 - 1_i64) as i32),
                                    ),
                                    string("..."),
                                    getSlice(
                                        v88,
                                        Some((v89 - v98) as i32),
                                        Some((v89 - 1_i64) as i32),
                                    ),
                                ]))),
                            )
                        }),
                    ),
                    string(""),
                );
                leptos::logging::log!("{}", v111);
                {
                    let v130: Dice_ui::US34 = match &v1 {
                        Dice_ui::US42::US42_0(v1_0_0) => {
                            let v116: Option<Dice_ui::US34> = tryItem(v2, v1_0_0.clone());
                            let v119: Dice_ui::US43 = defaultValue(
                                Dice_ui::US43::US43_1,
                                map(Dice_ui::method130(), v116),
                            );
                            if let Dice_ui::US43::US43_0(v119_0_0) = &v119 {
                                let v120: Dice_ui::US34 = match &v119 {
                                    Dice_ui::US43::US43_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US34::US34_0(v120_0_0) = &v120 {
                                    Dice_ui::US34::US34_0(match &v120 {
                                        Dice_ui::US34::US34_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US34::US34_1
                                }
                            } else {
                                Dice_ui::US34::US34_1
                            }
                        }
                        _ => Dice_ui::US34::US34_1,
                    };
                    if let Dice_ui::US34::US34_0(v130_0_0) = &v130 {
                        let v132: string = Dice_ui::method51(match &v130 {
                            Dice_ui::US34::US34_0(x) => x.clone(),
                            _ => unreachable!(),
                        });
                        let v134: &str = fable_library_rust::String_::LrcStr::as_str(&v132);
                        let v136: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                            serde_json::from_str(&v134);
                        let v137 = Dice_ui::method52();
                        let v138: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                            Dice_ui::method161(v136);
                        let v141: Result<
                            crate::model::near::rpc::RpcResponse,
                            std::string::String,
                        > = Dice_ui::method162(v138.map_err(|x| v137(x)));
                        v141.map(|x| {
                            Func1::new(move |v: crate::model::near::rpc::RpcResponse| {
                                Dice_ui::closure142((), v)
                            })(x)
                        })
                    } else {
                        if let Dice_ui::US32::US32_0(v39_0_0) = &v39 {
                            let v145: Dice_ui::US33 = match &v39 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US33::US33_0(v145_0_0) = &v145 {
                                let v146: Dice_ui::US34 = match &v145 {
                                    Dice_ui::US33::US33_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US34::US34_0(v146_0_0) = &v146 {
                                    let v148: string = Dice_ui::method51(match &v146 {
                                        Dice_ui::US34::US34_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                    let v150: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v148);
                                    let v152: Result<
                                        crate::model::near::rpc::RpcResponse,
                                        serde_json::Error,
                                    > = serde_json::from_str(&v150);
                                    let v153 = Dice_ui::method52();
                                    let v154: Result<
                                        crate::model::near::rpc::RpcResponse,
                                        serde_json::Error,
                                    > = Dice_ui::method161(v152);
                                    let v157: Result<
                                        crate::model::near::rpc::RpcResponse,
                                        std::string::String,
                                    > = Dice_ui::method162(v154.map_err(|x| v153(x)));
                                    v157.map(|x| {
                                        Func1::new(
                                            move |v_1: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure142((), v_1)
                                            },
                                        )(x)
                                    })
                                } else {
                                    let v162: string =
                                        append(append(string("state_core.use_request (17) / json Error / value: "),
                                                      sprintf!("{:?}",
                                                               (v130.clone(),
                                                                v39.clone()))),
                                               string(""));
                                    leptos::logging::log!("{}", v162);
                                    Ok::<
                                        Option<crate::model::near::rpc::RpcResponse>,
                                        std::string::String,
                                    >(
                                        None::<crate::model::near::rpc::RpcResponse>
                                    )
                                }
                            } else {
                                let v168: string = append(
                                    append(
                                        string(
                                            "state_core.use_request (17) / json Error / value: ",
                                        ),
                                        sprintf!("{:?}", (v130.clone(), v39.clone())),
                                    ),
                                    string(""),
                                );
                                leptos::logging::log!("{}", v168);
                                Ok::<
                                    Option<crate::model::near::rpc::RpcResponse>,
                                    std::string::String,
                                >(
                                    None::<crate::model::near::rpc::RpcResponse>
                                )
                            }
                        } else {
                            let v174: string = append(
                                append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v130, v39)),
                                ),
                                string(""),
                            );
                            leptos::logging::log!("{}", v174);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    }
                }
            }
        }
        pub fn closure140(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (bool, string, bool, Dice_ui::US25, string),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                    Dice_ui::closure141(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method160(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (bool, string, bool, Dice_ui::US25, string),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure140(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure139(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::Resource<
                (
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Array<Option<string>>, std::string::String>,
            >,
            v3: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Array<(bool, string, bool, Dice_ui::US25, string)> = v0_1();
            let v7: string = append(
                append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v7);
            {
                let v10: Option<
                    Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                > = v1();
                let v13: Dice_ui::US28 =
                    defaultValue(Dice_ui::US28::US28_1, map(Dice_ui::method97(), v10));
                let v34: Dice_ui::US29 = match &v13 {
                    Dice_ui::US28::US28_0(v13_0_0) => {
                        let v14: Result<
                            Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                            std::string::String,
                        > = match &v13 {
                            Dice_ui::US28::US28_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v17: Dice_ui::US31 = match &v14 {
                            Err(v14_1_0) => Dice_ui::closure81((), v14_1_0.clone()),
                            Ok(v14_0_0) => Dice_ui::closure80((), v14_0_0.clone()),
                        };
                        Dice_ui::US29::US29_0(match &v17 {
                            Dice_ui::US31::US31_0(v17_0_0) => {
                                let v20: Vec<Option<LrcPtr<Dice_ui::Heap4>>> =
                                    v17_0_0.clone().to_vec();
                                let v23: Vec<Dice_ui::US27> = v20
                                    .iter()
                                    .map(|x| {
                                        Func1::new(move |v_2: Option<LrcPtr<Dice_ui::Heap4>>| {
                                            Dice_ui::closure82((), v_2)
                                        })(x.clone())
                                    })
                                    .collect();
                                Dice_ui::US30::US30_0(fable_library_rust::NativeArray_::array_from(
                                    v23,
                                ))
                            }
                            Dice_ui::US31::US31_1(v17_1_0) => {
                                Dice_ui::US30::US30_1(v17_1_0.clone())
                            }
                        })
                    }
                    _ => Dice_ui::US29::US29_1,
                };
                let v35: string = sprintf!("{:?}", v34.clone());
                let v36: i64 = length(v35.clone()) as i64;
                let v58: string = append(
                    append(
                        string("state_core.use_request (14) / result_memo / state_data: "),
                        (if v36 <= 400_i64 {
                            v35.clone()
                        } else {
                            let v39: f64 = 400_i64 as f64 / 2.0_f64;
                            let v42: i64 = v39.ceil() as i64;
                            let v45: i64 = v39.floor() as i64;
                            join(
                                string(""),
                                toArray(ofArray(new_array(&[
                                    getSlice(
                                        v35.clone(),
                                        Some(0_i64 as i32),
                                        Some((v42 - 1_i64) as i32),
                                    ),
                                    string("..."),
                                    getSlice(
                                        v35,
                                        Some((v36 - v45) as i32),
                                        Some((v36 - 1_i64) as i32),
                                    ),
                                ]))),
                            )
                        }),
                    ),
                    string(""),
                );
                leptos::logging::log!("{}", v58);
                {
                    let v61: Option<Result<Array<Option<string>>, std::string::String>> =
                        leptos::SignalGet::get(&v2);
                    let v64: Dice_ui::US38 =
                        defaultValue(Dice_ui::US38::US38_1, map(Dice_ui::method127(), v61));
                    let v72: Dice_ui::US39 = match &v64 {
                        Dice_ui::US38::US38_0(v64_0_0) => {
                            let v65: Result<Array<Option<string>>, std::string::String> = match &v64
                            {
                                Dice_ui::US38::US38_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            Dice_ui::US39::US39_0(match &v65 {
                                Err(v65_1_0) => Dice_ui::closure94((), v65_1_0.clone()),
                                Ok(v65_0_0) => Dice_ui::closure93((), v65_0_0.clone()),
                            })
                        }
                        _ => Dice_ui::US39::US39_1,
                    };
                    let v90: Dice_ui::US41 = match &v72 {
                        Dice_ui::US39::US39_0(v72_0_0) => {
                            let v73: Dice_ui::US40 = match &v72 {
                                Dice_ui::US39::US39_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            Dice_ui::US41::US41_0(match &v73 {
                                Dice_ui::US40::US40_0(v73_0_0) => {
                                    let v76: Vec<Option<string>> = v73_0_0.clone().to_vec();
                                    let v79: Vec<Dice_ui::US34> = v76
                                        .iter()
                                        .map(|x| {
                                            Func1::new(move |v_5: Option<string>| {
                                                Dice_ui::closure95((), v_5)
                                            })(x.clone())
                                        })
                                        .collect();
                                    Dice_ui::US42::US42_0(
                                        fable_library_rust::NativeArray_::array_from(v79),
                                    )
                                }
                                Dice_ui::US40::US40_1(v73_1_0) => {
                                    Dice_ui::US42::US42_1(v73_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US41::US41_1,
                    };
                    let v95: Dice_ui::US42 = match &v90 {
                        Dice_ui::US41::US41_0(v90_0_0) => match &v90 {
                            Dice_ui::US41::US41_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => Dice_ui::US42::US42_0(new_empty::<Dice_ui::US34>()),
                    };
                    match &v95 {
                        Dice_ui::US42::US42_0(v95_0_0) => {
                            let v98: Vec<Dice_ui::US34> = v95_0_0.clone().to_vec();
                            let v101: Vec<()> = v98
                                .iter()
                                .map(|x| {
                                    Func1::new({
                                        let v3 = v3.clone();
                                        move |v_6: Dice_ui::US34| {
                                            Dice_ui::closure97(v3.clone(), v_6)
                                        }
                                    })(x.clone())
                                })
                                .collect();
                            ()
                        }
                        _ => (),
                    }
                    {
                        let v104: Vec<(bool, string, bool, Dice_ui::US25, string)> = v5.to_vec();
                        let v105 = Dice_ui::method160(v34, v95.clone());
                        let v106: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method114(v104);
                        let v108: Vec<
                            Result<
                                Option<crate::model::near::rpc::RpcResponse>,
                                std::string::String,
                            >,
                        > = v106
                            .iter()
                            .enumerate()
                            .map(|(i, x)| v105(i.try_into().unwrap())(x.clone()))
                            .collect();
                        let v110: Array<
                            Result<
                                Option<crate::model::near::rpc::RpcResponse>,
                                std::string::String,
                            >,
                        > = fable_library_rust::NativeArray_::array_from(v108);
                        let v112: string = append(
                            append(
                                string(
                                    "state_core.use_requests (18) / result_func func0 / result: ",
                                ),
                                sprintf!("{:?}", v110.clone()),
                            ),
                            string(""),
                        );
                        let v117: string = if length(v112.clone()) <= 200_i32 {
                            v112.clone()
                        } else {
                            append(getSlice(v112, Some(0_i32), Some(199_i32)), string("..."))
                        };
                        leptos::logging::log!("{}", v117);
                        v110
                    }
                }
            }
        }
        pub fn method163(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn closure150(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            Option<std::string::String>,
            std::string::String,
            Option<f64>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().deposit;
            (v0_1.clone().args, v2, v0_1.clone().gas, v0_1.method_name)
        }
        pub fn closure149(
            unitVar: (),
            v0_1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                Option<std::string::String>,
                std::string::String,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            v0_1.into_iter()
                .map(|(k, v)| {
                    (
                        k,
                        Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                            Dice_ui::closure150((), v)
                        })(v),
                    )
                })
                .collect()
        }
        pub fn closure148(
            unitVar: (),
            v0_1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        Option<std::string::String>,
                        std::string::String,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().predecessor_id;
            let v4: crate::model::near::rpc::ReceiptDetail = v0_1.clone().receipt;
            let v6: crate::model::near::rpc::ActionDetail = v4.action;
            let v8: Vec<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            > = v6.clone().actions;
            let v11: Vec<
                std::collections::HashMap<
                    std::string::String,
                    (
                        Option<std::string::String>,
                        std::string::String,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = v8
                .iter()
                .map(|x| {
                    Func1::new(
                        move |v: std::collections::HashMap<
                            std::string::String,
                            crate::model::near::rpc::TransferDetail,
                        >| Dice_ui::closure149((), v),
                    )(x.clone())
                })
                .collect();
            let v13: Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        Option<std::string::String>,
                        std::string::String,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = fable_library_rust::NativeArray_::array_from(v11);
            let v15: std::string::String = v6.clone().gas_price;
            let v17: Vec<std::string::String> = v6.clone().input_data_ids;
            let v19: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v17);
            let v21: Vec<std::string::String> = v6.clone().output_data_receivers;
            (
                v2,
                v13,
                v15,
                v19,
                fable_library_rust::NativeArray_::array_from(v21),
                v6.clone().signer_id,
                v6.signer_public_key,
                v0_1.clone().receipt_id,
                v0_1.receiver_id,
            )
        }
        pub fn closure152(
            unitVar: (),
            v0_1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            (v0_1.clone().cost, v0_1.clone().cost_category, v0_1.gas_used)
        }
        pub fn closure154(
            unitVar: (),
            v0_1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            (v0_1.clone().direction, v0_1.hash)
        }
        pub fn closure153(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: Vec<(std::string::String, std::string::String)> = v0_1
                .iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::Proof| Dice_ui::closure154((), v))(
                        x.clone(),
                    )
                })
                .collect();
            fable_library_rust::NativeArray_::array_from(v3)
        }
        pub fn closure151(
            unitVar: (),
            v0_1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Option<Array<(std::string::String, std::string::String)>>,
        ) {
            let v2: std::string::String = v0_1.clone().block_hash;
            let v4: std::string::String = v0_1.clone().id;
            let v6: crate::model::near::rpc::OutcomeDetail = v0_1.clone().outcome;
            let v8: std::string::String = v6.clone().executor_id;
            let v10: u64 = v6.clone().gas_burnt;
            let v12: Vec<std::string::String> = v6.clone().logs;
            let v14: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v12);
            let v16: crate::model::near::rpc::Metadata = v6.clone().metadata;
            let v18: Vec<crate::model::near::rpc::GasProfile> = v16.clone().gas_profile;
            let v21: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v18
                .iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::GasProfile| {
                        Dice_ui::closure152((), v)
                    })(x.clone())
                })
                .collect();
            let v23: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v21);
            let v25: u8 = v16.version;
            let v27: Vec<std::string::String> = v6.clone().receipt_ids;
            (
                v2,
                v4,
                v8,
                v10,
                v14,
                v23,
                v25,
                fable_library_rust::NativeArray_::array_from(v27),
                v6.clone().status,
                v6.tokens_burnt,
                map(
                    Func1::new(move |v_1: Vec<crate::model::near::rpc::Proof>| {
                        Dice_ui::closure153((), v_1)
                    }),
                    v0_1.proof,
                ),
            )
        }
        pub fn closure147(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            Option<std::string::String>,
                            std::string::String,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Option<Array<(std::string::String, std::string::String)>>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            Option<std::string::String>,
                            std::string::String,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::Receipt| {
                        Dice_ui::closure148((), v)
                    })(x.clone())
                })
                .collect();
            let v7: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            Option<std::string::String>,
                            std::string::String,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v5);
            let v9: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v12: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Option<Array<(std::string::String, std::string::String)>>,
            )> = v9
                .iter()
                .map(|x| {
                    Func1::new(move |v_1: crate::model::near::rpc::ReceiptsOutcome| {
                        Dice_ui::closure151((), v_1)
                    })(x.clone())
                })
                .collect();
            (v7, fable_library_rust::NativeArray_::array_from(v12))
        }
        pub fn closure156(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn closure155(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            std::string::String,
            i32,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v10: Option<(Option<std::string::String>, Option<std::string::String>)> = map(
                Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| {
                    Dice_ui::closure156((), v)
                }),
                v4.info,
            );
            let v12: i32 = v0_1.clone().code;
            let v14: std::string::String = v0_1.clone().message;
            (v10, v6, v12, v0_1.data, v14, v2)
        }
        pub fn closure146(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            Option<(
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                Option<std::string::String>,
                                std::string::String,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Option<Array<(std::string::String, std::string::String)>>,
                )>,
            )>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v6: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                Option<std::string::String>,
                                std::string::String,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Option<Array<(std::string::String, std::string::String)>>,
                )>,
            )> = map(
                Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                    Dice_ui::closure147((), v)
                }),
                v0_1.clone().result,
            );
            (
                map(
                    Func1::new(move |v_1: crate::model::near::rpc::RpcError| {
                        Dice_ui::closure155((), v_1)
                    }),
                    v0_1.clone().error,
                ),
                v0_1.id,
                v2,
                v6,
            )
        }
        pub fn closure145(
            unitVar: (),
            v0_1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            Option<(
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                Option<std::string::String>,
                                std::string::String,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Option<Array<(std::string::String, std::string::String)>>,
                )>,
            )>,
        )> {
            map(
                Func1::new(move |v: crate::model::near::rpc::RpcResponse| {
                    Dice_ui::closure146((), v)
                }),
                v0_1,
            )
        }
        pub fn closure144(
            unitVar: (),
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    Option<std::string::String>,
                                    std::string::String,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Option<Array<(std::string::String, std::string::String)>>,
                    )>,
                )>,
            )>,
            std::string::String,
        > {
            let v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> =
                Dice_ui::method163(v0_1);
            v1.map(|x| {
                Func1::new(move |v: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure145((), v)
                })(x)
            })
        }
        pub fn closure143(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            v1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v2: leptos::Memo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Array<
            Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        > {
            let v4: leptos::Signal<bool> = leptos::Resource::loading(&v0_1.clone());
            let v6: bool = leptos::SignalGet::get(&v4);
            let v8: leptos::Signal<bool> = leptos::Resource::loading(&v1.clone());
            let v10: bool = leptos::SignalGet::get(&v8);
            let v12: Option<rexie::Rexie> = leptos::SignalGet::get(&v0_1);
            let v15: Dice_ui::US5 =
                defaultValue(Dice_ui::US5::US5_1, map(Dice_ui::method17(), v12));
            let v17: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::SignalGet::get(&v1);
            let v20: Dice_ui::US44 =
                defaultValue(Dice_ui::US44::US44_1, map(Dice_ui::method133(), v17));
            let v39: Dice_ui::US29 = match &v20 {
                Dice_ui::US44::US44_0(v20_0_0) => {
                    let v21: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v20 {
                            Dice_ui::US44::US44_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v24: Dice_ui::US45 = match &v21 {
                        Err(v21_1_0) => Dice_ui::closure105((), v21_1_0.clone()),
                        Ok(v21_0_0) => Dice_ui::closure104((), v21_0_0.clone()),
                    };
                    Dice_ui::US29::US29_0(match &v24 {
                        Dice_ui::US45::US45_0(v24_0_0) => {
                            let v28: Vec<Dice_ui::US27> = v24_0_0
                                .clone()
                                .iter()
                                .map(|x| {
                                    Func1::new(move |v_2: Option<LrcPtr<Dice_ui::Heap4>>| {
                                        Dice_ui::closure82((), v_2)
                                    })(x.clone())
                                })
                                .collect();
                            Dice_ui::US30::US30_0(fable_library_rust::NativeArray_::array_from(v28))
                        }
                        Dice_ui::US45::US45_1(v24_1_0) => Dice_ui::US30::US30_1(v24_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v40: string = sprintf!("{:?}", v15);
            let v41: i64 = length(v40.clone()) as i64;
            let v62: string = if v41 <= 400_i64 {
                v40.clone()
            } else {
                let v44: f64 = 400_i64 as f64 / 2.0_f64;
                let v47: i64 = v44.ceil() as i64;
                let v50: i64 = v44.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v40.clone(), Some(0_i64 as i32), Some((v47 - 1_i64) as i32)),
                        string("..."),
                        getSlice(v40, Some((v41 - v50) as i32), Some((v41 - 1_i64) as i32)),
                    ]))),
                )
            };
            let v63: string = sprintf!("{:?}", v39);
            let v64: i64 = length(v63.clone()) as i64;
            let v85: string = if v64 <= 400_i64 {
                v63.clone()
            } else {
                let v67: f64 = 400_i64 as f64 / 2.0_f64;
                let v70: i64 = v67.ceil() as i64;
                let v73: i64 = v67.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v63.clone(), Some(0_i64 as i32), Some((v70 - 1_i64) as i32)),
                        string("..."),
                        getSlice(v63, Some((v64 - v73) as i32), Some((v64 - 1_i64) as i32)),
                    ]))),
                )
            };
            let v86: string =
                append(append(append(append(append(append(append(append(string("state_core.use_request (19) / result move / database: "),
                                                                        v62),
                                                                 string(" / database_loading: ")),
                                                          ofBoolean(v6)),
                                                   string(" / state_data: ")),
                                            v85),
                                     string(" / state_data_loading: ")),
                              ofBoolean(v10)), string(""));
            leptos::logging::log!("{}", v86);
            {
                let v89: Array<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = v2();
                let v91: Vec<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = v89.to_vec();
                let v94: Vec<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                Option<std::string::String>,
                                                std::string::String,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Option<Array<(std::string::String, std::string::String)>>,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                > = v91
                    .iter()
                    .map(|x| {
                        Func1::new(
                            move |v_3: Result<
                                Option<crate::model::near::rpc::RpcResponse>,
                                std::string::String,
                            >| Dice_ui::closure144((), v_3),
                        )(x.clone())
                    })
                    .collect();
                let v96: Array<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                Option<std::string::String>,
                                                std::string::String,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Option<Array<(std::string::String, std::string::String)>>,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v94);
                let v98: string = append(
                    append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v96.clone()),
                    ),
                    string(""),
                );
                let v103: string = if length(v98.clone()) <= 200_i32 {
                    v98.clone()
                } else {
                    append(getSlice(v98, Some(0_i32), Some(199_i32)), string("..."))
                };
                leptos::logging::log!("{}", v103);
                v96
            }
        }
        pub fn method165() -> string {
            string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS")
        }
        pub fn method166() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure158(unitVar: (), v0_1: Dice_ui::US15) -> Dice_ui::US61 {
            Dice_ui::US61::US61_0(v0_1)
        }
        pub fn closure159(unitVar: (), v0_1: std::string::String) -> Dice_ui::US61 {
            Dice_ui::US61::US61_1(v0_1)
        }
        pub fn closure160(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn closure161(unitVar: (), v0_1: std::string::String) -> Dice_ui::US63 {
            Dice_ui::US63::US63_1(v0_1)
        }
        pub fn method167(
            v0_1: Result<Dice_ui::US60, std::string::String>,
        ) -> Result<Dice_ui::US60, std::string::String> {
            v0_1
        }
        pub fn method164() -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US60, std::string::String>>>,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v1: string = Dice_ui::method151();
                    let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
                    let v5: std::string::String = String::from(v3);
                    let v6: string = Dice_ui::method152();
                    let v8: &str = fable_library_rust::String_::LrcStr::as_str(&v6);
                    let v10: std::string::String = String::from(v8);
                    let v11: string = Dice_ui::method153();
                    let v13: &str = fable_library_rust::String_::LrcStr::as_str(&v11);
                    let v15: std::string::String = String::from(v13);
                    let v16: string = Dice_ui::method165();
                    let v18: &str = fable_library_rust::String_::LrcStr::as_str(&v16);
                    let v20: std::string::String = String::from(v18);
                    let v21: string = Dice_ui::method154();
                    let v23: &str = fable_library_rust::String_::LrcStr::as_str(&v21);
                    let v26: Array<std::string::String> = new_array(&[v20, String::from(v23)]);
                    let v28: Vec<std::string::String> = v26.to_vec();
                    let v30: crate::model::near::rpc::RpcInput =
                        crate::model::near::rpc::RpcInput {
                            jsonrpc: v5,
                            id: v10,
                            method: v15,
                            params: v28,
                        };
                    let v32: string = Dice_ui::method19(Dice_ui::method166());
                    let v34: &str = fable_library_rust::String_::LrcStr::as_str(&v32);
                    let v37: std::string::String = Dice_ui::method106(String::from(v34));
                    let v39: reqwest_wasm::RequestBuilder = reqwest_wasm::Client::builder()
                        .build()
                        .map_err(|err| err.to_string())?
                        .post(v37);
                    let v42: reqwest_wasm::RequestBuilder =
                        Dice_ui::method109(reqwest_wasm::RequestBuilder::json(v39, &v30));
                    let v44: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::RequestBuilder::send(v42));
                    let v46: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v44.await;
                    let v47 = Dice_ui::method110();
                    let v48: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                        Dice_ui::method111(v46);
                    let v50: Result<reqwest_wasm::Response, std::string::String> =
                        v48.map_err(|x| v47(x));
                    let v52: reqwest_wasm::Response = v50?;
                    let v54: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<std::string::String, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::Response::text(v52));
                    let v56: Result<std::string::String, reqwest_wasm::Error> = v54.await;
                    let v57 = Dice_ui::method110();
                    let v58: Result<std::string::String, reqwest_wasm::Error> =
                        Dice_ui::method112(v56);
                    let v60: Result<std::string::String, std::string::String> =
                        v58.map_err(|x| v57(x));
                    let v64: Result<Dice_ui::US15, std::string::String> =
                        Ok::<Dice_ui::US15, std::string::String>(Dice_ui::US15::US15_0(v60?));
                    let v66: string =
                    append(append(string("dice_view.render (x) / roll_action create_action / result1 / result: "),
                                  sprintf!("{:?}", v64.clone())), string(""));
                    let v71: string = if length(v66.clone()) <= 200_i32 {
                        v66.clone()
                    } else {
                        append(getSlice(v66, Some(0_i32), Some(199_i32)), string("..."))
                    };
                    leptos::logging::log!("{}", v71);
                    {
                        let v75: Dice_ui::US61 = match &v64 {
                            Err(v64_1_0) => Dice_ui::closure159((), v64_1_0.clone()),
                            Ok(v64_0_0) => Dice_ui::closure158((), v64_0_0.clone()),
                        };
                        let v125: Dice_ui::US62 = if let Dice_ui::US61::US61_0(v75_0_0) = &v75 {
                            let v76: Dice_ui::US15 = match &v75 {
                                Dice_ui::US61::US61_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US15::US15_0(v76_0_0) = &v76 {
                                let v80: string = Dice_ui::method51(
                                    fable_library_rust::String_::fromString(match &v76 {
                                        Dice_ui::US15::US15_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }),
                                );
                                let v82: &str = fable_library_rust::String_::LrcStr::as_str(&v80);
                                let v84: Result<
                                    crate::model::near::rpc::RpcResponse,
                                    serde_json::Error,
                                > = serde_json::from_str(&v82);
                                let v85 = Dice_ui::method52();
                                let v86: Result<
                                    crate::model::near::rpc::RpcResponse,
                                    serde_json::Error,
                                > = Dice_ui::method161(v84);
                                let v88: Result<
                                    crate::model::near::rpc::RpcResponse,
                                    std::string::String,
                                > = v86.map_err(|x| v85(x));
                                let v91: Dice_ui::US63 = match &v88 {
                                    Err(v88_1_0) => Dice_ui::closure161((), v88_1_0.clone()),
                                    Ok(v88_0_0) => Dice_ui::closure160((), v88_0_0.clone()),
                                };
                                let v109: Dice_ui::US64 = match &v91 {
                                    Dice_ui::US63::US63_0(v91_0_0) => {
                                        let v92: crate::model::near::rpc::RpcResponse =
                                            v91_0_0.clone();
                                        let v94: std::string::String = v92.clone().jsonrpc;
                                        let v98:
                                                    Option<(Array<(std::string::String,
                                                                   Array<std::collections::HashMap<std::string::String, (Option<std::string::String>,
                                                                                                                         std::string::String,
                                                                                                                         Option<f64>,
                                                                                                                         Option<std::string::String>)>>,
                                                                   std::string::String,
                                                                   Array<std::string::String>,
                                                                   Array<std::string::String>,
                                                                   std::string::String,
                                                                   std::string::String,
                                                                   std::string::String,
                                                                   std::string::String)>,
                                                            Array<(std::string::String,
                                                                   std::string::String,
                                                                   std::string::String,
                                                                   u64,
                                                                   Array<std::string::String>,
                                                                   Array<(std::string::String,
                                                                          std::string::String,
                                                                          std::string::String)>,
                                                                   u8,
                                                                   Array<std::string::String>,
                                                                   std::collections::HashMap<std::string::String, std::string::String>,
                                                                   Option<std::string::String>,
                                                                   Option<Array<(std::string::String,
                                                                                 std::string::String)>>)>)> =
                                                map(Func1::new(move
                                                                   |v_4:
                                                                        crate::model::near::rpc::TransactionStatus|
                                                                   Dice_ui::closure147((),
                                                                                       v_4)),
                                                    v92.clone().result);
                                        Dice_ui::US64::US64_0(map(Func1::new(move
                                                                                     |v_5:
                                                                                          crate::model::near::rpc::RpcError|
                                                                                     Dice_ui::closure155((),
                                                                                                         v_5)),
                                                                      v92.clone().error),
                                                                  v92.id, v94,
                                                                  v98)
                                    }
                                    Dice_ui::US63::US63_1(v91_1_0) => {
                                        Dice_ui::US64::US64_1(v91_1_0.clone())
                                    }
                                };
                                match &v109 {
                                    Dice_ui::US64::US64_0(
                                        v109_0_0,
                                        v109_0_1,
                                        v109_0_2,
                                        v109_0_3,
                                    ) => Dice_ui::US62::US62_0(Dice_ui::US60::US60_0(
                                        v109_0_0.clone(),
                                        v109_0_1.clone(),
                                        v109_0_2.clone(),
                                        v109_0_3.clone(),
                                    )),
                                    Dice_ui::US64::US64_1(v109_1_0) => {
                                        Dice_ui::US62::US62_1(v109_1_0.clone())
                                    }
                                }
                            } else {
                                Dice_ui::US62::US62_0(Dice_ui::US60::US60_1)
                            }
                        } else {
                            Dice_ui::US62::US62_0(Dice_ui::US60::US60_1)
                        };
                        let v131: Result<Dice_ui::US60, std::string::String> = match &v125 {
                            Dice_ui::US62::US62_0(v125_0_0) => {
                                Ok::<Dice_ui::US60, std::string::String>(v125_0_0.clone())
                            }
                            Dice_ui::US62::US62_1(v125_1_0) => {
                                Err::<Dice_ui::US60, std::string::String>(v125_1_0.clone())
                            }
                        };
                        let v133: string =
                        append(append(string("dice_view.render (x) / roll_action create_action / result2 / result: "),
                                      sprintf!("{:?}", v131.clone())),
                               string(""));
                        let v138: string = if length(v133.clone()) <= 200_i32 {
                            v133.clone()
                        } else {
                            append(getSlice(v133, Some(0_i32), Some(199_i32)), string("..."))
                        };
                        leptos::logging::log!("{}", v138);
                        {
                            let v140: Result<Dice_ui::US60, std::string::String> =
                                Dice_ui::method167(v131);
                            v140
                        }
                    }
                }
            });
            {
                {
                    {
                        //;
                        __result
                    }
                }
            }
        }
        pub fn closure157(
            unitVar: (),
            v0_1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US60, std::string::String>>>,
        > {
            let v2: string = append(
                append(
                    string("dice_view.render (2) / set_max_action / value: "),
                    sprintf!("{:?}", v0_1),
                ),
                string(""),
            );
            leptos::logging::log!("{}", v2);
            Dice_ui::method164()
        }
        pub fn closure164(unitVar: (), v0_1: Dice_ui::US60) -> Dice_ui::US62 {
            Dice_ui::US62::US62_0(v0_1)
        }
        pub fn closure165(unitVar: (), v0_1: std::string::String) -> Dice_ui::US62 {
            Dice_ui::US62::US62_1(v0_1)
        }
        pub fn closure163(
            unitVar: (),
            v0_1: Result<Dice_ui::US60, std::string::String>,
        ) -> Dice_ui::US62 {
            match &v0_1 {
                Err(v0_1_1_0) => Dice_ui::closure165((), v0_1_1_0.clone()),
                Ok(v0_1_0_0) => Dice_ui::closure164((), v0_1_0_0.clone()),
            }
        }
        pub fn closure166(unitVar: (), v0_1: Dice_ui::US62) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(v0_1)
        }
        pub fn method168() -> Func1<Dice_ui::US62, Dice_ui::US65> {
            Func1::new(move |v: Dice_ui::US62| Dice_ui::closure166((), v))
        }
        pub fn closure162(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    Option<std::string::String>,
                                    std::string::String,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Option<Array<(std::string::String, std::string::String)>>,
                    )>,
                )>,
            )>,
            std::string::String,
        > {
            let v2: leptos::RwSignal<Option<Result<Dice_ui::US60, std::string::String>>> =
                leptos::Action::value(&v0_1);
            let v6: Option<Dice_ui::US62> = map(
                Func1::new(move |v: Result<Dice_ui::US60, std::string::String>| {
                    Dice_ui::closure163((), v)
                }),
                leptos::SignalGet::get(&v2),
            );
            let v9: Dice_ui::US65 =
                defaultValue(Dice_ui::US65::US65_1, map(Dice_ui::method168(), v6));
            let v27: Dice_ui::US62 = if let Dice_ui::US65::US65_0(v9_0_0) = &v9 {
                let v10: Dice_ui::US62 = match &v9 {
                    Dice_ui::US65::US65_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                match &v10 {
                    Dice_ui::US62::US62_0(v10_0_0) => {
                        let v13: Dice_ui::US60 = v10_0_0.clone();
                        if let Dice_ui::US60::US60_0(v13_0_0, v13_0_1, v13_0_2, v13_0_3) = &v13 {
                            Dice_ui::US62::US62_0(Dice_ui::US60::US60_0(
                                match &v13 {
                                    Dice_ui::US60::US60_0(x, _, _, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v13 {
                                    Dice_ui::US60::US60_0(_, x, _, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v13 {
                                    Dice_ui::US60::US60_0(_, _, x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v13 {
                                    Dice_ui::US60::US60_0(_, _, _, x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            ))
                        } else {
                            Dice_ui::US62::US62_0(Dice_ui::US60::US60_1)
                        }
                    }
                    Dice_ui::US62::US62_1(v10_1_0) => Dice_ui::US62::US62_1(v10_1_0.clone()),
                }
            } else {
                Dice_ui::US62::US62_0(Dice_ui::US60::US60_1)
            };
            let v41: Dice_ui::US66 = match &v27 {
                Dice_ui::US62::US62_0(v27_0_0) => {
                    let v28: Dice_ui::US60 = v27_0_0.clone();
                    Dice_ui::US66::US66_0(match &v28 {
                        Dice_ui::US60::US60_0(v28_0_0, v28_0_1, v28_0_2, v28_0_3) => Some((
                            match &v28 {
                                Dice_ui::US60::US60_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v28 {
                                Dice_ui::US60::US60_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v28 {
                                Dice_ui::US60::US60_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v28 {
                                Dice_ui::US60::US60_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                        )),
                        _ => {
                            None::<(
                                Option<(
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    Option<std::string::String>,
                                                    std::string::String,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Option<Array<(std::string::String, std::string::String)>>,
                                    )>,
                                )>,
                            )>
                        }
                    })
                }
                Dice_ui::US62::US62_1(v27_1_0) => Dice_ui::US66::US66_1(v27_1_0.clone()),
            };
            let v47: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )>,
                std::string::String,
            > = match &v41 {
                Dice_ui::US66::US66_0(v41_0_0) => Ok::<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            Option<std::string::String>,
                                            std::string::String,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Option<Array<(std::string::String, std::string::String)>>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >(v41_0_0.clone()),
                Dice_ui::US66::US66_1(v41_1_0) => Err::<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            Option<std::string::String>,
                                            std::string::String,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Option<Array<(std::string::String, std::string::String)>>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >(v41_1_0.clone()),
            };
            let v49: string = append(
                append(
                    string("dice_view.render (x) / roll create_memo / result: "),
                    sprintf!("{:?}", v47.clone()),
                ),
                string(""),
            );
            let v54: string = if length(v49.clone()) <= 200_i32 {
                v49.clone()
            } else {
                append(getSlice(v49, Some(0_i32), Some(199_i32)), string("..."))
            };
            leptos::logging::log!("{}", v54);
            v47
        }
        pub fn closure168(
            unitVar: (),
            v0_1: Option<(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    Option<std::string::String>,
                                    std::string::String,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Option<Array<(std::string::String, std::string::String)>>,
                    )>,
                )>,
            )>,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn closure169(unitVar: (), v0_1: std::string::String) -> Dice_ui::US66 {
            Dice_ui::US66::US66_1(v0_1)
        }
        pub fn closure170(
            unitVar: (),
            _arg: (
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    Option<std::string::String>,
                                    std::string::String,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Option<Array<(std::string::String, std::string::String)>>,
                    )>,
                )>,
            ),
        ) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method169() -> Func1<
            (
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    Option<std::string::String>,
                                    std::string::String,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Option<Array<(std::string::String, std::string::String)>>,
                    )>,
                )>,
            ),
            Dice_ui::US60,
        > {
            Func1::new(
                move |arg10_0040: (
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )| Dice_ui::closure170((), arg10_0040),
            )
        }
        pub fn closure171(
            unitVar: (),
            _arg: (
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US67 {
            Dice_ui::US67::US67_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method170() -> Func1<
            (
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US67,
        > {
            Func1::new(
                move |arg10_0040: (
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure171((), arg10_0040),
            )
        }
        pub fn closure167(
            v0_1: leptos::Memo<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            Option<std::string::String>,
                                            std::string::String,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Option<Array<(std::string::String, std::string::String)>>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )>,
                std::string::String,
            > = v0_1();
            let v5: Dice_ui::US66 = match &v2 {
                Err(v2_1_0) => Dice_ui::closure169((), v2_1_0.clone()),
                Ok(v2_0_0) => Dice_ui::closure168((), v2_0_0.clone()),
            };
            let v14: Dice_ui::US62 = match &v5 {
                Dice_ui::US66::US66_0(v5_0_0) => Dice_ui::US62::US62_0(defaultValue(
                    Dice_ui::US60::US60_1,
                    map(Dice_ui::method169(), v5_0_0.clone()),
                )),
                Dice_ui::US66::US66_1(v5_1_0) => Dice_ui::US62::US62_1(v5_1_0.clone()),
            };
            let v36: Dice_ui::US34 = if let Dice_ui::US62::US62_0(v14_0_0) = &v14 {
                let v15: Dice_ui::US60 = match &v14 {
                    Dice_ui::US62::US62_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US60::US60_0(v15_0_0, v15_0_1, v15_0_2, v15_0_3) = &v15 {
                    let v22: Dice_ui::US67 = defaultValue(
                        Dice_ui::US67::US67_1,
                        map(
                            Dice_ui::method170(),
                            match &v15 {
                                Dice_ui::US60::US60_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                    );
                    if let Dice_ui::US67::US67_0(
                        v22_0_0,
                        v22_0_1,
                        v22_0_2,
                        v22_0_3,
                        v22_0_4,
                        v22_0_5,
                    ) = &v22
                    {
                        Dice_ui::US34::US34_0(append(
                            append(
                                append(
                                    append(
                                        append(
                                            append(
                                                append(
                                                    toString(match &v22 {
                                                        Dice_ui::US67::US67_0(_, _, _, _, _, x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    }),
                                                    string(": "),
                                                ),
                                                toString(match &v22 {
                                                    Dice_ui::US67::US67_0(_, _, _, _, x, _) => {
                                                        x.clone()
                                                    }
                                                    _ => unreachable!(),
                                                }),
                                            ),
                                            string(" - "),
                                        ),
                                        toString(match &v22 {
                                            Dice_ui::US67::US67_0(_, _, _, x, _, _) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                    ),
                                    string(" ("),
                                ),
                                toString(match &v22 {
                                    Dice_ui::US67::US67_0(_, x, _, _, _, _) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US34::US34_1
                    }
                } else {
                    Dice_ui::US34::US34_1
                }
            } else {
                Dice_ui::US34::US34_1
            };
            let v41: Option<string> = match &v36 {
                Dice_ui::US34::US34_0(v36_0_0) => Some(match &v36 {
                    Dice_ui::US34::US34_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => None::<string>,
            };
            let v43: string = append(
                append(
                    string("dice_view.render (x) / error_message create_memo / result: "),
                    sprintf!("{:?}", v41.clone()),
                ),
                string(""),
            );
            let v48: string = if length(v43.clone()) <= 200_i32 {
                v43.clone()
            } else {
                append(getSlice(v43, Some(0_i32), Some(199_i32)), string("..."))
            };
            leptos::logging::log!("{}", v48);
            v41
        }
        pub fn closure172(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US34 {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::SignalGet::get(&v3.l1.clone());
            let v10: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_1,
                map(Dice_ui::method50(), v6.l0.clone()),
            );
            match &v10 {
                Dice_ui::US15::US15_0(v10_0_0) => {
                    Dice_ui::US34::US34_0(fable_library_rust::String_::fromString(match &v10 {
                        Dice_ui::US15::US15_0(x) => x.clone(),
                        _ => unreachable!(),
                    }))
                }
                _ => Dice_ui::US34::US34_1,
            }
        }
        pub fn closure175(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ) = leptos::create_signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure174(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure175(v0_1, v)
            })
        }
        pub fn method171() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure174((), v))
        }
        pub fn method172(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure173(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::SignalGet::get(&v3.l1.clone());
            let v10: Vec<(bool, std::string::String)> = v6
                .l1
                .clone()
                .iter()
                .map(|x| {
                    Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                        Dice_ui::closure56((), tupledArg.0.clone(), tupledArg.1.clone())
                    })(x.clone())
                })
                .collect();
            let v11 = Dice_ui::method74();
            let v12: Vec<(bool, std::string::String)> = Dice_ui::method75(v10);
            let v14: Vec<(bool, std::string::String)> =
                v12.into_iter().filter(|x| v11(x.clone().clone())).collect();
            let v17: Vec<std::string::String> = v14
                .iter()
                .map(|x| {
                    Func1::new(move |arg10_0040_1: (bool, std::string::String)| {
                        Dice_ui::closure58((), arg10_0040_1)
                    })(x.clone())
                })
                .collect();
            let v18 = Dice_ui::method171();
            let v19: Vec<std::string::String> = Dice_ui::method172(v17);
            v19.iter()
                .enumerate()
                .map(|(i, x)| v18(i.try_into().unwrap())(x.clone()))
                .collect()
        }
        pub fn closure177(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::ReadSignal<std::string::String>,
            leptos::WriteSignal<std::string::String>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn closure178(
            unitVar: (),
            _arg: (
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::ReadSignal<std::string::String>) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure176(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<std::string::String>,
                            leptos::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            > = v0_1();
            let v5: Vec<(
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            )> = v2
                .iter()
                .map(|x| {
                    Func1::new(
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::ReadSignal<std::string::String>,
                                leptos::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure177((), tupledArg.0.clone(), tupledArg.1.clone())
                        },
                    )(x.clone())
                })
                .collect();
            v5.iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040_1: (
                            i32,
                            leptos::ReadSignal<std::string::String>,
                            leptos::WriteSignal<std::string::String>,
                        )| Dice_ui::closure178((), arg10_0040_1),
                    )(x.clone())
                })
                .collect()
        }
        pub fn method173(v0_1: Array<leptos::View>) -> Array<leptos::View> {
            v0_1
        }
        pub fn method177() -> string {
            string("Account")
        }
        pub fn closure184(
            unitVar: (),
            v0_1: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method180(
        ) -> Func1<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>, Dice_ui::US68>
        {
            Func1::new(
                move |v: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>| {
                    Dice_ui::closure184((), v)
                },
            )
        }
        pub fn closure188(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method184() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure188((), ()))
        }
        pub fn method185(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn closure189(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v2: Func0<leptos::Fragment> = Func0::new(move || v0_1());
            let v5: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(move || v2())]);
            let v7: Vec<leptos::View> = v5.to_vec();
            leptos::Fragment::new(v7)
        }
        pub fn method186(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure189(v0_1.clone(), ())
            })
        }
        pub fn closure190(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Path>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure187(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string = string(
                " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure190((), v)
                    })(x.clone())
                })
                .collect();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method183() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure187((), ()))
        }
        pub fn closure186(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v15: string =
                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method183()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v15), string(">{v17()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    class="text-red-700"
                    stroke="currentColor"
                    stroke-width="1.5"
                    viewBox="0 0 24 24"
                    height="100%"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    {v17()}
                </svg>
            };
            let v25: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method182() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure186((), ()))
        }
        pub fn method188() -> string {
            string("No data")
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method188();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method187() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure191((), ()))
        }
        pub fn closure185(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"[height:17px]\"");
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method182()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="[height:17px]">{v5()}</span> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method187()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v15), string(">{v17()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Pre> =
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v17()}</pre> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method181() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure185((), ()))
        }
        pub fn method189(
            v0_1: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> {
            v0_1
        }
        pub fn closure192(
            unitVar: (),
            _arg: (i32, leptos::ReadSignal<std::string::String>),
        ) -> i32 {
            _arg.0.clone()
        }
        pub fn method190() -> Func1<(i32, leptos::ReadSignal<std::string::String>), i32> {
            Func1::new(
                move |arg10_0040: (i32, leptos::ReadSignal<std::string::String>)| {
                    Dice_ui::closure192((), arg10_0040)
                },
            )
        }
        pub fn method192(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure194(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: i32,
            v4: std::string::String,
            unitVar: (),
        ) {
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v7: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v2.l0.clone();
            let v9: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v7.clone());
            let v12: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v9.l1.clone());
            let v19: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v7);
            let v21: string = Dice_ui::method19(v6);
            let v23: &str = fable_library_rust::String_::LrcStr::as_str(&v21);
            let v27: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: Some(String::from(v23)),
                l1: v12.l1.clone(),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            leptos::SignalSet::set(&v19.l1.clone(), v27);
            ()
        }
        pub fn closure196(unitVar: (), v0_1: leptos::Memo<Dice_ui::US34>) -> Dice_ui::US70 {
            Dice_ui::US70::US70_0(v0_1)
        }
        pub fn method194() -> Func1<leptos::Memo<Dice_ui::US34>, Dice_ui::US70> {
            Func1::new(move |v: leptos::Memo<Dice_ui::US34>| Dice_ui::closure196((), v))
        }
        pub fn closure197(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure199(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method196() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure199((), ()))
        }
        pub fn closure198(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v11: string = string(
                " stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"",
            );
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v11), string(">{v13()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">
                    {v13()}
                </circle>
            };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v27: string =
                string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v29 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v27), string(">{v29()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::svg::Path> = leptos::view! {
                <path d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">
                    {v29()}
                </path>
            };
            let v37: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v34)]);
            let v39: Vec<leptos::View> = v37.to_vec();
            leptos::Fragment::new(v39)
        }
        pub fn method195() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure198((), ()))
        }
        pub fn closure195(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = fable_library_rust::String_::fromString(v3);
            let v8: Dice_ui::US70 =
                defaultValue(Dice_ui::US70::US70_1, map(Dice_ui::method194(), v1));
            let v15: Dice_ui::US43 = match &v8 {
                Dice_ui::US70::US70_0(v8_0_0) => Dice_ui::US43::US43_0(match &v8 {
                    Dice_ui::US70::US70_0(x) => x.clone(),
                    _ => unreachable!(),
                }()),
                _ => Dice_ui::US43::US43_1,
            };
            let v22: Dice_ui::US34 = if let Dice_ui::US43::US43_0(v15_0_0) = &v15 {
                let v16: Dice_ui::US34 = match &v15 {
                    Dice_ui::US43::US43_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US34::US34_0(v16_0_0) = &v16 {
                    Dice_ui::US34::US34_0(match &v16 {
                        Dice_ui::US34::US34_0(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Dice_ui::US34::US34_1
                }
            } else {
                Dice_ui::US34::US34_1
            };
            let v60: leptos::View = if let Dice_ui::US34::US34_0(v22_0_0) = &v22 {
                if v5.clone()
                    == match &v22 {
                        Dice_ui::US34::US34_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                {
                    let v27 = {
                        let clo = Func0::new(move || Dice_ui::closure197((), ()));
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v41: string =
                            string(" class=move || \" \".to_owned() + &v27(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v43 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method195()));
                    let v46: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v41), string(">{v43()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v48: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || " ".to_owned() + &v27(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v43()}
                        </svg>
                    };
                    leptos::IntoView::into_view(v48)
                } else {
                    let v52: Array<leptos::View> = Dice_ui::method173(new_empty::<leptos::View>());
                    leptos::CollectView::collect_view(v52.to_vec())
                }
            } else {
                let v57: Array<leptos::View> = Dice_ui::method173(new_empty::<leptos::View>());
                leptos::CollectView::collect_view(v57.to_vec())
            };
            let v61: string = Dice_ui::method19(v5);
            let v63: &str = fable_library_rust::String_::LrcStr::as_str(&v61);
            let v65: std::string::String = String::from(v63);
            let v67: leptos::leptos_dom::Text = leptos::html::text(v65);
            let v70: Array<leptos::View> = new_array(&[v60, leptos::IntoView::into_view(v67)]);
            let v72: Vec<leptos::View> = v70.to_vec();
            leptos::Fragment::new(v72)
        }
        pub fn method193(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure195(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure200(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Button>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure193(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            _arg: (i32, leptos::ReadSignal<std::string::String>),
        ) -> leptos::Fragment {
            let v6: std::string::String = leptos::SignalGet::get(&_arg.1.clone());
            let v7: std::string::String = Dice_ui::method192(v6.clone());
            let v8 = Func0::new({
                let _arg = _arg.clone();
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v6 = v6.clone();
                move || {
                    Dice_ui::closure194(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        _arg.0.clone(),
                        v6.clone(),
                        (),
                    )
                }
            });
            {
                let v10: string =
                    string("class=\"flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
                let v17: string = append(
                    append(
                        string(" aria-label=v7"),
                        append(
                            append(
                                string(" on:click=move |_| v8()"),
                                append(append(append(string(" "), v10), string("")), string("")),
                            ),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v19 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method193(
                    v0_1.clone(),
                    v1.clone(),
                    v2.clone(),
                    v6.clone(),
                )));
                let v22: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<button "), v17), string(">{v19()}</")),
                                string("button"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v25: Array<leptos::HtmlElement<leptos::html::Button>> = new_array(&[
                    leptos::view! {
                        <button
                            aria-label=v7
                            on:click=move |_| v8()
                            class="flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500"
                        >
                            {v19()}
                        </button>
                    },
                ]);
                let v27: Vec<leptos::HtmlElement<leptos::html::Button>> = v25.to_vec();
                let v30: Vec<leptos::View> = v27
                    .iter()
                    .map(|x| {
                        Func1::new(move |v: leptos::HtmlElement<leptos::html::Button>| {
                            Dice_ui::closure200((), v)
                        })(x.clone())
                    })
                    .collect();
                let v32: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v30);
                let v34: Vec<leptos::View> = v32.to_vec();
                leptos::Fragment::new(v34)
            }
        }
        pub fn method191(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func1<(i32, leptos::ReadSignal<std::string::String>), leptos::Fragment> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (i32, leptos::ReadSignal<std::string::String>)| {
                    Dice_ui::closure193(v0_1.clone(), v1.clone(), v2.clone(), arg10_0040)
                }
            })
        }
        pub fn closure183(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: Dice_ui::US68 = defaultValue(
                Dice_ui::US68::US68_1,
                map(Dice_ui::method180(), v0_1.clone()),
            );
            let v14: Dice_ui::US69 = match &v5 {
                Dice_ui::US68::US68_0(v5_0_0) => {
                    let v8: Vec<(i32, leptos::ReadSignal<std::string::String>)> = match &v5 {
                        Dice_ui::US68::US68_0(x) => x.clone(),
                        _ => unreachable!(),
                    }(
                    );
                    Dice_ui::US69::US69_0(fable_library_rust::NativeArray_::array_from(v8))
                }
                _ => Dice_ui::US69::US69_1,
            };
            if count(match &v14 {
                Dice_ui::US69::US69_0(v14_0_0) => match &v14 {
                    Dice_ui::US69::US69_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => new_empty::<(i32, leptos::ReadSignal<std::string::String>)>(),
            }) as u64
                == 0_u64
            {
                let v24: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v26 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method181()));
                let v29: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v24), string(">{v26()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v31: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v26()}</div> };
                let v34: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v31)]);
                let v36: Vec<leptos::View> = v34.to_vec();
                leptos::Fragment::new(v36)
            } else {
                let v41: Dice_ui::US68 = defaultValue(
                    Dice_ui::US68::US68_1,
                    map(Dice_ui::method180(), v0_1.clone()),
                );
                match &v41 {
                    Dice_ui::US68::US68_0(v41_0_0) => {
                        let v43: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> =
                            Dice_ui::method189(match &v41 {
                                Dice_ui::US68::US68_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                        let v44 = Dice_ui::method190();
                        let v45 = Dice_ui::method191(v0_1, v1, v2);
                        let v57: string =
                            string("leptos::IntoView::into_view(leptos::view! { <leptos::For  children=move |x| v45(x) let:x key=move |x| v44(x.to_owned()) each=v43 /> })");
                        let v59: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(
                            leptos::view! {
                                <leptos::For
                                    children=move |x| v45(x)
                                    let:x
                                    key=move |x| v44(x.to_owned())
                                    each=v43
                                ></leptos::For>
                            },
                        )]);
                        let v61: Vec<leptos::View> = v59.to_vec();
                        leptos::Fragment::new(v61)
                    }
                    _ => {
                        let v66: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
                        leptos::Fragment::new(v66)
                    }
                }
            }
        }
        pub fn method179(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure183(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure182(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v6: string = append(append(append(string(" "), v3), string("")), string(""));
            let v8 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method179(v0_1, v1, v2)));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v6), string(">{v8()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                <div class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">
                    {v8()}
                </div>
            };
            let v16: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v13)]);
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method178(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure182(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure201(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v2: Func0<leptos::Fragment> = Func0::new(move || v0_1());
            let v5: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(move || v2())]);
            let v7: Vec<leptos::View> = v5.to_vec();
            leptos::Fragment::new(v7)
        }
        pub fn method197(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure201(v0_1.clone(), ())
            })
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure204(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure205(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v1: Array<leptos::View> = new_array(&[v0_1]);
            let v3: Vec<leptos::View> = v1.to_vec();
            leptos::Fragment::new(v3)
        }
        pub fn method199(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure205(v0_1.clone(), ())
            })
        }
        pub fn closure207(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure208(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v7: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure211(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v5: Dice_ui::US70 =
                defaultValue(Dice_ui::US70::US70_1, map(Dice_ui::method194(), v1));
            let v12: Dice_ui::US43 = match &v5 {
                Dice_ui::US70::US70_0(v5_0_0) => Dice_ui::US43::US43_0(match &v5 {
                    Dice_ui::US70::US70_0(x) => x.clone(),
                    _ => unreachable!(),
                }()),
                _ => Dice_ui::US43::US43_1,
            };
            let v19: Dice_ui::US34 = if let Dice_ui::US43::US43_0(v12_0_0) = &v12 {
                let v13: Dice_ui::US34 = match &v12 {
                    Dice_ui::US43::US43_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US34::US34_0(v13_0_0) = &v13 {
                    Dice_ui::US34::US34_0(match &v13 {
                        Dice_ui::US34::US34_0(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Dice_ui::US34::US34_1
                }
            } else {
                Dice_ui::US34::US34_1
            };
            match &v19 {
                Dice_ui::US34::US34_0(v19_0_0) => match &v19 {
                    Dice_ui::US34::US34_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string("Select..."),
            }
        }
        pub fn method203(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure211(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure212(v0_1: Func0<string>, unitVar: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method19(v0_1());
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v11: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v8)]);
            let v13: Vec<leptos::View> = v11.to_vec();
            leptos::Fragment::new(v13)
        }
        pub fn method204(v0_1: Func0<string>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure212(v0_1.clone(), ())
            })
        }
        pub fn closure210(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v7: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method204(
                Dice_ui::method203(v0_1, v1, v2),
            )));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v7), string(">{v9()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v9()}</span>
            };
            let v17: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v14)]);
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method202(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure210(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure214(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure215(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path
                        clip-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        fill-rule="evenodd"
                    >
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure190((), v)
                    })(x.clone())
                })
                .collect();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method206() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure215((), ()))
        }
        pub fn closure213(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure214((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v12: string =
                string(" class=move || \" \".to_owned() + &v2(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v14 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method206()));
            let v17: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v12), string(">{v14()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    class=move || " ".to_owned() + &v2(())
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    {v14()}
                </svg>
            };
            let v22: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v19)]);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method205() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure213((), ()))
        }
        pub fn closure209(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: string = string(" class=\"flex items-center gap-2\"");
            let v8 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method202(v0_1, v1, v2)));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v6), string(">{v8()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v8()}</div> };
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v18: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v20 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method205()));
            let v23: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v18), string(">{v20()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v20()}</span> };
            let v28: Array<leptos::View> = new_array(&[v15, leptos::IntoView::into_view(v25)]);
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method201(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure209(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure216(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            v0_1()
        }
        pub fn method207(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure216(v0_1.clone(), ())
            })
        }
        pub fn closure206(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6 = {
                let clo = Func0::new(move || Dice_ui::closure207((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v9 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    move || Dice_ui::closure208(v0_1.clone(), v1.clone(), v2.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v9(()) + \" \" + &v6(())");
            let v13: string = append(append(append(string(" "), v10), string("")), string(""));
            let v15 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method201(
                v0_1.clone(),
                v1.clone(),
                v2.clone(),
            )));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v13), string(">{v15()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v9(()) + " " + &v6(())
                }>{v15()}</summary>
            };
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v25: string = string(" class=\"flex flex-1 flex-col\"");
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method207(v3)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v25), string(">{v27()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v27()}</div> };
            let v35: Array<leptos::View> = new_array(&[v22, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method200(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure206(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure202(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: leptos::View,
            v4: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v7 = {
                let clo = Func0::new(move || Dice_ui::closure203((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v10 = {
                let clo_1 = Func0::new(move || Dice_ui::closure204((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v16 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method199(v3)));
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v14), string(">{v16()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v16()}</div> };
            let v23: leptos::View = leptos::IntoView::into_view(v21);
            let v24: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v7(())");
            let v28: string = append(
                append(
                    string(" open=move || v10(())"),
                    append(append(append(string(" "), v24), string("")), string("")),
                ),
                string(""),
            );
            let v30 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method200(v0_1, v1, v2, v4)));
            let v33: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v28), string(">{v30()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v35: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v10(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v7(())
                    }
                >
                    {v30()}
                </details>
            };
            let v38: Array<leptos::View> = new_array(&[v23, leptos::IntoView::into_view(v35)]);
            let v40: Vec<leptos::View> = v38.to_vec();
            leptos::Fragment::new(v40)
        }
        pub fn method198(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: leptos::View,
            v4: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure202(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure181(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Dice_ui::US34>,
            v2: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3: string = Dice_ui::method177();
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v11: leptos::View = leptos::IntoView::into_view(v9);
            let v14: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>> =
                Some(v2);
            let v15: Option<leptos::Memo<Dice_ui::US34>> = Some(v1);
            let v17: Array<leptos::View> = Dice_ui::method173(new_empty::<leptos::View>());
            let v25: string = string(" class=\"flex flex-col [position:relative]\"");
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method198(
                v14.clone(),
                v15.clone(),
                v0_1.clone(),
                leptos::CollectView::collect_view(v17.to_vec()),
                Dice_ui::method197(Dice_ui::method178(v14, v15, v0_1)),
            )));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v25), string(">{v27()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-col [position:relative]">{v27()}</div> };
            let v35: Array<leptos::View> = new_array(&[v11, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method176(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Dice_ui::US34>,
            v2: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure181(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn method209() -> string {
            string("Max")
        }
        pub fn closure218(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> i32 {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            (leptos::SignalGetUntracked::get_untracked(&v3.l1.clone())).l2
        }
        pub fn method210(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<i32> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure218(v0_1.clone(), ())
            })
        }
        pub fn closure219(v0_1: LrcPtr<Dice_ui::Heap2>, v1: std::string::String) {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v4: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v2.clone());
            let v7: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v4.l1.clone());
            let v14: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v2);
            let v16: string = toString(v1);
            let v20: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v7.l0.clone(),
                l1: v7.l1.clone(),
                l2: if string("") == v16.clone() {
                    1_i32
                } else {
                    toInt32(v16)
                },
                l3: v7.l3,
                l4: v7.l4.clone(),
            });
            leptos::SignalSet::set(&v14.l1.clone(), v20);
            ()
        }
        pub fn method211(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func1<std::string::String, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure219(v0_1.clone(), v)
            })
        }
        pub fn closure220(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure217(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method209();
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: std::string::String = String::from(v3);
            let v7: leptos::leptos_dom::Text = leptos::html::text(v5);
            let v9: leptos::View = leptos::IntoView::into_view(v7);
            let v10 = Dice_ui::method210(v0_1.clone());
            let v11 = Dice_ui::method211(v0_1);
            let v14 = {
                let clo = Func0::new(move || Dice_ui::closure220((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v24: string =
                string("leptos::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v11(leptos::event_target_value(&event)) prop:value=move || v10() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v14(()) /> }");
            let v26: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                <input
                    on:keyup=move |event: web_sys::KeyboardEvent| v11(
                        leptos::event_target_value(&event),
                    )
                    prop:value=move || v10()
                    class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v14(())
                />
            };
            let v29: Array<leptos::View> = new_array(&[v9, leptos::IntoView::into_view(v26)]);
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method208(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure217(v0_1.clone(), ())
            })
        }
        pub fn closure222(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::ReadSignal<bool> = leptos::Action::pending(&v0_1);
            leptos::SignalGet::get(&v2)
        }
        pub fn method213(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure223(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            unitVar: (),
        ) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v9: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                l0: (leptos::SignalGetUntracked::get_untracked(&v4.l1.clone())).l2,
            });
            leptos::Action::dispatch(&v1, v9.clone());
            ()
        }
        pub fn method215() -> string {
            string("Roll")
        }
        pub fn method216(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure228(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method219() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure228((), ()))
        }
        pub fn closure227(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0s"
                    values="0.2; 1; .2"
                    attributeType="XML"
                    attributeName="opacity"
                >
                    {v15()}
                </animate>
            };
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v35: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
            let v37 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v39: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v35), string(">{v37()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v41: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0s"
                    values="10; 20; 10"
                    attributeType="XML"
                    attributeName="height"
                >
                    {v37()}
                </animate>
            };
            let v43: leptos::View = leptos::IntoView::into_view(v41);
            let v56: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v58 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v60: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v56), string(">{v58()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v62: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0s"
                    values="10; 5; 10"
                    attributeType="XML"
                    attributeName="y"
                >
                    {v58()}
                </animate>
            };
            let v65: Array<leptos::View> = new_array(&[v22, v43, leptos::IntoView::into_view(v62)]);
            let v67: Vec<leptos::View> = v65.to_vec();
            leptos::Fragment::new(v67)
        }
        pub fn method218() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure227((), ()))
        }
        pub fn closure229(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.15s"
                    values="0.2; 1; .2"
                    attributeType="XML"
                    attributeName="opacity"
                >
                    {v15()}
                </animate>
            };
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v35: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v37 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v39: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v35), string(">{v37()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v41: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.15s"
                    values="10; 20; 10"
                    attributeType="XML"
                    attributeName="opacity"
                >
                    {v37()}
                </animate>
            };
            let v43: leptos::View = leptos::IntoView::into_view(v41);
            let v56: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v58 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v60: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v56), string(">{v58()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v62: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.15s"
                    values="10; 5; 10"
                    attributeType="XML"
                    attributeName="y"
                >
                    {v58()}
                </animate>
            };
            let v65: Array<leptos::View> = new_array(&[v22, v43, leptos::IntoView::into_view(v62)]);
            let v67: Vec<leptos::View> = v65.to_vec();
            leptos::Fragment::new(v67)
        }
        pub fn method220() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure229((), ()))
        }
        pub fn closure230(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.3s"
                    values="0.2; 1; .2"
                    attributeType="XML"
                    attributeName="opacity"
                >
                    {v15()}
                </animate>
            };
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v35: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
            let v37 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v39: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v35), string(">{v37()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v41: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.3s"
                    values="10; 20; 10"
                    attributeType="XML"
                    attributeName="height"
                >
                    {v37()}
                </animate>
            };
            let v43: leptos::View = leptos::IntoView::into_view(v41);
            let v56: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v58 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method219()));
            let v60: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v56), string(">{v58()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v62: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.3s"
                    values="10; 5; 10"
                    attributeType="XML"
                    attributeName="y"
                >
                    {v58()}
                </animate>
            };
            let v65: Array<leptos::View> = new_array(&[v22, v43, leptos::IntoView::into_view(v62)]);
            let v67: Vec<leptos::View> = v65.to_vec();
            leptos::Fragment::new(v67)
        }
        pub fn method221() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure230((), ()))
        }
        pub fn closure231(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Rect>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure226(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
            let v15 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method218()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v13), string(">{v15()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Rect> = leptos::view! {
                <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">
                    {v15()}
                </rect>
            };
            let v33: string =
                string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
            let v35 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method220()));
            let v37: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v33), string(">{v35()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v39: leptos::HtmlElement<leptos::svg::Rect> = leptos::view! {
                <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">
                    {v35()}
                </rect>
            };
            let v52: string = string(
                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
            );
            let v54 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method221()));
            let v56: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v52), string(">{v54()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v59: Array<leptos::HtmlElement<leptos::svg::Rect>> = new_array(&[
                v20,
                v39,
                leptos::view! {
                    <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">
                        {v54()}
                    </rect>
                },
            ]);
            let v61: Vec<leptos::HtmlElement<leptos::svg::Rect>> = v59.to_vec();
            let v64: Vec<leptos::View> = v61
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Rect>| {
                        Dice_ui::closure231((), v)
                    })(x.clone())
                })
                .collect();
            let v66: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v64);
            let v68: Vec<leptos::View> = v66.to_vec();
            leptos::Fragment::new(v68)
        }
        pub fn method217() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure226((), ()))
        }
        pub fn closure224(v0_1: Func0<bool>, unitVar: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method215();
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: std::string::String = String::from(v3);
            let v7: leptos::leptos_dom::Text = leptos::html::text(v5);
            let v9: leptos::View = leptos::IntoView::into_view(v7);
            let v10: Func0<bool> = Dice_ui::method216(v0_1);
            let v50: Array<leptos::View> = new_array(&[
                v9,
                if v10() {
                    let v15 = {
                        let clo = Func0::new(move || Dice_ui::closure225((), ()));
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v35: string =
                                    string(" class=move || \" \".to_owned() + &v15(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                    let v37 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method217()));
                    let v40: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v35), string(">{v37()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v42: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || " ".to_owned() + &v15(())
                            xml:space="preserve"
                            style="enable-background:new 0 0 50 50;"
                            viewBox="0 0 24 30"
                            y="0px"
                            x="0px"
                            xmlns:xlink="http://www.w3.org/1999/xlink"
                            xmlns="http://www.w3.org/2000/svg"
                            version="1.1"
                        >
                            {v37()}
                        </svg>
                    };
                    leptos::IntoView::into_view(v42)
                } else {
                    let v46: Array<leptos::View> = Dice_ui::method173(new_empty::<leptos::View>());
                    leptos::CollectView::collect_view(v46.to_vec())
                },
            ]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method214(v0_1: Func0<bool>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure224(v0_1.clone(), ())
            })
        }
        pub fn closure233(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method19(v0_1);
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: std::string::String = String::from(v3);
            let v7: leptos::leptos_dom::Text = leptos::html::text(v5);
            let v10: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v7)]);
            let v12: Vec<leptos::View> = v10.to_vec();
            leptos::Fragment::new(v12)
        }
        pub fn method223(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure233(v0_1.clone(), ())
            })
        }
        pub fn closure232(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"[height:17px]\"");
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method182()));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="[height:17px]">{v6()}</span> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method223(v0_1)));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v16), string(">{v18()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Pre> =
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v18()}</pre> };
            let v26: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v23)]);
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method222(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure232(v0_1.clone(), ())
            })
        }
        pub fn closure221(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure222(v1.clone(), ())
                })()
            });
            let v6: Func0<bool> = Dice_ui::method213(v5.clone());
            let v7 = Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure223(v0_1.clone(), v1.clone(), ())
            });
            {
                let v9: string =
                    string("class=\"flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
                let v16: string = append(
                    append(
                        string(" on:click=move |_| v7()"),
                        append(
                            append(
                                string(" prop:disabled=move || v6()"),
                                append(append(append(string(" "), v9), string("")), string("")),
                            ),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method214(v5)));
                let v21: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<button "), v16), string(">{v18()}</")),
                                string("button"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v23: leptos::HtmlElement<leptos::html::Button> = leptos::view! {
                    <button
                        on:click=move |_| v7()
                        prop:disabled=move || v6()
                        class="flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500"
                    >
                        {v18()}
                    </button>
                };
                let v25: leptos::View = leptos::IntoView::into_view(v23);
                let v27: Option<string> = v2();
                let v30: Dice_ui::US34 =
                    defaultValue(Dice_ui::US34::US34_1, map(Dice_ui::method128(), v27));
                let v49: Array<leptos::View> = new_array(&[
                    v25,
                    if let Dice_ui::US34::US34_0(v30_0_0) = &v30 {
                        let v34: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v36 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method222(
                            match &v30 {
                                Dice_ui::US34::US34_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        )));
                        let v39: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(append(string("<div "), v34), string(">{v36()}</")),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v41: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v36()}</div> };
                        leptos::IntoView::into_view(v41)
                    } else {
                        let v45: Array<leptos::View> =
                            Dice_ui::method173(new_empty::<leptos::View>());
                        leptos::CollectView::collect_view(v45.to_vec())
                    },
                ]);
                let v51: Vec<leptos::View> = v49.to_vec();
                leptos::Fragment::new(v51)
            }
        }
        pub fn method212(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure221(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure180(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US34>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v10 =
                Dice_ui::method186(Dice_ui::method185(Dice_ui::method176(v0_1.clone(), v3, v4)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                <div class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">
                    {v10()}
                </div>
            };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method208(v0_1.clone())));
            let v24: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v20), string(">{v22()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                <div class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">
                    {v22()}
                </div>
            };
            let v28: leptos::View = leptos::IntoView::into_view(v26);
            let v31: string = string(" class=\"flex\"");
            let v33 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method212(v0_1, v1, v2)));
            let v35: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v31), string(">{v33()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex">{v33()}</div> };
            let v40: Array<leptos::View> = new_array(&[v17, v28, leptos::IntoView::into_view(v37)]);
            let v42: Vec<leptos::View> = v40.to_vec();
            leptos::Fragment::new(v42)
        }
        pub fn method175(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US34>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure180(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure234(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Div>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure179(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US34>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v10 =
                Dice_ui::method186(Dice_ui::method185(Dice_ui::method175(v0_1, v1, v2, v3, v4)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::html::Div>> = new_array(&[
                leptos::view! { <div class="flex flex-col p-[10px] gap-[11px]">{v10()}</div> },
            ]);
            let v18: Vec<leptos::HtmlElement<leptos::html::Div>> = v16.to_vec();
            let v21: Vec<leptos::View> = v18
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::html::Div>| {
                        Dice_ui::closure234((), v)
                    })(x.clone())
                })
                .collect();
            let v23: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v21);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method174(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US34>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure179(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure239(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure240(unitVar: (), unitVar_1: ()) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method228() -> Func0<string> {
            Func0::new(move || Dice_ui::closure243((), ()))
        }
        pub fn closure242(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method186(Dice_ui::method185(Dice_ui::method204(Dice_ui::method228())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method227() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure242((), ()))
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method227()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method205()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method226() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn closure238(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure239((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure240((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method226()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method207(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method225(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure238(v0_1.clone(), ())
            })
        }
        pub fn closure235(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure237((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method199(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method225(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method224(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure235(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method232() -> string {
            string("No account selected")
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method232();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method231() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure246((), ()))
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"[height:17px]\"");
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method182()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="[height:17px]">{v5()}</span> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method231()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v15), string(">{v17()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Pre> =
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v17()}</pre> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method230() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn closure248(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US34) {
            let v3: string = fable_library_rust::String_::fromString(_arg.0.clone());
            let v6: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_1,
                map(Dice_ui::method50(), _arg.1.clone()),
            );
            (
                v3,
                match &v6 {
                    Dice_ui::US15::US15_0(v6_0_0) => {
                        Dice_ui::US34::US34_0(fable_library_rust::String_::fromString(match &v6 {
                            Dice_ui::US15::US15_0(x) => x.clone(),
                            _ => unreachable!(),
                        }))
                    }
                    _ => Dice_ui::US34::US34_1,
                },
            )
        }
        pub fn closure249(unitVar: (), _arg: (string, Dice_ui::US34)) -> bool {
            let v1: Dice_ui::US34 = _arg.1.clone();
            if string("FUNCTION_CALL") == _arg.0.clone() {
                if let Dice_ui::US34::US34_0(v1_0_0) = &v1 {
                    string("generate_random_number")
                        == match &v1 {
                            Dice_ui::US34::US34_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method234() -> Func1<(string, Dice_ui::US34), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US34)| {
                Dice_ui::closure249((), arg10_0040)
            })
        }
        pub fn method235(v0_1: Vec<(string, Dice_ui::US34)>) -> Vec<(string, Dice_ui::US34)> {
            v0_1
        }
        pub fn closure247(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l0.clone().to_vec();
            let v8: Vec<(string, Dice_ui::US34)> = v5
                .iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure248((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect();
            let v9 = Dice_ui::method234();
            let v10: Vec<(string, Dice_ui::US34)> = Dice_ui::method235(v8);
            let v12: Vec<(string, Dice_ui::US34)> =
                v10.into_iter().filter(|x| v9(x.clone().clone())).collect();
            if count(fable_library_rust::NativeArray_::array_from(v12)) > 0_i32 {
                _arg.0.clone() == fable_library_rust::String_::fromString(v2.l10.clone())
            } else {
                false
            }
        }
        pub fn method233() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure247((), arg10_0040)
            })
        }
        pub fn method236(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method239() -> string {
            string("Block Timestamp")
        }
        pub fn closure251(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method239();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method238() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure251((), ()))
        }
        pub fn method241() -> string {
            string("Predecessor")
        }
        pub fn closure252(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method241();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method240() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure252((), ()))
        }
        pub fn method243() -> string {
            string("Receiver")
        }
        pub fn closure253(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method243();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method242() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure253((), ()))
        }
        pub fn method245() -> string {
            string("Fee")
        }
        pub fn closure254(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method245();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method244() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure254((), ()))
        }
        pub fn method247() -> string {
            string("Result")
        }
        pub fn closure255(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method247();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method246() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure255((), ()))
        }
        pub fn method249() -> string {
            string("Status")
        }
        pub fn closure256(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method249();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method248() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure256((), ()))
        }
        pub fn closure250(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method238()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v3), string(">{v5()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v5()}
                </th>
            };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method240()));
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v15), string(">{v17()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v17()}
                </th>
            };
            let v23: leptos::View = leptos::IntoView::into_view(v21);
            let v26: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v28 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method242()));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v26), string(">{v28()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v28()}
                </th>
            };
            let v34: leptos::View = leptos::IntoView::into_view(v32);
            let v37: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v39 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method244()));
            let v41: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v37), string(">{v39()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v39()}
                </th>
            };
            let v45: leptos::View = leptos::IntoView::into_view(v43);
            let v48: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v50 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method246()));
            let v52: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v48), string(">{v50()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v54: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v50()}
                </th>
            };
            let v56: leptos::View = leptos::IntoView::into_view(v54);
            let v59: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v61 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method248()));
            let v63: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v59), string(">{v61()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v65: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v61()}
                </th>
            };
            let v68: Array<leptos::View> =
                new_array(&[v12, v23, v34, v45, v56, leptos::IntoView::into_view(v65)]);
            let v70: Vec<leptos::View> = v68.to_vec();
            leptos::Fragment::new(v70)
        }
        pub fn method237() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure250((), ()))
        }
        pub fn method252(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method253(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure260(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US71 {
            Dice_ui::US71::US71_0(v0_1)
        }
        pub fn method254() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US71> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure260((), v))
        }
        pub fn method255(v0_1: chrono::DateTime<chrono::Utc>) -> chrono::DateTime<chrono::Utc> {
            v0_1
        }
        pub fn method256(v0_1: chrono::DateTime<chrono::Local>) -> chrono::DateTime<chrono::Local> {
            v0_1
        }
        pub fn closure259(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method252(v0_1.l3.clone());
            let v5: i64 = Dice_ui::method253(v2.parse().unwrap());
            let v7: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v5 / 1000i64);
            let v10: Dice_ui::US71 =
                defaultValue(Dice_ui::US71::US71_1, map(Dice_ui::method254(), v7));
            let v28: Dice_ui::US34 = match &v10 {
                Dice_ui::US71::US71_0(v10_0_0) => {
                    let v12: chrono::DateTime<chrono::Utc> = Dice_ui::method255(match &v10 {
                        Dice_ui::US71::US71_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    let v14: chrono::NaiveDateTime = v12.naive_utc();
                    let v16: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v14);
                    let v18: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v19: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v20: chrono::DateTime<chrono::Local> = Dice_ui::method256(v16);
                    let v22: std::string::String = v20.format(v19).to_string();
                    Dice_ui::US34::US34_0(fable_library_rust::String_::fromString(v22))
                }
                _ => Dice_ui::US34::US34_1,
            };
            let v34: Dice_ui::US72 = match &v28 {
                Dice_ui::US34::US34_0(v28_0_0) => Dice_ui::US72::US72_0(match &v28 {
                    Dice_ui::US34::US34_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US72::US72_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v40: string = Dice_ui::method19(match &v34 {
                Dice_ui::US72::US72_0(v34_0_0) => v34_0_0.clone(),
                Dice_ui::US72::US72_1(v34_1_0) => {
                    append(append(string("Error: "), v34_1_0.clone()), string(""))
                }
            });
            let v42: &str = fable_library_rust::String_::LrcStr::as_str(&v40);
            let v44: std::string::String = String::from(v42);
            let v46: leptos::leptos_dom::Text = leptos::html::text(v44);
            let v49: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v46)]);
            let v51: Vec<leptos::View> = v49.to_vec();
            leptos::Fragment::new(v51)
        }
        pub fn method251(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure259(v0_1.clone(), ())
            })
        }
        pub fn closure261(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                Dice_ui::method19(fable_library_rust::String_::fromString(v0_1.l8.clone()));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method257(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure261(v0_1.clone(), ())
            })
        }
        pub fn closure262(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                Dice_ui::method19(fable_library_rust::String_::fromString(v0_1.l10.clone()));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method258(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure262(v0_1.clone(), ())
            })
        }
        pub fn closure263(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string = Dice_ui::method19(toString(v0_1.l7));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method259(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure263(v0_1.clone(), ())
            })
        }
        pub fn method261(v0_1: i32, v1: LrcPtr<Dice_ui::Mut5>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure264(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v1: Array<std::string::String> = v0_1.l5.clone();
            if count(v1.clone()) as u64 == 0_u64 {
                let v4: string = Dice_ui::method4();
                let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
                let v8: std::string::String = String::from(v6);
                let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
                let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
                let v15: Vec<leptos::View> = v13.to_vec();
                leptos::Fragment::new(v15)
            } else {
                let v18: i32 = count(v1.clone());
                let v20: LrcPtr<Dice_ui::Mut5> = LrcPtr::new(Dice_ui::Mut5 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(Dice_ui::US34::US34_1),
                });
                while Dice_ui::method261(v18, v20.clone()) {
                    let v22: i32 = v20.l0.get().clone();
                    let v25: i32 = v22.wrapping_neg() + v18 - 1_i32;
                    let v26: Dice_ui::US34 = v20.l1.get().clone();
                    let v27: std::string::String = v1[v25].clone();
                    let v31: Array<string> = split(
                        fable_library_rust::String_::fromString(v27),
                        string(" / result: "),
                        -1_i32,
                        0_i32,
                    );
                    let v38: Dice_ui::US34 = if let Dice_ui::US34::US34_1 = &v26 {
                        if count(v31.clone()) as u64 == 2_u64 {
                            let v34: string = v31[0_i32].clone();
                            Dice_ui::US34::US34_0(v31[1_i32].clone())
                        } else {
                            v26.clone()
                        }
                    } else {
                        v26
                    };
                    let v39: i32 = v22 + 1_i32;
                    v20.l0.set(v39);
                    v20.l1.set(v38);
                    ()
                }
                {
                    let v40: Dice_ui::US34 = v20.l1.get().clone();
                    let v45: string = Dice_ui::method19(match &v40 {
                        Dice_ui::US34::US34_0(v40_0_0) => match &v40 {
                            Dice_ui::US34::US34_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => string("?"),
                    });
                    let v47: &str = fable_library_rust::String_::LrcStr::as_str(&v45);
                    let v49: std::string::String = String::from(v47);
                    let v51: leptos::leptos_dom::Text = leptos::html::text(v49);
                    let v54: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v51)]);
                    let v56: Vec<leptos::View> = v54.to_vec();
                    leptos::Fragment::new(v56)
                }
            }
        }
        pub fn method260(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure264(v0_1.clone(), ())
            })
        }
        pub fn closure265(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = if v0_1.l6 {
                string("Ok")
            } else {
                string("Outcome Error")
            };
            let v8: Dice_ui::US66 = match &v1 {
                Err(v1_1_0) => Dice_ui::closure169((), v1_1_0.clone()),
                Ok(v1_0_0) => Dice_ui::closure168((), v1_0_0.clone()),
            };
            let v17: Dice_ui::US62 = match &v8 {
                Dice_ui::US66::US66_0(v8_0_0) => Dice_ui::US62::US62_0(defaultValue(
                    Dice_ui::US60::US60_1,
                    map(Dice_ui::method169(), v8_0_0.clone()),
                )),
                Dice_ui::US66::US66_1(v8_1_0) => Dice_ui::US62::US62_1(v8_1_0.clone()),
            };
            let v129: Dice_ui::US72 = match &v17 {
                Dice_ui::US62::US62_0(v17_0_0) => {
                    let v18: Dice_ui::US60 = v17_0_0.clone();
                    if let Dice_ui::US60::US60_0(v18_0_0, v18_0_1, v18_0_2, v18_0_3) = &v18 {
                        let v19: Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )> = match &v18 {
                            Dice_ui::US60::US60_0(x, _, _, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v25: Dice_ui::US67 = defaultValue(
                            Dice_ui::US67::US67_1,
                            map(Dice_ui::method170(), v19.clone()),
                        );
                        match &v25 {
                            Dice_ui::US67::US67_0(
                                v25_0_0,
                                v25_0_1,
                                v25_0_2,
                                v25_0_3,
                                v25_0_4,
                                v25_0_5,
                            ) => {
                                let v34: Dice_ui::US67 = defaultValue(
                                    Dice_ui::US67::US67_1,
                                    map(Dice_ui::method170(), v19.clone()),
                                );
                                let v44: Dice_ui::US34 = if let Dice_ui::US67::US67_0(
                                    v34_0_0,
                                    v34_0_1,
                                    v34_0_2,
                                    v34_0_3,
                                    v34_0_4,
                                    v34_0_5,
                                ) = &v34
                                {
                                    Dice_ui::US34::US34_0(append(
                                        append(
                                            append(
                                                append(
                                                    append(
                                                        append(
                                                            append(
                                                                toString(match &v34 {
                                                                    Dice_ui::US67::US67_0(
                                                                        _,
                                                                        _,
                                                                        _,
                                                                        _,
                                                                        _,
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                }),
                                                                string(": "),
                                                            ),
                                                            toString(match &v34 {
                                                                Dice_ui::US67::US67_0(
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    x,
                                                                    _,
                                                                ) => x.clone(),
                                                                _ => unreachable!(),
                                                            }),
                                                        ),
                                                        string(" - "),
                                                    ),
                                                    toString(match &v34 {
                                                        Dice_ui::US67::US67_0(_, _, _, x, _, _) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    }),
                                                ),
                                                string(" ("),
                                            ),
                                            toString(match &v34 {
                                                Dice_ui::US67::US67_0(_, x, _, _, _, _) => {
                                                    x.clone()
                                                }
                                                _ => unreachable!(),
                                            }),
                                        ),
                                        string(")"),
                                    ))
                                } else {
                                    Dice_ui::US34::US34_1
                                };
                                Dice_ui::US72::US72_1(match &v44 {
                                    Dice_ui::US34::US34_0(v44_0_0) => match &v44 {
                                        Dice_ui::US34::US34_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => {
                                        let v46: string = sprintf!("{:?}", ());
                                        let v47: i64 = length(v46.clone()) as i64;
                                        if v47 <= 400_i64 {
                                            v46.clone()
                                        } else {
                                            let v50: f64 = 400_i64 as f64 / 2.0_f64;
                                            let v53: i64 = v50.ceil() as i64;
                                            let v56: i64 = v50.floor() as i64;
                                            join(
                                                string(""),
                                                toArray(ofArray(new_array(&[
                                                    getSlice(
                                                        v46.clone(),
                                                        Some(0_i64 as i32),
                                                        Some((v53 - 1_i64) as i32),
                                                    ),
                                                    string("..."),
                                                    getSlice(
                                                        v46,
                                                        Some((v47 - v56) as i32),
                                                        Some((v47 - 1_i64) as i32),
                                                    ),
                                                ]))),
                                            )
                                        }
                                    }
                                })
                            }
                            _ => {
                                let v72: string = sprintf!(
                                    "{:?}",
                                    (
                                        v19.clone(),
                                        match &v18 {
                                            Dice_ui::US60::US60_0(_, x, _, _) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        match &v18 {
                                            Dice_ui::US60::US60_0(_, _, x, _) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        match &v18 {
                                            Dice_ui::US60::US60_0(_, _, _, x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                    )
                                );
                                let v73: i64 = length(v72.clone()) as i64;
                                Dice_ui::US72::US72_0(if v73 <= 400_i64 {
                                    v72.clone()
                                } else {
                                    let v76: f64 = 400_i64 as f64 / 2.0_f64;
                                    let v79: i64 = v76.ceil() as i64;
                                    let v82: i64 = v76.floor() as i64;
                                    join(
                                        string(""),
                                        toArray(ofArray(new_array(&[
                                            getSlice(
                                                v72.clone(),
                                                Some(0_i64 as i32),
                                                Some((v79 - 1_i64) as i32),
                                            ),
                                            string("..."),
                                            getSlice(
                                                v72,
                                                Some((v73 - v82) as i32),
                                                Some((v73 - 1_i64) as i32),
                                            ),
                                        ]))),
                                    )
                                })
                            }
                        }
                    } else {
                        let v98: string = sprintf!("{:?}", v17.clone());
                        let v99: i64 = length(v98.clone()) as i64;
                        Dice_ui::US72::US72_1(sprintf!(
                            "RPC Response: {}",
                            if v99 <= 400_i64 {
                                v98.clone()
                            } else {
                                let v102: f64 = 400_i64 as f64 / 2.0_f64;
                                let v105: i64 = v102.ceil() as i64;
                                let v108: i64 = v102.floor() as i64;
                                join(
                                    string(""),
                                    toArray(ofArray(new_array(&[
                                        getSlice(
                                            v98.clone(),
                                            Some(0_i64 as i32),
                                            Some((v105 - 1_i64) as i32),
                                        ),
                                        string("..."),
                                        getSlice(
                                            v98,
                                            Some((v99 - v108) as i32),
                                            Some((v99 - 1_i64) as i32),
                                        ),
                                    ]))),
                                )
                            }
                        ))
                    }
                }
                Dice_ui::US62::US62_1(v17_1_0) => {
                    Dice_ui::US72::US72_1(fable_library_rust::String_::fromString(v17_1_0.clone()))
                }
            };
            let v160: string = Dice_ui::method19(sprintf!(
                "{} / {}",
                v5,
                match &v129 {
                    Dice_ui::US72::US72_0(v129_0_0) => {
                        let v131: string = sprintf!("{:?}", v129_0_0.clone());
                        let v132: i64 = length(v131.clone()) as i64;
                        sprintf!(
                            "RPC Response: {}",
                            if v132 <= 400_i64 {
                                v131.clone()
                            } else {
                                let v135: f64 = 400_i64 as f64 / 2.0_f64;
                                let v138: i64 = v135.ceil() as i64;
                                let v141: i64 = v135.floor() as i64;
                                join(
                                    string(""),
                                    toArray(ofArray(new_array(&[
                                        getSlice(
                                            v131.clone(),
                                            Some(0_i64 as i32),
                                            Some((v138 - 1_i64) as i32),
                                        ),
                                        string("..."),
                                        getSlice(
                                            v131,
                                            Some((v132 - v141) as i32),
                                            Some((v132 - 1_i64) as i32),
                                        ),
                                    ]))),
                                )
                            }
                        )
                    }
                    Dice_ui::US72::US72_1(v129_1_0) => sprintf!("Error: {}", v129_1_0.clone()),
                }
            ));
            let v162: &str = fable_library_rust::String_::LrcStr::as_str(&v160);
            let v164: std::string::String = String::from(v162);
            let v166: leptos::leptos_dom::Text = leptos::html::text(v164);
            let v169: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v166)]);
            let v171: Vec<leptos::View> = v169.to_vec();
            leptos::Fragment::new(v171)
        }
        pub fn method262(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure265(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure258(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v7 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method251(v0_1.clone())));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v5), string(">{v7()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">{v7()}</td>
            };
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v19 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method257(v0_1.clone())));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v17), string(">{v19()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v19()}
                </td>
            };
            let v25: leptos::View = leptos::IntoView::into_view(v23);
            let v28: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v30 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method258(v0_1.clone())));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v28), string(">{v30()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v30()}
                </td>
            };
            let v36: leptos::View = leptos::IntoView::into_view(v34);
            let v39: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v41 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method259(v0_1.clone())));
            let v43: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v39), string(">{v41()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v41()}
                </td>
            };
            let v47: leptos::View = leptos::IntoView::into_view(v45);
            let v50: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v52 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method260(v0_1.clone())));
            let v54: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v50), string(">{v52()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v56: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v52()}
                </td>
            };
            let v58: leptos::View = leptos::IntoView::into_view(v56);
            let v61: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v63 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method262(v0_1, v1)));
            let v65: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v61), string(">{v63()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v67: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v63()}
                </td>
            };
            let v70: Array<leptos::View> =
                new_array(&[v14, v25, v36, v47, v58, leptos::IntoView::into_view(v67)]);
            let v72: Vec<leptos::View> = v70.to_vec();
            leptos::Fragment::new(v72)
        }
        pub fn method250(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        Option<std::string::String>,
                                        std::string::String,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Option<Array<(std::string::String, std::string::String)>>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure258(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure257(
            v0_1: Array<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            Option<std::string::String>,
                                            std::string::String,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Option<Array<(std::string::String, std::string::String)>>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::View {
            let v4: i32 = _arg.1.clone() as i32;
            let v9: string = string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
            let v11 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method250(
                _arg.2.clone(),
                v0_1[v4].clone(),
            )));
            let v14: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<tr "), v9), string(">{v11()}</")),
                            string("tr"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::HtmlElement<leptos::html::Tr> =
                leptos::view! { <tr class="odd:bg-gray-50 dark:odd:bg-gray-800/50">{v11()}</tr> };
            leptos::IntoView::into_view(v16)
        }
        pub fn closure267(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method264(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure267(v0_1.clone(), ())
            })
        }
        pub fn closure268(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method265(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure268(v0_1.clone(), ())
            })
        }
        pub fn closure266(
            v0_1: leptos::Fragment,
            v1: leptos::Fragment,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = string(" class=\"ltr:text-left rtl:text-right\"");
            let v7 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method264(v0_1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<thead "), v5), string(">{v7()}</")),
                            string("thead"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Thead> =
                leptos::view! { <thead class="ltr:text-left rtl:text-right">{v7()}</thead> };
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
            let v19 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method265(v1)));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<tbody "), v17), string(">{v19()}</")),
                            string("tbody"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Tbody> = leptos::view! { <tbody class="divide-y divide-gray-200 dark:divide-gray-700">{v19()}</tbody> };
            let v27: Array<leptos::View> = new_array(&[v14, leptos::IntoView::into_view(v24)]);
            let v29: Vec<leptos::View> = v27.to_vec();
            leptos::Fragment::new(v29)
        }
        pub fn method263(v0_1: leptos::Fragment, v1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure266(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure271(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure270(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure271((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v22: string =
                string(" class=move || \" \".to_owned() + &v2(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
            let v24 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method217()));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v22), string(">{v24()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    class=move || " ".to_owned() + &v2(())
                    xml:space="preserve"
                    style="enable-background:new 0 0 50 50;"
                    viewBox="0 0 24 30"
                    y="0px"
                    x="0px"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns="http://www.w3.org/2000/svg"
                    version="1.1"
                >
                    {v24()}
                </svg>
            };
            let v31: leptos::View = leptos::IntoView::into_view(v29);
            let v33: string = Dice_ui::method19(string("Loading..."));
            let v35: &str = fable_library_rust::String_::LrcStr::as_str(&v33);
            let v37: std::string::String = String::from(v35);
            let v39: leptos::leptos_dom::Text = leptos::html::text(v37);
            let v42: Array<leptos::View> = new_array(&[v31, leptos::IntoView::into_view(v39)]);
            let v44: Vec<leptos::View> = v42.to_vec();
            leptos::Fragment::new(v44)
        }
        pub fn method267() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure270((), ()))
        }
        pub fn closure269(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex flex-1 [gap:4px] items-center\"");
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method267()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 [gap:4px] items-center">{v5()}</div> };
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method266() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure269((), ()))
        }
        pub fn closure244(
            v0_1: leptos::Memo<
                Array<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                Option<std::string::String>,
                                                std::string::String,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Option<Array<(std::string::String, std::string::String)>>,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4: Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)> = v2();
            let v116: Array<leptos::View> = new_array(&[
                if count(fable_library_rust::NativeArray_::array_from(v4)) as u64 == 0_u64 {
                    let v12: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v14 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method230()));
                    let v17: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v12), string(">{v14()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v19: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v14()}</div> };
                    leptos::IntoView::into_view(v19)
                } else {
                    let v23: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v1();
                    let v26: Dice_ui::US56 = match &v23 {
                        Err(v23_1_0) => Dice_ui::closure130((), v23_1_0.clone()),
                        Ok(v23_0_0) => Dice_ui::closure129((), v23_0_0.clone()),
                    };
                    let v35: Dice_ui::US49 = match &v26 {
                        Dice_ui::US56::US56_0(v26_0_0) => Dice_ui::US49::US49_0(defaultValue(
                            Dice_ui::US50::US50_1,
                            map(Dice_ui::method150(), v26_0_0.clone()),
                        )),
                        Dice_ui::US56::US56_1(v26_1_0) => Dice_ui::US49::US49_1(v26_1_0.clone()),
                    };
                    match &v35 {
                        Dice_ui::US49::US49_0(v35_0_0) => {
                            let v36: Dice_ui::US50 = v35_0_0.clone();
                            if let Dice_ui::US50::US50_0(v36_0_0) = &v36 {
                                let v39: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    match &v36 {
                                        Dice_ui::US50::US50_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .to_vec();
                                let v40 = Dice_ui::method233();
                                let v41: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method236(v39);
                                let v43: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v41.into_iter().filter(|x| v40(x.clone().clone())).collect();
                                let v46 =
                                    Dice_ui::method186(Dice_ui::method185(Dice_ui::method237()));
                                let v50: string = string("leptos::view! { <tr >{v46()}</tr> }");
                                let v52: leptos::HtmlElement<leptos::html::Tr> =
                                    leptos::view! { <tr>{v46()}</tr> };
                                let v55: Array<leptos::View> =
                                    new_array(&[leptos::IntoView::into_view(v52)]);
                                let v57: Vec<leptos::View> = v55.to_vec();
                                let v59: leptos::Fragment = leptos::Fragment::new(v57);
                                let v61: Array<
                                    Result<
                                        Option<(
                                            Option<(
                                                Option<(
                                                    Option<std::string::String>,
                                                    Option<std::string::String>,
                                                )>,
                                                std::string::String,
                                                i32,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Option<std::string::String>,
                                            std::string::String,
                                            Option<(
                                                Array<(
                                                    std::string::String,
                                                    Array<
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            (
                                                                Option<std::string::String>,
                                                                std::string::String,
                                                                Option<f64>,
                                                                Option<std::string::String>,
                                                            ),
                                                        >,
                                                    >,
                                                    std::string::String,
                                                    Array<std::string::String>,
                                                    Array<std::string::String>,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    u64,
                                                    Array<std::string::String>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    u8,
                                                    Array<std::string::String>,
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        std::string::String,
                                                    >,
                                                    Option<std::string::String>,
                                                    Option<
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                    >,
                                                )>,
                                            )>,
                                        )>,
                                        std::string::String,
                                    >,
                                > = v0_1();
                                let v64: Vec<leptos::View> = v43
                                    .iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v61 = v61.clone();
                                            move |arg10_0040: (
                                                string,
                                                usize,
                                                LrcPtr<Dice_ui::Heap5>,
                                            )| {
                                                Dice_ui::closure257(v61.clone(), arg10_0040)
                                            }
                                        })(x.clone())
                                    })
                                    .collect();
                                let v66: Array<leptos::View> =
                                    fable_library_rust::NativeArray_::array_from(v64);
                                let v68: Vec<leptos::View> = v66.to_vec();
                                let v73: string =
                                                string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v75 = Dice_ui::method186(Dice_ui::method185(
                                    Dice_ui::method263(v59, leptos::Fragment::new(v68)),
                                ));
                                let v78: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<table "), v73),
                                                    string(">{v75()}</"),
                                                ),
                                                string("table"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v80: leptos::HtmlElement<leptos::html::Table> = leptos::view! {
                                    <table class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">
                                        {v75()}
                                    </table>
                                };
                                leptos::IntoView::into_view(v80)
                            } else {
                                let v86: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v88 =
                                    Dice_ui::method186(Dice_ui::method185(Dice_ui::method266()));
                                let v91: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v86),
                                                    string(">{v88()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v93: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="grid place-content-center py-[10vh]">{v88()}</div> };
                                leptos::IntoView::into_view(v93)
                            }
                        }
                        Dice_ui::US49::US49_1(v35_1_0) => {
                            let v103: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v105 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method222(
                                fable_library_rust::String_::fromString(v35_1_0.clone()),
                            )));
                            let v108: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v103),
                                                string(">{v105()}</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v110: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v105()}</div> };
                            leptos::IntoView::into_view(v110)
                        }
                    }
                },
            ]);
            let v118: Vec<leptos::View> = v116.to_vec();
            leptos::Fragment::new(v118)
        }
        pub fn method229(
            v0_1: leptos::Memo<
                Array<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                Option<std::string::String>,
                                                std::string::String,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Option<Array<(std::string::String, std::string::String)>>,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure244(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure274(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure275(unitVar: (), unitVar_1: ()) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure278(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method272() -> Func0<string> {
            Func0::new(move || Dice_ui::closure278((), ()))
        }
        pub fn closure277(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method186(Dice_ui::method185(Dice_ui::method204(Dice_ui::method272())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method271() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure277((), ()))
        }
        pub fn closure276(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method271()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method205()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method270() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure276((), ()))
        }
        pub fn closure273(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure274((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure275((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method270()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method207(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method269(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure273(v0_1.clone(), ())
            })
        }
        pub fn closure272(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure237((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method199(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method269(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method268(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure272(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method273() -> string {
            string("???")
        }
        pub fn closure281(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::create_signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure280(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure281(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method274() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure280((), v))
        }
        pub fn method275(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure279(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::SignalGet::get(&v3.l1.clone());
            let v8 = Dice_ui::method274();
            let v9: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method275(v6.l1.clone());
            v9.iter()
                .enumerate()
                .map(|(i, x)| v8(i.try_into().unwrap())(x.clone()))
                .collect()
        }
        pub fn closure283(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn closure284(
            v0_1: i32,
            _arg: (
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            (v0_1, _arg.0.clone(), _arg.1.clone())
        }
        pub fn closure282(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::SignalGet::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v0_1();
            let v8: Vec<(
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .iter()
                .map(|x| {
                    Func1::new(
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure283((), tupledArg.0.clone(), tupledArg.1.clone())
                        },
                    )(x.clone())
                })
                .collect();
            v8.iter()
                .map(|x| {
                    Func1::new({
                        let v3 = v3.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure284(v3, arg10_0040_1)
                    })(x.clone())
                })
                .collect()
        }
        pub fn closure285(
            v0_1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v0_1();
            count(fable_library_rust::NativeArray_::array_from(v2))
        }
        pub fn method276(
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method277(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure289(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            leptos::SignalGet::get(&((LrcPtr::new((v0_, v0__1))).1.clone()).0.clone())
        }
        pub fn closure288(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v0_1();
            let v11: i32 = count(fable_library_rust::NativeArray_::array_from(v8.clone()));
            let v12: string = Dice_ui::method4();
            let v14: &str = fable_library_rust::String_::LrcStr::as_str(&v12);
            let v16: std::string::String = String::from(v14);
            let patternInput: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::create_signal(LrcPtr::new((false, v16)));
            let v21: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v22: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method276(v21.0.clone(), v21.1.clone());
            let v23: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method277(v8);
            let mut v23 = v23;
            v23.push(v22);
            {
                let v27: Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                > = v23;
                LrcPtr::new(Dice_ui::Heap0 {
                    l0: v1.l0.clone(),
                    l1: v27
                        .iter()
                        .map(|x| {
                            Func1::new(
                                move |tupledArg: LrcPtr<(
                                    i32,
                                    (
                                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                                    ),
                                )>| {
                                    Dice_ui::closure289(
                                        (),
                                        tupledArg.0.clone(),
                                        tupledArg.1.clone(),
                                    )
                                },
                            )(x.clone())
                        })
                        .collect(),
                    l2: v1.l2,
                    l3: v1.l3,
                    l4: v1.l4.clone(),
                })
            }
        }
        pub fn closure290(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + v0_1
        }
        pub fn closure287(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v5: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalUpdate::update(&v5.l1.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure288(v1.clone(), v)
                })(x.clone())
            });
            leptos::SignalUpdate::update(&v2, |x| {
                *x = Func1::new(move |v_1: i32| Dice_ui::closure290((), v_1))(x.clone())
            });
            ()
        }
        pub fn closure286(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            unitVar: (),
        ) {
            leptos::batch(move || {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    move || Dice_ui::closure287(v0_1.clone(), v1.clone(), v2.clone(), ())
                })()
            });
            ()
        }
        pub fn closure291(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure190((), v)
                    })(x.clone())
                })
                .collect();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method278() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure292((), ()))
        }
        pub fn method279() -> string {
            string(" bg-gray-300 hover:bg-gray-200")
        }
        pub fn closure293(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v0_1: string = Dice_ui::method279();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            String::from(v2)
        }
        pub fn closure294(
            v0_1: leptos::HtmlElement<leptos::svg::Svg>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v0_1)]);
            let v5: Vec<leptos::View> = v3.to_vec();
            leptos::Fragment::new(v5)
        }
        pub fn method280(v0_1: leptos::HtmlElement<leptos::svg::Svg>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure294(v0_1.clone(), ())
            })
        }
        pub fn method283(
            v0_1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
        ) -> leptos::Memo<
            Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        > {
            v0_1
        }
        pub fn closure297(
            unitVar: (),
            _arg: (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (i32, i32) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn method284() -> Func1<
            (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (i32, i32),
        > {
            Func1::new(
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure297((), arg10_0040),
            )
        }
        pub fn method287(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn closure300(v0_1: i32, unitVar: ()) -> std::string::String {
            let v2: string = Dice_ui::method19(append(
                append(string("account-"), toString(v0_1)),
                string(""),
            ));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            String::from(v4)
        }
        pub fn method290(v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure304(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method290(v1 == v0_1) {
                v2.clone()
            } else {
                LrcPtr::new((v2.0.clone() == false, v2.1.clone()))
            }
        }
        pub fn closure303(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure304(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method289(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure303(v0_1, v)
            })
        }
        pub fn closure302(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3.clone());
            let v8: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v5.l1.clone());
            let v15: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3);
            let v17 = Dice_ui::method289(v1);
            let v18: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method275(v8.l1.clone());
            let v21: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v8.l0.clone(),
                l1: v18
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v17(i.try_into().unwrap())(x.clone()))
                    .collect(),
                l2: v8.l2,
                l3: v8.l3,
                l4: v8.l4.clone(),
            });
            leptos::SignalSet::set(&v15.l1.clone(), v21);
            ()
        }
        pub fn closure305(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::SignalGet::get(&v0_1)).0.clone()
        }
        pub fn method291(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure305(v0_1.clone(), ())
            })
        }
        pub fn method292(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure300(v0_1, ())
            })
        }
        pub fn closure307(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path
                        clip-rule="evenodd"
                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                        fill-rule="evenodd"
                    >
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure190((), v)
                    })(x.clone())
                })
                .collect();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method294() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure307((), ()))
        }
        pub fn closure308(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path
                        clip-rule="evenodd"
                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                        fill-rule="evenodd"
                    >
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure190((), v)
                    })(x.clone())
                })
                .collect();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method295() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure308((), ()))
        }
        pub fn closure309(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Svg>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v11: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method294()));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v11), string(">{v13()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    class="h-4 w-4"
                    xmlns="http://www.w3.org/2000/svg"
                    data-unchecked-icon
                >
                    {v13()}
                </svg>
            };
            let v29: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v31 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method295()));
            let v33: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v29), string(">{v31()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: Array<leptos::HtmlElement<leptos::svg::Svg>> = new_array(&[
                v18,
                leptos::view! {
                    <svg
                        fill="currentColor"
                        viewBox="0 0 20 20"
                        class="hidden h-4 w-4"
                        xmlns="http://www.w3.org/2000/svg"
                        data-checked-icon
                    >
                        {v31()}
                    </svg>
                },
            ]);
            let v38: Vec<leptos::HtmlElement<leptos::svg::Svg>> = v36.to_vec();
            let v41: Vec<leptos::View> = v38
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Svg>| {
                        Dice_ui::closure309((), v)
                    })(x.clone())
                })
                .collect();
            let v43: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v41);
            let v45: Vec<leptos::View> = v43.to_vec();
            leptos::Fragment::new(v45)
        }
        pub fn method293() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure306((), ()))
        }
        pub fn closure310(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method296() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure310((), ()))
        }
        pub fn closure301(
            v0_1: i32,
            v1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3 = Func1::new({
                let v0_1 = v0_1.clone();
                let v2 = v2.clone();
                move |v: leptos::ev::Event| Dice_ui::closure302(v2.clone(), v0_1, v)
            });
            {
                let v5 = Dice_ui::method291(v1);
                let v6 = Dice_ui::method292(v0_1);
                let v7: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v20: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v5()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v3(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v6()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v7),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v22: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        prop:checked=move || v5()
                        on:change=move |event| v3(event)
                        id=move || v6()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                };
                let v24: leptos::View = leptos::IntoView::into_view(v22);
                let v25: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v27: string = append(append(append(string(" "), v25), string("")), string(""));
                let v29 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method293()));
                let v32: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v27), string(">{v29()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v34: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v29()}
                    </span>
                };
                let v36: leptos::View = leptos::IntoView::into_view(v34);
                let v37: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v39: string = append(append(append(string(" "), v37), string("")), string(""));
                let v41 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method296()));
                let v43: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v39), string(">{v41()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v45: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v41()}
                    </span>
                };
                let v48: Array<leptos::View> =
                    new_array(&[v24, v36, leptos::IntoView::into_view(v45)]);
                let v50: Vec<leptos::View> = v48.to_vec();
                leptos::Fragment::new(v50)
            }
        }
        pub fn method288(
            v0_1: i32,
            v1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure301(v0_1, v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure311(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> std::string::String {
            (leptos::SignalGet::get(&v0_1)).1.clone()
        }
        pub fn method297(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure311(v0_1.clone(), ())
            })
        }
        pub fn method300(v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure314(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method300(v2 == v0_1) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure313(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure314(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method299(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure313(v0_1, v1.clone(), v)
            })
        }
        pub fn closure312(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: std::string::String) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3.clone());
            let v8: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v5.l1.clone());
            let v15: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3);
            let v17 = Dice_ui::method299(v1, v2);
            let v18: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method275(v8.l1.clone());
            let v21: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v8.l0.clone(),
                l1: v18
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v17(i.try_into().unwrap())(x.clone()))
                    .collect(),
                l2: v8.l2,
                l3: v8.l3,
                l4: v8.l4.clone(),
            });
            leptos::SignalSet::set(&v15.l1.clone(), v21);
            ()
        }
        pub fn method298(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32) -> Func1<std::string::String, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: std::string::String| Dice_ui::closure312(v0_1.clone(), v1, v)
            })
        }
        pub fn closure315(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method301(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure320(unitVar: (), v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn method303() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure320((), v))
        }
        pub fn closure319(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v5: bool = (LrcPtr::new((v1_, v1__1))).0.clone() == v0_1;
            (Dice_ui::method303())(v5)
        }
        pub fn method302(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure319(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure318(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method301(v0_1());
            let v11 = Dice_ui::method302(v1);
            let mut v10 = v10;
            v10.retain(|x| v11(x.clone()));
            {
                let v15: Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                > = v10;
                LrcPtr::new(Dice_ui::Heap0 {
                    l0: v2.l0.clone(),
                    l1: v15
                        .iter()
                        .map(|x| {
                            Func1::new(
                                move |tupledArg: LrcPtr<(
                                    i32,
                                    (
                                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                                    ),
                                )>| {
                                    Dice_ui::closure289(
                                        (),
                                        tupledArg.0.clone(),
                                        tupledArg.1.clone(),
                                    )
                                },
                            )(x.clone())
                        })
                        .collect(),
                    l2: v2.l2,
                    l3: v2.l3,
                    l4: v2.l4.clone(),
                })
            }
        }
        pub fn closure317(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v6: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalUpdate::update(&v6.l1.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    let v3 = v3.clone();
                    move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure318(v1.clone(), v3, v)
                })(x.clone())
            });
            leptos::SignalUpdate::update(&v2, |x| {
                *x = Func1::new(move |v_1: i32| Dice_ui::closure290((), v_1))(x.clone())
            });
            ()
        }
        pub fn closure316(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            leptos::batch(move || {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || Dice_ui::closure317(v0_1.clone(), v1.clone(), v2.clone(), v3, ())
                })()
            });
            ()
        }
        pub fn closure321(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure322(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string = string(
                " d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure190((), v)
                    })(x.clone())
                })
                .collect();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method304() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method305() -> string {
            string(" pr-[7px] pl-[5px]")
        }
        pub fn closure323(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v0_1: string = Dice_ui::method305();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            String::from(v2)
        }
        pub fn closure299(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            v4: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v5: i32,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: i32 = Dice_ui::method287(v5);
            let v7 = Func0::new({
                let v6 = v6.clone();
                move || Dice_ui::closure300(v6, ())
            });
            {
                let v14: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v7()");
                let v16 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method288(
                    v6,
                    v4.clone(),
                    v0_1.clone(),
                )));
                let v19: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<label "), v14), string(">{v16()}</")),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v21: leptos::HtmlElement<leptos::html::Label> = leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v7()
                    >
                        {v16()}
                    </label>
                };
                let v23: leptos::View = leptos::IntoView::into_view(v21);
                let v24 = Dice_ui::method297(v4);
                let v25 = Dice_ui::method298(v0_1.clone(), v6);
                let v28 = {
                    let clo = Func0::new(move || Dice_ui::closure315((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v37: string =
                    string("leptos::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v25(leptos::event_target_value(&event)) prop:value=move || v24() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v28(()) /> }");
                let v39: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        on:keyup=move |event: web_sys::KeyboardEvent| v25(
                            leptos::event_target_value(&event),
                        )
                        prop:value=move || v24()
                        class=move || {
                            "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v28(())
                        }
                    />
                };
                let v94: Array<leptos::View> = new_array(&[
                    v23,
                    leptos::IntoView::into_view(v39),
                    if v1() == 1_i32 {
                        let v46: Array<leptos::View> =
                            Dice_ui::method173(new_empty::<leptos::View>());
                        leptos::CollectView::collect_view(v46.to_vec())
                    } else {
                        let v49 = Func0::new({
                            let v0_1 = v0_1.clone();
                            let v2 = v2.clone();
                            let v3 = v3.clone();
                            let v6 = v6.clone();
                            move || {
                                Dice_ui::closure316(v0_1.clone(), v2.clone(), v3.clone(), v6, ())
                            }
                        });
                        {
                            let v53 = {
                                let clo_1 = Func0::new(move || Dice_ui::closure321((), ()));
                                Func1::new({
                                    let clo_1 = clo_1.clone();
                                    move |arg_1: ()| clo_1()
                                })
                            };
                            let v66: string =
                                            string(" class=move || \" \".to_owned() + &v53(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v68 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method304()));
                            let v71: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<svg "), v66),
                                                string(">{v68()}</"),
                                            ),
                                            string("svg"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v73: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                                <svg
                                    class=move || " ".to_owned() + &v53(())
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    {v68()}
                                </svg>
                            };
                            let v78 = {
                                let clo_2 = Func0::new(move || Dice_ui::closure323((), ()));
                                Func1::new({
                                    let clo_2 = clo_2.clone();
                                    move |arg_2: ()| clo_2()
                                })
                            };
                            let v79: string =
                                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v78(())");
                            let v83: string = append(
                                append(
                                    string(" aria-label=\"Delete\""),
                                    append(
                                        append(
                                            string(" on:click=move |_| v49()"),
                                            append(
                                                append(append(string(" "), v79), string("")),
                                                string(""),
                                            ),
                                        ),
                                        string(""),
                                    ),
                                ),
                                string(""),
                            );
                            let v85 =
                                Dice_ui::method186(Dice_ui::method185(Dice_ui::method280(v73)));
                            let v88: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<button "), v83),
                                                string(">{v85()}</"),
                                            ),
                                            string("button"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v90: leptos::HtmlElement<leptos::html::Button> = leptos::view! {
                                <button
                                    aria-label="Delete"
                                    on:click=move |_| v49()
                                    class=move || {
                                        "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] "
                                            .to_owned() + &v78(())
                                    }
                                >
                                    {v85()}
                                </button>
                            };
                            leptos::IntoView::into_view(v90)
                        }
                    },
                ]);
                let v96: Vec<leptos::View> = v94.to_vec();
                leptos::Fragment::new(v96)
            }
        }
        pub fn method286(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            v4: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v5: i32,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                move || {
                    Dice_ui::closure299(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5,
                        (),
                    )
                }
            })
        }
        pub fn closure298(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            _arg: (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::Fragment {
            let v10: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
            let v12 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method286(
                v0_1,
                v1,
                v2,
                v3,
                _arg.2.clone(),
                _arg.1.clone(),
            )));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">{v12()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex gap-[8px] [align-items:center]">{v12()}</div> };
            let v20: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v17)]);
            let v22: Vec<leptos::View> = v20.to_vec();
            leptos::Fragment::new(v22)
        }
        pub fn method285(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::Fragment,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| {
                    Dice_ui::closure298(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        arg10_0040,
                    )
                }
            })
        }
        pub fn closure296(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = Dice_ui::method283(v1);
            let v6 = Dice_ui::method284();
            let v7 = Dice_ui::method285(v0_1, v2, v3, v4);
            let v19: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos::For  children=move |x| v7(x) let:x key=move |x| v6(x.to_owned()) each=v5 /> })");
            let v21: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(
                leptos::view! {
                    <leptos::For
                        children=move |x| v7(x)
                        let:x
                        key=move |x| v6(x.to_owned())
                        each=v5
                    ></leptos::For>
                },
            )]);
            let v23: Vec<leptos::View> = v21.to_vec();
            leptos::Fragment::new(v23)
        }
        pub fn method282(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure296(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure295(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v10 =
                Dice_ui::method186(Dice_ui::method185(Dice_ui::method282(v0_1, v1, v2, v3, v4)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 flex-col p-[8px] gap-[8px]">{v10()}</div> };
            let v18: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v15)]);
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method281(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure295(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure327(v0_1: leptos::View, unitVar: ()) -> &'static str {
            let v5: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure330(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method310(v0_1: leptos::View) -> Func0<string> {
            Func0::new(move || Dice_ui::closure330((), ()))
        }
        pub fn closure329(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v7 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method204(
                Dice_ui::method310(v0_1),
            )));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v5), string(">{v7()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v7()}</span>
            };
            let v15: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v12)]);
            let v17: Vec<leptos::View> = v15.to_vec();
            leptos::Fragment::new(v17)
        }
        pub fn method309(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure329(v0_1.clone(), ())
            })
        }
        pub fn closure328(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex items-center gap-2\"");
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method309(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v6()}</div> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method205()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> };
            let v26: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v23)]);
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method308(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure328(v0_1.clone(), ())
            })
        }
        pub fn closure325(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure326((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    move || Dice_ui::closure327(v0_1.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v7(()) + \" \" + &v4(())");
            let v11: string = append(append(append(string(" "), v8), string("")), string(""));
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method308(v0_1.clone())));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v11), string(">{v13()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v7(()) + " " + &v4(())
                }>{v13()}</summary>
            };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method207(v1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> };
            let v33: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v30)]);
            let v35: Vec<leptos::View> = v33.to_vec();
            leptos::Fragment::new(v35)
        }
        pub fn method307(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure325(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure324(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure237((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method199(v0_1.clone())));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method307(v0_1, v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method306(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure324(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure333(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure334(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure335(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn method314() -> string {
            string("Dark Mode")
        }
        pub fn closure336(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method314();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method313() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure336((), ()))
        }
        pub fn method316() -> string {
            string("dark-mode")
        }
        pub fn closure338(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v0_1: string = Dice_ui::method316();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            String::from(v2)
        }
        pub fn closure341(unitVar: (), v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure340(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalUpdate::update(&v4.l0.clone(), |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure341((), v))(x.clone())
            });
            ()
        }
        pub fn closure342(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalGet::get(&v3.l0.clone())
        }
        pub fn method318(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure342(v0_1.clone(), ())
            })
        }
        pub fn method319() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure338((), ()))
        }
        pub fn closure339(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure340(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method318(v0_1.clone());
                let v4 = Dice_ui::method319();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        prop:checked=move || v3()
                        on:change=move |event| v1(event)
                        id=move || v4()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                };
                let v22: leptos::View = leptos::IntoView::into_view(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v25: string = append(append(append(string(" "), v23), string("")), string(""));
                let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method293()));
                let v30: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v25), string(">{v27()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v32: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                };
                let v34: leptos::View = leptos::IntoView::into_view(v32);
                let v35: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v37: string = append(append(append(string(" "), v35), string("")), string(""));
                let v39 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method296()));
                let v41: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v37), string(">{v39()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v43: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v39()}
                    </span>
                };
                let v46: Array<leptos::View> =
                    new_array(&[v22, v34, leptos::IntoView::into_view(v43)]);
                let v48: Vec<leptos::View> = v46.to_vec();
                leptos::Fragment::new(v48)
            }
        }
        pub fn method317(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure339(v0_1.clone(), ())
            })
        }
        pub fn closure337(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure338((), ()));
            {
                let v8: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method317(v0_1)));
                let v13: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<label "), v8), string(">{v10()}</")),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v15: leptos::HtmlElement<leptos::html::Label> = leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v10()}
                    </label>
                };
                let v18: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v15)]);
                let v20: Vec<leptos::View> = v18.to_vec();
                leptos::Fragment::new(v20)
            }
        }
        pub fn method315(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure337(v0_1.clone(), ())
            })
        }
        pub fn closure344(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn method321(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn closure343(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method320(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure343(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure345(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn method323() -> string {
            string("Debug")
        }
        pub fn closure346(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method323();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method322() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure346((), ()))
        }
        pub fn method325() -> string {
            string("debug")
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v0_1: string = Dice_ui::method325();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            String::from(v2)
        }
        pub fn closure350(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalUpdate::update(&v4.l2.clone(), |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure341((), v))(x.clone())
            });
            ()
        }
        pub fn closure351(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalGet::get(&v3.l2.clone())
        }
        pub fn method327(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure351(v0_1.clone(), ())
            })
        }
        pub fn method328() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure348((), ()))
        }
        pub fn closure349(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure350(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method327(v0_1.clone());
                let v4 = Dice_ui::method328();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        prop:checked=move || v3()
                        on:change=move |event| v1(event)
                        id=move || v4()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                };
                let v22: leptos::View = leptos::IntoView::into_view(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v25: string = append(append(append(string(" "), v23), string("")), string(""));
                let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method293()));
                let v30: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v25), string(">{v27()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v32: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                };
                let v34: leptos::View = leptos::IntoView::into_view(v32);
                let v35: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v37: string = append(append(append(string(" "), v35), string("")), string(""));
                let v39 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method296()));
                let v41: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v37), string(">{v39()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v43: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v39()}
                    </span>
                };
                let v46: Array<leptos::View> =
                    new_array(&[v22, v34, leptos::IntoView::into_view(v43)]);
                let v48: Vec<leptos::View> = v46.to_vec();
                leptos::Fragment::new(v48)
            }
        }
        pub fn method326(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure349(v0_1.clone(), ())
            })
        }
        pub fn closure347(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure348((), ()));
            {
                let v8: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method326(v0_1)));
                let v13: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<label "), v8), string(">{v10()}</")),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v15: leptos::HtmlElement<leptos::html::Label> = leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v10()}
                    </label>
                };
                let v18: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v15)]);
                let v20: Vec<leptos::View> = v18.to_vec();
                leptos::Fragment::new(v20)
            }
        }
        pub fn method324(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure347(v0_1.clone(), ())
            })
        }
        pub fn closure352(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method329(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure352(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure353(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Dl>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure332(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v5 = Func0::new(move || Dice_ui::closure334((), ()));
            let v6 = {
                let clo_1 = v5.clone();
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v8 = Func0::new(move || Dice_ui::closure335((), ()));
            let v9 = {
                let clo_2 = v8.clone();
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v9(()) + \" \" + &v6(()) + \" \" + &v3(())");
            let v15: string = append(append(append(string(" "), v12), string("")), string(""));
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method320(
                Dice_ui::method313(),
                Dice_ui::method315(v0_1.clone()),
            )));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v15), string(">{v17()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v9(()) + " " + &v6(()) + " " + &v3(())
                }>{v17()}</dl>
            };
            let v25 = {
                let clo_3 = Func0::new(move || Dice_ui::closure345((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v27 = {
                let clo_4 = v5;
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v29 = {
                let clo_5 = v8;
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v32: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v27(()) + \" \" + &v25(())");
            let v34: string = append(append(append(string(" "), v32), string("")), string(""));
            let v36 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method329(
                Dice_ui::method322(),
                Dice_ui::method324(v0_1),
            )));
            let v38: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v34), string(">{v36()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v41: Array<leptos::HtmlElement<leptos::html::Dl>> = new_array(&[
                v22,
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                            .to_owned() + &v29(()) + " " + &v27(()) + " " + &v25(())
                    }>{v36()}</dl>
                },
            ]);
            let v43: Vec<leptos::HtmlElement<leptos::html::Dl>> = v41.to_vec();
            let v46: Vec<leptos::View> = v43
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::html::Dl>| {
                        Dice_ui::closure353((), v)
                    })(x.clone())
                })
                .collect();
            let v48: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v46);
            let v50: Vec<leptos::View> = v48.to_vec();
            leptos::Fragment::new(v50)
        }
        pub fn method312(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure332(v0_1.clone(), ())
            })
        }
        pub fn closure331(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method312(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 flex-col p-[11px] gap-[11px]">{v6()}</div> };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method311(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure331(v0_1.clone(), ())
            })
        }
        pub fn closure356(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure357(unitVar: (), unitVar_1: ()) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure360(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method334() -> Func0<string> {
            Func0::new(move || Dice_ui::closure360((), ()))
        }
        pub fn closure359(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method186(Dice_ui::method185(Dice_ui::method204(Dice_ui::method334())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method333() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure359((), ()))
        }
        pub fn closure358(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method333()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method205()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method332() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure358((), ()))
        }
        pub fn closure355(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure356((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure357((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method332()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method207(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method331(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure355(v0_1.clone(), ())
            })
        }
        pub fn closure354(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure237((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method199(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method331(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method330(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure354(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure362(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method337() -> string {
            string("Global State")
        }
        pub fn closure363(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method337();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method336() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure363((), ()))
        }
        pub fn method339(v0_1: LrcPtr<Dice_ui::Heap2>) -> LrcPtr<Dice_ui::Heap2> {
            v0_1
        }
        pub fn closure366(unitVar: (), v0_1: std::string::String) -> Dice_ui::US73 {
            Dice_ui::US73::US73_0(v0_1)
        }
        pub fn closure367(unitVar: (), v0_1: std::string::String) -> Dice_ui::US73 {
            Dice_ui::US73::US73_1(v0_1)
        }
        pub fn closure365(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            {
                let v3: LrcPtr<Dice_ui::Heap2> = Dice_ui::method339(v0_1);
                let v5: Result<std::string::String, std::string::String> =
                    serde_json::to_string_pretty(&v3).map_err(|x| x.to_string());
                let v8: Dice_ui::US73 = match &v5 {
                    Err(v5_1_0) => Dice_ui::closure367((), v5_1_0.clone()),
                    Ok(v5_0_0) => Dice_ui::closure366((), v5_0_0.clone()),
                };
                match &v8 {
                    Dice_ui::US73::US73_0(v8_0_0) => {
                        fable_library_rust::String_::fromString(v8_0_0.clone())
                    }
                    Dice_ui::US73::US73_1(v8_1_0) => append(
                        append(string("Error: "), toString(v8_1_0.clone())),
                        string(""),
                    ),
                }
            }
        }
        pub fn closure368(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure369(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method19(v0_1);
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: std::string::String = String::from(v3);
            let v7: leptos::leptos_dom::Text = leptos::html::text(v5);
            let v10: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v7)]);
            let v12: Vec<leptos::View> = v10.to_vec();
            leptos::Fragment::new(v12)
        }
        pub fn method340(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure369(v0_1.clone(), ())
            })
        }
        pub fn closure364(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            {
                let v3: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v5: LrcPtr<Dice_ui::Heap2> = v3.unwrap();
                let v8 = {
                    let clo = Func0::new({
                        let v5 = v5.clone();
                        move || Dice_ui::closure365(v5.clone(), ())
                    });
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v10: leptos::Memo<string> = leptos::create_memo(move |_| v8(()));
                let v12: string = v10();
                let v15 = {
                    let clo_1 = Func0::new(move || Dice_ui::closure368((), ()));
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v16: string =
                    string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v15(())");
                let v19: string = append(append(append(string(" "), v16), string("")), string(""));
                let v21 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method340(v12)));
                let v24: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<pre "), v19), string(">{v21()}</")),
                                string("pre"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v26: leptos::HtmlElement<leptos::html::Pre> = leptos::view! {
                    <pre class=move || {
                        "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                            .to_owned() + &v15(())
                    }>{v21()}</pre>
                };
                let v29: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v26)]);
                let v31: Vec<leptos::View> = v29.to_vec();
                leptos::Fragment::new(v31)
            }
        }
        pub fn method338() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure364((), ()))
        }
        pub fn closure370(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method341(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure370(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure361(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure362((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v5 = {
                let clo_1 = Func0::new(move || Dice_ui::closure334((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v8 = {
                let clo_2 = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v8(()) + \" \" + &v5(()) + \" \" + &v2(())");
            let v14: string = append(append(append(string(" "), v11), string("")), string(""));
            let v16 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method341(
                Dice_ui::method336(),
                Dice_ui::method338(),
            )));
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v14), string(">{v16()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v8(()) + " " + &v5(()) + " " + &v2(())
                }>{v16()}</dl>
            };
            let v24: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v21)]);
            let v26: Vec<leptos::View> = v24.to_vec();
            leptos::Fragment::new(v26)
        }
        pub fn method335() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure361((), ()))
        }
        pub fn closure373(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure374(unitVar: (), unitVar_1: ()) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure377(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method346() -> Func0<string> {
            Func0::new(move || Dice_ui::closure377((), ()))
        }
        pub fn closure376(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method186(Dice_ui::method185(Dice_ui::method204(Dice_ui::method346())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method345() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure376((), ()))
        }
        pub fn closure375(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method345()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method205()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method344() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure375((), ()))
        }
        pub fn closure372(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure373((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure374((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method344()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method207(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method343(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure372(v0_1.clone(), ())
            })
        }
        pub fn closure371(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure237((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method199(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method343(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method342(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure371(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure378(v0_1: leptos::WriteSignal<bool>, unitVar: ()) {
            leptos::SignalUpdate::update(&v0_1, |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure341((), v))(x.clone())
            });
            ()
        }
        pub fn closure379(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure380(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v7: string = append(
                append(
                    append(string(" "), v2),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                ),
                string(""),
            );
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::svg::Path> = leptos::view! {
                <path
                    d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z"
                    stroke-linejoin="round"
                    stroke-linecap="round"
                >
                    {v9()}
                </path>
            };
            let v16: leptos::View = leptos::IntoView::into_view(v14);
            let v23: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v25 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v23), string(">{v25()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::svg::Path> = leptos::view! {
                <path
                    d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    stroke-linejoin="round"
                    stroke-linecap="round"
                >
                    {v25()}
                </path>
            };
            let v32: Array<leptos::View> = new_array(&[v16, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method347() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure380((), ()))
        }
        pub fn method348(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure381(v0_1: leptos::ReadSignal<bool>, unitVar: ()) -> std::string::String {
            let v10: &'static str = Dice_ui::method348(if leptos::SignalGet::get(&v0_1) {
                let v4: string = string("r#\"\"#");
                r#""#
            } else {
                let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                r#"bg-gray-300 hover:bg-gray-200"#
            });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn method352() -> string {
            string("Settings")
        }
        pub fn closure384(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method352();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method351() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure384((), ()))
        }
        pub fn closure385(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v2: Func0<leptos::Fragment> = Func0::new(move || v0_1());
            let v5: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(move || v2())]);
            let v7: Vec<leptos::View> = v5.to_vec();
            leptos::Fragment::new(v7)
        }
        pub fn method353(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure385(v0_1.clone(), ())
            })
        }
        pub fn closure387(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            v0_1()
        }
        pub fn method355(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure387(v0_1.clone(), ())
            })
        }
        pub fn closure388(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method356() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure388((), ()))
        }
        pub fn closure386(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"pr-[15px] [font-size:13px]\"");
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method355(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="pr-[15px] [font-size:13px]">{v6()}</span> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"h-px flex-1 bg-gray-300\"");
            let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method356()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="h-px flex-1 bg-gray-300">{v18()}</span> };
            let v25: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method354(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure386(v0_1.clone(), ())
            })
        }
        pub fn closure389(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn method358() -> string {
            string("Table View")
        }
        pub fn closure390(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method358();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method357() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure390((), ()))
        }
        pub fn method360() -> string {
            string("table-view")
        }
        pub fn closure392(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v0_1: string = Dice_ui::method360();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            String::from(v2)
        }
        pub fn closure395(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure394(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalUpdate::update(&v4.l1.clone(), |x| {
                *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure395((), v))(
                    x.clone(),
                )
            });
            ()
        }
        pub fn closure396(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            if let Dice_ui::US1::US1_1 = &(leptos::SignalGet::get(&v3.l1.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method362(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure396(v0_1.clone(), ())
            })
        }
        pub fn method363() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure392((), ()))
        }
        pub fn closure393(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure394(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method362(v0_1.clone());
                let v4 = Dice_ui::method363();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        prop:checked=move || v3()
                        on:change=move |event| v1(event)
                        id=move || v4()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                };
                let v22: leptos::View = leptos::IntoView::into_view(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v25: string = append(append(append(string(" "), v23), string("")), string(""));
                let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method293()));
                let v30: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v25), string(">{v27()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v32: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                };
                let v34: leptos::View = leptos::IntoView::into_view(v32);
                let v35: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v37: string = append(append(append(string(" "), v35), string("")), string(""));
                let v39 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method296()));
                let v41: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v37), string(">{v39()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v43: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v39()}
                    </span>
                };
                let v46: Array<leptos::View> =
                    new_array(&[v22, v34, leptos::IntoView::into_view(v43)]);
                let v48: Vec<leptos::View> = v46.to_vec();
                leptos::Fragment::new(v48)
            }
        }
        pub fn method361(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure393(v0_1.clone(), ())
            })
        }
        pub fn closure391(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure392((), ()));
            {
                let v8: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method361(v0_1)));
                let v13: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<label "), v8), string(">{v10()}</")),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v15: leptos::HtmlElement<leptos::html::Label> = leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v10()}
                    </label>
                };
                let v18: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v15)]);
                let v20: Vec<leptos::View> = v18.to_vec();
                leptos::Fragment::new(v20)
            }
        }
        pub fn method359(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure391(v0_1.clone(), ())
            })
        }
        pub fn closure397(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method364(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure397(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure383(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v6: string = string(" class=\"flex items-center pb-[6px]\"");
            let v8 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method354(
                Dice_ui::method353(Dice_ui::method351()),
            )));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v6), string(">{v8()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="flex items-center pb-[6px]">{v8()}</span> };
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v18 = {
                let clo = Func0::new(move || Dice_ui::closure389((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v21 = {
                let clo_1 = Func0::new(move || Dice_ui::closure334((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v24 = {
                let clo_2 = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v27: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v24(()) + \" \" + &v21(()) + \" \" + &v18(())");
            let v29: string = append(append(append(string(" "), v27), string("")), string(""));
            let v31 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method364(
                Dice_ui::method357(),
                Dice_ui::method359(v0_1),
            )));
            let v34: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v29), string(">{v31()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v24(()) + " " + &v21(()) + " " + &v18(())
                }>{v31()}</dl>
            };
            let v39: Array<leptos::View> = new_array(&[v15, leptos::IntoView::into_view(v36)]);
            let v41: Vec<leptos::View> = v39.to_vec();
            leptos::Fragment::new(v41)
        }
        pub fn method350(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure383(v0_1.clone(), ())
            })
        }
        pub fn closure401(v0_1: i64, unitVar: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method19(append(
                append(string("Transaction "), toString(v0_1 + 1_i64)),
                string(""),
            ));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v11: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v8)]);
            let v13: Vec<leptos::View> = v11.to_vec();
            leptos::Fragment::new(v13)
        }
        pub fn method367(v0_1: i64) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure401(v0_1, ())
            })
        }
        pub fn closure403(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure404(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure405(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method177();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method369() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure405((), ()))
        }
        pub fn closure406(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method19(v0_1);
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: std::string::String = String::from(v3);
            let v7: leptos::leptos_dom::Text = leptos::html::text(v5);
            let v10: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v7)]);
            let v12: Vec<leptos::View> = v10.to_vec();
            leptos::Fragment::new(v12)
        }
        pub fn method370(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure406(v0_1.clone(), ())
            })
        }
        pub fn closure407(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method371(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure407(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure408(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure409(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure410(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method239();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method372() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure410((), ()))
        }
        pub fn closure411(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12: std::string::String = Dice_ui::method252(v3);
            let v15: i64 = Dice_ui::method253(v12.parse().unwrap());
            let v17: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v15 / 1000i64);
            let v20: Dice_ui::US71 =
                defaultValue(Dice_ui::US71::US71_1, map(Dice_ui::method254(), v17));
            let v38: Dice_ui::US34 = match &v20 {
                Dice_ui::US71::US71_0(v20_0_0) => {
                    let v22: chrono::DateTime<chrono::Utc> = Dice_ui::method255(match &v20 {
                        Dice_ui::US71::US71_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    let v24: chrono::NaiveDateTime = v22.naive_utc();
                    let v26: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v24);
                    let v28: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v29: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v30: chrono::DateTime<chrono::Local> = Dice_ui::method256(v26);
                    let v32: std::string::String = v30.format(v29).to_string();
                    Dice_ui::US34::US34_0(fable_library_rust::String_::fromString(v32))
                }
                _ => Dice_ui::US34::US34_1,
            };
            let v44: Dice_ui::US72 = match &v38 {
                Dice_ui::US34::US34_0(v38_0_0) => Dice_ui::US72::US72_0(match &v38 {
                    Dice_ui::US34::US34_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US72::US72_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v50: string = Dice_ui::method19(match &v44 {
                Dice_ui::US72::US72_0(v44_0_0) => v44_0_0.clone(),
                Dice_ui::US72::US72_1(v44_1_0) => {
                    append(append(string("Error: "), v44_1_0.clone()), string(""))
                }
            });
            let v52: &str = fable_library_rust::String_::LrcStr::as_str(&v50);
            let v54: std::string::String = String::from(v52);
            let v56: leptos::leptos_dom::Text = leptos::html::text(v54);
            let v59: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v56)]);
            let v61: Vec<leptos::View> = v59.to_vec();
            leptos::Fragment::new(v61)
        }
        pub fn method373(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure411(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure412(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method374(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure412(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure413(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure414(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure415(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method241();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method375() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure415((), ()))
        }
        pub fn closure416(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(fable_library_rust::String_::fromString(v8));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method376(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure416(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure417(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method377(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure417(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure418(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure419(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure420(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method243();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method378() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure420((), ()))
        }
        pub fn closure421(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(fable_library_rust::String_::fromString(v10));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method379(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure421(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure422(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method380(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure422(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure423(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure424(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn method382() -> string {
            string("Actions")
        }
        pub fn closure425(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method382();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method381() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure425((), ()))
        }
        pub fn closure428(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure429(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure430(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure431(v0_1: std::string::String, unitVar: ()) -> leptos::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v12: string = Dice_ui::method19(if string("FUNCTION_CALL") == v2.clone() {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == v2.clone() {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == v2.clone() {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            });
            let v14: &str = fable_library_rust::String_::LrcStr::as_str(&v12);
            let v16: std::string::String = String::from(v14);
            let v18: leptos::leptos_dom::Text = leptos::html::text(v16);
            let v21: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v18)]);
            let v23: Vec<leptos::View> = v21.to_vec();
            leptos::Fragment::new(v23)
        }
        pub fn method384(v0_1: std::string::String) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure431(v0_1.clone(), ())
            })
        }
        pub fn closure434(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure435(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method388() -> string {
            string("Method")
        }
        pub fn closure436(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method388();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method387() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure436((), ()))
        }
        pub fn method390() -> string {
            string("None")
        }
        pub fn closure437(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v3: Dice_ui::US15 =
                defaultValue(Dice_ui::US15::US15_1, map(Dice_ui::method50(), v0_1));
            match &v3 {
                Dice_ui::US15::US15_0(v3_0_0) => {
                    let v7: string =
                        Dice_ui::method19(fable_library_rust::String_::fromString(match &v3 {
                            Dice_ui::US15::US15_0(x) => x.clone(),
                            _ => unreachable!(),
                        }));
                    let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
                    let v11: std::string::String = String::from(v9);
                    let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
                    let v16: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v13)]);
                    let v18: Vec<leptos::View> = v16.to_vec();
                    leptos::Fragment::new(v18)
                }
                _ => {
                    let v21: string = Dice_ui::method390();
                    let v23: &str = fable_library_rust::String_::LrcStr::as_str(&v21);
                    let v25: std::string::String = String::from(v23);
                    let v27: leptos::leptos_dom::Text = leptos::html::text(v25);
                    let v30: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v27)]);
                    let v32: Vec<leptos::View> = v30.to_vec();
                    leptos::Fragment::new(v32)
                }
            }
        }
        pub fn method389(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure437(v0_1.clone(), ())
            })
        }
        pub fn closure439(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure438(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure439((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method391(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure438(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure433(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure434((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure435((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v9 = {
                let clo_2 = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v9(()) + \" \" + &v6(()) + \" \" + &v3(())");
            let v15: string = append(append(append(string(" "), v12), string("")), string(""));
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method391(
                Dice_ui::method387(),
                Dice_ui::method389(v0_1),
            )));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v15), string(">{v17()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v9(()) + " " + &v6(()) + " " + &v3(())
                }>{v17()}</dl>
            };
            let v25: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method386(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure433(v0_1.clone(), ())
            })
        }
        pub fn closure432(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex flex-1 flex-col\"");
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method386(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v6()}</div> };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method385(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure432(v0_1.clone(), ())
            })
        }
        pub fn closure441(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure440(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure441((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method392(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure440(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure427(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> leptos::View {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure428((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure429((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure430((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v13: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v16: string = append(append(append(string(" "), v13), string("")), string(""));
            let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method392(
                Dice_ui::method384(_arg.0.clone()),
                Dice_ui::method385(_arg.1.clone()),
            )));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v16), string(">{v18()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())
                }>{v18()}</dl>
            };
            leptos::IntoView::into_view(v23)
        }
        pub fn closure426(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v0_1.to_vec();
            let v16: Vec<leptos::View> = v13
                .iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure427((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect();
            let v18: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v16);
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method383(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure426(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure443(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure442(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure443((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method393(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure442(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure444(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure445(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method395() -> string {
            string("Deposit")
        }
        pub fn closure446(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method395();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method394() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure446((), ()))
        }
        pub fn closure447(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(toString(v1));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method396(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure447(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure448(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method397(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure448(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure449(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure450(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method399() -> string {
            string("Outcome Status")
        }
        pub fn closure451(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method399();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method398() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure451((), ()))
        }
        pub fn closure452(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(ofBoolean(v6));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method400(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure452(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure453(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method401(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure453(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure454(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure455(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure456(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method245();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method402() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure456((), ()))
        }
        pub fn closure457(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(toString(v7));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method403(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure457(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure458(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method404(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure458(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure459(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure460(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method406() -> string {
            string("Block Height")
        }
        pub fn closure461(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method406();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method405() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure461((), ()))
        }
        pub fn closure462(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(toString(v2));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method407(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure462(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure463(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method408(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure463(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure464(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure465(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method410() -> string {
            string("Hash")
        }
        pub fn closure466(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method410();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method409() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure466((), ()))
        }
        pub fn closure467(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(fable_library_rust::String_::fromString(v11));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method411(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure467(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure468(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method412(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure468(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure469(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure470(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method414() -> string {
            string("Block Hash")
        }
        pub fn closure471(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method414();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method413() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure471((), ()))
        }
        pub fn closure472(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(fable_library_rust::String_::fromString(v4));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method415(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure472(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure473(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method416(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure473(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure474(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure475(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method418() -> string {
            string("Receipt ID")
        }
        pub fn closure476(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method418();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method417() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure476((), ()))
        }
        pub fn closure477(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14: string = Dice_ui::method19(fable_library_rust::String_::fromString(v9));
            let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
            let v18: std::string::String = String::from(v16);
            let v20: leptos::leptos_dom::Text = leptos::html::text(v18);
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method419(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure477(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure478(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method420(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure478(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure479(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure480(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method422() -> string {
            string("Logs")
        }
        pub fn closure481(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method422();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method421() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure481((), ()))
        }
        pub fn closure483(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure482(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: Vec<std::string::String> = v5.to_vec();
            let v16: Vec<string> = v13
                .iter()
                .map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(x.clone())
                })
                .collect();
            let v24: string = replace(
                join(
                    string("\n"),
                    toArray(ofArray(fable_library_rust::NativeArray_::array_from(v16))),
                ),
                string("\\n"),
                string("\n"),
            );
            let v27 = {
                let clo = Func0::new(move || Dice_ui::closure483((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v28: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v27(())");
            let v31: string = append(append(append(string(" "), v28), string("")), string(""));
            let v33 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method340(v24)));
            let v36: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v31), string(">{v33()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v38: leptos::HtmlElement<leptos::html::Pre> = leptos::view! {
                <pre class=move || {
                    "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                        .to_owned() + &v27(())
                }>{v33()}</pre>
            };
            let v41: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v38)]);
            let v43: Vec<leptos::View> = v41.to_vec();
            leptos::Fragment::new(v43)
        }
        pub fn method423(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure482(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure484(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure344((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method321(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method424(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure484(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure402(
            v0_1: string,
            v1: Array<(std::string::String, Option<std::string::String>)>,
            v2: f64,
            v3: u32,
            v4: std::string::String,
            v5: std::string::String,
            v6: Array<std::string::String>,
            v7: bool,
            v8: f64,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            v12: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v15 = {
                let clo = Func0::new(move || Dice_ui::closure403((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v18 = {
                let clo_1 = Func0::new(move || Dice_ui::closure404((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v20 = Func0::new(move || Dice_ui::closure335((), ()));
            let v21 = {
                let clo_2 = v20.clone();
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v24: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v21(()) + \" \" + &v18(()) + \" \" + &v15(())");
            let v27: string = append(append(append(string(" "), v24), string("")), string(""));
            let v29 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method371(
                Dice_ui::method369(),
                Dice_ui::method370(v0_1),
            )));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v27), string(">{v29()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v21(()) + " " + &v18(()) + " " + &v15(())
                }>{v29()}</dl>
            };
            let v36: leptos::View = leptos::IntoView::into_view(v34);
            let v39 = {
                let clo_3 = Func0::new(move || Dice_ui::closure408((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v42 = {
                let clo_4 = Func0::new(move || Dice_ui::closure409((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v44 = {
                let clo_5 = v20.clone();
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v47: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v44(()) + \" \" + &v42(()) + \" \" + &v39(())");
            let v49: string = append(append(append(string(" "), v47), string("")), string(""));
            let v51 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method374(
                Dice_ui::method372(),
                Dice_ui::method373(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v53: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v49), string(">{v51()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v55: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v44(()) + " " + &v42(()) + " " + &v39(())
                }>{v51()}</dl>
            };
            let v57: leptos::View = leptos::IntoView::into_view(v55);
            let v60 = {
                let clo_6 = Func0::new(move || Dice_ui::closure413((), ()));
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v63 = {
                let clo_7 = Func0::new(move || Dice_ui::closure414((), ()));
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v65 = {
                let clo_8 = v20.clone();
                Func1::new({
                    let clo_8 = clo_8.clone();
                    move |arg_8: ()| clo_8()
                })
            };
            let v68: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v65(()) + \" \" + &v63(()) + \" \" + &v60(())");
            let v70: string = append(append(append(string(" "), v68), string("")), string(""));
            let v72 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method377(
                Dice_ui::method375(),
                Dice_ui::method376(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v74: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v70), string(">{v72()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v76: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v65(()) + " " + &v63(()) + " " + &v60(())
                }>{v72()}</dl>
            };
            let v78: leptos::View = leptos::IntoView::into_view(v76);
            let v81 = {
                let clo_9 = Func0::new(move || Dice_ui::closure418((), ()));
                Func1::new({
                    let clo_9 = clo_9.clone();
                    move |arg_9: ()| clo_9()
                })
            };
            let v84 = {
                let clo_10 = Func0::new(move || Dice_ui::closure419((), ()));
                Func1::new({
                    let clo_10 = clo_10.clone();
                    move |arg_10: ()| clo_10()
                })
            };
            let v86 = {
                let clo_11 = v20.clone();
                Func1::new({
                    let clo_11 = clo_11.clone();
                    move |arg_11: ()| clo_11()
                })
            };
            let v89: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v86(()) + \" \" + &v84(()) + \" \" + &v81(())");
            let v91: string = append(append(append(string(" "), v89), string("")), string(""));
            let v93 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method380(
                Dice_ui::method378(),
                Dice_ui::method379(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v95: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v91), string(">{v93()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v97: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v86(()) + " " + &v84(()) + " " + &v81(())
                }>{v93()}</dl>
            };
            let v99: leptos::View = leptos::IntoView::into_view(v97);
            let v102 = {
                let clo_12 = Func0::new(move || Dice_ui::closure423((), ()));
                Func1::new({
                    let clo_12 = clo_12.clone();
                    move |arg_12: ()| clo_12()
                })
            };
            let v105 = {
                let clo_13 = Func0::new(move || Dice_ui::closure424((), ()));
                Func1::new({
                    let clo_13 = clo_13.clone();
                    move |arg_13: ()| clo_13()
                })
            };
            let v107 = {
                let clo_14 = v20.clone();
                Func1::new({
                    let clo_14 = clo_14.clone();
                    move |arg_14: ()| clo_14()
                })
            };
            let v110: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v107(()) + \" \" + &v105(()) + \" \" + &v102(())");
            let v112: string = append(append(append(string(" "), v110), string("")), string(""));
            let v114 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method393(
                Dice_ui::method381(),
                Dice_ui::method383(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v116: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v112), string(">{v114()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v118: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v107(()) + " " + &v105(()) + " " + &v102(())
                }>{v114()}</dl>
            };
            let v120: leptos::View = leptos::IntoView::into_view(v118);
            let v123 = {
                let clo_15 = Func0::new(move || Dice_ui::closure444((), ()));
                Func1::new({
                    let clo_15 = clo_15.clone();
                    move |arg_15: ()| clo_15()
                })
            };
            let v126 = {
                let clo_16 = Func0::new(move || Dice_ui::closure445((), ()));
                Func1::new({
                    let clo_16 = clo_16.clone();
                    move |arg_16: ()| clo_16()
                })
            };
            let v128 = {
                let clo_17 = v20.clone();
                Func1::new({
                    let clo_17 = clo_17.clone();
                    move |arg_17: ()| clo_17()
                })
            };
            let v131: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v128(()) + \" \" + &v126(()) + \" \" + &v123(())");
            let v133: string = append(append(append(string(" "), v131), string("")), string(""));
            let v135 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method397(
                Dice_ui::method394(),
                Dice_ui::method396(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v137: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v133), string(">{v135()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v139: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v128(()) + " " + &v126(()) + " " + &v123(())
                }>{v135()}</dl>
            };
            let v141: leptos::View = leptos::IntoView::into_view(v139);
            let v144 = {
                let clo_18 = Func0::new(move || Dice_ui::closure449((), ()));
                Func1::new({
                    let clo_18 = clo_18.clone();
                    move |arg_18: ()| clo_18()
                })
            };
            let v147 = {
                let clo_19 = Func0::new(move || Dice_ui::closure450((), ()));
                Func1::new({
                    let clo_19 = clo_19.clone();
                    move |arg_19: ()| clo_19()
                })
            };
            let v149 = {
                let clo_20 = v20.clone();
                Func1::new({
                    let clo_20 = clo_20.clone();
                    move |arg_20: ()| clo_20()
                })
            };
            let v152: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v149(()) + \" \" + &v147(()) + \" \" + &v144(())");
            let v154: string = append(append(append(string(" "), v152), string("")), string(""));
            let v156 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method401(
                Dice_ui::method398(),
                Dice_ui::method400(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v158: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v154), string(">{v156()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v160: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v149(()) + " " + &v147(()) + " " + &v144(())
                }>{v156()}</dl>
            };
            let v162: leptos::View = leptos::IntoView::into_view(v160);
            let v165 = {
                let clo_21 = Func0::new(move || Dice_ui::closure454((), ()));
                Func1::new({
                    let clo_21 = clo_21.clone();
                    move |arg_21: ()| clo_21()
                })
            };
            let v168 = {
                let clo_22 = Func0::new(move || Dice_ui::closure455((), ()));
                Func1::new({
                    let clo_22 = clo_22.clone();
                    move |arg_22: ()| clo_22()
                })
            };
            let v170 = {
                let clo_23 = v20.clone();
                Func1::new({
                    let clo_23 = clo_23.clone();
                    move |arg_23: ()| clo_23()
                })
            };
            let v173: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v170(()) + \" \" + &v168(()) + \" \" + &v165(())");
            let v175: string = append(append(append(string(" "), v173), string("")), string(""));
            let v177 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method404(
                Dice_ui::method402(),
                Dice_ui::method403(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v179: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v175), string(">{v177()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v181: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v170(()) + " " + &v168(()) + " " + &v165(())
                }>{v177()}</dl>
            };
            let v183: leptos::View = leptos::IntoView::into_view(v181);
            let v186 = {
                let clo_24 = Func0::new(move || Dice_ui::closure459((), ()));
                Func1::new({
                    let clo_24 = clo_24.clone();
                    move |arg_24: ()| clo_24()
                })
            };
            let v189 = {
                let clo_25 = Func0::new(move || Dice_ui::closure460((), ()));
                Func1::new({
                    let clo_25 = clo_25.clone();
                    move |arg_25: ()| clo_25()
                })
            };
            let v191 = {
                let clo_26 = v20.clone();
                Func1::new({
                    let clo_26 = clo_26.clone();
                    move |arg_26: ()| clo_26()
                })
            };
            let v194: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v191(()) + \" \" + &v189(()) + \" \" + &v186(())");
            let v196: string = append(append(append(string(" "), v194), string("")), string(""));
            let v198 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method408(
                Dice_ui::method405(),
                Dice_ui::method407(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v200: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v196), string(">{v198()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v202: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v191(()) + " " + &v189(()) + " " + &v186(())
                }>{v198()}</dl>
            };
            let v204: leptos::View = leptos::IntoView::into_view(v202);
            let v207 = {
                let clo_27 = Func0::new(move || Dice_ui::closure464((), ()));
                Func1::new({
                    let clo_27 = clo_27.clone();
                    move |arg_27: ()| clo_27()
                })
            };
            let v210 = {
                let clo_28 = Func0::new(move || Dice_ui::closure465((), ()));
                Func1::new({
                    let clo_28 = clo_28.clone();
                    move |arg_28: ()| clo_28()
                })
            };
            let v212 = {
                let clo_29 = v20.clone();
                Func1::new({
                    let clo_29 = clo_29.clone();
                    move |arg_29: ()| clo_29()
                })
            };
            let v215: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v212(()) + \" \" + &v210(()) + \" \" + &v207(())");
            let v217: string = append(append(append(string(" "), v215), string("")), string(""));
            let v219 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method412(
                Dice_ui::method409(),
                Dice_ui::method411(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v221: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v217), string(">{v219()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v223: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v212(()) + " " + &v210(()) + " " + &v207(())
                }>{v219()}</dl>
            };
            let v225: leptos::View = leptos::IntoView::into_view(v223);
            let v228 = {
                let clo_30 = Func0::new(move || Dice_ui::closure469((), ()));
                Func1::new({
                    let clo_30 = clo_30.clone();
                    move |arg_30: ()| clo_30()
                })
            };
            let v231 = {
                let clo_31 = Func0::new(move || Dice_ui::closure470((), ()));
                Func1::new({
                    let clo_31 = clo_31.clone();
                    move |arg_31: ()| clo_31()
                })
            };
            let v233 = {
                let clo_32 = v20.clone();
                Func1::new({
                    let clo_32 = clo_32.clone();
                    move |arg_32: ()| clo_32()
                })
            };
            let v236: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v233(()) + \" \" + &v231(()) + \" \" + &v228(())");
            let v238: string = append(append(append(string(" "), v236), string("")), string(""));
            let v240 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method416(
                Dice_ui::method413(),
                Dice_ui::method415(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v242: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v238), string(">{v240()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v244: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v233(()) + " " + &v231(()) + " " + &v228(())
                }>{v240()}</dl>
            };
            let v246: leptos::View = leptos::IntoView::into_view(v244);
            let v249 = {
                let clo_33 = Func0::new(move || Dice_ui::closure474((), ()));
                Func1::new({
                    let clo_33 = clo_33.clone();
                    move |arg_33: ()| clo_33()
                })
            };
            let v252 = {
                let clo_34 = Func0::new(move || Dice_ui::closure475((), ()));
                Func1::new({
                    let clo_34 = clo_34.clone();
                    move |arg_34: ()| clo_34()
                })
            };
            let v254 = {
                let clo_35 = v20.clone();
                Func1::new({
                    let clo_35 = clo_35.clone();
                    move |arg_35: ()| clo_35()
                })
            };
            let v257: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v254(()) + \" \" + &v252(()) + \" \" + &v249(())");
            let v259: string = append(append(append(string(" "), v257), string("")), string(""));
            let v261 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method420(
                Dice_ui::method417(),
                Dice_ui::method419(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v263: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v259), string(">{v261()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v265: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v254(()) + " " + &v252(()) + " " + &v249(())
                }>{v261()}</dl>
            };
            let v296: Array<leptos::View> = new_array(&[
                v36,
                v57,
                v78,
                v99,
                v120,
                v141,
                v162,
                v183,
                v204,
                v225,
                v246,
                leptos::IntoView::into_view(v265),
                if count(v6.clone()) as u64 == 0_u64 {
                    let v271: Array<leptos::View> = Dice_ui::method173(new_empty::<leptos::View>());
                    leptos::CollectView::collect_view(v271.to_vec())
                } else {
                    let v276 = {
                        let clo_36 = Func0::new(move || Dice_ui::closure479((), ()));
                        Func1::new({
                            let clo_36 = clo_36.clone();
                            move |arg_36: ()| clo_36()
                        })
                    };
                    let v279 = {
                        let clo_37 = Func0::new(move || Dice_ui::closure480((), ()));
                        Func1::new({
                            let clo_37 = clo_37.clone();
                            move |arg_37: ()| clo_37()
                        })
                    };
                    let v281 = {
                        let clo_38 = v20;
                        Func1::new({
                            let clo_38 = clo_38.clone();
                            move |arg_38: ()| clo_38()
                        })
                    };
                    let v284: string =
                                    string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v281(()) + \" \" + &v279(()) + \" \" + &v276(())");
                    let v286: string =
                        append(append(append(string(" "), v284), string("")), string(""));
                    let v288 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method424(
                        Dice_ui::method421(),
                        Dice_ui::method423(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12),
                    )));
                    let v290: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<dl "), v286), string(">{v288()}</")),
                                    string("dl"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v292: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                        <dl class=move || {
                            "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                                .to_owned() + &v281(()) + " " + &v279(()) + " " + &v276(())
                        }>{v288()}</dl>
                    };
                    leptos::IntoView::into_view(v292)
                },
            ]);
            let v298: Vec<leptos::View> = v296.to_vec();
            leptos::Fragment::new(v298)
        }
        pub fn method368(
            v0_1: string,
            v1: Array<(std::string::String, Option<std::string::String>)>,
            v2: f64,
            v3: u32,
            v4: std::string::String,
            v5: std::string::String,
            v6: Array<std::string::String>,
            v7: bool,
            v8: f64,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            v12: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v12 = v12.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure402(
                        v0_1.clone(),
                        v1.clone(),
                        v2,
                        v3,
                        v4.clone(),
                        v5.clone(),
                        v6.clone(),
                        v7,
                        v8,
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        v12.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure400(
            v0_1: string,
            v1: i64,
            v2: Array<(std::string::String, Option<std::string::String>)>,
            v3: f64,
            v4: u32,
            v5: std::string::String,
            v6: std::string::String,
            v7: Array<std::string::String>,
            v8: bool,
            v9: f64,
            v10: std::string::String,
            v11: std::string::String,
            v12: std::string::String,
            v13: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v19: string = string(" class=\"flex items-center pb-[6px]\"");
            let v21 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method354(
                Dice_ui::method353(Dice_ui::method367(v1)),
            )));
            let v24: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v19), string(">{v21()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="flex items-center pb-[6px]">{v21()}</span> };
            let v28: leptos::View = leptos::IntoView::into_view(v26);
            let v31: string = string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
            let v33 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method368(
                v0_1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13,
            )));
            let v36: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v31), string(">{v33()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v38: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">{v33()}</div> };
            let v41: Array<leptos::View> = new_array(&[v28, leptos::IntoView::into_view(v38)]);
            let v43: Vec<leptos::View> = v41.to_vec();
            leptos::Fragment::new(v43)
        }
        pub fn method366(
            v0_1: string,
            v1: i64,
            v2: Array<(std::string::String, Option<std::string::String>)>,
            v3: f64,
            v4: u32,
            v5: std::string::String,
            v6: std::string::String,
            v7: Array<std::string::String>,
            v8: bool,
            v9: f64,
            v10: std::string::String,
            v11: std::string::String,
            v12: std::string::String,
            v13: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v12 = v12.clone();
                let v13 = v13.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure400(
                        v0_1.clone(),
                        v1,
                        v2.clone(),
                        v3,
                        v4,
                        v5.clone(),
                        v6.clone(),
                        v7.clone(),
                        v8,
                        v9,
                        v10.clone(),
                        v11.clone(),
                        v12.clone(),
                        v13.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure399(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::View {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v15: i64 = _arg.1.clone() as i64;
            leptos::logging::log!("{}", string("transaction.render (1)"));
            {
                let v19: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v21: LrcPtr<Dice_ui::Heap2> = v19.unwrap();
                let v25: string = string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
                let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method366(
                    _arg.0.clone(),
                    v15,
                    v2.l0.clone(),
                    v2.l1,
                    v2.l2,
                    v2.l3.clone(),
                    v2.l4.clone(),
                    v2.l5.clone(),
                    v2.l6,
                    v2.l7,
                    v2.l8.clone(),
                    v2.l9.clone(),
                    v2.l10.clone(),
                    v2.l11.clone(),
                )));
                let v30: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v25), string(">{v27()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v32: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 flex-col overflow-x-auto">{v27()}</div> };
                leptos::IntoView::into_view(v32)
            }
        }
        pub fn closure398(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v0_1.to_vec();
            let v5: Vec<leptos::View> = v2
                .iter()
                .map(|x| {
                    Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                        Dice_ui::closure399((), arg10_0040)
                    })(x.clone())
                })
                .collect();
            let v7: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v5);
            let v9: Vec<leptos::View> = v7.to_vec();
            leptos::Fragment::new(v9)
        }
        pub fn method365(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure398(v0_1.clone(), ())
            })
        }
        pub fn closure487(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method19(v0_1);
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: std::string::String = String::from(v3);
            let v7: leptos::leptos_dom::Text = leptos::html::text(v5);
            let v10: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v7)]);
            let v12: Vec<leptos::View> = v10.to_vec();
            leptos::Fragment::new(v12)
        }
        pub fn method426(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure487(v0_1.clone(), ())
            })
        }
        pub fn closure488(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method252(v0_1.l3.clone());
            let v5: i64 = Dice_ui::method253(v2.parse().unwrap());
            let v7: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v5 / 1000i64);
            let v10: Dice_ui::US71 =
                defaultValue(Dice_ui::US71::US71_1, map(Dice_ui::method254(), v7));
            let v28: Dice_ui::US34 = match &v10 {
                Dice_ui::US71::US71_0(v10_0_0) => {
                    let v12: chrono::DateTime<chrono::Utc> = Dice_ui::method255(match &v10 {
                        Dice_ui::US71::US71_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    let v14: chrono::NaiveDateTime = v12.naive_utc();
                    let v16: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v14);
                    let v18: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v19: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v20: chrono::DateTime<chrono::Local> = Dice_ui::method256(v16);
                    let v22: std::string::String = v20.format(v19).to_string();
                    Dice_ui::US34::US34_0(fable_library_rust::String_::fromString(v22))
                }
                _ => Dice_ui::US34::US34_1,
            };
            let v34: Dice_ui::US72 = match &v28 {
                Dice_ui::US34::US34_0(v28_0_0) => Dice_ui::US72::US72_0(match &v28 {
                    Dice_ui::US34::US34_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US72::US72_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v40: string = Dice_ui::method19(match &v34 {
                Dice_ui::US72::US72_0(v34_0_0) => v34_0_0.clone(),
                Dice_ui::US72::US72_1(v34_1_0) => {
                    append(append(string("Error: "), v34_1_0.clone()), string(""))
                }
            });
            let v42: &str = fable_library_rust::String_::LrcStr::as_str(&v40);
            let v44: std::string::String = String::from(v42);
            let v46: leptos::leptos_dom::Text = leptos::html::text(v44);
            let v49: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v46)]);
            let v51: Vec<leptos::View> = v49.to_vec();
            leptos::Fragment::new(v51)
        }
        pub fn method427(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure488(v0_1.clone(), ())
            })
        }
        pub fn closure489(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                Dice_ui::method19(fable_library_rust::String_::fromString(v0_1.l8.clone()));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method428(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure489(v0_1.clone(), ())
            })
        }
        pub fn closure490(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                Dice_ui::method19(fable_library_rust::String_::fromString(v0_1.l10.clone()));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method429(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure490(v0_1.clone(), ())
            })
        }
        pub fn closure492(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> leptos::View {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure428((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure429((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure430((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v13: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v16: string = append(append(append(string(" "), v13), string("")), string(""));
            let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method392(
                Dice_ui::method384(_arg.0.clone()),
                Dice_ui::method385(_arg.1.clone()),
            )));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v16), string(">{v18()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())
                }>{v18()}</dl>
            };
            leptos::IntoView::into_view(v23)
        }
        pub fn closure491(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: Vec<(std::string::String, Option<std::string::String>)> =
                v0_1.l0.clone().to_vec();
            let v6: Vec<leptos::View> = v3
                .iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure492((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect();
            let v8: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v6);
            let v10: Vec<leptos::View> = v8.to_vec();
            leptos::Fragment::new(v10)
        }
        pub fn method430(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure491(v0_1.clone(), ())
            })
        }
        pub fn closure493(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string = Dice_ui::method19(toString(v0_1.l1));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method431(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure493(v0_1.clone(), ())
            })
        }
        pub fn closure494(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string = Dice_ui::method19(toString(v0_1.l7));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method432(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure494(v0_1.clone(), ())
            })
        }
        pub fn closure495(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string = Dice_ui::method19(toString(v0_1.l2));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method433(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure495(v0_1.clone(), ())
            })
        }
        pub fn closure497(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn closure496(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v1: Array<std::string::String> = v0_1.l5.clone();
            if count(v1.clone()) as u64 == 0_u64 {
                let v4: string = Dice_ui::method4();
                let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
                let v8: std::string::String = String::from(v6);
                let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
                let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
                let v15: Vec<leptos::View> = v13.to_vec();
                leptos::Fragment::new(v15)
            } else {
                let v19: Vec<std::string::String> = v1.to_vec();
                let v22: Vec<string> = v19
                    .iter()
                    .map(|x| {
                        Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(
                            x.clone(),
                        )
                    })
                    .collect();
                let v30: string = replace(
                    join(
                        string("\n"),
                        toArray(ofArray(fable_library_rust::NativeArray_::array_from(v22))),
                    ),
                    string("\\n"),
                    string("\n"),
                );
                let v33 = {
                    let clo = Func0::new(move || Dice_ui::closure497((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v34: string =
                    string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v33(())");
                let v37: string = append(append(append(string(" "), v34), string("")), string(""));
                let v39 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method340(v30)));
                let v42: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<pre "), v37), string(">{v39()}</")),
                                string("pre"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v44: leptos::HtmlElement<leptos::html::Pre> = leptos::view! {
                    <pre class=move || {
                        "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                            .to_owned() + &v33(())
                    }>{v39()}</pre>
                };
                let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
                let v49: Vec<leptos::View> = v47.to_vec();
                leptos::Fragment::new(v49)
            }
        }
        pub fn method434(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure496(v0_1.clone(), ())
            })
        }
        pub fn closure498(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string = Dice_ui::method19(ofBoolean(v0_1.l6));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method435(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure498(v0_1.clone(), ())
            })
        }
        pub fn closure499(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                Dice_ui::method19(fable_library_rust::String_::fromString(v0_1.l11.clone()));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method436(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure499(v0_1.clone(), ())
            })
        }
        pub fn closure500(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                Dice_ui::method19(fable_library_rust::String_::fromString(v0_1.l4.clone()));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method437(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure500(v0_1.clone(), ())
            })
        }
        pub fn closure501(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                Dice_ui::method19(fable_library_rust::String_::fromString(v0_1.l9.clone()));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method438(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure501(v0_1.clone(), ())
            })
        }
        pub fn closure486(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: string,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v7 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method426(v1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v5), string(">{v7()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">{v7()}</td>
            };
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v19 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method427(v0_1.clone())));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v17), string(">{v19()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v19()}
                </td>
            };
            let v25: leptos::View = leptos::IntoView::into_view(v23);
            let v28: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v30 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method428(v0_1.clone())));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v28), string(">{v30()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v30()}
                </td>
            };
            let v36: leptos::View = leptos::IntoView::into_view(v34);
            let v39: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v41 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method429(v0_1.clone())));
            let v43: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v39), string(">{v41()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v41()}
                </td>
            };
            let v47: leptos::View = leptos::IntoView::into_view(v45);
            let v50: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v52 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method430(v0_1.clone())));
            let v54: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v50), string(">{v52()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v56: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v52()}
                </td>
            };
            let v58: leptos::View = leptos::IntoView::into_view(v56);
            let v61: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v63 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method431(v0_1.clone())));
            let v65: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v61), string(">{v63()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v67: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v63()}
                </td>
            };
            let v69: leptos::View = leptos::IntoView::into_view(v67);
            let v72: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v74 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method432(v0_1.clone())));
            let v76: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v72), string(">{v74()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v78: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v74()}
                </td>
            };
            let v80: leptos::View = leptos::IntoView::into_view(v78);
            let v83: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v85 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method433(v0_1.clone())));
            let v87: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v83), string(">{v85()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v89: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v85()}
                </td>
            };
            let v91: leptos::View = leptos::IntoView::into_view(v89);
            let v94: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
            let v96 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method434(v0_1.clone())));
            let v98: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v94), string(">{v96()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v100: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">
                    {v96()}
                </td>
            };
            let v102: leptos::View = leptos::IntoView::into_view(v100);
            let v105: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v107 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method435(v0_1.clone())));
            let v109: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v105), string(">{v107()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v111: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v107()}
                </td>
            };
            let v113: leptos::View = leptos::IntoView::into_view(v111);
            let v116: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v118 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method436(v0_1.clone())));
            let v120: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v116), string(">{v118()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v122: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v118()}
                </td>
            };
            let v124: leptos::View = leptos::IntoView::into_view(v122);
            let v127: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v129 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method437(v0_1.clone())));
            let v131: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v127), string(">{v129()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v133: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v129()}
                </td>
            };
            let v135: leptos::View = leptos::IntoView::into_view(v133);
            let v138: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v140 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method438(v0_1)));
            let v142: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v138), string(">{v140()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v144: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v140()}
                </td>
            };
            let v147: Array<leptos::View> = new_array(&[
                v14,
                v25,
                v36,
                v47,
                v58,
                v69,
                v80,
                v91,
                v102,
                v113,
                v124,
                v135,
                leptos::IntoView::into_view(v144),
            ]);
            let v149: Vec<leptos::View> = v147.to_vec();
            leptos::Fragment::new(v149)
        }
        pub fn method425(v0_1: LrcPtr<Dice_ui::Heap5>, v1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure486(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure485(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::HtmlElement<leptos::html::Tr> {
            leptos::logging::log!("{}", string("transaction.tr_render (1)"));
            {
                let v8: string = string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                let v10 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method425(
                    _arg.2.clone(),
                    _arg.0.clone(),
                )));
                let v13: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<tr "), v8), string(">{v10()}</")),
                                string("tr"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                leptos::view! { <tr class="odd:bg-gray-50 dark:odd:bg-gray-800/50">{v10()}</tr> }
            }
        }
        pub fn closure502(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Tr>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure504(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method177();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method440() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure504((), ()))
        }
        pub fn closure505(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method239();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method441() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure505((), ()))
        }
        pub fn closure506(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method241();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method442() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure506((), ()))
        }
        pub fn closure507(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method243();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method443() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure507((), ()))
        }
        pub fn method445() -> string {
            string("Action")
        }
        pub fn closure508(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method445();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method444() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure508((), ()))
        }
        pub fn closure509(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method395();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method446() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure509((), ()))
        }
        pub fn closure510(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method245();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method447() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure510((), ()))
        }
        pub fn closure511(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method406();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method448() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure511((), ()))
        }
        pub fn method451(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method451: loop {
                break '_method451 (if v1.get().clone() < count(v0_1.get().clone()) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if length(fable_library_rust::String_::fromString(v4)) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = v1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method451;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method450(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method450: loop {
                break '_method450 (if v1.get().clone() < count(v0_1.get().clone()) {
                    if Dice_ui::method451(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l5.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = v1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method450;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure512(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v7: string = Dice_ui::method19(if false == Dice_ui::method450(v0_1, 0_i32) {
                string("")
            } else {
                string("Logs")
            });
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v16: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v13)]);
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method449(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure512(v0_1.clone(), ())
            })
        }
        pub fn closure513(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method399();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method452() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure513((), ()))
        }
        pub fn closure514(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method410();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method453() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure514((), ()))
        }
        pub fn closure515(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method414();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method454() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure515((), ()))
        }
        pub fn closure516(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method418();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method455() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure516((), ()))
        }
        pub fn closure503(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method440()));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v4), string(">{v6()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v6()}
                </th>
            };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method441()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v16), string(">{v18()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v18()}
                </th>
            };
            let v24: leptos::View = leptos::IntoView::into_view(v22);
            let v27: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v29 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method442()));
            let v31: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v27), string(">{v29()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v29()}
                </th>
            };
            let v35: leptos::View = leptos::IntoView::into_view(v33);
            let v38: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v40 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method443()));
            let v42: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v38), string(">{v40()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v44: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v40()}
                </th>
            };
            let v46: leptos::View = leptos::IntoView::into_view(v44);
            let v49: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v51 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method444()));
            let v53: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v49), string(">{v51()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v55: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v51()}
                </th>
            };
            let v57: leptos::View = leptos::IntoView::into_view(v55);
            let v60: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v62 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method446()));
            let v64: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v60), string(">{v62()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v66: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v62()}
                </th>
            };
            let v68: leptos::View = leptos::IntoView::into_view(v66);
            let v71: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v73 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method447()));
            let v75: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v71), string(">{v73()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v77: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v73()}
                </th>
            };
            let v79: leptos::View = leptos::IntoView::into_view(v77);
            let v82: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v84 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method448()));
            let v86: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v82), string(">{v84()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v88: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v84()}
                </th>
            };
            let v90: leptos::View = leptos::IntoView::into_view(v88);
            let v93: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v95 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method449(v0_1)));
            let v97: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v93), string(">{v95()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v99: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v95()}
                </th>
            };
            let v101: leptos::View = leptos::IntoView::into_view(v99);
            let v104: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v106 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method452()));
            let v108: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v104), string(">{v106()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v110: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v106()}
                </th>
            };
            let v112: leptos::View = leptos::IntoView::into_view(v110);
            let v115: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v117 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method453()));
            let v119: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v115), string(">{v117()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v121: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v117()}
                </th>
            };
            let v123: leptos::View = leptos::IntoView::into_view(v121);
            let v126: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v128 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method454()));
            let v130: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v126), string(">{v128()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v132: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v128()}
                </th>
            };
            let v134: leptos::View = leptos::IntoView::into_view(v132);
            let v137: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v139 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method455()));
            let v141: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v137), string(">{v139()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v143: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v139()}
                </th>
            };
            let v146: Array<leptos::View> = new_array(&[
                v13,
                v24,
                v35,
                v46,
                v57,
                v68,
                v79,
                v90,
                v101,
                v112,
                v123,
                v134,
                leptos::IntoView::into_view(v143),
            ]);
            let v148: Vec<leptos::View> = v146.to_vec();
            leptos::Fragment::new(v148)
        }
        pub fn method439(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure503(v0_1.clone(), ())
            })
        }
        pub fn closure382(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)>>,
            v3: leptos::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v23: leptos::View = if leptos::SignalGet::get(&v3) {
                let v9: string = string(" class=\"px-[12px] py-[10px]\"");
                let v11 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method350(v0_1.clone())));
                let v14: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v9), string(">{v11()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v16: leptos::HtmlElement<leptos::html::Div> =
                    leptos::view! { <div class="px-[12px] py-[10px]">{v11()}</div> };
                leptos::IntoView::into_view(v16)
            } else {
                let v20: Array<leptos::View> = Dice_ui::method173(new_empty::<leptos::View>());
                leptos::CollectView::collect_view(v20.to_vec())
            };
            let v25: Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)> = v2();
            let v159: Array<leptos::View> = new_array(&[
                v23,
                if count(fable_library_rust::NativeArray_::array_from(v25)) as u64 == 0_u64 {
                    let v33: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v35 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method230()));
                    let v38: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v33), string(">{v35()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v40: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v35()}</div> };
                    leptos::IntoView::into_view(v40)
                } else {
                    let v44: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v1();
                    let v47: Dice_ui::US56 = match &v44 {
                        Err(v44_1_0) => Dice_ui::closure130((), v44_1_0.clone()),
                        Ok(v44_0_0) => Dice_ui::closure129((), v44_0_0.clone()),
                    };
                    let v56: Dice_ui::US49 = match &v47 {
                        Dice_ui::US56::US56_0(v47_0_0) => Dice_ui::US49::US49_0(defaultValue(
                            Dice_ui::US50::US50_1,
                            map(Dice_ui::method150(), v47_0_0.clone()),
                        )),
                        Dice_ui::US56::US56_1(v47_1_0) => Dice_ui::US49::US49_1(v47_1_0.clone()),
                    };
                    match &v56 {
                        Dice_ui::US49::US49_0(v56_0_0) => {
                            let v57: Dice_ui::US50 = v56_0_0.clone();
                            if let Dice_ui::US50::US50_0(v57_0_0) = &v57 {
                                let v58: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> = match &v57
                                {
                                    Dice_ui::US50::US50_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                let v61: LrcPtr<Dice_ui::Heap1> =
                                    leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
                                if if let Dice_ui::US1::US1_0 =
                                    &(leptos::SignalGet::get(&v61.l1.clone())).l4
                                {
                                    true
                                } else {
                                    false
                                } {
                                    let v68: string =
                                                    string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                    let v71: string = append(
                                        append(append(string(" "), v68), string("")),
                                        string(""),
                                    );
                                    let v73 = Dice_ui::method186(Dice_ui::method185(
                                        Dice_ui::method365(v58.clone()),
                                    ));
                                    let v76: string = append(
                                        append(
                                            string("leptos::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<div "), v71),
                                                        string(">{v73()}</"),
                                                    ),
                                                    string("div"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v78: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                                        <div class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">
                                            {v73()}
                                        </div>
                                    };
                                    leptos::IntoView::into_view(v78)
                                } else {
                                    let v82: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        v58.clone().to_vec();
                                    let v85: Vec<leptos::HtmlElement<leptos::html::Tr>> = v82
                                        .iter()
                                        .map(|x| {
                                            Func1::new(
                                                move |arg10_0040: (
                                                    string,
                                                    usize,
                                                    LrcPtr<Dice_ui::Heap5>,
                                                )| {
                                                    Dice_ui::closure485((), arg10_0040)
                                                },
                                            )(x.clone())
                                        })
                                        .collect();
                                    let v88: Vec<leptos::View> = v85
                                        .iter()
                                        .map(|x| {
                                            Func1::new(
                                                move |v_2: leptos::HtmlElement<
                                                    leptos::html::Tr,
                                                >| {
                                                    Dice_ui::closure502((), v_2)
                                                },
                                            )(x.clone())
                                        })
                                        .collect();
                                    let v90: Array<leptos::View> =
                                        fable_library_rust::NativeArray_::array_from(v88);
                                    let v92: Vec<leptos::View> = v90.to_vec();
                                    let v94: leptos::Fragment = leptos::Fragment::new(v92);
                                    leptos::logging::log!(
                                        "{}",
                                        string("transaction.tr_head_render (1)")
                                    );
                                    {
                                        let v99 = Dice_ui::method186(Dice_ui::method185(
                                            Dice_ui::method439(v58),
                                        ));
                                        let v103: string =
                                            string("leptos::view! { <tr >{v99()}</tr> }");
                                        let v105: leptos::HtmlElement<leptos::html::Tr> =
                                            leptos::view! { <tr>{v99()}</tr> };
                                        let v108: Array<leptos::View> =
                                            new_array(&[leptos::IntoView::into_view(v105)]);
                                        let v110: Vec<leptos::View> = v108.to_vec();
                                        let v115: string =
                                                        string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                        let v117 = Dice_ui::method186(Dice_ui::method185(
                                            Dice_ui::method263(leptos::Fragment::new(v110), v94),
                                        ));
                                        let v120: string = append(
                                            append(
                                                string("leptos::view! { "),
                                                append(
                                                    append(
                                                        append(
                                                            append(string("<table "), v115),
                                                            string(">{v117()}</"),
                                                        ),
                                                        string("table"),
                                                    ),
                                                    string(">"),
                                                ),
                                            ),
                                            string(" }"),
                                        );
                                        let v122: leptos::HtmlElement<leptos::html::Table> = leptos::view! {
                                            <table class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">
                                                {v117()}
                                            </table>
                                        };
                                        leptos::IntoView::into_view(v122)
                                    }
                                }
                            } else {
                                let v129: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v131 =
                                    Dice_ui::method186(Dice_ui::method185(Dice_ui::method266()));
                                let v134: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v129),
                                                    string(">{v131()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v136: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="grid place-content-center py-[10vh]">{v131()}</div> };
                                leptos::IntoView::into_view(v136)
                            }
                        }
                        Dice_ui::US49::US49_1(v56_1_0) => {
                            let v146: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v148 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method222(
                                fable_library_rust::String_::fromString(v56_1_0.clone()),
                            )));
                            let v151: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v146),
                                                string(">{v148()}</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v153: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v148()}</div> };
                            leptos::IntoView::into_view(v153)
                        }
                    }
                },
            ]);
            let v161: Vec<leptos::View> = v159.to_vec();
            leptos::Fragment::new(v161)
        }
        pub fn method349(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)>>,
            v3: leptos::ReadSignal<bool>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure382(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure519(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure520(v0_1: leptos::View, unitVar: ()) -> &'static str {
            let v5: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure523(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method460(v0_1: leptos::View) -> Func0<string> {
            Func0::new(move || Dice_ui::closure523((), ()))
        }
        pub fn closure522(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v7 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method204(
                Dice_ui::method460(v0_1),
            )));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v5), string(">{v7()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v7()}</span>
            };
            let v15: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v12)]);
            let v17: Vec<leptos::View> = v15.to_vec();
            leptos::Fragment::new(v17)
        }
        pub fn method459(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure522(v0_1.clone(), ())
            })
        }
        pub fn closure521(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex items-center gap-2\"");
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method459(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v6()}</div> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method205()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> };
            let v26: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v23)]);
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method458(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure521(v0_1.clone(), ())
            })
        }
        pub fn closure518(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure519((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    move || Dice_ui::closure520(v0_1.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v7(()) + \" \" + &v4(())");
            let v11: string = append(append(append(string(" "), v8), string("")), string(""));
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method458(v0_1.clone())));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v11), string(">{v13()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v7(()) + " " + &v4(())
                }>{v13()}</summary>
            };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method207(v1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> };
            let v33: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v30)]);
            let v35: Vec<leptos::View> = v33.to_vec();
            leptos::Fragment::new(v35)
        }
        pub fn method457(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure518(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure517(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure237((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method199(v0_1.clone())));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method457(v0_1, v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method456(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure517(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method463() -> string {
            string("Transactions")
        }
        pub fn closure525(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method463();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method462() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure525((), ()))
        }
        pub fn closure527(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure526(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v0_1();
            let v4: std::string::String = format!("{:#?}", v2);
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v9 = {
                let clo = Func0::new(move || Dice_ui::closure527((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v10: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v9(())");
            let v13: string = append(append(append(string(" "), v10), string("")), string(""));
            let v15 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method340(v6)));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v13), string(">{v15()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::html::Pre> = leptos::view! {
                <pre class=move || {
                    "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                        .to_owned() + &v9(())
                }>{v15()}</pre>
            };
            let v23: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v20)]);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method464(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure526(v0_1.clone(), ())
            })
        }
        pub fn closure524(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure362((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure334((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v9 = {
                let clo_2 = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v9(()) + \" \" + &v6(()) + \" \" + &v3(())");
            let v15: string = append(append(append(string(" "), v12), string("")), string(""));
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method341(
                Dice_ui::method462(),
                Dice_ui::method464(v0_1),
            )));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v15), string(">{v17()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: Array<leptos::HtmlElement<leptos::html::Dl>> = new_array(&[
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                            .to_owned() + &v9(()) + " " + &v6(()) + " " + &v3(())
                    }>{v17()}</dl>
                },
            ]);
            let v25: Vec<leptos::HtmlElement<leptos::html::Dl>> = v23.to_vec();
            let v28: Vec<leptos::View> = v25
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::html::Dl>| {
                        Dice_ui::closure353((), v)
                    })(x.clone())
                })
                .collect();
            let v30: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v28);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method461(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure524(v0_1.clone(), ())
            })
        }
        pub fn closure530(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure531(unitVar: (), unitVar_1: ()) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure534(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method469() -> Func0<string> {
            Func0::new(move || Dice_ui::closure534((), ()))
        }
        pub fn closure533(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method186(Dice_ui::method185(Dice_ui::method204(Dice_ui::method469())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method468() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure533((), ()))
        }
        pub fn closure532(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method468()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method205()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method467() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure532((), ()))
        }
        pub fn closure529(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure530((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure531((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method467()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method207(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method466(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure529(v0_1.clone(), ())
            })
        }
        pub fn closure528(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure237((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method199(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method466(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method465(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure528(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure535(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method470(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure535(v0_1.clone(), ())
            })
        }
        pub fn closure54(v0_1: leptos::ReadSignal<Dice_ui::US20>, unitVar: ()) -> leptos::Fragment {
            let v2: Dice_ui::US20 = leptos::SignalGet::get(&v0_1);
            let v585: Dice_ui::US24 = match &v2 {
                Dice_ui::US20::US20_1(v2_1_0) => {
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    {
                        let v7: Option<LrcPtr<Dice_ui::Heap2>> =
                            leptos::use_context::<std::rc::Rc<Heap2>>();
                        let v9: LrcPtr<Dice_ui::Heap2> = v7.unwrap();
                        leptos::logging::log!("{}", string("use_transactions.render (1)"));
                        {
                            let v14 = {
                                let clo = Func0::new({
                                    let v9 = v9.clone();
                                    move || Dice_ui::closure55(v9.clone(), ())
                                });
                                Func1::new({
                                    let clo = clo.clone();
                                    move |arg: ()| clo()
                                })
                            };
                            let v16: leptos::Memo<Vec<string>> =
                                leptos::create_memo(move |_| v14(()));
                            let v19 = {
                                let clo_1 = Func0::new({
                                    let v16 = v16.clone();
                                    move || Dice_ui::closure60(v16.clone(), ())
                                });
                                Func1::new({
                                    let clo_1 = clo_1.clone();
                                    move |arg_1: ()| clo_1()
                                })
                            };
                            let v21: leptos::Memo<
                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                            > = leptos::create_memo(move |_| v19(()));
                            let v24 = {
                                let clo_2 = Func0::new({
                                    let v16 = v16.clone();
                                    let v9 = v9.clone();
                                    move || Dice_ui::closure62(v9.clone(), v16.clone(), ())
                                });
                                Func1::new({
                                    let clo_2 = clo_2.clone();
                                    move |arg_2: ()| clo_2()
                                })
                            };
                            let v26: leptos::Memo<
                                Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)>,
                            > = leptos::create_memo(move |_| v24(()));
                            let v29 = {
                                let clo_3 = Func0::new({
                                    let v26 = v26.clone();
                                    move || Dice_ui::closure65(v26.clone(), ())
                                });
                                Func1::new({
                                    let clo_3 = clo_3.clone();
                                    move |arg_3: ()| clo_3()
                                })
                            };
                            let v31: leptos::Memo<
                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                            > = leptos::create_memo(move |_| v29(()));
                            let v34 = {
                                let clo_4 = Func0::new({
                                    let v26 = v26.clone();
                                    move || Dice_ui::closure67(v26.clone(), ())
                                });
                                Func1::new({
                                    let clo_4 = clo_4.clone();
                                    move |arg_4: ()| clo_4()
                                })
                            };
                            let v36: leptos::Memo<Array<string>> =
                                leptos::create_memo(move |_| v34(()));
                            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
                            leptos::logging::log!("{}", string("state_core.use_database (1)"));
                            {
                                let v41: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                                    Dice_ui::method9();
                                let v44 = {
                                    let clo_5 = Func0::new({
                                        let v41 = v41.clone();
                                        move || Dice_ui::closure70(v41.clone(), ())
                                    });
                                    Func1::new({
                                        let clo_5 = clo_5.clone();
                                        move |arg_5: ()| clo_5()
                                    })
                                };
                                let v46: leptos::Memo<Option<rexie::Rexie>> =
                                    leptos::create_memo(move |_| v44(()));
                                let v47: leptos::Resource<
                                    (
                                        Option<rexie::Rexie>,
                                        Array<(bool, string, bool, Dice_ui::US25, string)>,
                                    ),
                                    Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    >,
                                > = Dice_ui::method83(v31.clone(), v41.clone());
                                let v50 = {
                                    let clo_6 = Func0::new({
                                        let v47 = v47.clone();
                                        move || Dice_ui::closure75(v47.clone(), ())
                                    });
                                    Func1::new({
                                        let clo_6 = clo_6.clone();
                                        move |arg_6: ()| clo_6()
                                    })
                                };
                                let v52: leptos::Memo<
                                    Option<
                                        Result<
                                            Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                            std::string::String,
                                        >,
                                    >,
                                > = leptos::create_memo(move |_| v50(()));
                                let v53: leptos::Resource<
                                    (
                                        Array<(bool, string, bool, Dice_ui::US25, string)>,
                                        Option<
                                            Result<
                                                Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                std::string::String,
                                            >,
                                        >,
                                    ),
                                    Result<Array<Option<string>>, std::string::String>,
                                > = Dice_ui::method95(v31.clone(), v52.clone());
                                let v56: leptos::Action<
                                    LrcPtr<Dice_ui::Heap4>,
                                    Result<Vec<()>, std::string::String>,
                                > = leptos::create_action(move |value: &std::rc::Rc<Heap4>| {
                                    Func1::new({
                                        let v31 = v31.clone();
                                        let v46 = v46.clone();
                                        move |v: LrcPtr<Dice_ui::Heap4>| {
                                            Dice_ui::closure88(v31.clone(), v46.clone(), v)
                                        }
                                    })(value.clone())
                                });
                                let v59 = {
                                    let clo_7 = Func0::new({
                                        let v31 = v31.clone();
                                        let v52 = v52.clone();
                                        let v53 = v53.clone();
                                        let v56 = v56.clone();
                                        move || {
                                            Dice_ui::closure91(
                                                v31.clone(),
                                                v52.clone(),
                                                v53.clone(),
                                                v56.clone(),
                                                (),
                                            )
                                        }
                                    });
                                    Func1::new({
                                        let clo_7 = clo_7.clone();
                                        move |arg_7: ()| clo_7()
                                    })
                                };
                                let v61: leptos::Memo<
                                    Array<
                                        Result<
                                            Option<crate::model::near::nearblocks::Root>,
                                            std::string::String,
                                        >,
                                    >,
                                > = leptos::create_memo(move |_| v59(()));
                                let v64 = {
                                    let clo_8 = Func0::new({
                                        let v41 = v41.clone();
                                        let v47 = v47.clone();
                                        let v61 = v61.clone();
                                        move || {
                                            Dice_ui::closure102(
                                                v41.clone(),
                                                v47.clone(),
                                                v61.clone(),
                                                (),
                                            )
                                        }
                                    });
                                    Func1::new({
                                        let clo_8 = clo_8.clone();
                                        move |arg_8: ()| clo_8()
                                    })
                                };
                                let v66: leptos::Memo<
                                    Array<
                                        Result<
                                            Option<
                                                Array<(
                                                    Array<(
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                    )>,
                                                    f64,
                                                    u32,
                                                    std::string::String,
                                                    std::string::String,
                                                    Array<std::string::String>,
                                                    bool,
                                                    f64,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                            >,
                                            std::string::String,
                                        >,
                                    >,
                                > = leptos::create_memo(move |_| v64(()));
                                let v68: string = append(
                                    append(
                                        string(
                                            "use_transactions.render (7) / root func0 / result: ",
                                        ),
                                        sprintf!("{:?}", v66.clone()),
                                    ),
                                    string(""),
                                );
                                let v73: string = if length(v68.clone()) <= 200_i32 {
                                    v68.clone()
                                } else {
                                    append(getSlice(v68, Some(0_i32), Some(199_i32)), string("..."))
                                };
                                leptos::logging::log!("{}", v73);
                                {
                                    let v77 = {
                                        let clo_9 = Func0::new({
                                            let v36 = v36.clone();
                                            let v66 = v66.clone();
                                            move || {
                                                Dice_ui::closure111(v36.clone(), v66.clone(), ())
                                            }
                                        });
                                        Func1::new({
                                            let clo_9 = clo_9.clone();
                                            move |arg_9: ()| clo_9()
                                        })
                                    };
                                    let v79: leptos::Memo<
                                        Result<
                                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                            std::string::String,
                                        >,
                                    > = leptos::create_memo(move |_| v77(()));
                                    let v82 = {
                                        let clo_10 = Func0::new({
                                            let v79 = v79.clone();
                                            move || Dice_ui::closure128(v79.clone(), ())
                                        });
                                        Func1::new({
                                            let clo_10 = clo_10.clone();
                                            move |arg_10: ()| clo_10()
                                        })
                                    };
                                    let v84: leptos::Memo<
                                        Result<
                                            Option<
                                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                                            >,
                                            std::string::String,
                                        >,
                                    > = leptos::create_memo(move |_| v82(()));
                                    let v87 = {
                                        let clo_11 = Func0::new({
                                            let v84 = v84.clone();
                                            move || Dice_ui::closure135(v84.clone(), ())
                                        });
                                        Func1::new({
                                            let clo_11 = clo_11.clone();
                                            move |arg_11: ()| clo_11()
                                        })
                                    };
                                    let v89: leptos::Memo<
                                        Array<(bool, string, bool, Dice_ui::US25, string)>,
                                    > = leptos::create_memo(move |_| v87(()));
                                    leptos::logging::log!(
                                        "{}",
                                        string("state_core.use_requests (1)")
                                    );
                                    leptos::logging::log!(
                                        "{}",
                                        string("state_core.use_database (1)")
                                    );
                                    {
                                        let v94: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                                            Dice_ui::method9();
                                        let v97 = {
                                            let clo_12 = Func0::new({
                                                let v94 = v94.clone();
                                                move || Dice_ui::closure70(v94.clone(), ())
                                            });
                                            Func1::new({
                                                let clo_12 = clo_12.clone();
                                                move |arg_12: ()| clo_12()
                                            })
                                        };
                                        let v99: leptos::Memo<Option<rexie::Rexie>> =
                                            leptos::create_memo(move |_| v97(()));
                                        let v100: leptos::Resource<
                                            (
                                                Option<rexie::Rexie>,
                                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                                            ),
                                            Result<
                                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                std::string::String,
                                            >,
                                        > = Dice_ui::method83(v89.clone(), v94.clone());
                                        let v103 = {
                                            let clo_13 = Func0::new({
                                                let v100 = v100.clone();
                                                move || Dice_ui::closure75(v100.clone(), ())
                                            });
                                            Func1::new({
                                                let clo_13 = clo_13.clone();
                                                move |arg_13: ()| clo_13()
                                            })
                                        };
                                        let v105: leptos::Memo<
                                            Option<
                                                Result<
                                                    Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        > = leptos::create_memo(move |_| v103(()));
                                        let v106: leptos::Resource<
                                            (
                                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                                                Option<
                                                    Result<
                                                        Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                        std::string::String,
                                                    >,
                                                >,
                                            ),
                                            Result<Array<Option<string>>, std::string::String>,
                                        > = Dice_ui::method95(v89.clone(), v105.clone());
                                        let v109: leptos::Action<
                                            LrcPtr<Dice_ui::Heap4>,
                                            Result<Vec<()>, std::string::String>,
                                        > = leptos::create_action(
                                            move |value: &std::rc::Rc<Heap4>| {
                                                Func1::new({
                                                    let v89 = v89.clone();
                                                    let v99 = v99.clone();
                                                    move |v_1: LrcPtr<Dice_ui::Heap4>| {
                                                        Dice_ui::closure88(
                                                            v89.clone(),
                                                            v99.clone(),
                                                            v_1,
                                                        )
                                                    }
                                                })(
                                                    value.clone()
                                                )
                                            },
                                        );
                                        let v112 = {
                                            let clo_14 = Func0::new({
                                                let v105 = v105.clone();
                                                let v106 = v106.clone();
                                                let v109 = v109.clone();
                                                let v89 = v89.clone();
                                                move || {
                                                    Dice_ui::closure139(
                                                        v89.clone(),
                                                        v105.clone(),
                                                        v106.clone(),
                                                        v109.clone(),
                                                        (),
                                                    )
                                                }
                                            });
                                            Func1::new({
                                                let clo_14 = clo_14.clone();
                                                move |arg_14: ()| clo_14()
                                            })
                                        };
                                        let v114: leptos::Memo<
                                            Array<
                                                Result<
                                                    Option<crate::model::near::rpc::RpcResponse>,
                                                    std::string::String,
                                                >,
                                            >,
                                        > = leptos::create_memo(move |_| v112(()));
                                        let v117 = {
                                            let clo_15 = Func0::new({
                                                let v100 = v100.clone();
                                                let v114 = v114.clone();
                                                let v94 = v94.clone();
                                                move || {
                                                    Dice_ui::closure143(
                                                        v94.clone(),
                                                        v100.clone(),
                                                        v114.clone(),
                                                        (),
                                                    )
                                                }
                                            });
                                            Func1::new({
                                                let clo_15 = clo_15.clone();
                                                move |arg_15: ()| clo_15()
                                            })
                                        };
                                        let v119: leptos::Memo<
                                            Array<
                                                Result<
                                                    Option<(
                                                        Option<(
                                                            Option<(
                                                                Option<std::string::String>,
                                                                Option<std::string::String>,
                                                            )>,
                                                            std::string::String,
                                                            i32,
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        Option<std::string::String>,
                                                        std::string::String,
                                                        Option<(
                                                            Array<(
                                                                std::string::String,
                                                                Array<
                                                                    std::collections::HashMap<
                                                                        std::string::String,
                                                                        (
                                                                            Option<
                                                                                std::string::String,
                                                                            >,
                                                                            std::string::String,
                                                                            Option<f64>,
                                                                            Option<
                                                                                std::string::String,
                                                                            >,
                                                                        ),
                                                                    >,
                                                                >,
                                                                std::string::String,
                                                                Array<std::string::String>,
                                                                Array<std::string::String>,
                                                                std::string::String,
                                                                std::string::String,
                                                                std::string::String,
                                                                std::string::String,
                                                            )>,
                                                            Array<(
                                                                std::string::String,
                                                                std::string::String,
                                                                std::string::String,
                                                                u64,
                                                                Array<std::string::String>,
                                                                Array<(
                                                                    std::string::String,
                                                                    std::string::String,
                                                                    std::string::String,
                                                                )>,
                                                                u8,
                                                                Array<std::string::String>,
                                                                std::collections::HashMap<
                                                                    std::string::String,
                                                                    std::string::String,
                                                                >,
                                                                Option<std::string::String>,
                                                                Option<
                                                                    Array<(
                                                                        std::string::String,
                                                                        std::string::String,
                                                                    )>,
                                                                >,
                                                            )>,
                                                        )>,
                                                    )>,
                                                    std::string::String,
                                                >,
                                            >,
                                        > = leptos::create_memo(move |_| v117(()));
                                        let v121: string =
                                                append(append(string("use_transactions.render (12) / rpc_response func0 / result: "),
                                                              sprintf!("{:?}",
                                                                       v119.clone())),
                                                       string(""));
                                        let v126: string = if length(v121.clone()) <= 200_i32 {
                                            v121.clone()
                                        } else {
                                            append(
                                                getSlice(v121, Some(0_i32), Some(199_i32)),
                                                string("..."),
                                            )
                                        };
                                        leptos::logging::log!("{}", v126);
                                        {
                                            let v130: leptos::Action<
                                                LrcPtr<Dice_ui::Heap6>,
                                                Result<Dice_ui::US60, std::string::String>,
                                            > = leptos::create_action(
                                                move |value: &std::rc::Rc<Heap6>| {
                                                    Func1::new(
                                                        move |v_2: LrcPtr<Dice_ui::Heap6>| {
                                                            Dice_ui::closure157((), v_2)
                                                        },
                                                    )(
                                                        value.clone()
                                                    )
                                                },
                                            );
                                            let v133 = {
                                                let clo_16 = Func0::new({
                                                    let v130 = v130.clone();
                                                    move || Dice_ui::closure162(v130.clone(), ())
                                                });
                                                Func1::new({
                                                    let clo_16 = clo_16.clone();
                                                    move |arg_16: ()| clo_16()
                                                })
                                            };
                                            let v135: leptos::Memo<
                                                Result<
                                                    Option<(
                                                        Option<(
                                                            Option<(
                                                                Option<std::string::String>,
                                                                Option<std::string::String>,
                                                            )>,
                                                            std::string::String,
                                                            i32,
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        Option<std::string::String>,
                                                        std::string::String,
                                                        Option<(
                                                            Array<(
                                                                std::string::String,
                                                                Array<
                                                                    std::collections::HashMap<
                                                                        std::string::String,
                                                                        (
                                                                            Option<
                                                                                std::string::String,
                                                                            >,
                                                                            std::string::String,
                                                                            Option<f64>,
                                                                            Option<
                                                                                std::string::String,
                                                                            >,
                                                                        ),
                                                                    >,
                                                                >,
                                                                std::string::String,
                                                                Array<std::string::String>,
                                                                Array<std::string::String>,
                                                                std::string::String,
                                                                std::string::String,
                                                                std::string::String,
                                                                std::string::String,
                                                            )>,
                                                            Array<(
                                                                std::string::String,
                                                                std::string::String,
                                                                std::string::String,
                                                                u64,
                                                                Array<std::string::String>,
                                                                Array<(
                                                                    std::string::String,
                                                                    std::string::String,
                                                                    std::string::String,
                                                                )>,
                                                                u8,
                                                                Array<std::string::String>,
                                                                std::collections::HashMap<
                                                                    std::string::String,
                                                                    std::string::String,
                                                                >,
                                                                Option<std::string::String>,
                                                                Option<
                                                                    Array<(
                                                                        std::string::String,
                                                                        std::string::String,
                                                                    )>,
                                                                >,
                                                            )>,
                                                        )>,
                                                    )>,
                                                    std::string::String,
                                                >,
                                            > = leptos::create_memo(move |_| v133(()));
                                            let v138 = {
                                                let clo_17 = Func0::new({
                                                    let v135 = v135.clone();
                                                    move || Dice_ui::closure167(v135.clone(), ())
                                                });
                                                Func1::new({
                                                    let clo_17 = clo_17.clone();
                                                    move |arg_17: ()| clo_17()
                                                })
                                            };
                                            let v140: leptos::Memo<Option<string>> =
                                                leptos::create_memo(move |_| v138(()));
                                            let v143 = {
                                                let clo_18 = Func0::new({
                                                    let v9 = v9.clone();
                                                    move || Dice_ui::closure172(v9.clone(), ())
                                                });
                                                Func1::new({
                                                    let clo_18 = clo_18.clone();
                                                    move |arg_18: ()| clo_18()
                                                })
                                            };
                                            let v145: leptos::Memo<Dice_ui::US34> =
                                                leptos::create_memo(move |_| v143(()));
                                            let v148 = {
                                                let clo_19 = Func0::new({
                                                    let v9 = v9.clone();
                                                    move || Dice_ui::closure173(v9.clone(), ())
                                                });
                                                Func1::new({
                                                    let clo_19 = clo_19.clone();
                                                    move |arg_19: ()| clo_19()
                                                })
                                            };
                                            let v150: leptos::Memo<
                                                Vec<
                                                    LrcPtr<(
                                                        i32,
                                                        (
                                                            leptos::ReadSignal<std::string::String>,
                                                            leptos::WriteSignal<
                                                                std::string::String,
                                                            >,
                                                        ),
                                                    )>,
                                                >,
                                            > = leptos::create_memo(move |_| v148(()));
                                            let v153 = {
                                                let clo_20 = Func0::new({
                                                    let v150 = v150.clone();
                                                    move || Dice_ui::closure176(v150.clone(), ())
                                                });
                                                Func1::new({
                                                    let clo_20 = clo_20.clone();
                                                    move |arg_20: ()| clo_20()
                                                })
                                            };
                                            let v155: leptos::Memo<
                                                Vec<(i32, leptos::ReadSignal<std::string::String>)>,
                                            > = leptos::create_memo(move |_| v153(()));
                                            let v157: Array<leptos::View> =
                                                Dice_ui::method173(new_empty::<leptos::View>());
                                            let v165: string = string(
                                                " class=\"flex flex-col [position:relative]\"",
                                            );
                                            let v167 = Dice_ui::method186(Dice_ui::method185(
                                                Dice_ui::method224(
                                                    leptos::CollectView::collect_view(
                                                        v157.to_vec(),
                                                    ),
                                                    Dice_ui::method197(Dice_ui::method174(
                                                        v9.clone(),
                                                        v130.clone(),
                                                        v140,
                                                        v145,
                                                        v155,
                                                    )),
                                                ),
                                            ));
                                            let v170: string = append(
                                                append(
                                                    string("leptos::view! { "),
                                                    append(
                                                        append(
                                                            append(
                                                                append(string("<div "), v165),
                                                                string(">{v167()}</"),
                                                            ),
                                                            string("div"),
                                                        ),
                                                        string(">"),
                                                    ),
                                                ),
                                                string(" }"),
                                            );
                                            let v172: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v167()}</div> };
                                            let v174: leptos::View =
                                                leptos::IntoView::into_view(v172);
                                            let v176: Array<leptos::View> =
                                                Dice_ui::method173(new_empty::<leptos::View>());
                                            let v183: string = string(
                                                " class=\"flex flex-col [position:relative]\"",
                                            );
                                            let v185 = Dice_ui::method186(Dice_ui::method185(
                                                Dice_ui::method268(
                                                    leptos::CollectView::collect_view(
                                                        v176.to_vec(),
                                                    ),
                                                    Dice_ui::method197(Dice_ui::method229(
                                                        v119,
                                                        v79.clone(),
                                                        v26.clone(),
                                                    )),
                                                ),
                                            ));
                                            let v187: string = append(
                                                append(
                                                    string("leptos::view! { "),
                                                    append(
                                                        append(
                                                            append(
                                                                append(string("<div "), v183),
                                                                string(">{v185()}</"),
                                                            ),
                                                            string("div"),
                                                        ),
                                                        string(">"),
                                                    ),
                                                ),
                                                string(" }"),
                                            );
                                            let v189: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v185()}</div> };
                                            let v192: Array<leptos::View> = new_array(&[
                                                v174,
                                                leptos::IntoView::into_view(v189),
                                            ]);
                                            let v194: Vec<leptos::View> = v192.to_vec();
                                            Dice_ui::US24::US24_0(leptos::Fragment::new(v194))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Dice_ui::US20::US20_2 => {
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    {
                        let v201: Option<LrcPtr<Dice_ui::Heap2>> =
                            leptos::use_context::<std::rc::Rc<Heap2>>();
                        let v203: LrcPtr<Dice_ui::Heap2> = v201.unwrap();
                        let v204: string = Dice_ui::method273();
                        let v206: &str = fable_library_rust::String_::LrcStr::as_str(&v204);
                        let v208: std::string::String = String::from(v206);
                        let v210: leptos::leptos_dom::Text = leptos::html::text(v208);
                        let v213: Array<leptos::View> =
                            new_array(&[leptos::IntoView::into_view(v210)]);
                        let v215: Vec<leptos::View> = v213.to_vec();
                        Dice_ui::US24::US24_0(leptos::Fragment::new(v215))
                    }
                }
                Dice_ui::US20::US20_4 => {
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    {
                        let v446: Option<LrcPtr<Dice_ui::Heap2>> =
                            leptos::use_context::<std::rc::Rc<Heap2>>();
                        let v448: LrcPtr<Dice_ui::Heap2> = v446.unwrap();
                        let v451 = {
                            let clo_21 = Func0::new({
                                let v448 = v448.clone();
                                move || Dice_ui::closure279(v448.clone(), ())
                            });
                            Func1::new({
                                let clo_21 = clo_21.clone();
                                move |arg_21: ()| clo_21()
                            })
                        };
                        let v453: leptos::Memo<
                            Vec<
                                LrcPtr<(
                                    i32,
                                    (
                                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                                    ),
                                )>,
                            >,
                        > = leptos::create_memo(move |_| v451(()));
                        let patternInput: (leptos::ReadSignal<i32>, leptos::WriteSignal<i32>) =
                            leptos::create_signal(0_i32);
                        let v456: leptos::WriteSignal<i32> = patternInput.1.clone();
                        let v459 = {
                            let clo_22 = Func0::new({
                                let patternInput = patternInput.clone();
                                let v453 = v453.clone();
                                move || {
                                    Dice_ui::closure282(v453.clone(), patternInput.0.clone(), ())
                                }
                            });
                            Func1::new({
                                let clo_22 = clo_22.clone();
                                move |arg_22: ()| clo_22()
                            })
                        };
                        let v461: leptos::Memo<
                            Vec<(
                                i32,
                                i32,
                                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            )>,
                        > = leptos::create_memo(move |_| v459(()));
                        let v464 = {
                            let clo_23 = Func0::new({
                                let v461 = v461.clone();
                                move || Dice_ui::closure285(v461.clone(), ())
                            });
                            Func1::new({
                                let clo_23 = clo_23.clone();
                                move |arg_23: ()| clo_23()
                            })
                        };
                        let v466: leptos::Memo<i32> = leptos::create_memo(move |_| v464(()));
                        let v467 = Func0::new({
                            let v448 = v448.clone();
                            let v453 = v453.clone();
                            let v456 = v456.clone();
                            move || {
                                Dice_ui::closure286(v448.clone(), v453.clone(), v456.clone(), ())
                            }
                        });
                        {
                            let v471 = {
                                let clo_24 = Func0::new(move || Dice_ui::closure291((), ()));
                                Func1::new({
                                    let clo_24 = clo_24.clone();
                                    move |arg_24: ()| clo_24()
                                })
                            };
                            let v485: string =
                                    string(" class=move || \" \".to_owned() + &v471(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v487 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method278()));
                            let v490: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<svg "), v485),
                                                string(">{v487()}</"),
                                            ),
                                            string("svg"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v492: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                                <svg
                                    class=move || " ".to_owned() + &v471(())
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    {v487()}
                                </svg>
                            };
                            let v497 = {
                                let clo_25 = Func0::new(move || Dice_ui::closure293((), ()));
                                Func1::new({
                                    let clo_25 = clo_25.clone();
                                    move |arg_25: ()| clo_25()
                                })
                            };
                            let v498: string =
                                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v497(())");
                            let v502: string = append(
                                append(
                                    string(" aria-label=\"Add\""),
                                    append(
                                        append(
                                            string(" on:click=move |_| v467()"),
                                            append(
                                                append(append(string(" "), v498), string("")),
                                                string(""),
                                            ),
                                        ),
                                        string(""),
                                    ),
                                ),
                                string(""),
                            );
                            let v504 =
                                Dice_ui::method186(Dice_ui::method185(Dice_ui::method280(v492)));
                            let v507: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<button "), v502),
                                                string(">{v504()}</"),
                                            ),
                                            string("button"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v509: leptos::HtmlElement<leptos::html::Button> = leptos::view! {
                                <button
                                    aria-label="Add"
                                    on:click=move |_| v467()
                                    class=move || {
                                        "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] "
                                            .to_owned() + &v497(())
                                    }
                                >
                                    {v504()}
                                </button>
                            };
                            let v511: leptos::View = leptos::IntoView::into_view(v509);
                            let v513: Array<leptos::View> =
                                Dice_ui::method173(new_empty::<leptos::View>());
                            let v515: leptos::View =
                                leptos::CollectView::collect_view(v513.to_vec());
                            let v520: string =
                                string(" class=\"flex flex-col [position:relative]\"");
                            let v522 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method306(
                                v511,
                                Dice_ui::method197(Dice_ui::method281(
                                    v448.clone(),
                                    v461.clone(),
                                    v466,
                                    v453.clone(),
                                    v456.clone(),
                                )),
                            )));
                            let v525: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v520),
                                                string(">{v522()}</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v527: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v522()}</div> };
                            let v529: leptos::View = leptos::IntoView::into_view(v527);
                            let v531: Array<leptos::View> =
                                Dice_ui::method173(new_empty::<leptos::View>());
                            let v538: string =
                                string(" class=\"flex flex-col [position:relative]\"");
                            let v540 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method330(
                                leptos::CollectView::collect_view(v531.to_vec()),
                                Dice_ui::method197(Dice_ui::method311(v448.clone())),
                            )));
                            let v542: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v538),
                                                string(">{v540()}</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v544: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v540()}</div> };
                            let v546: leptos::View = leptos::IntoView::into_view(v544);
                            let v549: LrcPtr<Dice_ui::Heap1> =
                                leptos::SignalGetUntracked::get_untracked(&v448.l0.clone());
                            let v575: Array<leptos::View> = new_array(&[
                                v529,
                                v546,
                                if leptos::SignalGet::get(&v549.l2.clone()) {
                                    let v554: Array<leptos::View> =
                                        Dice_ui::method173(new_empty::<leptos::View>());
                                    let v561: string =
                                        string(" class=\"flex flex-col [position:relative]\"");
                                    let v563 =
                                        Dice_ui::method186(Dice_ui::method185(Dice_ui::method342(
                                            leptos::CollectView::collect_view(v554.to_vec()),
                                            Dice_ui::method197(Dice_ui::method335()),
                                        )));
                                    let v565: string = append(
                                        append(
                                            string("leptos::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<div "), v561),
                                                        string(">{v563()}</"),
                                                    ),
                                                    string("div"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v567: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v563()}</div> };
                                    leptos::IntoView::into_view(v567)
                                } else {
                                    let v571: Array<leptos::View> =
                                        Dice_ui::method173(new_empty::<leptos::View>());
                                    leptos::CollectView::collect_view(v571.to_vec())
                                },
                            ]);
                            let v577: Vec<leptos::View> = v575.to_vec();
                            Dice_ui::US24::US24_0(leptos::Fragment::new(v577))
                        }
                    }
                }
                Dice_ui::US20::US20_3 => {
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    {
                        let v222: Option<LrcPtr<Dice_ui::Heap2>> =
                            leptos::use_context::<std::rc::Rc<Heap2>>();
                        let v224: LrcPtr<Dice_ui::Heap2> = v222.unwrap();
                        leptos::logging::log!("{}", string("use_transactions.render (1)"));
                        {
                            let v229 = {
                                let clo_26 = Func0::new({
                                    let v224 = v224.clone();
                                    move || Dice_ui::closure55(v224.clone(), ())
                                });
                                Func1::new({
                                    let clo_26 = clo_26.clone();
                                    move |arg_26: ()| clo_26()
                                })
                            };
                            let v231: leptos::Memo<Vec<string>> =
                                leptos::create_memo(move |_| v229(()));
                            let v234 = {
                                let clo_27 = Func0::new({
                                    let v231 = v231.clone();
                                    move || Dice_ui::closure60(v231.clone(), ())
                                });
                                Func1::new({
                                    let clo_27 = clo_27.clone();
                                    move |arg_27: ()| clo_27()
                                })
                            };
                            let v236: leptos::Memo<
                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                            > = leptos::create_memo(move |_| v234(()));
                            let v239 = {
                                let clo_28 = Func0::new({
                                    let v224 = v224.clone();
                                    let v231 = v231.clone();
                                    move || Dice_ui::closure62(v224.clone(), v231.clone(), ())
                                });
                                Func1::new({
                                    let clo_28 = clo_28.clone();
                                    move |arg_28: ()| clo_28()
                                })
                            };
                            let v241: leptos::Memo<
                                Vec<(string, Vec<(bool, string, bool, Dice_ui::US25, string)>)>,
                            > = leptos::create_memo(move |_| v239(()));
                            let v244 = {
                                let clo_29 = Func0::new({
                                    let v241 = v241.clone();
                                    move || Dice_ui::closure65(v241.clone(), ())
                                });
                                Func1::new({
                                    let clo_29 = clo_29.clone();
                                    move |arg_29: ()| clo_29()
                                })
                            };
                            let v246: leptos::Memo<
                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                            > = leptos::create_memo(move |_| v244(()));
                            let v249 = {
                                let clo_30 = Func0::new({
                                    let v241 = v241.clone();
                                    move || Dice_ui::closure67(v241.clone(), ())
                                });
                                Func1::new({
                                    let clo_30 = clo_30.clone();
                                    move |arg_30: ()| clo_30()
                                })
                            };
                            let v251: leptos::Memo<Array<string>> =
                                leptos::create_memo(move |_| v249(()));
                            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
                            leptos::logging::log!("{}", string("state_core.use_database (1)"));
                            {
                                let v256: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                                    Dice_ui::method9();
                                let v259 = {
                                    let clo_31 = Func0::new({
                                        let v256 = v256.clone();
                                        move || Dice_ui::closure70(v256.clone(), ())
                                    });
                                    Func1::new({
                                        let clo_31 = clo_31.clone();
                                        move |arg_31: ()| clo_31()
                                    })
                                };
                                let v261: leptos::Memo<Option<rexie::Rexie>> =
                                    leptos::create_memo(move |_| v259(()));
                                let v262: leptos::Resource<
                                    (
                                        Option<rexie::Rexie>,
                                        Array<(bool, string, bool, Dice_ui::US25, string)>,
                                    ),
                                    Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    >,
                                > = Dice_ui::method83(v246.clone(), v256.clone());
                                let v265 = {
                                    let clo_32 = Func0::new({
                                        let v262 = v262.clone();
                                        move || Dice_ui::closure75(v262.clone(), ())
                                    });
                                    Func1::new({
                                        let clo_32 = clo_32.clone();
                                        move |arg_32: ()| clo_32()
                                    })
                                };
                                let v267: leptos::Memo<
                                    Option<
                                        Result<
                                            Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                            std::string::String,
                                        >,
                                    >,
                                > = leptos::create_memo(move |_| v265(()));
                                let v268: leptos::Resource<
                                    (
                                        Array<(bool, string, bool, Dice_ui::US25, string)>,
                                        Option<
                                            Result<
                                                Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                std::string::String,
                                            >,
                                        >,
                                    ),
                                    Result<Array<Option<string>>, std::string::String>,
                                > = Dice_ui::method95(v246.clone(), v267.clone());
                                let v271: leptos::Action<
                                    LrcPtr<Dice_ui::Heap4>,
                                    Result<Vec<()>, std::string::String>,
                                > = leptos::create_action(move |value: &std::rc::Rc<Heap4>| {
                                    Func1::new({
                                        let v246 = v246.clone();
                                        let v261 = v261.clone();
                                        move |v_3: LrcPtr<Dice_ui::Heap4>| {
                                            Dice_ui::closure88(v246.clone(), v261.clone(), v_3)
                                        }
                                    })(value.clone())
                                });
                                let v274 = {
                                    let clo_33 = Func0::new({
                                        let v246 = v246.clone();
                                        let v267 = v267.clone();
                                        let v268 = v268.clone();
                                        let v271 = v271.clone();
                                        move || {
                                            Dice_ui::closure91(
                                                v246.clone(),
                                                v267.clone(),
                                                v268.clone(),
                                                v271.clone(),
                                                (),
                                            )
                                        }
                                    });
                                    Func1::new({
                                        let clo_33 = clo_33.clone();
                                        move |arg_33: ()| clo_33()
                                    })
                                };
                                let v276: leptos::Memo<
                                    Array<
                                        Result<
                                            Option<crate::model::near::nearblocks::Root>,
                                            std::string::String,
                                        >,
                                    >,
                                > = leptos::create_memo(move |_| v274(()));
                                let v279 = {
                                    let clo_34 = Func0::new({
                                        let v256 = v256.clone();
                                        let v262 = v262.clone();
                                        let v276 = v276.clone();
                                        move || {
                                            Dice_ui::closure102(
                                                v256.clone(),
                                                v262.clone(),
                                                v276.clone(),
                                                (),
                                            )
                                        }
                                    });
                                    Func1::new({
                                        let clo_34 = clo_34.clone();
                                        move |arg_34: ()| clo_34()
                                    })
                                };
                                let v281: leptos::Memo<
                                    Array<
                                        Result<
                                            Option<
                                                Array<(
                                                    Array<(
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                    )>,
                                                    f64,
                                                    u32,
                                                    std::string::String,
                                                    std::string::String,
                                                    Array<std::string::String>,
                                                    bool,
                                                    f64,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                            >,
                                            std::string::String,
                                        >,
                                    >,
                                > = leptos::create_memo(move |_| v279(()));
                                let v283: string = append(
                                    append(
                                        string(
                                            "use_transactions.render (7) / root func0 / result: ",
                                        ),
                                        sprintf!("{:?}", v281.clone()),
                                    ),
                                    string(""),
                                );
                                let v288: string = if length(v283.clone()) <= 200_i32 {
                                    v283.clone()
                                } else {
                                    append(
                                        getSlice(v283, Some(0_i32), Some(199_i32)),
                                        string("..."),
                                    )
                                };
                                leptos::logging::log!("{}", v288);
                                {
                                    let v292 = {
                                        let clo_35 = Func0::new({
                                            let v251 = v251.clone();
                                            let v281 = v281.clone();
                                            move || {
                                                Dice_ui::closure111(v251.clone(), v281.clone(), ())
                                            }
                                        });
                                        Func1::new({
                                            let clo_35 = clo_35.clone();
                                            move |arg_35: ()| clo_35()
                                        })
                                    };
                                    let v294: leptos::Memo<
                                        Result<
                                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                            std::string::String,
                                        >,
                                    > = leptos::create_memo(move |_| v292(()));
                                    let v297 = {
                                        let clo_36 = Func0::new({
                                            let v294 = v294.clone();
                                            move || Dice_ui::closure128(v294.clone(), ())
                                        });
                                        Func1::new({
                                            let clo_36 = clo_36.clone();
                                            move |arg_36: ()| clo_36()
                                        })
                                    };
                                    let v299: leptos::Memo<
                                        Result<
                                            Option<
                                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                                            >,
                                            std::string::String,
                                        >,
                                    > = leptos::create_memo(move |_| v297(()));
                                    let v302 = {
                                        let clo_37 = Func0::new({
                                            let v299 = v299.clone();
                                            move || Dice_ui::closure135(v299.clone(), ())
                                        });
                                        Func1::new({
                                            let clo_37 = clo_37.clone();
                                            move |arg_37: ()| clo_37()
                                        })
                                    };
                                    let v304: leptos::Memo<
                                        Array<(bool, string, bool, Dice_ui::US25, string)>,
                                    > = leptos::create_memo(move |_| v302(()));
                                    leptos::logging::log!(
                                        "{}",
                                        string("state_core.use_requests (1)")
                                    );
                                    leptos::logging::log!(
                                        "{}",
                                        string("state_core.use_database (1)")
                                    );
                                    {
                                        let v309: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                                            Dice_ui::method9();
                                        let v312 = {
                                            let clo_38 = Func0::new({
                                                let v309 = v309.clone();
                                                move || Dice_ui::closure70(v309.clone(), ())
                                            });
                                            Func1::new({
                                                let clo_38 = clo_38.clone();
                                                move |arg_38: ()| clo_38()
                                            })
                                        };
                                        let v314: leptos::Memo<Option<rexie::Rexie>> =
                                            leptos::create_memo(move |_| v312(()));
                                        let v315: leptos::Resource<
                                            (
                                                Option<rexie::Rexie>,
                                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                                            ),
                                            Result<
                                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                std::string::String,
                                            >,
                                        > = Dice_ui::method83(v304.clone(), v309.clone());
                                        let v318 = {
                                            let clo_39 = Func0::new({
                                                let v315 = v315.clone();
                                                move || Dice_ui::closure75(v315.clone(), ())
                                            });
                                            Func1::new({
                                                let clo_39 = clo_39.clone();
                                                move |arg_39: ()| clo_39()
                                            })
                                        };
                                        let v320: leptos::Memo<
                                            Option<
                                                Result<
                                                    Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        > = leptos::create_memo(move |_| v318(()));
                                        let v321: leptos::Resource<
                                            (
                                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                                                Option<
                                                    Result<
                                                        Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                        std::string::String,
                                                    >,
                                                >,
                                            ),
                                            Result<Array<Option<string>>, std::string::String>,
                                        > = Dice_ui::method95(v304.clone(), v320.clone());
                                        let v324: leptos::Action<
                                            LrcPtr<Dice_ui::Heap4>,
                                            Result<Vec<()>, std::string::String>,
                                        > = leptos::create_action(
                                            move |value: &std::rc::Rc<Heap4>| {
                                                Func1::new({
                                                    let v304 = v304.clone();
                                                    let v314 = v314.clone();
                                                    move |v_4: LrcPtr<Dice_ui::Heap4>| {
                                                        Dice_ui::closure88(
                                                            v304.clone(),
                                                            v314.clone(),
                                                            v_4,
                                                        )
                                                    }
                                                })(
                                                    value.clone()
                                                )
                                            },
                                        );
                                        let v327 = {
                                            let clo_40 = Func0::new({
                                                let v304 = v304.clone();
                                                let v320 = v320.clone();
                                                let v321 = v321.clone();
                                                let v324 = v324.clone();
                                                move || {
                                                    Dice_ui::closure139(
                                                        v304.clone(),
                                                        v320.clone(),
                                                        v321.clone(),
                                                        v324.clone(),
                                                        (),
                                                    )
                                                }
                                            });
                                            Func1::new({
                                                let clo_40 = clo_40.clone();
                                                move |arg_40: ()| clo_40()
                                            })
                                        };
                                        let v329: leptos::Memo<
                                            Array<
                                                Result<
                                                    Option<crate::model::near::rpc::RpcResponse>,
                                                    std::string::String,
                                                >,
                                            >,
                                        > = leptos::create_memo(move |_| v327(()));
                                        let v332 = {
                                            let clo_41 = Func0::new({
                                                let v309 = v309.clone();
                                                let v315 = v315.clone();
                                                let v329 = v329.clone();
                                                move || {
                                                    Dice_ui::closure143(
                                                        v309.clone(),
                                                        v315.clone(),
                                                        v329.clone(),
                                                        (),
                                                    )
                                                }
                                            });
                                            Func1::new({
                                                let clo_41 = clo_41.clone();
                                                move |arg_41: ()| clo_41()
                                            })
                                        };
                                        let v336: string =
                                                append(append(string("use_transactions.render (12) / rpc_response func0 / result: "),
                                                              sprintf!("{:?}",
                                                                       leptos::create_memo(move |_| { v332(()) }))),
                                                       string(""));
                                        let v341: string = if length(v336.clone()) <= 200_i32 {
                                            v336.clone()
                                        } else {
                                            append(
                                                getSlice(v336, Some(0_i32), Some(199_i32)),
                                                string("..."),
                                            )
                                        };
                                        leptos::logging::log!("{}", v341);
                                        {
                                            let patternInput_1: (
                                                leptos::ReadSignal<bool>,
                                                leptos::WriteSignal<bool>,
                                            ) = leptos::create_signal(false);
                                            let v344: leptos::ReadSignal<bool> =
                                                patternInput_1.0.clone();
                                            let v346 = Func0::new({
                                                let patternInput_1 = patternInput_1.clone();
                                                move || {
                                                    Dice_ui::closure378(
                                                        patternInput_1.1.clone(),
                                                        (),
                                                    )
                                                }
                                            });
                                            {
                                                let v350 = {
                                                    let clo_42 = Func0::new(move || {
                                                        Dice_ui::closure379((), ())
                                                    });
                                                    Func1::new({
                                                        let clo_42 = clo_42.clone();
                                                        move |arg_42: ()| clo_42()
                                                    })
                                                };
                                                let v364: string =
                                                        string(" class=move || \" \".to_owned() + &v350(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                                                let v366 = Dice_ui::method186(Dice_ui::method185(
                                                    Dice_ui::method347(),
                                                ));
                                                let v369: string = append(
                                                    append(
                                                        string("leptos::view! { "),
                                                        append(
                                                            append(
                                                                append(
                                                                    append(string("<svg "), v364),
                                                                    string(">{v366()}</"),
                                                                ),
                                                                string("svg"),
                                                            ),
                                                            string(">"),
                                                        ),
                                                    ),
                                                    string(" }"),
                                                );
                                                let v371: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                                                    <svg
                                                        class=move || " ".to_owned() + &v350(())
                                                        stroke="currentColor"
                                                        stroke-width="1.5"
                                                        viewBox="0 0 24 24"
                                                        fill="none"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                        {v366()}
                                                    </svg>
                                                };
                                                let v376 = {
                                                    let clo_43 = Func0::new({
                                                        let v344 = v344.clone();
                                                        move || {
                                                            Dice_ui::closure381(v344.clone(), ())
                                                        }
                                                    });
                                                    Func1::new({
                                                        let clo_43 = clo_43.clone();
                                                        move |arg_43: ()| clo_43()
                                                    })
                                                };
                                                let v377: string =
                                                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v376(())");
                                                let v381: string = append(
                                                    append(
                                                        string(" aria-label=\"Settings\""),
                                                        append(
                                                            append(
                                                                string(" on:click=move |_| v346()"),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v377),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                );
                                                let v383 = Dice_ui::method186(Dice_ui::method185(
                                                    Dice_ui::method280(v371),
                                                ));
                                                let v386: string = append(
                                                    append(
                                                        string("leptos::view! { "),
                                                        append(
                                                            append(
                                                                append(
                                                                    append(
                                                                        string("<button "),
                                                                        v381,
                                                                    ),
                                                                    string(">{v383()}</"),
                                                                ),
                                                                string("button"),
                                                            ),
                                                            string(">"),
                                                        ),
                                                    ),
                                                    string(" }"),
                                                );
                                                let v388: leptos::HtmlElement<
                                                    leptos::html::Button,
                                                > = leptos::view! {
                                                    <button
                                                        aria-label="Settings"
                                                        on:click=move |_| v346()
                                                        class=move || {
                                                            "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] "
                                                                .to_owned() + &v376(())
                                                        }
                                                    >
                                                        {v383()}
                                                    </button>
                                                };
                                                let v390: leptos::View =
                                                    leptos::IntoView::into_view(v388);
                                                let v392: Array<leptos::View> =
                                                    Dice_ui::method173(new_empty::<leptos::View>());
                                                let v394: leptos::View =
                                                    leptos::CollectView::collect_view(
                                                        v392.to_vec(),
                                                    );
                                                let v399: string = string(
                                                    " class=\"flex flex-col [position:relative]\"",
                                                );
                                                let v401 = Dice_ui::method186(Dice_ui::method185(
                                                    Dice_ui::method456(
                                                        v390,
                                                        Dice_ui::method197(Dice_ui::method349(
                                                            v224.clone(),
                                                            v294.clone(),
                                                            v241.clone(),
                                                            v344.clone(),
                                                        )),
                                                    ),
                                                ));
                                                let v404: string = append(
                                                    append(
                                                        string("leptos::view! { "),
                                                        append(
                                                            append(
                                                                append(
                                                                    append(string("<div "), v399),
                                                                    string(">{v401()}</"),
                                                                ),
                                                                string("div"),
                                                            ),
                                                            string(">"),
                                                        ),
                                                    ),
                                                    string(" }"),
                                                );
                                                let v406: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v401()}</div> };
                                                let v408: leptos::View =
                                                    leptos::IntoView::into_view(v406);
                                                let v411: LrcPtr<Dice_ui::Heap1> =
                                                    leptos::SignalGetUntracked::get_untracked(
                                                        &v224.l0.clone(),
                                                    );
                                                let v437: Array<leptos::View> = new_array(&[
                                                    v408,
                                                    if leptos::SignalGet::get(&v411.l2.clone()) {
                                                        let v416: Array<leptos::View> =
                                                            Dice_ui::method173(new_empty::<
                                                                leptos::View,
                                                            >(
                                                            ));
                                                        let v423:
                                                                                string =
                                                                            string(" class=\"flex flex-col [position:relative]\"");
                                                        let v425 = Dice_ui::method186(
                                                            Dice_ui::method185(Dice_ui::method465(
                                                                leptos::CollectView::collect_view(
                                                                    v416.to_vec(),
                                                                ),
                                                                Dice_ui::method197(
                                                                    Dice_ui::method461(
                                                                        v294.clone(),
                                                                    ),
                                                                ),
                                                            )),
                                                        );
                                                        let v427: string = append(
                                                            append(
                                                                string("leptos::view! { "),
                                                                append(
                                                                    append(
                                                                        append(
                                                                            append(
                                                                                string("<div "),
                                                                                v423,
                                                                            ),
                                                                            string(">{v425()}</"),
                                                                        ),
                                                                        string("div"),
                                                                    ),
                                                                    string(">"),
                                                                ),
                                                            ),
                                                            string(" }"),
                                                        );
                                                        let v429: leptos::HtmlElement<
                                                            leptos::html::Div,
                                                        > = leptos::view! { <div class="flex flex-col [position:relative]">{v425()}</div> };
                                                        leptos::IntoView::into_view(v429)
                                                    } else {
                                                        let v433: Array<leptos::View> =
                                                            Dice_ui::method173(new_empty::<
                                                                leptos::View,
                                                            >(
                                                            ));
                                                        leptos::CollectView::collect_view(
                                                            v433.to_vec(),
                                                        )
                                                    },
                                                ]);
                                                let v439: Vec<leptos::View> = v437.to_vec();
                                                Dice_ui::US24::US24_0(leptos::Fragment::new(v439))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                _ => Dice_ui::US24::US24_1,
            };
            let v606: Array<leptos::View> = new_array(&[match &v585 {
                Dice_ui::US24::US24_0(v585_0_0) => {
                    let v590: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v592 =
                        Dice_ui::method186(Dice_ui::method185(Dice_ui::method470(match &v585 {
                            Dice_ui::US24::US24_0(x) => x.clone(),
                            _ => unreachable!(),
                        })));
                    let v595: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v590), string(">{v592()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v597: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 flex-col [overflow-y:auto]">{v592()}</div> };
                    leptos::IntoView::into_view(v597)
                }
                _ => {
                    let v601: Array<leptos::View> = Dice_ui::method173(new_empty::<leptos::View>());
                    leptos::CollectView::collect_view(v601.to_vec())
                }
            }]);
            let v608: Vec<leptos::View> = v606.to_vec();
            leptos::Fragment::new(v608)
        }
        pub fn method73(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure54(v0_1.clone(), ())
            })
        }
        pub fn method474() -> string {
            string("Tab")
        }
        pub fn closure538(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1: string = Dice_ui::method474();
            let v2: &str = fable_library_rust::String_::LrcStr::as_str(&v0_1);
            let v4: std::string::String = String::from(v2);
            let v6: leptos::leptos_dom::Text = leptos::html::text(v4);
            let v9: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v6)]);
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method473() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure538((), ()))
        }
        pub fn closure541(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
            unitVar: (),
        ) -> bool {
            let v3: Dice_ui::US20 = leptos::SignalGet::get(&v0_1);
            {
                let copyOfStruct: Dice_ui::US20 = v3;
                if let Dice_ui::US20::US20_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US20 = v1.clone();
                    if let Dice_ui::US20::US20_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US20::US20_2 = &copyOfStruct {
                        if let Dice_ui::US20::US20_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US20::US20_4 = &copyOfStruct {
                            if let Dice_ui::US20::US20_4 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US20::US20_3 = &copyOfStruct {
                                if let Dice_ui::US20::US20_3 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US20::US20_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn method476(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure541(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure542(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method19(v0_1);
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: std::string::String = String::from(v3);
            let v7: leptos::leptos_dom::Text = leptos::html::text(v5);
            let v10: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v7)]);
            let v12: Vec<leptos::View> = v10.to_vec();
            leptos::Fragment::new(v12)
        }
        pub fn method477(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure542(v0_1.clone(), ())
            })
        }
        pub fn closure540(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
        ) -> leptos::View {
            let v12: string = match &v1 {
                Dice_ui::US20::US20_1(v1_1_0) => string("Dice"),
                Dice_ui::US20::US20_2 => string("Lists"),
                Dice_ui::US20::US20_4 => string("Settings"),
                Dice_ui::US20::US20_3 => string("Transactions"),
                _ => string(""),
            };
            let v13 = Dice_ui::method476(v0_1, v1.clone());
            let v17: string = string(" select=v13()");
            let v19 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method477(v12)));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<option "), v17), string(">{v19()}</")),
                            string("option"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Option_> =
                leptos::view! { <option select=v13()>{v19()}</option> };
            leptos::IntoView::into_view(v24)
        }
        pub fn closure539(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: Array<Dice_ui::US20> = new_array(&[
                Dice_ui::US20::US20_1(Dice_ui::US21::US21_0),
                Dice_ui::US20::US20_2,
                Dice_ui::US20::US20_3,
                Dice_ui::US20::US20_4,
            ]);
            let v8: Vec<Dice_ui::US20> = v6.to_vec();
            let v11: Vec<leptos::View> = v8
                .iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        move |v: Dice_ui::US20| Dice_ui::closure540(v0_1.clone(), v)
                    })(x.clone())
                })
                .collect();
            let v13: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v11);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method475(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure539(v0_1.clone(), ())
            })
        }
        pub fn closure537(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v8 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method473()));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<label "), v6), string(">{v8()}</")),
                            string("label"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Label> =
                leptos::view! {
                    <label class="sr-only" for="Tab">
                        {v8()}
                    </label>
                };
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v20: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v22 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method475(v0_1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<select "), v20), string(">{v22()}</")),
                            string("select"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Select> = leptos::view! {
                <select class="w-full rounded-md border-gray-200" id="Tab">
                    {v22()}
                </select>
            };
            let v30: Array<leptos::View> = new_array(&[v15, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method472(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure537(v0_1.clone(), ())
            })
        }
        pub fn closure547(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure549(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method482() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure549((), ()))
        }
        pub fn closure548(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v15: string =
                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
            let v17 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method482()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v15), string(">{v17()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::svg::Rect> = leptos::view! {
                <rect
                    stroke-linejoin="round"
                    stroke-linecap="round"
                    rx="2"
                    height="18"
                    width="18"
                    y="3"
                    x="3"
                >
                    {v17()}
                </rect>
            };
            let v24: leptos::View = leptos::IntoView::into_view(v22);
            let v33: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
            let v35 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v38: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v33), string(">{v35()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v40: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="7.5" cx="7.5">
                    {v35()}
                </circle>
            };
            let v42: leptos::View = leptos::IntoView::into_view(v40);
            let v51: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
            let v53 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v55: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v51), string(">{v53()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v57: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="7.5" cx="16.5">
                    {v53()}
                </circle>
            };
            let v59: leptos::View = leptos::IntoView::into_view(v57);
            let v68: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
            let v70 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v72: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v68), string(">{v70()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v74: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="12" cx="12">
                    {v70()}
                </circle>
            };
            let v76: leptos::View = leptos::IntoView::into_view(v74);
            let v85: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
            let v87 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v89: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v85), string(">{v87()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v91: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="16.5" cx="7.5">
                    {v87()}
                </circle>
            };
            let v93: leptos::View = leptos::IntoView::into_view(v91);
            let v102: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
            let v104 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v106: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v102), string(">{v104()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v108: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="16.5" cx="16.5">
                    {v104()}
                </circle>
            };
            let v111: Array<leptos::View> =
                new_array(&[v24, v42, v59, v76, v93, leptos::IntoView::into_view(v108)]);
            let v113: Vec<leptos::View> = v111.to_vec();
            leptos::Fragment::new(v113)
        }
        pub fn method481() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure548((), ()))
        }
        pub fn closure550(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::svg::Path> = leptos::view! {
                <path
                    d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5"
                    stroke-linejoin="round"
                    stroke-linecap="round"
                >
                    {v9()}
                </path>
            };
            let v16: leptos::View = leptos::IntoView::into_view(v14);
            let v25: string = string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
            let v27 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v25), string(">{v27()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1" cy="6.75" cx="3">
                    {v27()}
                </circle>
            };
            let v34: leptos::View = leptos::IntoView::into_view(v32);
            let v43: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
            let v45 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v47: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v43), string(">{v45()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v49: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1" cy="12" cx="3">
                    {v45()}
                </circle>
            };
            let v51: leptos::View = leptos::IntoView::into_view(v49);
            let v60: string = string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
            let v62 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method196()));
            let v64: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v60), string(">{v62()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v66: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1" cy="17.25" cx="3">
                    {v62()}
                </circle>
            };
            let v69: Array<leptos::View> =
                new_array(&[v16, v34, v51, leptos::IntoView::into_view(v66)]);
            let v71: Vec<leptos::View> = v69.to_vec();
            leptos::Fragment::new(v71)
        }
        pub fn method483() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure550((), ()))
        }
        pub fn closure551(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method184()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path
                        d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7"
                        stroke-linejoin="round"
                        stroke-linecap="round"
                    >
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure190((), v)
                    })(x.clone())
                })
                .collect();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method484() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure551((), ()))
        }
        pub fn closure552(
            v0_1: leptos::Memo<string>,
            v1: string,
            unitVar: (),
        ) -> std::string::String {
            let v5: string =
                Dice_ui::method19(append(append(append(v0_1(), string("#/")), v1), string("")));
            let v7: &str = fable_library_rust::String_::LrcStr::as_str(&v5);
            String::from(v7)
        }
        pub fn closure553(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
            unitVar: (),
        ) -> bool {
            let v3: Dice_ui::US20 = leptos::SignalGet::get(&v0_1);
            {
                let copyOfStruct: Dice_ui::US20 = v3;
                if let Dice_ui::US20::US20_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US20 = v1.clone();
                    if let Dice_ui::US20::US20_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US20::US20_2 = &copyOfStruct {
                        if let Dice_ui::US20::US20_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US20::US20_4 = &copyOfStruct {
                            if let Dice_ui::US20::US20_4 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US20::US20_3 = &copyOfStruct {
                                if let Dice_ui::US20::US20_3 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US20::US20_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn closure554(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
            unitVar: (),
        ) -> &'static str {
            let v3: Dice_ui::US20 = leptos::SignalGet::get(&v0_1);
            if {
                let copyOfStruct: Dice_ui::US20 = v3;
                if let Dice_ui::US20::US20_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US20 = v1.clone();
                    if let Dice_ui::US20::US20_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US20::US20_2 = &copyOfStruct {
                        if let Dice_ui::US20::US20_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US20::US20_4 = &copyOfStruct {
                            if let Dice_ui::US20::US20_4 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US20::US20_3 = &copyOfStruct {
                                if let Dice_ui::US20::US20_3 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US20::US20_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            } {
                let v9: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v12: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure555(v0_1: leptos::Fragment, v1: string, unitVar: ()) -> leptos::Fragment {
            let v3: leptos::View = leptos::IntoView::into_view(v0_1);
            let v4: string = Dice_ui::method19(v1);
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v13: Array<leptos::View> = new_array(&[v3, leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method485(v0_1: leptos::Fragment, v1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure555(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure546(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: leptos::Memo<string>,
            v2: Dice_ui::US20,
        ) -> leptos::View {
            let v13: string = match &v2 {
                Dice_ui::US20::US20_1(v2_1_0) => string("dice"),
                Dice_ui::US20::US20_2 => string("lists"),
                Dice_ui::US20::US20_4 => string("settings"),
                Dice_ui::US20::US20_3 => string("transactions"),
                _ => string(""),
            };
            let v151: leptos::Fragment = match &v2 {
                Dice_ui::US20::US20_1(v2_1_0) => {
                    let v17 = {
                        let clo = Func0::new(move || Dice_ui::closure547((), ()));
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v31: string =
                            string(" class=move || \" \".to_owned() + &v17(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v33 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method481()));
                    let v36: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v31), string(">{v33()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v38: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || " ".to_owned() + &v17(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v33()}
                        </svg>
                    };
                    let v41: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v38)]);
                    let v43: Vec<leptos::View> = v41.to_vec();
                    leptos::Fragment::new(v43)
                }
                Dice_ui::US20::US20_2 => {
                    let v48 = {
                        let clo_1 = Func0::new(move || Dice_ui::closure547((), ()));
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v64: string =
                            string(" class=move || \"text-gray-700 \".to_owned() + &v48(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v66 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method483()));
                    let v69: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v64), string(">{v66()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v71: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || "text-gray-700 ".to_owned() + &v48(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            height="100%"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v66()}
                        </svg>
                    };
                    let v74: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v71)]);
                    let v76: Vec<leptos::View> = v74.to_vec();
                    leptos::Fragment::new(v76)
                }
                Dice_ui::US20::US20_4 => {
                    let v114 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure547((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v128: string =
                            string(" class=move || \" \".to_owned() + &v114(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v130 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method347()));
                    let v133: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v128), string(">{v130()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v135: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || " ".to_owned() + &v114(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v130()}
                        </svg>
                    };
                    let v138: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v135)]);
                    let v140: Vec<leptos::View> = v138.to_vec();
                    leptos::Fragment::new(v140)
                }
                Dice_ui::US20::US20_3 => {
                    let v81 = {
                        let clo_3 = Func0::new(move || Dice_ui::closure547((), ()));
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v97: string =
                            string(" class=move || \"text-gray-700 \".to_owned() + &v81(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v99 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method484()));
                    let v102: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v97), string(">{v99()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v104: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || "text-gray-700 ".to_owned() + &v81(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            height="100%"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v99()}
                        </svg>
                    };
                    let v107: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v104)]);
                    let v109: Vec<leptos::View> = v107.to_vec();
                    leptos::Fragment::new(v109)
                }
                _ => {
                    let v145: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
                    leptos::Fragment::new(v145)
                }
            };
            let v162: string = match &v2 {
                Dice_ui::US20::US20_1(v2_1_0) => string("Dice"),
                Dice_ui::US20::US20_2 => string("Lists"),
                Dice_ui::US20::US20_4 => string("Settings"),
                Dice_ui::US20::US20_3 => string("Transactions"),
                _ => string(""),
            };
            let v163 = Func0::new({
                let v1 = v1.clone();
                let v13 = v13.clone();
                move || Dice_ui::closure552(v1.clone(), v13.clone(), ())
            });
            {
                let v167 = {
                    let clo_4 = Func0::new({
                        let v0_1 = v0_1.clone();
                        let v2 = v2.clone();
                        move || Dice_ui::closure553(v0_1.clone(), v2.clone(), ())
                    });
                    Func1::new({
                        let clo_4 = clo_4.clone();
                        move |arg_4: ()| clo_4()
                    })
                };
                let v170 = {
                    let clo_5 = Func0::new({
                        let v0_1 = v0_1.clone();
                        let v2 = v2.clone();
                        move || Dice_ui::closure554(v0_1.clone(), v2.clone(), ())
                    });
                    Func1::new({
                        let clo_5 = clo_5.clone();
                        move |arg_5: ()| clo_5()
                    })
                };
                let v172: string =
                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v170(())");
                let v178: string = append(
                    append(
                        string(" aria-current=move || if v167(()) { \"page\" } else { \"\" }"),
                        append(
                            append(append(string(" "), v172), string(" href=move || v163()")),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v180 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method485(v151, v162)));
                let v183: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<a "), v178), string(">{v180()}</")),
                                string("a"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v185: leptos::HtmlElement<leptos::html::A> = leptos::view! {
                    <a
                        aria-current=move || if v167(()) { "page" } else { "" }
                        class=move || {
                            "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium "
                                .to_owned() + v170(())
                        }
                        href=move || v163()
                    >
                        {v180()}
                    </a>
                };
                leptos::IntoView::into_view(v185)
            }
        }
        pub fn closure545(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: leptos::Memo<string>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v7: Array<Dice_ui::US20> = new_array(&[
                Dice_ui::US20::US20_1(Dice_ui::US21::US21_0),
                Dice_ui::US20::US20_2,
                Dice_ui::US20::US20_3,
                Dice_ui::US20::US20_4,
            ]);
            let v9: Vec<Dice_ui::US20> = v7.to_vec();
            let v12: Vec<leptos::View> = v9
                .iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move |v: Dice_ui::US20| Dice_ui::closure546(v0_1.clone(), v1.clone(), v)
                    })(x.clone())
                })
                .collect();
            let v14: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v12);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method480(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: leptos::Memo<string>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure545(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure544(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: leptos::Memo<string>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v7: string = append(
                append(
                    string(" aria-label=\"Tabs\""),
                    append(append(append(string(" "), v2), string("")), string("")),
                ),
                string(""),
            );
            let v9 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method480(v0_1, v1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<nav "), v7), string(">{v9()}</")),
                            string("nav"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::html::Nav> = leptos::view! {
                <nav
                    aria-label="Tabs"
                    class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]"
                >
                    {v9()}
                </nav>
            };
            let v17: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v14)]);
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method479(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: leptos::Memo<string>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure544(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure543(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: leptos::Memo<string>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v7 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method479(v0_1, v1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v5), string(">{v7()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 border-t border-gray-200">{v7()}</div> };
            let v15: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v12)]);
            let v17: Vec<leptos::View> = v15.to_vec();
            leptos::Fragment::new(v17)
        }
        pub fn method478(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: leptos::Memo<string>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure543(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure536(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            unitVar: (),
        ) -> leptos::Fragment {
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            {
                let v4: leptos_router::Location = leptos_router::use_location();
                let v7 = {
                    let clo = Func0::new({
                        let v4 = v4.clone();
                        move || Dice_ui::closure47(v4.clone(), ())
                    });
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v9: leptos::Memo<string> = leptos::create_memo(move |_| v7(()));
                let v13: string = string(" class=\"hidden\"");
                let v15 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method472(v0_1.clone())));
                let v18: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v13), string(">{v15()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::HtmlElement<leptos::html::Div> =
                    leptos::view! { <div class="hidden">{v15()}</div> };
                let v23: string =
                    string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
                let v25 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method478(v0_1, v9)));
                let v27: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v23), string(">{v25()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v30: Array<leptos::HtmlElement<leptos::html::Div>> = new_array(&[
                    v20,
                    leptos::view! { <div class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">{v25()}</div> },
                ]);
                let v32: Vec<leptos::HtmlElement<leptos::html::Div>> = v30.to_vec();
                let v35: Vec<leptos::View> = v32
                    .iter()
                    .map(|x| {
                        Func1::new(move |v: leptos::HtmlElement<leptos::html::Div>| {
                            Dice_ui::closure234((), v)
                        })(x.clone())
                    })
                    .collect();
                let v37: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v35);
                let v39: Vec<leptos::View> = v37.to_vec();
                leptos::Fragment::new(v39)
            }
        }
        pub fn method471(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure536(v0_1.clone(), ())
            })
        }
        pub fn closure53(v0_1: leptos::ReadSignal<Dice_ui::US20>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method73(v0_1.clone())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<main "), v4), string(">{v6()}</")),
                            string("main"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Main> = leptos::view! { <main class="flex flex-1 flex-col [overflow:hidden]">{v6()}</main> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"flex\"");
            let v18 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method471(v0_1)));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v16), string(">{v18()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex">{v18()}</div> };
            let v26: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v23)]);
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method72(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure53(v0_1.clone(), ())
            })
        }
        pub fn closure52(v0_1: leptos::ReadSignal<Dice_ui::US20>, unitVar: ()) -> leptos::Fragment {
            let v1: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v4: string = append(append(append(string(" "), v1), string("")), string(""));
            let v6 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method72(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                <div class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">
                    {v6()}
                </div>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method71(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure52(v0_1.clone(), ())
            })
        }
        pub fn closure46(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            leptos::logging::log!("{}", string("content.render ()"));
            {
                let v3: leptos_router::Location = leptos_router::use_location();
                let v5: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                    std::sync::Arc::new(leptos_router::use_navigate());
                let v7: leptos_router::Location = leptos_router::use_location();
                let v10 = {
                    let clo = Func0::new({
                        let v7 = v7.clone();
                        move || Dice_ui::closure47(v7.clone(), ())
                    });
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v12: leptos::Memo<string> = leptos::create_memo(move |_| v10(()));
                let v14: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v16: LrcPtr<Dice_ui::Heap2> = v14.unwrap();
                let patternInput: (
                    leptos::ReadSignal<Dice_ui::US20>,
                    leptos::WriteSignal<Dice_ui::US20>,
                ) = leptos::create_signal(Dice_ui::US20::US20_0);
                let patternInput_1: (leptos::ReadSignal<bool>, leptos::WriteSignal<bool>) =
                    leptos::create_signal(false);
                let v26 = {
                    let clo_1 = Func0::new({
                        let patternInput_1 = patternInput_1.clone();
                        let v12 = v12.clone();
                        let v16 = v16.clone();
                        let v3 = v3.clone();
                        let v5 = v5.clone();
                        move || {
                            Dice_ui::closure48(
                                v3.clone(),
                                v5.clone(),
                                v12.clone(),
                                v16.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.0.clone(),
                                (),
                            )
                        }
                    });
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                leptos::create_effect(move |_| v26(()));
                {
                    let v30 = {
                        let clo_2 = Func0::new({
                            let patternInput = patternInput.clone();
                            let v3 = v3.clone();
                            move || Dice_ui::closure49(v3.clone(), patternInput.1.clone(), ())
                        });
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    leptos::create_effect(move |_| v30(()));
                    {
                        let v35: string =
                            string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
                        let v37 = Dice_ui::method186(Dice_ui::method185(Dice_ui::method71(
                            patternInput.0.clone(),
                        )));
                        let v40: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(append(string("<div "), v35), string(">{v37()}</")),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v42: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 max-[100px]:[overflow-x:auto]">{v37()}</div> };
                        let v45: Array<leptos::View> =
                            new_array(&[leptos::IntoView::into_view(v42)]);
                        let v47: Vec<leptos::View> = v45.to_vec();
                        leptos::Fragment::new(v47)
                    }
                }
            }
        }
        pub fn method67() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure46((), ()))
        }
        pub fn closure5(unitVar: (), v0_1: i32) -> leptos::HtmlElement<leptos::html::Div> {
            let v1: string = append(
                append(string("home.render () / router: "), toString(v0_1)),
                string(""),
            );
            leptos::logging::log!("{}", v1);
            {
                let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
                leptos::logging::log!("{}", string("state_core.use_database (1)"));
                {
                    let v9: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method9();
                    leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
                    {
                        let v12: leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4> =
                            Dice_ui::method15(v9.clone());
                        let v15 = {
                            let clo = Func0::new({
                                let v12 = v12.clone();
                                let v6 = v6.clone();
                                move || Dice_ui::closure23(v6.clone(), v12.clone(), ())
                            });
                            Func1::new({
                                let clo = clo.clone();
                                move |arg: ()| clo()
                            })
                        };
                        leptos::create_effect(move |_| v15(()));
                        {
                            let v19 = {
                                let clo_1 = Func0::new({
                                    let v6 = v6.clone();
                                    move || Dice_ui::closure38(v6.clone(), ())
                                });
                                Func1::new({
                                    let clo_1 = clo_1.clone();
                                    move |arg_1: ()| clo_1()
                                })
                            };
                            let v21: leptos::Memo<
                                std::collections::HashMap<
                                    std::string::String,
                                    leptos::RwSignal<bool>,
                                >,
                            > = leptos::create_memo(move |_| v19(()));
                            let patternInput: (
                                leptos::ReadSignal<bool>,
                                leptos::WriteSignal<bool>,
                            ) = leptos::create_signal(false);
                            let v27: leptos::Action<LrcPtr<Dice_ui::Heap3>, ()> =
                                leptos::create_action(move |value: &std::rc::Rc<Heap3>| {
                                    Func1::new({
                                        let v9 = v9.clone();
                                        move |v: LrcPtr<Dice_ui::Heap3>| {
                                            Dice_ui::closure39(v9.clone(), v)
                                        }
                                    })(value.clone())
                                });
                            let v30 = {
                                let clo_2 = Func0::new({
                                    let patternInput = patternInput.clone();
                                    let v21 = v21.clone();
                                    let v27 = v27.clone();
                                    let v6 = v6.clone();
                                    move || {
                                        Dice_ui::closure42(
                                            v6.clone(),
                                            v21.clone(),
                                            patternInput.1.clone(),
                                            patternInput.0.clone(),
                                            v27.clone(),
                                            (),
                                        )
                                    }
                                });
                                Func1::new({
                                    let clo_2 = clo_2.clone();
                                    move |arg_2: ()| clo_2()
                                })
                            };
                            leptos::create_effect(move |_| v30(()));
                            {
                                let v33 = Dice_ui::method66(v6.clone());
                                let v39: string =
                                    string(" class:dark={move || v33()} class=\"flex flex-1\"");
                                let v41 =
                                    Dice_ui::method186(Dice_ui::method185(Dice_ui::method67()));
                                let v44: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v39),
                                                    string(">{v41()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                leptos::view! {
                                    <div class:dark=move || v33() class="flex flex-1">
                                        {v41()}
                                    </div>
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn method8() -> Func1<i32, leptos::HtmlElement<leptos::html::Div>> {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method486() -> string {
            string("")
        }
        pub fn closure556(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::html::Div> = v0_1(1_i32);
            let v4: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v1)]);
            let v6: Vec<leptos::View> = v4.to_vec();
            leptos::Fragment::new(v6)
        }
        pub fn method487(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure556(v0_1.clone(), ())
            })
        }
        pub fn closure557(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method488() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure557((), ()))
        }
        pub fn method489() -> string {
            string("/")
        }
        pub fn closure558(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::html::Div> = v0_1(2_i32);
            let v4: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v1)]);
            let v6: Vec<leptos::View> = v4.to_vec();
            leptos::Fragment::new(v6)
        }
        pub fn method490(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure558(v0_1.clone(), ())
            })
        }
        pub fn method491() -> string {
            string("/*")
        }
        pub fn closure559(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::html::Div> = v0_1(3_i32);
            let v4: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v1)]);
            let v6: Vec<leptos::View> = v4.to_vec();
            leptos::Fragment::new(v6)
        }
        pub fn method492(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure559(v0_1.clone(), ())
            })
        }
        pub fn method493() -> string {
            string("*")
        }
        pub fn closure560(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::html::Div> = v0_1(4_i32);
            let v4: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v1)]);
            let v6: Vec<leptos::View> = v4.to_vec();
            leptos::Fragment::new(v6)
        }
        pub fn method494(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure560(v0_1.clone(), ())
            })
        }
        pub fn closure4(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1 = Dice_ui::method8();
            let v2: string = Dice_ui::method19(Dice_ui::method486());
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v7 = Dice_ui::method487(v0_1.clone());
            let v8 = Dice_ui::method488();
            let v18: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v8()) view=move || v7() path=v6 /> })");
            let v19: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v8())
                        view=move || v7()
                        path=v6
                    ></leptos_router::Route>
                },
            );
            let v21: string = Dice_ui::method19(Dice_ui::method489());
            let v23: &str = fable_library_rust::String_::LrcStr::as_str(&v21);
            let v25: std::string::String = String::from(v23);
            let v26 = Dice_ui::method490(v0_1.clone());
            let v27 = Dice_ui::method488();
            let v35: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v27()) view=move || v26() path=v25 /> })");
            let v36: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v27())
                        view=move || v26()
                        path=v25
                    ></leptos_router::Route>
                },
            );
            let v38: string = Dice_ui::method19(Dice_ui::method491());
            let v40: &str = fable_library_rust::String_::LrcStr::as_str(&v38);
            let v42: std::string::String = String::from(v40);
            let v43 = Dice_ui::method492(v0_1.clone());
            let v44 = Dice_ui::method488();
            let v52: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v44()) view=move || v43() path=v42 /> })");
            let v53: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v44())
                        view=move || v43()
                        path=v42
                    ></leptos_router::Route>
                },
            );
            let v55: string = Dice_ui::method19(Dice_ui::method493());
            let v57: &str = fable_library_rust::String_::LrcStr::as_str(&v55);
            let v59: std::string::String = String::from(v57);
            let v60 = Dice_ui::method494(v0_1);
            let v61 = Dice_ui::method488();
            let v69: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v61()) view=move || v60() path=v59 /> })");
            let v71: Array<leptos::View> = new_array(&[
                v19,
                v36,
                v53,
                leptos::IntoView::into_view(
                    leptos::view! {
                        <leptos_router::Route
                            children=Box::new(move || v61())
                            view=move || v60()
                            path=v59
                        ></leptos_router::Route>
                    },
                ),
            ]);
            let v73: Vec<leptos::View> = v71.to_vec();
            leptos::Fragment::new(v73)
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure4((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Routes  children=Box::new(move || v2(())) /> })");
            let v10: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(
                leptos::view! { <leptos_router::Routes children=Box::new(move || v2(()))></leptos_router::Routes> },
            )]);
            let v12: Vec<leptos::View> = v10.to_vec();
            leptos::Fragment::new(v12)
        }
        pub fn method7() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure3((), ()))
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            leptos::logging::log!("{}", string("app.render ()"));
            leptos_meta::provide_meta_context();
            {
                let v4: leptos::RwSignal<bool> = leptos::create_rw_signal(false);
                let v6: leptos::RwSignal<bool> = leptos::create_rw_signal(false);
                let v7: string = Dice_ui::method4();
                let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
                let v11: std::string::String = String::from(v9);
                let v13: leptos::RwSignal<std::string::String> = leptos::create_rw_signal(v11);
                let v14: string = Dice_ui::method5();
                let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
                let v18: std::string::String = String::from(v16);
                let v20: string = Dice_ui::method6();
                let v22: &str = fable_library_rust::String_::LrcStr::as_str(&v20);
                let v26: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                    LrcPtr::new((true, v18)),
                    LrcPtr::new((true, String::from(v22))),
                ]);
                let v31: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                    l0: None::<std::string::String>,
                    l1: v26.to_vec(),
                    l2: 1_i32,
                    l3: 1_i32,
                    l4: Dice_ui::US1::US1_0,
                });
                let v34: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                    l0: v4,
                    l1: leptos::create_rw_signal(v31),
                    l2: v6,
                    l3: v13,
                });
                let v36: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = leptos::create_rw_signal(v34);
                let v38: std::collections::HashMap<std::string::String, leptos::RwSignal<bool>> =
                    std::collections::HashMap::new();
                let v41: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                    l0: v36,
                    l1: leptos::create_rw_signal(v38),
                });
                leptos::provide_context::<std::rc::Rc<Heap2>>(v41);
                {
                    let v43 = Dice_ui::method7();
                    let v49: string =
                        string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Router  children=Box::new(move || v43()) /> })");
                    leptos::IntoView::into_view(
                        leptos::view! { <leptos_router::Router children=Box::new(move || v43())></leptos_router::Router> },
                    )
                }
            }
        }
        pub fn method3() {
            leptos::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))());
            ()
        }
        pub fn closure561(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method495() -> Func0<()> {
            Func0::new(move || Dice_ui::closure561((), ()))
        }
        pub fn method496(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(append(string("main / args: "), toString(v0_1)), string(""));
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v6: Option<web_sys::HtmlElement> = leptos::document().body();
                let v9: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v6));
                let v11: string = append(
                    append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v9.clone()),
                    ),
                    string(""),
                );
                leptos::logging::log!("{}", v11);
                if let Dice_ui::US0::US0_0(v9_0_0) = &v9 {
                    let v14: string = Dice_ui::method1();
                    let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
                    let v17: web_sys::HtmlElement = Dice_ui::method2(match &v9 {
                        Dice_ui::US0::US0_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    v17.set_inner_html(v16);
                    Dice_ui::method3()
                } else {
                    let v19 = Dice_ui::method495();
                    let v22: Box<dyn Fn()> = Dice_ui::method496(Box::new(move || v19()));
                    let v24: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v22);
                    let v26: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v24);
                    let v28: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v26);
                    leptos::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v28)
                        .unwrap();
                    v24.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_insert_with(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_eef1bd43::*;
#[path = "../../../polyglot/lib/fsharp/Common_wasm.rs"]
mod module_8cb3e09e;
pub use module_8cb3e09e::*;
#[path = "../../../polyglot/lib/spiral/common_wasm.rs"]
mod module_e7e93d99;
pub use module_e7e93d99::*;
#[path = "../../../polyglot/lib/spiral/date_time_wasm.rs"]
mod module_d18105aa;
pub use module_d18105aa::*;
#[path = "../../../polyglot/lib/spiral/file_system_wasm.rs"]
mod module_c5eb79e8;
pub use module_c5eb79e8::*;
#[path = "../../../polyglot/lib/spiral/lib_wasm.rs"]
mod module_8d8b0653;
pub use module_8d8b0653::*;
#[path = "../../../polyglot/lib/spiral/sm_wasm.rs"]
mod module_2aeb754a;
pub use module_2aeb754a::*;
pub mod Polyglot {
    // pub use crate::module_8cb3e09e::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
