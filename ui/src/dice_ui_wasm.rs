#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_75bc3c80 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::NativeArray_::count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for Dice_ui::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for Dice_ui::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Dice_ui::Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::RwSignal<bool>,
            pub l1: leptos::RwSignal<bool>,
            pub l2: leptos::RwSignal<std::string::String>,
            pub l3: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Dice_ui::Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::RwSignal<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Dice_ui::Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0,
            US2_1,
        }
        impl core::fmt::Display for Dice_ui::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Dice_ui::Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(LrcPtr<Dice_ui::Heap3>),
            US3_1,
        }
        impl core::fmt::Display for Dice_ui::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::sync::Arc<rexie::Rexie>),
            US4_1,
        }
        impl core::fmt::Display for Dice_ui::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US5_1,
        }
        impl core::fmt::Display for Dice_ui::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(wasm_bindgen::JsValue),
            US6_1,
        }
        impl core::fmt::Display for Dice_ui::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(serde_json::Value),
            US7_1,
        }
        impl core::fmt::Display for Dice_ui::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US8_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Dice_ui::US3),
            US9_1,
        }
        impl core::fmt::Display for Dice_ui::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Option<web_sys::Storage>),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for Dice_ui::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(web_sys::Storage),
            US12_1,
        }
        impl core::fmt::Display for Dice_ui::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(Dice_ui::US12),
            US11_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for Dice_ui::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Option<std::string::String>),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for Dice_ui::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(std::string::String),
            US15_1,
        }
        impl core::fmt::Display for Dice_ui::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(Dice_ui::US15),
            US14_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for Dice_ui::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(Dice_ui::US15),
            US16_1,
        }
        impl core::fmt::Display for Dice_ui::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US17 {
            US17_0(leptos::RwSignal<bool>),
            US17_1,
        }
        impl core::fmt::Display for Dice_ui::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US18 {
            US18_0(bool),
            US18_1,
        }
        impl core::fmt::Display for Dice_ui::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US20 {
            US20_0,
        }
        impl core::fmt::Display for Dice_ui::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US19 {
            US19_0,
            US19_1(Dice_ui::US20),
            US19_2,
            US19_3,
            US19_4,
        }
        impl core::fmt::Display for Dice_ui::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(leptos_router::Url),
            US21_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Dice_ui::US19),
            US22_1,
        }
        impl core::fmt::Display for Dice_ui::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US22>,
        }
        impl core::fmt::Display for Dice_ui::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(leptos::Fragment),
            US23_1,
        }
        impl core::fmt::Display for Dice_ui::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US24 {
            US24_0,
            US24_1,
        }
        impl core::fmt::Display for Dice_ui::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Dice_ui::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
        }
        impl core::fmt::Display for Dice_ui::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default)]
        pub struct Mut3 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<string>>,
        }
        impl core::fmt::Display for Dice_ui::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Default,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Dice_ui::Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US25_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(LrcPtr<Dice_ui::Heap4>),
            US26_1,
        }
        impl core::fmt::Display for Dice_ui::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US27 {
            US27_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US27_1,
        }
        impl core::fmt::Display for Dice_ui::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Vec<Dice_ui::US26>),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Dice_ui::US29),
            US28_1,
        }
        impl core::fmt::Display for Dice_ui::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(string),
            US32_1,
        }
        impl core::fmt::Display for Dice_ui::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Dice_ui::US32),
            US31_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1,
        }
        impl core::fmt::Display for Dice_ui::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Dice_ui::US26),
            US33_1,
        }
        impl core::fmt::Display for Dice_ui::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Option<string>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Vec<()>),
            US35_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0(Array<Dice_ui::US26>),
            US37_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Dice_ui::US37),
            US36_1,
        }
        impl core::fmt::Display for Dice_ui::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(Result<Vec<Option<string>>, std::string::String>),
            US38_1,
        }
        impl core::fmt::Display for Dice_ui::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Vec<Option<string>>),
            US40_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Dice_ui::US40),
            US39_1,
        }
        impl core::fmt::Display for Dice_ui::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US42 {
            US42_0(Vec<Dice_ui::US32>),
            US42_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Dice_ui::US42),
            US41_1,
        }
        impl core::fmt::Display for Dice_ui::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US43 {
            US43_0(Dice_ui::US32),
            US43_1,
        }
        impl core::fmt::Display for Dice_ui::US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq)]
        pub struct Heap5 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Dice_ui::Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US46_1,
        }
        impl core::fmt::Display for Dice_ui::US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(Dice_ui::US46),
            US45_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US48_1,
        }
        impl core::fmt::Display for Dice_ui::US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Dice_ui::US48),
            US47_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US50_1,
        }
        impl core::fmt::Display for Dice_ui::US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Dice_ui::US50),
            US49_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut4 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US52>,
        }
        impl core::fmt::Display for Dice_ui::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US56 {
            US56_0(Array<(string, Dice_ui::US24, string, bool, bool)>),
            US56_1,
        }
        impl core::fmt::Display for Dice_ui::US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US55 {
            US55_0(Dice_ui::US56),
            US55_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Option<Array<(string, Dice_ui::US24, string, bool, bool)>>),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Dice_ui::Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US58_1,
        }
        impl core::fmt::Display for Dice_ui::US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(Dice_ui::US15),
            US59_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(Dice_ui::US58),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(crate::model::near::rpc::RpcResponse),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US62_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(Dice_ui::US60),
            US63_1,
        }
        impl core::fmt::Display for Dice_ui::US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US64_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US65_1,
        }
        impl core::fmt::Display for Dice_ui::US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>),
            US66_1,
        }
        impl core::fmt::Display for Dice_ui::US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(Vec<(i32, leptos::ReadSignal<std::string::String>)>),
            US67_1,
        }
        impl core::fmt::Display for Dice_ui::US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(leptos::Memo<Dice_ui::US32>),
            US68_1,
        }
        impl core::fmt::Display for Dice_ui::US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US69 {
            US69_0(chrono::DateTime<chrono::Utc>),
            US69_1,
        }
        impl core::fmt::Display for Dice_ui::US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US70 {
            US70_0(string),
            US70_1(string),
        }
        impl core::fmt::Display for Dice_ui::US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US32>,
        }
        impl core::fmt::Display for Dice_ui::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US71 {
            US71_0(std::string::String),
            US71_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US71 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), unitVar_1: ()) -> Dice_ui::US2 {
            Dice_ui::US2::US2_1
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method7() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure7((), v))
        }
        pub fn method8(
            v0_1: Result<rexie::Rexie, std::string::String>,
        ) -> Result<rexie::Rexie, std::string::String> {
            v0_1
        }
        pub fn closure8(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method9() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure8((), v))
        }
        pub fn method10(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if v2 <= v0_1 {
                v1.clone()
            } else {
                let v6: f64 = v0_1 as f64 / 2.0_f64;
                let v10: i64 = v6.ceil() as i64;
                let v14: i64 = v6.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some((v10 - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some((v2 - v14) as i32), Some((v2 - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn method11(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn method12(
            v0_1: std::pin::Pin<
                Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
            >,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>
        {
            v0_1
        }
        pub fn method6() -> leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> {
            let __create_local_resource = leptos::create_local_resource(
                move || Func0::new(move || Dice_ui::closure6((), ()))(),
                |x| async move {
                    //;
                    {
                        let v3: Dice_ui::US2 = x;
                        let v5: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v8: bool = true;
                            leptos::logging::log!(
                                "{}",
                                string(
                                    "state_core.use_database (2) / database create_local_resource"
                                )
                            );
                            let v11: bool = true;
                            leptos::logging::log!("{}", string("state_core.build_database ()"));
                            let v13: bool = true;
                            let __future_init = Box::pin(async {
                                //;
                                let v14: string =
                    string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v15: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v17: Result<rexie::Rexie, rexie::Error> = v15.await;
                                let v18 = Dice_ui::method7();
                                let v32: Result<rexie::Rexie, std::string::String> =
                                    Dice_ui::method8(v17.map_err(|x| v18(x)));
                                let v35: string = string("}");
                                let v41: bool = true;
                                let v36 = v32;
                                let v50: string = append(
                                    append(
                                        append(append(string("true; v36 "), v35), string("); ")),
                                        string(""),
                                    ),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v51: bool = true;
                                v36
                            }); // rust.fix_closure';
                            let v53 = __future_init;
                            let v55: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                                >,
                            > = v53;
                            let v57: Result<rexie::Rexie, std::string::String> = v55.await;
                            let v62: rexie::Rexie = v57.unwrap();
                            let v72: rexie::Rexie = (Dice_ui::method9())(v62);
                            let v74: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v72);
                            let v80: string =
                    Dice_ui::method10(200_i64,
                                      append(append(string("state_core.use_database (3) / database create_local_resource / result: "),
                                                    sprintf!("{:?}",
                                                             v74.clone())),
                                             string("")));
                            let v82: bool = true;
                            leptos::logging::log!("{}", v80);
                            let v83: std::sync::Arc<rexie::Rexie> = Dice_ui::method11(v74);
                            let v84: string = string("}");
                            let v90: bool = true;
                            let v85 = v83;
                            let v99: string = append(
                                append(
                                    append(append(string("true; v85 "), v84), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v100: bool = true;
                            v85
                        }); // rust.fix_closure';
                        let v102 = __future_init;
                        let v105: std::pin::Pin<
                            Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                        > = Dice_ui::method12(v102);
                        let v107: std::sync::Arc<rexie::Rexie> = v105.await;
                        let v109: string = string("}}");
                        let v111: string = string("{");
                        let v117: bool = true;
                        let v112 = v107;
                        let v126: string = append(
                            append(
                                append(append(string("true; v112 "), v109), string("); ")),
                                v111,
                            ),
                            string(" // rust.fix_closure\'"),
                        );
                        let v127: bool = true;
                        v112
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn closure10(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
                                            */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v7: */
                std::sync::Arc<rexie::Rexie>, /* = defaultOf();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v13: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v15: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v17: &std::sync::Arc<rexie::Rexie> = &v15.0;
                    let v19: &std::sync::Arc<rexie::Rexie> = &v13.0;
                    let v21: bool = std::sync::Arc::ptr_eq(v19, v17);
                    v21 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(
            v0_1: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v2: Option<std::sync::Arc<rexie::Rexie>> = leptos::SignalGet::get(&v0_1);
            let v4: bool = true;
            let _optionm_map_ = v2.map(|x| {
                //;
                let v6: std::sync::Arc<rexie::Rexie> = x;
                let v9: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v6);
                let v11: bool = true;
                v9
            });
            _optionm_map_
        }
        pub fn closure11(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method14() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US4> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure11((), v))
        }
        pub fn closure12(unitVar: (), v0_1: string) -> std::string::String {
            let v5: &str = &*v0_1;
            String::from(v5)
        }
        pub fn method15(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method16() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn method17() -> string {
            string("store")
        }
        pub fn closure14(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method18() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure14((), v))
        }
        pub fn method19() -> string {
            string("core-state-heap")
        }
        pub fn closure15(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method20() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure15((), v))
        }
        pub fn closure16(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method21() -> Func1<wasm_bindgen::JsValue, Dice_ui::US6> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure16((), v))
        }
        pub fn method22(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method23() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method24() -> Func1<serde_json::Value, Dice_ui::US7> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure18((), v))
        }
        pub fn method25(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure19(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method26() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method27() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure20((), v))
        }
        pub fn method28(
            v0_1: Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String>,
        ) -> Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String> {
            v0_1
        }
        pub fn closure21(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn closure22(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            Dice_ui::US8::US8_1(v0_1)
        }
        pub fn closure23(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method29() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US5> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method30() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US3> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure24((), v))
        }
        pub fn method31(v0_1: Dice_ui::US3) -> Dice_ui::US3 {
            v0_1
        }
        pub fn method32(
            v0_1: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>> {
            v0_1
        }
        pub fn method13(
            v0_1: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
        ) -> leptos::Resource<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>, Dice_ui::US3>
        {
            let __create_local_resource = leptos::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        move || Dice_ui::closure9(v0_1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let v4: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = x;
                        let v6: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v10: string =
                    append(append(string("state_core.use_core_database (2) / core_state_heap create_local_resource / database: "),
                                  sprintf!("{:?}", v4.clone())), string(""));
                            let v12: bool = true;
                            leptos::logging::log!("{}", v10);
                            let v14: bool = true;
                            let _optionm_map_ = v4.map(|x| {
                                //;
                                let v16: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                                let v18: std::sync::Arc<rexie::Rexie> = v16.0;
                                let v20: bool = true;
                                v18
                            });
                            let v22: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                            let v36: Dice_ui::US4 =
                                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v22));
                            let v332: Dice_ui::US5 = match &v36 {
                                Dice_ui::US4::US4_0(v36_0_0) => {
                                    let v42: string =
                                        string("state_core.get_data () / id: core-state-heap");
                                    let v44: bool = true;
                                    leptos::logging::log!("{}", v42);
                                    let v46: bool = true;
                                    let __future_init = Box::pin(async {
                                        //;
                                        let v48: Array<string> = new_array(&[string("store")]);
                                        let v50: Vec<string> = v48.to_vec();
                                        let v53: Vec<std::string::String> = v50
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new(move |v: string| {
                                                    Dice_ui::closure12((), v)
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v54: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method15(match &v36 {
                                                Dice_ui::US4::US4_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            });
                                        let v56: Result<rexie::Transaction, rexie::Error> =
                                            v54.transaction(&v53, rexie::TransactionMode::ReadOnly);
                                        let v57 = Dice_ui::method16();
                                        let v62: Result<rexie::Transaction, std::string::String> =
                                            v56.map_err(|x| v57(x));
                                        let v72: rexie::Transaction = v62?;
                                        let v73: string = Dice_ui::method17();
                                        let v78: &str = &*v73;
                                        let v96: Result<rexie::Store, rexie::Error> =
                                            v72.store(v78);
                                        let v97 = Dice_ui::method18();
                                        let v102: Result<rexie::Store, std::string::String> =
                                            v96.map_err(|x| v97(x));
                                        let v112: rexie::Store = v102?;
                                        let v113: string = Dice_ui::method19();
                                        let v118: &str = &*v113;
                                        let v136: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v118);
                                        let v138: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v112, v136));
                                        let v140: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v138.await;
                                        let v141 = Dice_ui::method20();
                                        let v146: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v140.map_err(|x| v141(x));
                                        let v156: Option<wasm_bindgen::JsValue> = v146?;
                                        let v170: Dice_ui::US6 = defaultValue(
                                            Dice_ui::US6::US6_1,
                                            map(Dice_ui::method21(), v156),
                                        );
                                        let v267: Dice_ui::US5 = match &v170 {
                                            Dice_ui::US6::US6_0(v170_0_0) => {
                                                let v175: wasm_bindgen::JsValue =
                                                    Dice_ui::method22(match &v170 {
                                                        Dice_ui::US6::US6_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    });
                                                let v177: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v175);
                                                let v178 = Dice_ui::method23();
                                                let v183: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v177.map_err(|x| v178(x));
                                                let v193: Option<serde_json::Value> = v183?;
                                                let v207: Dice_ui::US7 = defaultValue(
                                                    Dice_ui::US7::US7_1,
                                                    map(Dice_ui::method24(), v193),
                                                );
                                                match &v207 {
                                                    Dice_ui::US7::US7_0(v207_0_0) => {
                                                        let v212: serde_json::Value =
                                                            Dice_ui::method25(match &v207 {
                                                                Dice_ui::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            });
                                                        let v214: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v212);
                                                        let v215 = Dice_ui::method26();
                                                        let v220: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v214.map_err(|x| v215(x));
                                                        let v230: Vec<u8> = v220?;
                                                        let v232: Array<u8> =
                                                    fable_library_rust::NativeArray_::array_from(v230);
                                                        let v234: string =
                                                    append(append(string("state_core.get_data () / data_len: "),
                                                                  toString(count(v232.clone()))),
                                                           string(""));
                                                        let v236: bool = true;
                                                        leptos::logging::log!("{}", v234);
                                                        let v238: Vec<u8> = v232.to_vec();
                                                        let v240: &[u8] = v238.as_slice();
                                                        let v242: bool = true;
                                                        let mut v240 = v240;
                                                        let v244: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v240,
                                                        );
                                                        let v245 = Dice_ui::method27();
                                                        let v250: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v244.map_err(|x| v245(x));
                                                        Dice_ui::US5::US5_0(v250?)
                                                    }
                                                    _ => Dice_ui::US5::US5_1,
                                                }
                                            }
                                            _ => Dice_ui::US5::US5_1,
                                        };
                                        let v276: Result<
                                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            std::string::String,
                                        > = Dice_ui::method28(Ok::<
                                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            std::string::String,
                                        >(
                                            match &v267 {
                                            Dice_ui::US5::US5_0(v267_0_0) => Some(match &v267 {
                                                Dice_ui::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }),
                                            _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                        }
                                        ));
                                        let v279: string = string("}");
                                        let v285: bool = true;
                                        let v280 = v276;
                                        let v294: string = append(
                                            append(
                                                append(
                                                    append(string("true; v280 "), v279),
                                                    string("); "),
                                                ),
                                                string(""),
                                            ),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v295: bool = true;
                                        v280
                                    }); // rust.fix_closure';
                                    let v297 = __future_init;
                                    let v299: std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    > = v297;
                                    let v301: Result<
                                        Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                        std::string::String,
                                    > = v299.await;
                                    let v304: Dice_ui::US8 = match &v301 {
                                        Err(v301_1_0) => Dice_ui::closure22((), v301_1_0.clone()),
                                        Ok(v301_0_0) => Dice_ui::closure21((), v301_0_0.clone()),
                                    };
                                    match &v304 {
                                        Dice_ui::US8::US8_0(v304_0_0) => defaultValue(
                                            Dice_ui::US5::US5_1,
                                            map(Dice_ui::method29(), v304_0_0.clone()),
                                        ),
                                        Dice_ui::US8::US8_1(v304_1_0) => {
                                            let v324: string =
                                        append(append(string("state_core.use_core_database (3) / error: "),
                                                      toString(v304_1_0.clone())),
                                               string(""));
                                            let v326: bool = true;
                                            leptos::logging::log!("{}", v324);
                                            Dice_ui::US5::US5_1
                                        }
                                    }
                                }
                                _ => Dice_ui::US5::US5_1,
                            };
                            let v354: Dice_ui::US9 = match &v332 {
                                Dice_ui::US5::US5_0(v332_0_0) => Dice_ui::US9::US9_0(defaultValue(
                                    Dice_ui::US3::US3_1,
                                    map(
                                        Dice_ui::method30(),
                                        match &v332 {
                                            Dice_ui::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                    ),
                                )),
                                _ => Dice_ui::US9::US9_1,
                            };
                            let v362: Dice_ui::US3 =
                                Dice_ui::method31(if let Dice_ui::US9::US9_0(v354_0_0) = &v354 {
                                    let v355: Dice_ui::US3 = match &v354 {
                                        Dice_ui::US9::US9_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US3::US3_0(v355_0_0) = &v355 {
                                        Dice_ui::US3::US3_0(match &v355 {
                                            Dice_ui::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    } else {
                                        Dice_ui::US3::US3_1
                                    }
                                } else {
                                    Dice_ui::US3::US3_1
                                });
                            let v365: string = string("}");
                            let v371: bool = true;
                            let v366 = v362;
                            let v380: string = append(
                                append(
                                    append(append(string("true; v366 "), v365), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v381: bool = true;
                            v366
                        }); // rust.fix_closure';
                        let v383 = __future_init;
                        let v386: std::pin::Pin<
                            Box<dyn std::future::Future<Output = Dice_ui::US3>>,
                        > = Dice_ui::method32(v383);
                        let v388: Dice_ui::US3 = v386.await;
                        let v390: string = string("}}");
                        let v392: string = string("{");
                        let v398: bool = true;
                        let v393 = v388;
                        let v407: string = append(
                            append(
                                append(append(string("true; v393 "), v390), string("); ")),
                                v392,
                            ),
                            string(" // rust.fix_closure\'"),
                        );
                        let v408: bool = true;
                        v393
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn method33() -> web_sys::Window {
            leptos::leptos_dom::window()
        }
        pub fn method34(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure26(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US10 {
            Dice_ui::US10::US10_0(v0_1)
        }
        pub fn closure27(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US10 {
            Dice_ui::US10::US10_1(v0_1)
        }
        pub fn closure28(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method35() -> Func1<web_sys::Storage, Dice_ui::US12> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure28((), v))
        }
        pub fn closure29(unitVar: (), v0_1: Dice_ui::US3) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method36() -> Func1<Dice_ui::US3, Dice_ui::US9> {
            Func1::new(move |v: Dice_ui::US3| Dice_ui::closure29((), v))
        }
        pub fn method37(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method38() -> string {
            string("core-state-heap")
        }
        pub fn closure30(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US13 {
            Dice_ui::US13::US13_0(v0_1)
        }
        pub fn closure31(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US13 {
            Dice_ui::US13::US13_1(v0_1)
        }
        pub fn method39(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure32(unitVar: (), v0_1: std::string::String) -> Dice_ui::US15 {
            Dice_ui::US15::US15_0(v0_1)
        }
        pub fn method40() -> Func1<std::string::String, Dice_ui::US15> {
            Func1::new(move |v: std::string::String| Dice_ui::closure32((), v))
        }
        pub fn method42(v0_1: string) -> string {
            v0_1
        }
        pub fn closure34(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method43() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure34((), v))
        }
        pub fn closure33(unitVar: (), v0_1: std::string::String) -> Dice_ui::US3 {
            let v3: string = Dice_ui::method42(fable_library_rust::String_::fromString(v0_1));
            let v8: &str = &*v3;
            let v26: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v8);
            let v27 = Dice_ui::method43();
            let v32: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v26.map_err(|x| v27(x));
            let v45: Option<LrcPtr<Dice_ui::Heap3>> = v32.ok();
            defaultValue(Dice_ui::US3::US3_1, map(Dice_ui::method30(), v45))
        }
        pub fn method41() -> Func1<std::string::String, Dice_ui::US3> {
            Func1::new(move |v: std::string::String| Dice_ui::closure33((), v))
        }
        pub fn closure36(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            v0_1.l0
        }
        pub fn closure37(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (8) / effect core_state_heap / debug signal_update"));
            v0_1.l1
        }
        pub fn closure38(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            v0_1.l2.clone()
        }
        pub fn closure39(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (10) / effect core_state_heap / data signal_update"));
            v0_1.l3.clone()
        }
        pub fn closure35(v0_1: LrcPtr<Dice_ui::Heap2>, v1: LrcPtr<Dice_ui::Heap3>, unitVar: ()) {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v4: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v2.clone());
            let v8: bool = true;
            leptos::SignalUpdate::update(&v4.l0.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v: bool| Dice_ui::closure36(v1.clone(), v)
                })(x.clone())
            });
            let v10: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v2.clone());
            let v14: bool = true;
            leptos::SignalUpdate::update(&v10.l1.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v_1: bool| Dice_ui::closure37(v1.clone(), v_1)
                })(x.clone())
            });
            let v16: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v2.clone());
            let v20: bool = true;
            leptos::SignalUpdate::update(&v16.l2.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v_2: std::string::String| Dice_ui::closure38(v1.clone(), v_2)
                })(x.clone())
            });
            let v22: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v2);
            let v26: bool = true;
            leptos::SignalUpdate::update(&v22.l3.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v_3: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure39(v1.clone(), v_3)
                })(x.clone())
            });
            ()
        }
        pub fn closure25(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Resource<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Dice_ui::US3,
            >,
            unitVar: (),
        ) {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (4) / effect core_state_heap / ##1")
            );
            let v6: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method34(Dice_ui::method33());
            let v9: Dice_ui::US10 = match &v6 {
                Err(v6_1_0) => Dice_ui::closure27((), v6_1_0.clone()),
                Ok(v6_0_0) => Dice_ui::closure26((), v6_0_0.clone()),
            };
            let v32: Dice_ui::US11 = match &v9 {
                Dice_ui::US10::US10_0(v9_0_0) => Dice_ui::US11::US11_0(defaultValue(
                    Dice_ui::US12::US12_1,
                    map(Dice_ui::method35(), v9_0_0.clone()),
                )),
                Dice_ui::US10::US10_1(v9_1_0) => Dice_ui::US11::US11_1(v9_1_0.clone()),
            };
            if let Dice_ui::US11::US11_0(v32_0_0) = &v32 {
                let v33: Dice_ui::US12 = match &v32 {
                    Dice_ui::US11::US11_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US12::US12_0(v33_0_0) = &v33 {
                    let v34: web_sys::Storage = match &v33 {
                        Dice_ui::US12::US12_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v36: Option<Dice_ui::US3> = leptos::SignalGet::get(&v1);
                    let v50: Dice_ui::US9 =
                        defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method36(), v36));
                    let v57: string =
                        append(append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                      sprintf!("{:?}", v50.clone())),
                               string(""));
                    let v59: bool = true;
                    leptos::logging::log!("{}", v57);
                    let v422: Dice_ui::US3 = if let Dice_ui::US9::US9_0(v50_0_0) = &v50 {
                        let v60: Dice_ui::US3 = match &v50 {
                            Dice_ui::US9::US9_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US3::US3_0(v60_0_0) = &v60 {
                            Dice_ui::US3::US3_0(match &v60 {
                                Dice_ui::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        } else {
                            let v63: web_sys::Storage = Dice_ui::method37(v34.clone());
                            let v64: string = Dice_ui::method38();
                            let v69: &str = &*v64;
                            let v87: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v63, v69);
                            let v90: Dice_ui::US13 = match &v87 {
                                Err(v87_1_0) => Dice_ui::closure31((), v87_1_0.clone()),
                                Ok(v87_0_0) => Dice_ui::closure30((), v87_0_0.clone()),
                            };
                            let v116: Dice_ui::US14 = match &v90 {
                                Dice_ui::US13::US13_0(v90_0_0) => {
                                    let v92: Option<std::string::String> =
                                        Dice_ui::method39(v90_0_0.clone());
                                    let v94: Option<std::string::String> =
                                        serde_json::from_value(v92.into()).unwrap();
                                    Dice_ui::US14::US14_0(defaultValue(
                                        Dice_ui::US15::US15_1,
                                        map(Dice_ui::method40(), v94),
                                    ))
                                }
                                Dice_ui::US13::US13_1(v90_1_0) => {
                                    Dice_ui::US14::US14_1(v90_1_0.clone())
                                }
                            };
                            let v122: Dice_ui::US16 = match &v116 {
                                Dice_ui::US14::US14_0(v116_0_0) => {
                                    Dice_ui::US16::US16_0(v116_0_0.clone())
                                }
                                _ => Dice_ui::US16::US16_1,
                            };
                            let v129: Dice_ui::US15 = if let Dice_ui::US16::US16_0(v122_0_0) = &v122
                            {
                                let v123: Dice_ui::US15 = match &v122 {
                                    Dice_ui::US16::US16_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US15::US15_0(v123_0_0) = &v123 {
                                    Dice_ui::US15::US15_0(match &v123 {
                                        Dice_ui::US15::US15_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US15::US15_1
                                }
                            } else {
                                Dice_ui::US15::US15_1
                            };
                            let v136: Option<std::string::String> = match &v129 {
                                Dice_ui::US15::US15_0(v129_0_0) => Some(match &v129 {
                                    Dice_ui::US15::US15_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }),
                                _ => None::<std::string::String>,
                            };
                            let v138: Option<Dice_ui::US3> = map(Dice_ui::method41(), v136);
                            let v231: Dice_ui::US9 =
                                defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method36(), v138));
                            if let Dice_ui::US9::US9_0(v231_0_0) = &v231 {
                                let v235: Dice_ui::US3 = match &v231 {
                                    Dice_ui::US9::US9_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US3::US3_0(v235_0_0) = &v235 {
                                    Dice_ui::US3::US3_0(match &v235 {
                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US3::US3_1
                                }
                            } else {
                                Dice_ui::US3::US3_1
                            }
                        }
                    } else {
                        let v243: web_sys::Storage = Dice_ui::method37(v34);
                        let v244: string = Dice_ui::method38();
                        let v249: &str = &*v244;
                        let v267: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                            web_sys::Storage::get_item(&v243, v249);
                        let v270: Dice_ui::US13 = match &v267 {
                            Err(v267_1_0) => Dice_ui::closure31((), v267_1_0.clone()),
                            Ok(v267_0_0) => Dice_ui::closure30((), v267_0_0.clone()),
                        };
                        let v296: Dice_ui::US14 = match &v270 {
                            Dice_ui::US13::US13_0(v270_0_0) => {
                                let v272: Option<std::string::String> =
                                    Dice_ui::method39(v270_0_0.clone());
                                let v274: Option<std::string::String> =
                                    serde_json::from_value(v272.into()).unwrap();
                                Dice_ui::US14::US14_0(defaultValue(
                                    Dice_ui::US15::US15_1,
                                    map(Dice_ui::method40(), v274),
                                ))
                            }
                            Dice_ui::US13::US13_1(v270_1_0) => {
                                Dice_ui::US14::US14_1(v270_1_0.clone())
                            }
                        };
                        let v302: Dice_ui::US16 = match &v296 {
                            Dice_ui::US14::US14_0(v296_0_0) => {
                                Dice_ui::US16::US16_0(v296_0_0.clone())
                            }
                            _ => Dice_ui::US16::US16_1,
                        };
                        let v309: Dice_ui::US15 = if let Dice_ui::US16::US16_0(v302_0_0) = &v302 {
                            let v303: Dice_ui::US15 = match &v302 {
                                Dice_ui::US16::US16_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US15::US15_0(v303_0_0) = &v303 {
                                Dice_ui::US15::US15_0(match &v303 {
                                    Dice_ui::US15::US15_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Dice_ui::US15::US15_1
                            }
                        } else {
                            Dice_ui::US15::US15_1
                        };
                        let v316: Option<std::string::String> = match &v309 {
                            Dice_ui::US15::US15_0(v309_0_0) => Some(match &v309 {
                                Dice_ui::US15::US15_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => None::<std::string::String>,
                        };
                        let v318: Option<Dice_ui::US3> = map(Dice_ui::method41(), v316);
                        let v411: Dice_ui::US9 =
                            defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method36(), v318));
                        if let Dice_ui::US9::US9_0(v411_0_0) = &v411 {
                            let v415: Dice_ui::US3 = match &v411 {
                                Dice_ui::US9::US9_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US3::US3_0(v415_0_0) = &v415 {
                                Dice_ui::US3::US3_0(match &v415 {
                                    Dice_ui::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Dice_ui::US3::US3_1
                            }
                        } else {
                            Dice_ui::US3::US3_1
                        }
                    };
                    let v426: string =
                        append(append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                      sprintf!("{:?}", v422.clone())),
                               string(""));
                    let v428: bool = true;
                    leptos::logging::log!("{}", v426);
                    if let Dice_ui::US3::US3_0(v422_0_0) = &v422 {
                        let v432: bool = true;
                        leptos::batch(move || {
                            Func0::new({
                                let v0_1 = v0_1.clone();
                                let v422 = v422.clone();
                                move || {
                                    Dice_ui::closure35(
                                        v0_1.clone(),
                                        match &v422 {
                                            Dice_ui::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        (),
                                    )
                                }
                            })()
                        });
                        ()
                    }
                }
            }
        }
        pub fn closure40(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::RwSignal<bool>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading create_memo")
            );
            leptos::SignalGetUntracked::get_untracked(&v0_1.l1.clone())
        }
        pub fn method44() -> string {
            string("core-state-heap")
        }
        pub fn method45(v0_1: Result<(), rexie::Error>) -> Result<(), rexie::Error> {
            v0_1
        }
        pub fn method46() {
            ();
        }
        pub fn closure41(
            v0_1: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: string = sprintf!("{:?}", v1.clone());
            let v6: Option<std::sync::Arc<rexie::Rexie>> = leptos::SignalGet::get(&v0_1);
            let v20: Dice_ui::US4 = defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v6));
            let v25: bool = true;
            let __future_init = Box::pin(async move {
                //;
                match &v20 {
                    Dice_ui::US4::US4_0(v20_0_0) => {
                        let v27: string =
                        append(append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                      v2), string(""));
                        let v29: bool = true;
                        leptos::logging::log!("{}", v27);
                        let v34: string = append(
                            append(
                                string("state_core.set_data () / data_len: "),
                                toString(length(sprintf!("{:?}", v1.clone())) as i64),
                            ),
                            string(""),
                        );
                        let v36: bool = true;
                        leptos::logging::log!("{}", v34);
                        let v38: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v40: bool = true;
                            let mut data = Vec::new();
                            let v42: bool = true;
                            borsh::BorshSerialize::serialize(&v1.clone(), &mut data).unwrap();
                            let v44: Vec<u8> = data;
                            let v46: wasm_bindgen::JsValue =
                                serde_wasm_bindgen::to_value(&v44).unwrap();
                            let v47: string = Dice_ui::method44();
                            let v52: &str = &*v47;
                            let v70: rexie::Transaction = match &v20 {
                                Dice_ui::US4::US4_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                            let v72: rexie::Store = v70.store("store")?;
                            let v74: bool = true;
                            v72.put(&v46, Some(&v52.into())).await?;
                            let v76: bool = true;
                            v70.done().await?;
                            let v78: Result<(), rexie::Error> =
                                Dice_ui::method45(Ok::<(), rexie::Error>(()));
                            let v81: string = string("}");
                            let v87: bool = true;
                            let v82 = v78;
                            let v96: string = append(
                                append(
                                    append(append(string("true; v82 "), v81), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v97: bool = true;
                            v82
                        }); // rust.fix_closure';
                        let v99 = __future_init;
                        let v101: std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                        > = v99;
                        let v103: Result<(), rexie::Error> = v101.await;
                        v103.unwrap();
                        ();
                        ()
                    }
                    _ => {
                        let v110: bool = true;
                        leptos::logging::log!("{}", string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                        ()
                    }
                }
                Dice_ui::method46();
                {
                    let v114: string = string("}}");
                    let v116: string = string("{");
                    let v122: bool = true;
                    let v117 = ();
                    let v131: string = append(
                        append(
                            append(append(string("true; v117 "), v114), string("); ")),
                            v116,
                        ),
                        string(" // rust.fix_closure\'"),
                    );
                    let v132: bool = true;
                    v117
                }
            });
            {
                // rust.fix_closure';
                let v134 = __future_init;
                v134
            }
        }
        pub fn method47(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure43(unitVar: (), v0_1: leptos::RwSignal<bool>) -> Dice_ui::US17 {
            Dice_ui::US17::US17_0(v0_1)
        }
        pub fn method48() -> Func1<leptos::RwSignal<bool>, Dice_ui::US17> {
            Func1::new(move |v: leptos::RwSignal<bool>| Dice_ui::closure43((), v))
        }
        pub fn closure44(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            true
        }
        pub fn method49(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method50() -> string {
            string("core-state-heap")
        }
        pub fn method51(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure42(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
            v2: leptos::WriteSignal<bool>,
            v3: leptos::ReadSignal<bool>,
            v4: leptos::Action<LrcPtr<Dice_ui::Heap3>, ()>,
            unitVar: (),
        ) {
            let v6: bool = leptos::SignalGet::get(&v3);
            let v7: string =
                append(append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                              ofBoolean(v6)), string(""));
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v10: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v12: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v10.clone());
            let v15: bool = leptos::SignalGet::get(&v12.l0.clone());
            let v17: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v10.clone());
            let v20: bool = leptos::SignalGet::get(&v17.l1.clone());
            let v22: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v10.clone());
            let v25: std::string::String = leptos::SignalGet::get(&v22.l2.clone());
            let v27: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v10);
            let v31: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                l0: v15,
                l1: v20,
                l2: v25,
                l3: leptos::SignalGet::get(&v27.l3.clone()),
            });
            let v35: string =
                append(append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                              sprintf!("{:?}", v31.clone())), string(""));
            let v37: bool = true;
            leptos::logging::log!("{}", v35);
            let v39: std::collections::HashMap<std::string::String, leptos::RwSignal<bool>> = v1();
            let v45: &str = &*string("dark_mode_key");
            let v83: std::string::String = Dice_ui::method47(String::from(v45));
            let v85: Option<leptos::RwSignal<bool>> = std::collections::HashMap::get(&v39, &v83)
                .map(|x| x)
                .cloned();
            let v99: Dice_ui::US17 =
                defaultValue(Dice_ui::US17::US17_1, map(Dice_ui::method48(), v85));
            let v109: Dice_ui::US18 = match &v99 {
                Dice_ui::US17::US17_0(v99_0_0) => {
                    Dice_ui::US18::US18_0(leptos::SignalGet::get(&match &v99 {
                        Dice_ui::US17::US17_0(x) => x.clone(),
                        _ => unreachable!(),
                    }))
                }
                _ => Dice_ui::US18::US18_1,
            };
            let v112: bool = match &v109 {
                Dice_ui::US18::US18_0(v109_0_0) => match &v109 {
                    Dice_ui::US18::US18_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => false,
            };
            let v113: string =
                append(append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                              ofBoolean(v112)), string(""));
            let v115: bool = true;
            leptos::logging::log!("{}", v113);
            if v112 == false {
                if v6 == false {
                    let v120: bool = true;
                    leptos::SignalUpdate::update(&v2, |x| {
                        *x = Func1::new(move |v: bool| Dice_ui::closure44((), v))(x.clone())
                    });
                    ()
                } else {
                    let v123: bool = true;
                    leptos::logging::log!(
                        "{}",
                        string(
                            "state_core.use_core_database (18) / effect new_core_state_heap / ##4"
                        )
                    );
                    let v125: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                        Dice_ui::method34(Dice_ui::method33());
                    let v128: Dice_ui::US10 = match &v125 {
                        Err(v125_1_0) => Dice_ui::closure27((), v125_1_0.clone()),
                        Ok(v125_0_0) => Dice_ui::closure26((), v125_0_0.clone()),
                    };
                    let v151: Dice_ui::US11 = match &v128 {
                        Dice_ui::US10::US10_0(v128_0_0) => Dice_ui::US11::US11_0(defaultValue(
                            Dice_ui::US12::US12_1,
                            map(Dice_ui::method35(), v128_0_0.clone()),
                        )),
                        Dice_ui::US10::US10_1(v128_1_0) => Dice_ui::US11::US11_1(v128_1_0.clone()),
                    };
                    if let Dice_ui::US11::US11_0(v151_0_0) = &v151 {
                        let v152: Dice_ui::US12 = match &v151 {
                            Dice_ui::US11::US11_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US12::US12_0(v152_0_0) = &v152 {
                            let v155: bool = true;
                            leptos::Action::dispatch(&v4, v31.clone().clone());
                            let v156: web_sys::Storage = Dice_ui::method49(match &v152 {
                                Dice_ui::US12::US12_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            let v157: string = Dice_ui::method50();
                            let v162: &str = &*v157;
                            let v179: LrcPtr<Dice_ui::Heap3> = Dice_ui::method51(v31);
                            let v181: std::string::String = serde_json::json!(v179).to_string();
                            let v183: &str = v181.as_str();
                            web_sys::Storage::set(&v156, v162, v183).unwrap();
                            ()
                        }
                    }
                };
            }
        }
        pub fn closure45(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalGet::get(&v3.l0.clone())
        }
        pub fn method52(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure45(v0_1.clone(), ())
            })
        }
        pub fn closure47(v0_1: leptos_router::Location, unitVar: ()) -> string {
            let v2: leptos::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = v2();
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = v8();
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                v6,
                (if v12.clone() == string("") {
                    string("")
                } else {
                    sprintf!("?{}", v12)
                }),
            )
        }
        pub fn method54(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure48(
            v0_1: leptos_router::Location,
            v1: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)>,
            v2: leptos::Memo<string>,
            v3: LrcPtr<Dice_ui::Heap2>,
            v4: leptos::WriteSignal<bool>,
            v5: leptos::ReadSignal<bool>,
            unitVar: (),
        ) {
            let v7: bool = leptos::SignalGet::get(&v5);
            let v9: leptos::Memo<std::string::String> = v0_1.hash;
            let v11: std::string::String = v9();
            let v14: string = sprintf!("{}{}", v2(), v11.clone());
            let v15: string = append(
                append(
                    append(
                        append(
                            string("content.render () / effect 1 / new_url_hash: "),
                            v14.clone(),
                        ),
                        string(" / loaded: "),
                    ),
                    ofBoolean(v7),
                ),
                string(""),
            );
            let v17: bool = true;
            leptos::logging::log!("{}", v15);
            if v7 == false {
                let v19: std::string::String = Dice_ui::method54(v11);
                if v19 == "" {
                    let v24: LrcPtr<Dice_ui::Heap1> =
                        leptos::SignalGetUntracked::get_untracked(&v3.l0.clone());
                    let v27: std::string::String = leptos::SignalGet::get(&v24.l2.clone());
                    let v29: string = fable_library_rust::String_::fromString(v27);
                    let v30: string = append(
                        append(
                            string("content.render () / effect 1 / url_hash: "),
                            v29.clone(),
                        ),
                        string(""),
                    );
                    let v32: bool = true;
                    leptos::logging::log!("{}", v30);
                    if contains(v29.clone(), string("#")) {
                        let v41: &str = &*v29;
                        v1(v41, Default::default());
                        ()
                    }
                }
                {
                    let v60: bool = true;
                    leptos::SignalSet::set(&v4, true);
                    ()
                }
            } else {
                let v63: LrcPtr<Dice_ui::Heap1> =
                    leptos::SignalGetUntracked::get_untracked(&v3.l0.clone());
                let v69: &str = &*v14;
                let v90: std::string::String = String::from(v69);
                let v108: bool = true;
                leptos::SignalSet::set(&v63.l2.clone(), v90);
                ()
            }
        }
        pub fn method55(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure50(unitVar: (), v0_1: leptos_router::Url) -> Dice_ui::US21 {
            Dice_ui::US21::US21_0(v0_1)
        }
        pub fn closure51(unitVar: (), v0_1: std::string::String) -> Dice_ui::US21 {
            Dice_ui::US21::US21_1(v0_1)
        }
        pub fn method56(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure49(
            v0_1: leptos_router::Location,
            v1: leptos::WriteSignal<Dice_ui::US19>,
            unitVar: (),
        ) {
            let v3: leptos::Memo<std::string::String> = v0_1.hash;
            let v6: std::string::String = Dice_ui::method55(v3());
            let v8: Option<&str> = v6.strip_prefix('#');
            let v10: string = string("r#\"\"#");
            let v11: &str = r#""#;
            let v13: &str = v8.unwrap_or(v11);
            let v15: Result<leptos_router::Url, std::string::String> =
                leptos_router::Url::try_from(v13);
            let v18: Dice_ui::US21 = match &v15 {
                Err(v15_1_0) => Dice_ui::closure51((), v15_1_0.clone()),
                Ok(v15_0_0) => Dice_ui::closure50((), v15_0_0.clone()),
            };
            let v25: std::string::String = format!("{:#?}", v18.clone());
            let v46: string = append(
                append(
                    string("content.render () / effect 2 / hash_url: "),
                    fable_library_rust::String_::fromString(v25),
                ),
                string(""),
            );
            let v48: bool = true;
            leptos::logging::log!("{}", v46);
            match &v18 {
                Dice_ui::US21::US21_0(v18_0_0) => {
                    let v55: Array<Dice_ui::US19> = new_array(&[
                        Dice_ui::US19::US19_1(Dice_ui::US20::US20_0),
                        Dice_ui::US19::US19_2,
                        Dice_ui::US19::US19_3,
                        Dice_ui::US19::US19_4,
                    ]);
                    let v56: i32 = count(v55.clone());
                    let v58: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                        l0: MutCell::new(0_i32),
                        l1: MutCell::new(Dice_ui::US22::US22_1),
                    });
                    while Dice_ui::method56(v56, v58.clone()) {
                        let v60: i32 = v58.l0.get().clone();
                        let v61: Dice_ui::US22 = v58.l1.get().clone();
                        let v62: Dice_ui::US19 = v55[v60].clone();
                        let v87: Dice_ui::US22 = match &v61 {
                            Dice_ui::US22::US22_0(v61_0_0) => Dice_ui::US22::US22_0(match &v61 {
                                Dice_ui::US22::US22_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => {
                                let v74: string = match &v62 {
                                    Dice_ui::US19::US19_1(v62_1_0) => string("dice"),
                                    Dice_ui::US19::US19_2 => string("lists"),
                                    Dice_ui::US19::US19_4 => string("settings"),
                                    Dice_ui::US19::US19_3 => string("transactions"),
                                    _ => string(""),
                                };
                                let v76: std::string::String = v18_0_0.clone().pathname;
                                if startsWith(
                                    fable_library_rust::String_::fromString(v76),
                                    append(append(string("/"), v74), string("")),
                                    false,
                                ) {
                                    Dice_ui::US22::US22_0(v62.clone())
                                } else {
                                    Dice_ui::US22::US22_1
                                }
                            }
                        };
                        let v88: i32 = v60 + 1_i32;
                        v58.l0.set(v88);
                        v58.l1.set(v87);
                        ()
                    }
                    {
                        let v89: Dice_ui::US22 = v58.l1.get().clone();
                        let v90: Dice_ui::US19 = v55[0_i32].clone();
                        let v93: Dice_ui::US19 = match &v89 {
                            Dice_ui::US22::US22_0(v89_0_0) => match &v89 {
                                Dice_ui::US22::US22_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v90,
                        };
                        let v100: std::string::String = format!("{:#?}", v93.clone());
                        let v121: string = append(
                            append(
                                string("content.render () / effect 2 / new_tab: "),
                                fable_library_rust::String_::fromString(v100),
                            ),
                            string(""),
                        );
                        let v123: bool = true;
                        leptos::logging::log!("{}", v121);
                        let v125: bool = true;
                        leptos::SignalSet::set(&v1, v93);
                        ()
                    }
                }
                Dice_ui::US21::US21_1(v18_1_0) => {
                    let v127: string = append(
                        append(
                            string("content.render () / effect 2 / hash_url error: "),
                            toString(v18_1_0.clone()),
                        ),
                        string(""),
                    );
                    let v129: bool = true;
                    leptos::logging::log!("{}", v127);
                    ()
                }
            }
        }
        pub fn closure56(
            unitVar: (),
            v0_: bool,
            v0__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v0_1: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v0_, v0__1));
            (v0_1.0.clone(), v0_1.1.clone())
        }
        pub fn closure57(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method60() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure57((), arg10_0040)
            })
        }
        pub fn method61(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure58(unitVar: (), _arg: (bool, std::string::String)) -> std::string::String {
            _arg.1.clone()
        }
        pub fn closure59(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn closure55(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v3.l3.clone());
            let v10: Vec<(bool, std::string::String)> = v6
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                        Dice_ui::closure56((), tupledArg.0.clone(), tupledArg.1.clone())
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v11 = Dice_ui::method60();
            let v12: Vec<(bool, std::string::String)> = Dice_ui::method61(v10);
            let v14: Vec<(bool, std::string::String)> = v12
                .into_iter()
                .filter(|x| v11(x.clone().clone()))
                .collect::<Vec<_>>();
            let v17: Vec<std::string::String> = v14
                .into_iter()
                .map(|x| {
                    Func1::new(move |arg10_0040_1: (bool, std::string::String)| {
                        Dice_ui::closure58((), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v20: Vec<string> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(x.clone())
                })
                .collect::<Vec<_>>();
            let v26: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        string("use_transactions.render (2) / accounts create_memo / result: "),
                        sprintf!("{:?}", v20.clone()),
                    ),
                    string(""),
                ),
            );
            let v28: bool = true;
            leptos::logging::log!("{}", v26);
            v20
        }
        pub fn closure61(unitVar: (), v0_1: string) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                append(
                    append(string("https://api3.nearblocks.io/v1/account/"), v0_1),
                    string(""),
                ),
                Dice_ui::US24::US24_0,
                string(""),
                false,
                true,
            )
        }
        pub fn closure60(
            v0_1: leptos::Memo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Vec<string> = v0_1();
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v2
                .into_iter()
                .map(|x| Func1::new(move |v: string| Dice_ui::closure61((), v))(x.clone()))
                .collect::<Vec<_>>();
            let v7: Array<(string, Dice_ui::US24, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v5);
            let v13: string =
                Dice_ui::method10(200_i64,
                                  append(append(string("use_transactions.render (3) / accounts_metadata create_memo / result: "),
                                                sprintf!("{:?}", v7.clone())),
                                         string("")));
            let v15: bool = true;
            leptos::logging::log!("{}", v13);
            v7
        }
        pub fn method62(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure64(v0_1: string, v1: i32) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                append(
                    append(
                        append(
                            append(
                                append(
                                    append(string("https://api3.nearblocks.io/v1/account/"), v0_1),
                                    string("/txns?&order=desc&page="),
                                ),
                                toString(v1 + 1_i32),
                            ),
                            string("&per_page="),
                        ),
                        toString(25_i32),
                    ),
                    string(""),
                ),
                Dice_ui::US24::US24_0,
                string(""),
                false,
                true,
            )
        }
        pub fn closure63(
            v0_1: LrcPtr<Dice_ui::Heap0>,
            v1: string,
        ) -> (string, Vec<(string, Dice_ui::US24, string, bool, bool)>) {
            let v2: i32 = v0_1.l3;
            let v3: Array<i32> = new_init(&0_i32, v2);
            let v4: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method62(v2, v4.clone()) {
                let v6: i32 = v4.l0.get().clone();
                v3.get_mut()[v6 as usize] = v6;
                {
                    let v7: i32 = v6 + 1_i32;
                    v4.l0.set(v7);
                    ()
                }
            }
            {
                let v9: Vec<i32> = v3.clone().to_vec();
                (
                    v1.clone(),
                    v9.into_iter()
                        .map(|x| {
                            Func1::new({
                                let v1 = v1.clone();
                                move |v: i32| Dice_ui::closure64(v1.clone(), v)
                            })(x.clone())
                        })
                        .collect::<Vec<_>>(),
                )
            }
        }
        pub fn closure62(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v4.l3.clone());
            let v9: Vec<string> = v1();
            let v12: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v9
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v7 = v7.clone();
                        move |v: string| Dice_ui::closure63(v7.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v18: string =
                Dice_ui::method10(200_i64,
                                  append(append(string("use_transactions.render (4) / accounts_requests create_memo / result: "),
                                                sprintf!("{:?}",
                                                         v12.clone())),
                                         string("")));
            let v20: bool = true;
            leptos::logging::log!("{}", v18);
            v12
        }
        pub fn closure66(
            unitVar: (),
            _arg: (string, Vec<(string, Dice_ui::US24, string, bool, bool)>),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            _arg.1.clone()
        }
        pub fn method63(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method64(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn method65(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn closure65(
            v0_1: leptos::Memo<Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>>,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v0_1();
            let v5: Vec<Vec<(string, Dice_ui::US24, string, bool, bool)>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        )| Dice_ui::closure66((), arg10_0040),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v8: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US24, string, bool, bool)>().to_vec();
            let v10: Array<Vec<(string, Dice_ui::US24, string, bool, bool)>> =
                fable_library_rust::NativeArray_::array_from(v5);
            let v11: i32 = count(v10.clone());
            let v12: LrcPtr<Dice_ui::Mut2> = LrcPtr::new(Dice_ui::Mut2 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v8),
            });
            while Dice_ui::method63(v11, v12.clone()) {
                let v14: i32 = v12.l0.get().clone();
                let v15: Vec<(string, Dice_ui::US24, string, bool, bool)> = v12.l1.get().clone();
                let v17: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                    Dice_ui::method64(v10[v14].clone());
                let v18: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method65(v15);
                let v20: bool = true;
                let mut v18 = v18;
                let v22: bool = true;
                v18.extend(v17);
                let v24: Vec<(string, Dice_ui::US24, string, bool, bool)> = v18;
                let v25: i32 = v14 + 1_i32;
                v12.l0.set(v25);
                v12.l1.set(v24);
                ()
            }
            {
                let v26: Vec<(string, Dice_ui::US24, string, bool, bool)> = v12.l1.get().clone();
                let v32: string =
                    Dice_ui::method10(200_i64,
                                      append(append(string("use_transactions.render (5) / txns_requests create_memo / result: "),
                                                    sprintf!("{:?}",
                                                             v26.clone())),
                                             string("")));
                let v34: bool = true;
                leptos::logging::log!("{}", v32);
                v26
            }
        }
        pub fn closure69(
            v0_1: string,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> string {
            v0_1
        }
        pub fn closure68(
            unitVar: (),
            _arg: (string, Vec<(string, Dice_ui::US24, string, bool, bool)>),
        ) -> Vec<string> {
            _arg.1
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let _arg = _arg.clone();
                        move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                            Dice_ui::closure69(_arg.0.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn method66(v0_1: i32, v1: LrcPtr<Dice_ui::Mut3>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method67(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method68(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn closure67(
            v0_1: leptos::Memo<Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>>,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v0_1();
            let v5: Vec<Vec<string>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        )| Dice_ui::closure68((), arg10_0040),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v8: Vec<string> = new_empty::<string>().to_vec();
            let v10: Array<Vec<string>> = fable_library_rust::NativeArray_::array_from(v5);
            let v11: i32 = count(v10.clone());
            let v12: LrcPtr<Dice_ui::Mut3> = LrcPtr::new(Dice_ui::Mut3 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v8),
            });
            while Dice_ui::method66(v11, v12.clone()) {
                let v14: i32 = v12.l0.get().clone();
                let v15: Vec<string> = v12.l1.get().clone();
                let v17: Vec<string> = Dice_ui::method67(v10[v14].clone());
                let v18: Vec<string> = Dice_ui::method68(v15);
                let v20: bool = true;
                let mut v18 = v18;
                let v22: bool = true;
                v18.extend(v17);
                let v24: Vec<string> = v18;
                let v25: i32 = v14 + 1_i32;
                v12.l0.set(v25);
                v12.l1.set(v24);
                ()
            }
            {
                let v26: Vec<string> = v12.l1.get().clone();
                let v28: Array<string> = fable_library_rust::NativeArray_::array_from(v26);
                let v34: string =
                    Dice_ui::method10(200_i64,
                                      append(append(string("use_transactions.render (6) / urls_accounts create_memo / result: "),
                                                    sprintf!("{:?}",
                                                             v28.clone())),
                                             string("")));
                let v36: bool = true;
                leptos::logging::log!("{}", v34);
                v28
            }
        }
        pub fn closure72(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            (v0_1.clone().action, v0_1.method)
        }
        pub fn method69(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure73(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1)
        }
        pub fn method70() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure73((), v))
        }
        pub fn closure71(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Txn,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().receipt_id;
            let v4: std::string::String = v0_1.clone().predecessor_account_id;
            let v6: std::string::String = v0_1.clone().receiver_account_id;
            let v8: std::string::String = v0_1.clone().transaction_hash;
            let v10: std::string::String = v0_1.clone().included_in_block_hash;
            let v12: std::string::String = v0_1.clone().block_timestamp;
            let v14: crate::model::near::nearblocks::Block = v0_1.clone().block;
            let v16: u32 = v14.block_height;
            let v18: Vec<crate::model::near::nearblocks::Action> = v0_1.clone().actions;
            let v21: Vec<(std::string::String, Option<std::string::String>)> = v18
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::nearblocks::Action| {
                        Dice_ui::closure72((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v24: Array<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method69(fable_library_rust::NativeArray_::array_from(v21));
            let v26: crate::model::near::nearblocks::ActionsAgg = v0_1.clone().actions_agg;
            let v28: f64 = v26.deposit;
            let v30: crate::model::near::nearblocks::Outcomes = v0_1.clone().outcomes;
            let v32: bool = v30.status;
            let v34: crate::model::near::nearblocks::OutcomesAgg = v0_1.clone().outcomes_agg;
            let v36: f64 = v34.transaction_fee;
            let v38: Option<Vec<std::string::String>> = v0_1.logs;
            (
                v2,
                v4,
                v6,
                v8,
                v10,
                v12,
                v16,
                v24,
                v28,
                v32,
                v36,
                defaultValue(
                    new_empty::<std::string::String>(),
                    map(Dice_ui::method70(), v38),
                ),
            )
        }
        pub fn method71(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure70(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::nearblocks::Txn| {
                        Dice_ui::closure71((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            Dice_ui::method71(fable_library_rust::NativeArray_::array_from(v5))
        }
        pub fn closure74(
            v0_1: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> = leptos::SignalGet::get(&v0_1);
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn closure75(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> (
            Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) {
            let v3: Option<std::sync::Arc<rexie::Rexie>> = leptos::SignalGet::get(&v1);
            let v5: bool = true;
            let _optionm_map_ = v3.map(|x| {
                //;
                let v7: std::sync::Arc<rexie::Rexie> = x;
                let v10: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v7);
                let v12: bool = true;
                v10
            });
            (_optionm_map_, v0_1())
        }
        pub fn method74(v0_1: string) -> string {
            v0_1
        }
        pub fn method75(
            v0_1: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
        ) -> Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> {
            v0_1
        }
        pub fn closure76(
            v0_1: std::sync::Arc<rexie::Rexie>,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let v6: string = append(
                append(
                    append(append(string("url["), _arg.0.clone()), string("](")),
                    sprintf!("{:?}", _arg.2.clone()),
                ),
                string(")"),
            );
            let v7: string = append(
                append(string("state_core.get_data () / id: "), v6.clone()),
                string(""),
            );
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v11: bool = true;
            let __future_init = Box::pin(async {
                //;
                let v13: Array<string> = new_array(&[string("store")]);
                let v15: Vec<string> = v13.to_vec();
                let v18: Vec<std::string::String> = v15
                    .into_iter()
                    .map(|x| Func1::new(move |v: string| Dice_ui::closure12((), v))(x.clone()))
                    .collect::<Vec<_>>();
                let v19: std::sync::Arc<rexie::Rexie> = Dice_ui::method15(v0_1);
                let v21: Result<rexie::Transaction, rexie::Error> =
                    v19.transaction(&v18, rexie::TransactionMode::ReadOnly);
                let v22 = Dice_ui::method16();
                let v27: Result<rexie::Transaction, std::string::String> = v21.map_err(|x| v22(x));
                let v37: rexie::Transaction = v27?;
                let v38: string = Dice_ui::method17();
                let v43: &str = &*v38;
                let v61: Result<rexie::Store, rexie::Error> = v37.store(v43);
                let v62 = Dice_ui::method18();
                let v67: Result<rexie::Store, std::string::String> = v61.map_err(|x| v62(x));
                let v77: rexie::Store = v67?;
                let v78: string = Dice_ui::method74(v6);
                let v83: &str = &*v78;
                let v101: wasm_bindgen::JsValue = wasm_bindgen::JsValue::from_str(v83);
                let v103: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<wasm_bindgen::JsValue>, rexie::Error>,
                        >,
                    >,
                > = Box::pin(rexie::Store::get(&v77, v101));
                let v105: Result<Option<wasm_bindgen::JsValue>, rexie::Error> = v103.await;
                let v106 = Dice_ui::method20();
                let v111: Result<Option<wasm_bindgen::JsValue>, std::string::String> =
                    v105.map_err(|x| v106(x));
                let v121: Option<wasm_bindgen::JsValue> = v111?;
                let v135: Dice_ui::US6 =
                    defaultValue(Dice_ui::US6::US6_1, map(Dice_ui::method21(), v121));
                let v232: Dice_ui::US26 = match &v135 {
                    Dice_ui::US6::US6_0(v135_0_0) => {
                        let v140: wasm_bindgen::JsValue = Dice_ui::method22(match &v135 {
                            Dice_ui::US6::US6_0(x) => x.clone(),
                            _ => unreachable!(),
                        });
                        let v142: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                            serde_wasm_bindgen::from_value(v140);
                        let v143 = Dice_ui::method23();
                        let v148: Result<Option<serde_json::Value>, std::string::String> =
                            v142.map_err(|x| v143(x));
                        let v158: Option<serde_json::Value> = v148?;
                        let v172: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method24(), v158));
                        match &v172 {
                            Dice_ui::US7::US7_0(v172_0_0) => {
                                let v177: serde_json::Value = Dice_ui::method25(match &v172 {
                                    Dice_ui::US7::US7_0(x) => x.clone(),
                                    _ => unreachable!(),
                                });
                                let v179: Result<Vec<u8>, serde_json::Error> =
                                    serde_json::from_value(v177);
                                let v180 = Dice_ui::method26();
                                let v185: Result<Vec<u8>, std::string::String> =
                                    v179.map_err(|x| v180(x));
                                let v195: Vec<u8> = v185?;
                                let v197: Array<u8> =
                                    fable_library_rust::NativeArray_::array_from(v195);
                                let v199: string = append(
                                    append(
                                        string("state_core.get_data () / data_len: "),
                                        toString(count(v197.clone())),
                                    ),
                                    string(""),
                                );
                                let v201: bool = true;
                                leptos::logging::log!("{}", v199);
                                let v203: Vec<u8> = v197.to_vec();
                                let v205: &[u8] = v203.as_slice();
                                let v207: bool = true;
                                let mut v205 = v205;
                                let v209: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> =
                                    borsh::BorshDeserialize::deserialize(&mut v205);
                                let v210 = Dice_ui::method27();
                                let v215: Result<LrcPtr<Dice_ui::Heap4>, std::string::String> =
                                    v209.map_err(|x| v210(x));
                                Dice_ui::US26::US26_0(v215?)
                            }
                            _ => Dice_ui::US26::US26_1,
                        }
                    }
                    _ => Dice_ui::US26::US26_1,
                };
                let v241: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                    Dice_ui::method75(Ok::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(
                        match &v232 {
                            Dice_ui::US26::US26_0(v232_0_0) => Some(match &v232 {
                                Dice_ui::US26::US26_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                        },
                    ));
                let v244: string = string("}");
                let v250: bool = true;
                let v245 = v241;
                let v259: string = append(
                    append(
                        append(append(string("true; v245 "), v244), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v260: bool = true;
                v245
            }); // rust.fix_closure';
            let v262 = __future_init;
            v262
        }
        pub fn method76(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn method77(
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            v0_1
        }
        pub fn method78(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                >,
            >,
        > {
            v0_1
        }
        pub fn method73(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
        ) -> leptos::Resource<
            (
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Vec<(string, Dice_ui::US24, string, bool, bool)>,
            ),
            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        > {
            let __create_local_resource = leptos::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move || Dice_ui::closure75(v0_1.clone(), v1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        ) = x;
                        let v6: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                            patternInput.1.clone();
                        let v5: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            patternInput.0.clone();
                        let v8: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v9: string = sprintf!("{:?}", v5.clone());
                            let v17: string =
                    append(append(append(append(string("state_core.use_requests (3) / state_data_resource create_local_resource / request : "),
                                                Dice_ui::method10(400_i64,
                                                                  sprintf!("{:?}",
                                                                           v6.clone()))),
                                         string(" / database: ")), v9),
                           string(""));
                            let v19: bool = true;
                            leptos::logging::log!("{}", v17);
                            let v21: bool = true;
                            let _optionm_map_ = v5.map(|x| {
                                //;
                                let v23: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                                let v25: std::sync::Arc<rexie::Rexie> = v23.0;
                                let v27: bool = true;
                                v25
                            });
                            let v29: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                            let v43: Dice_ui::US4 =
                                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v29));
                            let v103: Dice_ui::US25 = if let Dice_ui::US4::US4_0(v43_0_0) = &v43 {
                                let v51: Vec<
                                    std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    >,
                                > = Dice_ui::method76(
                                    v6.into_iter()
                                        .map(|x| {
                                            Func1::new({
                                                let v43 = v43.clone();
                                                move |arg10_0040_1: (
                                                    string,
                                                    Dice_ui::US24,
                                                    string,
                                                    bool,
                                                    bool,
                                                )| {
                                                    Dice_ui::closure76(
                                                        match &v43 {
                                                            Dice_ui::US4::US4_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        },
                                                        arg10_0040_1,
                                                    )
                                                }
                                            })(x.clone())
                                        })
                                        .collect::<Vec<_>>(),
                                );
                                let v53: futures::future::TryJoinAll<
                                    std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    >,
                                > = futures::future::try_join_all(v51);
                                let v55: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = v53.await;
                                Dice_ui::US25::US25_0(v55?)
                            } else {
                                let v64: &str = &*string("database=None");
                                Dice_ui::US25::US25_1(String::from(v64))
                            };
                            let v109: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = match &v103 {
                                Dice_ui::US25::US25_0(v103_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v103_0_0.clone(),
                                    )
                                }
                                Dice_ui::US25::US25_1(v103_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v103_1_0.clone(),
                                    )
                                }
                            };
                            let v115: string =
                    Dice_ui::method10(200_i64,
                                      append(append(string("state_core.use_requests (4) / state_data_resource create_local_resource / result: "),
                                                    sprintf!("{:?}",
                                                             v109.clone())),
                                             string("")));
                            let v117: bool = true;
                            leptos::logging::log!("{}", v115);
                            let v118: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = Dice_ui::method77(v109);
                            let v121: string = string("}");
                            let v127: bool = true;
                            let v122 = v118;
                            let v136: string = append(
                                append(
                                    append(append(string("true; v122 "), v121), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v137: bool = true;
                            v122
                        }); // rust.fix_closure';
                        let v139 = __future_init;
                        let v142: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method78(v139);
                        let v144: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            v142.await;
                        let v146: string = string("}}");
                        let v148: string = string("{");
                        let v154: bool = true;
                        let v149 = v144;
                        let v163: string = append(
                            append(
                                append(append(string("true; v149 "), v146), string("); ")),
                                v148,
                            ),
                            string(" // rust.fix_closure\'"),
                        );
                        let v164: bool = true;
                        v149
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn closure77(
            v0_1: leptos::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method34(Dice_ui::method33());
            let v8: Dice_ui::US10 = match &v5 {
                Err(v5_1_0) => Dice_ui::closure27((), v5_1_0.clone()),
                Ok(v5_0_0) => Dice_ui::closure26((), v5_0_0.clone()),
            };
            let v31: Dice_ui::US11 = match &v8 {
                Dice_ui::US10::US10_0(v8_0_0) => Dice_ui::US11::US11_0(defaultValue(
                    Dice_ui::US12::US12_1,
                    map(Dice_ui::method35(), v8_0_0.clone()),
                )),
                Dice_ui::US10::US10_1(v8_1_0) => Dice_ui::US11::US11_1(v8_1_0.clone()),
            };
            let v39: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US11::US11_0(v31_0_0) = &v31 {
                    if let Dice_ui::US12::US12_0(_) = &match &v31 {
                        Dice_ui::US11::US11_0(x) => x.clone(),
                        _ => unreachable!(),
                    } {
                        leptos::SignalGet::get(&v0_1)
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v45: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v39.clone()),
                    ),
                    string(""),
                ),
            );
            let v47: bool = true;
            leptos::logging::log!("{}", v45);
            v39
        }
        pub fn closure78(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            unitVar: (),
        ) -> (
            Vec<(string, Dice_ui::US24, string, bool, bool)>,
            Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
        ) {
            (v0_1(), v1())
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US27 {
            Dice_ui::US27::US27_0(v0_1)
        }
        pub fn method80(
        ) -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US27>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure79((), v)
                },
            )
        }
        pub fn closure80(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn closure81(unitVar: (), v0_1: std::string::String) -> Dice_ui::US25 {
            Dice_ui::US25::US25_1(v0_1)
        }
        pub fn closure82(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method81() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US26> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure82((), v))
        }
        pub fn closure85(unitVar: (), v0_1: Dice_ui::US26) -> Dice_ui::US33 {
            Dice_ui::US33::US33_0(v0_1)
        }
        pub fn method83() -> Func1<Dice_ui::US26, Dice_ui::US33> {
            Func1::new(move |v: Dice_ui::US26| Dice_ui::closure85((), v))
        }
        pub fn method84(v0_1: Dice_ui::US24) -> Dice_ui::US24 {
            v0_1
        }
        pub fn method85(v0_1: string) -> string {
            v0_1
        }
        pub fn method86(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method87(v0_1: string) -> string {
            v0_1
        }
        pub fn method88(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method89(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method90(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure86(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method91() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure86((), v))
        }
        pub fn method92(
            v0_1: Result<Option<string>, std::string::String>,
        ) -> Result<Option<string>, std::string::String> {
            v0_1
        }
        pub fn closure84(
            v0_1: Dice_ui::US28,
            v1: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US24 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v54: Dice_ui::US30 = match &v0_1 {
                    Dice_ui::US28::US28_0(v0_1_0_0) => {
                        let v9: Dice_ui::US29 = match &v0_1 {
                            Dice_ui::US28::US28_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        Dice_ui::US30::US30_0(match &v9 {
                            Dice_ui::US29::US29_0(v9_0_0) => {
                                let v13: Option<Dice_ui::US26> = tryItem(
                                    v1,
                                    fable_library_rust::NativeArray_::array_from(v9_0_0.clone()),
                                );
                                let v27: Dice_ui::US33 = defaultValue(
                                    Dice_ui::US33::US33_1,
                                    map(Dice_ui::method83(), v13),
                                );
                                let v37: Dice_ui::US26 =
                                    if let Dice_ui::US33::US33_0(v27_0_0) = &v27 {
                                        let v31: Dice_ui::US26 = match &v27 {
                                            Dice_ui::US33::US33_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if let Dice_ui::US26::US26_0(v31_0_0) = &v31 {
                                            Dice_ui::US26::US26_0(match &v31 {
                                                Dice_ui::US26::US26_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        } else {
                                            Dice_ui::US26::US26_1
                                        }
                                    } else {
                                        Dice_ui::US26::US26_1
                                    };
                                Dice_ui::US31::US31_0(match &v37 {
                                    Dice_ui::US26::US26_0(v37_0_0) => Dice_ui::US32::US32_0(
                                        fable_library_rust::String_::fromString(
                                            (match &v37 {
                                                Dice_ui::US26::US26_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                            .l0
                                            .clone(),
                                        ),
                                    ),
                                    _ => Dice_ui::US32::US32_1,
                                })
                            }
                            Dice_ui::US29::US29_1(v9_1_0) => Dice_ui::US31::US31_1(v9_1_0.clone()),
                        })
                    }
                    _ => Dice_ui::US30::US30_1,
                };
                let v59: string =
                    Dice_ui::method10(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                let v64: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v0_1.clone()));
                let v69: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v54.clone()));
                let v94: bool = if v6 {
                    true
                } else {
                    if let Dice_ui::US28::US28_0(v0_1_0_0) = &v0_1 {
                        let v70: Dice_ui::US29 = match &v0_1 {
                            Dice_ui::US28::US28_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US29::US29_0(v70_0_0) = &v70 {
                            if count(fable_library_rust::NativeArray_::array_from(match &v70 {
                                Dice_ui::US29::US29_0(x) => x.clone(),
                                _ => unreachable!(),
                            })) == 0_i32
                            {
                                false
                            } else {
                                if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                                    let v76: Dice_ui::US31 = match &v54 {
                                        Dice_ui::US30::US30_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US31::US31_0(v76_0_0) = &v76 {
                                        if let Dice_ui::US32::US32_1 = &match &v76 {
                                            Dice_ui::US31::US31_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        } {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                                let v82: Dice_ui::US31 = match &v54 {
                                    Dice_ui::US30::US30_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US31::US31_0(v82_0_0) = &v82 {
                                    if let Dice_ui::US32::US32_1 = &match &v82 {
                                        Dice_ui::US31::US31_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    } {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    } else {
                        if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                            let v88: Dice_ui::US31 = match &v54 {
                                Dice_ui::US30::US30_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US31::US31_0(v88_0_0) = &v88 {
                                if let Dice_ui::US32::US32_1 = &match &v88 {
                                    Dice_ui::US31::US31_0(x) => x.clone(),
                                    _ => unreachable!(),
                                } {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                };
                let v95: string =
                append(append(append(append(append(append(append(append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                        v64),
                                                                 string(" / state_data\': ")),
                                                          v69),
                                                   string(" / request: ")),
                                            v59),
                                     string(" / should_fetch: ")),
                              ofBoolean(v94)), string(""));
                let v97: bool = true;
                leptos::logging::log!("{}", v95);
                let v383: Dice_ui::US34 = if v94 == false {
                    Dice_ui::US34::US34_0(None::<string>)
                } else {
                    let v101: Dice_ui::US24 = Dice_ui::method84(v3);
                    let v195: reqwest_wasm::RequestBuilder = match &v101 {
                        Dice_ui::US24::US24_1 => {
                            let v148: string = Dice_ui::method87(v2.clone());
                            let v153: &str = &*v148;
                            let v191: std::string::String = Dice_ui::method88(String::from(v153));
                            reqwest_wasm::Client::builder()
                                .build()
                                .map_err(|err| err.to_string())?
                                .post(v191)
                        }
                        _ => {
                            let v102: string = Dice_ui::method85(v2.clone());
                            let v107: &str = &*v102;
                            let v145: std::string::String = Dice_ui::method86(String::from(v107));
                            reqwest_wasm::Client::builder()
                                .build()
                                .map_err(|err| err.to_string())?
                                .get(v145)
                        }
                    };
                    let v200: &str = &*_arg.2.clone();
                    let v221: std::string::String = String::from(v200);
                    let v239: reqwest_wasm::RequestBuilder =
                        reqwest_wasm::RequestBuilder::body(v195, v221);
                    let v336: reqwest_wasm::RequestBuilder = Dice_ui::method90(if v5 == false {
                        v239
                    } else {
                        let v244: std::string::String =
                            reqwest_wasm::header::CONTENT_TYPE.to_string();
                        let v246: string = fable_library_rust::String_::fromString(v244);
                        let v247: reqwest_wasm::RequestBuilder = Dice_ui::method89(v239);
                        let v252: &str = &*v246;
                        let v273: std::string::String = String::from(v252);
                        let v295: &str = &*string("application/json");
                        let v316: std::string::String = String::from(v295);
                        reqwest_wasm::RequestBuilder::header(v247, v273, v316)
                    });
                    let v338: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::RequestBuilder::send(v336));
                    let v340: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v338.await;
                    let v341 = Dice_ui::method91();
                    let v346: Result<reqwest_wasm::Response, std::string::String> =
                        v340.map_err(|x| v341(x));
                    let v356: reqwest_wasm::Response = v346?;
                    let v358: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<std::string::String, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::Response::text(v356));
                    let v360: Result<std::string::String, reqwest_wasm::Error> = v358.await;
                    let v361 = Dice_ui::method91();
                    let v366: Result<std::string::String, std::string::String> =
                        v360.map_err(|x| v361(x));
                    let v376: std::string::String = v366?;
                    Dice_ui::US34::US34_0(Some(fable_library_rust::String_::fromString(v376)))
                };
                let v390: Result<Option<string>, std::string::String> =
                    Dice_ui::method92(match &v383 {
                        Dice_ui::US34::US34_0(v383_0_0) => {
                            Ok::<Option<string>, std::string::String>(v383_0_0.clone())
                        }
                        Dice_ui::US34::US34_1(v383_1_0) => {
                            Err::<Option<string>, std::string::String>(v383_1_0.clone())
                        }
                    });
                let v393: string = string("}");
                let v399: bool = true;
                let v394 = v390;
                let v408: string = append(
                    append(
                        append(append(string("true; v394 "), v393), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v409: bool = true;
                v394
            }); // rust.fix_closure';
            let v411 = __future_init;
            v411
        }
        pub fn closure83(
            v0_1: Dice_ui::US28,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure84(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method82(
            v0_1: Dice_ui::US28,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v)
            })
        }
        pub fn method93(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn method94(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method95(
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Result<Vec<Option<string>>, std::string::String> {
            v0_1
        }
        pub fn method96(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Vec<Option<string>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<Option<string>>, std::string::String>>>,
        > {
            v0_1
        }
        pub fn method79(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
        ) -> leptos::Resource<
            (
                Vec<(string, Dice_ui::US24, string, bool, bool)>,
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            ),
            Result<Vec<Option<string>>, std::string::String>,
        > {
            let __create_local_resource = leptos::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move || Dice_ui::closure78(v0_1.clone(), v1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                            Option<
                                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                            >,
                        ) = x;
                        let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                            patternInput.0.clone();
                        let v12: string =
                    append(append(string("state_core.use_requests (7) / json create_local_resource / requests: "),
                                  Dice_ui::method10(400_i64,
                                                    sprintf!("{:?}",
                                                             v5.clone()))),
                           string(""));
                        let v14: bool = true;
                        leptos::logging::log!("{}", v12);
                        let v16: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v30: Dice_ui::US27 = defaultValue(
                                Dice_ui::US27::US27_1,
                                map(Dice_ui::method80(), patternInput.1.clone()),
                            );
                            let v72: Dice_ui::US28 = match &v30 {
                                Dice_ui::US27::US27_0(v30_0_0) => {
                                    let v34: Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    > = match &v30 {
                                        Dice_ui::US27::US27_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    let v37: Dice_ui::US25 = match &v34 {
                                        Err(v34_1_0) => Dice_ui::closure81((), v34_1_0.clone()),
                                        Ok(v34_0_0) => Dice_ui::closure80((), v34_0_0.clone()),
                                    };
                                    Dice_ui::US28::US28_0(match &v37 {
                                        Dice_ui::US25::US25_0(v37_0_0) => {
                                            let v40: bool = true;
                                            let _vec_map: Vec<_> = v37_0_0
                                                .clone()
                                                .into_iter()
                                                .map(|x| {
                                                    //;
                                                    let v42: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                    let v56: Dice_ui::US26 = defaultValue(
                                                        Dice_ui::US26::US26_1,
                                                        map(Dice_ui::method81(), v42),
                                                    );
                                                    let v61: bool = true;
                                                    v56
                                                })
                                                .collect::<Vec<_>>();
                                            Dice_ui::US29::US29_0(_vec_map)
                                        }
                                        Dice_ui::US25::US25_1(v37_1_0) => {
                                            Dice_ui::US29::US29_1(v37_1_0.clone())
                                        }
                                    })
                                }
                                _ => Dice_ui::US28::US28_1,
                            };
                            let v78: string = append(
                                append(
                                    string(
                                        "state_core.use_requests (8) / result_memo / state_data: ",
                                    ),
                                    Dice_ui::method10(400_i64, sprintf!("{:?}", v72.clone())),
                                ),
                                string(""),
                            );
                            let v80: bool = true;
                            leptos::logging::log!("{}", v78);
                            let v81 = Dice_ui::method82(v72);
                            let v82: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                                Dice_ui::method93(v5);
                            let v85: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method94(
                                v82.iter()
                                    .enumerate()
                                    .map(|(i, x)| v81(i.try_into().unwrap())(x.clone()))
                                    .collect::<Vec<_>>(),
                            );
                            let v87: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v85);
                            let v89: Result<Vec<Option<string>>, std::string::String> = v87.await;
                            let v93: Result<Vec<Option<string>>, std::string::String> =
                                Dice_ui::method95(Ok::<Vec<Option<string>>, std::string::String>(
                                    v89?,
                                ));
                            let v96: string = string("}");
                            let v102: bool = true;
                            let v97 = v93;
                            let v111: string = append(
                                append(
                                    append(append(string("true; v97 "), v96), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v112: bool = true;
                            v97
                        }); // rust.fix_closure';
                        let v114 = __future_init;
                        let v117: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Vec<Option<string>>, std::string::String>,
                                >,
                            >,
                        > = Dice_ui::method96(v114);
                        let v119: Result<Vec<Option<string>>, std::string::String> = v117.await;
                        let v121: string = string("}}");
                        let v123: string = string("{");
                        let v129: bool = true;
                        let v124 = v119;
                        let v138: string = append(
                            append(
                                append(append(string("true; v124 "), v121), string("); ")),
                                v123,
                            ),
                            string(" // rust.fix_closure\'"),
                        );
                        let v139: bool = true;
                        v124
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn method97(v0_1: string) -> string {
            v0_1
        }
        pub fn closure89(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method98() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure89((), v))
        }
        pub fn method99(v0_1: Result<(), std::string::String>) -> Result<(), std::string::String> {
            v0_1
        }
        pub fn closure88(
            v0_1: LrcPtr<Dice_ui::Heap4>,
            v1: std::sync::Arc<rexie::Rexie>,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v9: string =
                append(append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                              v2.clone()), string(""));
                let v11: bool = true;
                leptos::logging::log!("{}", v9);
                let v12: string = append(
                    append(
                        append(append(string("url["), v2), string("](")),
                        sprintf!("{:?}", _arg.2.clone()),
                    ),
                    string(")"),
                );
                let v17: string = append(
                    append(
                        string("state_core.set_data () / data_len: "),
                        toString(length(sprintf!("{:?}", v0_1.clone())) as i64),
                    ),
                    string(""),
                );
                let v19: bool = true;
                leptos::logging::log!("{}", v17);
                let v21: bool = true;
                let __future_init = Box::pin(async move {
                    //;
                    let v23: bool = true;
                    let mut data = Vec::new();
                    let v25: bool = true;
                    borsh::BorshSerialize::serialize(&v0_1, &mut data).unwrap();
                    let v27: Vec<u8> = data;
                    let v29: wasm_bindgen::JsValue = serde_wasm_bindgen::to_value(&v27).unwrap();
                    let v30: string = Dice_ui::method97(v12);
                    let v35: &str = &*v30;
                    let v53: rexie::Transaction =
                        v1.transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                    let v55: rexie::Store = v53.store("store")?;
                    let v57: bool = true;
                    v55.put(&v29, Some(&v35.into())).await?;
                    let v59: bool = true;
                    v53.done().await?;
                    let v61: Result<(), rexie::Error> =
                        Dice_ui::method45(Ok::<(), rexie::Error>(()));
                    let v64: string = string("}");
                    let v70: bool = true;
                    let v65 = v61;
                    let v79: string = append(
                        append(
                            append(append(string("true; v65 "), v64), string("); ")),
                            string(""),
                        ),
                        string(" // rust.fix_closure\'"),
                    );
                    let v80: bool = true;
                    v65
                }); // rust.fix_closure';
                let v82 = __future_init;
                let v84: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                > = v82;
                let v86: Result<(), rexie::Error> = v84.await;
                let v87 = Dice_ui::method98();
                let v92: Result<(), std::string::String> = v86.map_err(|x| v87(x));
                let v102: bool = true;
                v92?;
                let v104: Result<(), std::string::String> =
                    Dice_ui::method99(Ok::<(), std::string::String>(()));
                let v105: string = string("}");
                let v111: bool = true;
                let v106 = v104;
                let v120: string = append(
                    append(
                        append(append(string("true; v106 "), v105), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v121: bool = true;
                v106
            }); // rust.fix_closure';
            let v123 = __future_init;
            v123
        }
        pub fn method100(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method101(
            v0_1: Result<Vec<()>, std::string::String>,
        ) -> Result<Vec<()>, std::string::String> {
            v0_1
        }
        pub fn closure87(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>>,
            v2: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v7: string = append(
                append(
                    string("state_core.use_requests (10) / set_state_data_action / value_len: "),
                    toString(length(sprintf!("{:?}", v2.clone())) as i64),
                ),
                string(""),
            );
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v11: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v13: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                    leptos::SignalGetUntracked::get_untracked(&v0_1);
                let v15: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                    leptos::SignalGetUntracked::get_untracked(&v1);
                let v17: bool = true;
                let _optionm_map_ = v15.map(|x| {
                    //;
                    let v19: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                    let v21: std::sync::Arc<rexie::Rexie> = v19.0;
                    let v23: bool = true;
                    v21
                });
                let v25: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                let v39: Dice_ui::US4 =
                    defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v25));
                let v62: Dice_ui::US35 = if let Dice_ui::US4::US4_0(v39_0_0) = &v39 {
                    let v47: Vec<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = Dice_ui::method100(
                        v13.into_iter()
                            .map(|x| {
                                Func1::new({
                                    let v2 = v2.clone();
                                    let v39 = v39.clone();
                                    move |arg10_0040: (
                                        string,
                                        Dice_ui::US24,
                                        string,
                                        bool,
                                        bool,
                                    )| {
                                        Dice_ui::closure88(
                                            v2.clone(),
                                            match &v39 {
                                                Dice_ui::US4::US4_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            arg10_0040,
                                        )
                                    }
                                })(x.clone())
                            })
                            .collect::<Vec<_>>(),
                    );
                    let v49: futures::future::TryJoinAll<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = futures::future::try_join_all(v47);
                    let v51: Result<Vec<()>, std::string::String> = v49.await;
                    Dice_ui::US35::US35_0(v51?)
                } else {
                    let v57: bool = true;
                    leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                    Dice_ui::US35::US35_0(new_empty::<()>().to_vec())
                };
                let v69: Result<Vec<()>, std::string::String> = Dice_ui::method101(match &v62 {
                    Dice_ui::US35::US35_0(v62_0_0) => {
                        Ok::<Vec<()>, std::string::String>(v62_0_0.clone())
                    }
                    Dice_ui::US35::US35_1(v62_1_0) => {
                        Err::<Vec<()>, std::string::String>(v62_1_0.clone())
                    }
                });
                let v72: string = string("}");
                let v78: bool = true;
                let v73 = v69;
                let v87: string = append(
                    append(
                        append(append(string("true; v73 "), v72), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v88: bool = true;
                v73
            }); // rust.fix_closure';
            let v90 = __future_init;
            v90
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US38 {
            Dice_ui::US38::US38_0(v0_1)
        }
        pub fn method102() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US38>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure91((), v)
            })
        }
        pub fn closure92(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US40 {
            Dice_ui::US40::US40_0(v0_1)
        }
        pub fn closure93(unitVar: (), v0_1: std::string::String) -> Dice_ui::US40 {
            Dice_ui::US40::US40_1(v0_1)
        }
        pub fn closure94(unitVar: (), v0_1: string) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method103() -> Func1<string, Dice_ui::US32> {
            Func1::new(move |v: string| Dice_ui::closure94((), v))
        }
        pub fn closure97(unitVar: (), v0_1: Dice_ui::US32) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method105() -> Func1<Dice_ui::US32, Dice_ui::US43> {
            Func1::new(move |v: Dice_ui::US32| Dice_ui::closure97((), v))
        }
        pub fn closure98(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method106(
        ) -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure98((), v))
        }
        pub fn method107(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure96(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v51: Dice_ui::US30 = match &v0_1 {
                Dice_ui::US36::US36_0(v0_1_0_0) => {
                    let v8: Dice_ui::US37 = match &v0_1 {
                        Dice_ui::US36::US36_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US30::US30_0(match &v8 {
                        Dice_ui::US37::US37_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US26> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US33 =
                                defaultValue(Dice_ui::US33::US33_1, map(Dice_ui::method83(), v10));
                            let v34: Dice_ui::US26 = if let Dice_ui::US33::US33_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US26 = match &v24 {
                                    Dice_ui::US33::US33_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US26::US26_0(v28_0_0) = &v28 {
                                    Dice_ui::US26::US26_0(match &v28 {
                                        Dice_ui::US26::US26_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US26::US26_1
                                }
                            } else {
                                Dice_ui::US26::US26_1
                            };
                            Dice_ui::US31::US31_0(match &v34 {
                                Dice_ui::US26::US26_0(v34_0_0) => {
                                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US26::US26_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US32::US32_1,
                            })
                        }
                        Dice_ui::US37::US37_1(v8_1_0) => Dice_ui::US31::US31_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US30::US30_1,
            };
            let v62: string = append(
                append(
                    append(
                        append(
                            string("state_core.use_request (15) / result memo / request: "),
                            Dice_ui::method10(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            ),
                        ),
                        string(" / state_data: "),
                    ),
                    Dice_ui::method10(400_i64, sprintf!("{:?}", v51.clone())),
                ),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                append(
                    string("state_core.use_request (16) / effect / json: "),
                    Dice_ui::method10(400_i64, sprintf!("{:?}", v1.clone())),
                ),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US32 = match &v1 {
                Dice_ui::US42::US42_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US32> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone()),
                    );
                    let v90: Dice_ui::US43 =
                        defaultValue(Dice_ui::US43::US43_1, map(Dice_ui::method105(), v76));
                    if let Dice_ui::US43::US43_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US32 = match &v90 {
                            Dice_ui::US43::US43_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US32::US32_0(v94_0_0) = &v94 {
                            Dice_ui::US32::US32_0(match &v94 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        } else {
                            Dice_ui::US32::US32_1
                        }
                    } else {
                        Dice_ui::US32::US32_1
                    }
                }
                _ => Dice_ui::US32::US32_1,
            };
            if let Dice_ui::US32::US32_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method42(match &v104 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                });
                let v111: &str = &*v106;
                let v129: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v130 = Dice_ui::method43();
                let v135: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v129.map_err(|x| v130(x));
                let v144 = Dice_ui::method106();
                let v145: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method107(v135);
                v145.map(|x| v144(x))
            } else {
                if let Dice_ui::US30::US30_0(v51_0_0) = &v51 {
                    let v148: Dice_ui::US31 = match &v51 {
                        Dice_ui::US30::US30_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US31::US31_0(v148_0_0) = &v148 {
                        let v149: Dice_ui::US32 = match &v148 {
                            Dice_ui::US31::US31_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US32::US32_0(v149_0_0) = &v149 {
                            let v151: string = Dice_ui::method42(match &v149 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            let v156: &str = &*v151;
                            let v174: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v156);
                            let v175 = Dice_ui::method43();
                            let v180: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v174.map_err(|x| v175(x));
                            let v189 = Dice_ui::method106();
                            let v190: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method107(v180);
                            v190.map(|x| v189(x))
                        } else {
                            let v196: string = append(
                                append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                ),
                                string(""),
                            );
                            let v198: bool = true;
                            leptos::logging::log!("{}", v196);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v205: string = append(
                            append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            ),
                            string(""),
                        );
                        let v207: bool = true;
                        leptos::logging::log!("{}", v205);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v214: string = append(
                        append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104, v51)),
                        ),
                        string(""),
                    );
                    let v216: bool = true;
                    leptos::logging::log!("{}", v214);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure95(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure96(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method104(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure95(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure90(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            >,
            v3: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v0_1();
            let v9: string = append(
                append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                ),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                v1();
            let v27: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method80(), v13));
            let v71: Dice_ui::US36 = match &v27 {
                Dice_ui::US27::US27_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v34: Dice_ui::US25 = match &v31 {
                        Err(v31_1_0) => Dice_ui::closure81((), v31_1_0.clone()),
                        Ok(v31_0_0) => Dice_ui::closure80((), v31_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v34 {
                        Dice_ui::US25::US25_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method81(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(v60))
                        }
                        Dice_ui::US25::US25_1(v34_1_0) => Dice_ui::US37::US37_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v77: string = append(
                append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    Dice_ui::method10(400_i64, sprintf!("{:?}", v71.clone())),
                ),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                leptos::SignalGet::get(&v2);
            let v95: Dice_ui::US38 =
                defaultValue(Dice_ui::US38::US38_1, map(Dice_ui::method102(), v81));
            let v106: Dice_ui::US39 = match &v95 {
                Dice_ui::US38::US38_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US39::US39_0(match &v99 {
                        Err(v99_1_0) => Dice_ui::closure93((), v99_1_0.clone()),
                        Ok(v99_0_0) => Dice_ui::closure92((), v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US39::US39_1,
            };
            let v142: Dice_ui::US41 = match &v106 {
                Dice_ui::US39::US39_0(v106_0_0) => {
                    let v107: Dice_ui::US40 = match &v106 {
                        Dice_ui::US39::US39_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US41::US41_0(match &v107 {
                        Dice_ui::US40::US40_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method103(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US42::US42_0(_vec_map)
                        }
                        Dice_ui::US40::US40_1(v107_1_0) => Dice_ui::US42::US42_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US41::US41_1,
            };
            let v145: Vec<Dice_ui::US32> = new_empty::<Dice_ui::US32>().to_vec();
            let v149: Dice_ui::US42 = match &v142 {
                Dice_ui::US41::US41_0(v142_0_0) => match &v142 {
                    Dice_ui::US41::US41_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => Dice_ui::US42::US42_0(v145),
            };
            match &v149 {
                Dice_ui::US42::US42_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US32 = x;
                        if let Dice_ui::US32::US32_0(v154_0_0) = &v154 {
                            let v160: &str = &*match &v154 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            let v198: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v200: bool = true;
                            leptos::Action::dispatch(&v3, v198.clone());
                            ()
                        }
                        {
                            let v202: bool = true;
                            let v204: bool = true;
                        }
                    });
                    {
                        //;
                        ()
                    }
                }
                _ => (),
            }
            {
                let v206 = Dice_ui::method104(v71, v149.clone());
                let v207: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method93(v5);
                let v209: Vec<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = v207
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v206(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v211: Array<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = fable_library_rust::NativeArray_::array_from(v209);
                let v217: string = Dice_ui::method10(
                    200_i64,
                    append(
                        append(
                            string("state_core.use_requests (18) / result_func func0 / result: "),
                            sprintf!("{:?}", v211.clone()),
                        ),
                        string(""),
                    ),
                );
                let v219: bool = true;
                leptos::logging::log!("{}", v217);
                v211
            }
        }
        pub fn method109(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure101(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method109(v0_1), v1)
        }
        pub fn method108(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure101(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method110(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn closure100(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            std::string::String,
        > {
            let v2 = Dice_ui::method108(v0_1);
            let v3: Result<Option<crate::model::near::nearblocks::Root>, std::string::String> =
                Dice_ui::method110(v1);
            v3.map(|x| v2(x))
        }
        pub fn closure99(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v2: leptos::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::Memo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::Signal<bool> = leptos::Resource::loading(&v1.clone());
            let v7: bool = leptos::SignalGet::get(&v5);
            let v9: leptos::Signal<bool> = leptos::Resource::loading(&v2.clone());
            let v11: bool = leptos::SignalGet::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> = leptos::SignalGet::get(&v1);
            let v27: Dice_ui::US4 =
                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::SignalGet::get(&v2);
            let v46: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method80(), v32));
            let v90: Dice_ui::US36 = match &v46 {
                Dice_ui::US27::US27_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v53: Dice_ui::US25 = match &v50 {
                        Err(v50_1_0) => Dice_ui::closure81((), v50_1_0.clone()),
                        Ok(v50_0_0) => Dice_ui::closure80((), v50_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v53 {
                        Dice_ui::US25::US25_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method81(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(v79))
                        }
                        Dice_ui::US25::US25_1(v53_1_0) => Dice_ui::US37::US37_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v95: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append(append(append(append(append(append(append(append(string("state_core.use_request (19) / result move / database: "),
                                                                        v95),
                                                                 string(" / database_loading: ")),
                                                          ofBoolean(v7)),
                                                   string(" / state_data: ")),
                                            v100),
                                     string(" / state_data_loading: ")),
                              ofBoolean(v11)), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v3();
            let v107: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v105.to_vec();
            let v110: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        move |v_3: Result<
                            Option<crate::model::near::nearblocks::Root>,
                            std::string::String,
                        >| Dice_ui::closure100(v0_1.clone(), v_3)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v116: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v110.clone()),
                    ),
                    string(""),
                ),
            );
            let v118: bool = true;
            leptos::logging::log!("{}", v116);
            v110
        }
        pub fn method72(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::Memo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v8: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method6();
            let v11 = {
                let clo = Func0::new({
                    let v8 = v8.clone();
                    move || Dice_ui::closure74(v8.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v13: leptos::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>> =
                leptos::create_memo(move |_| v11(()));
            let v14: leptos::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method73(v0_1.clone(), v8.clone());
            let v17 = {
                let clo_1 = Func0::new({
                    let v14 = v14.clone();
                    move || Dice_ui::closure77(v14.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v19: leptos::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::create_memo(move |_| v17(()));
            let v20: leptos::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            > = Dice_ui::method79(v0_1.clone(), v19.clone());
            let v23: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>> =
                leptos::create_action(move |value: &std::sync::Arc<Heap4>| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        let v13 = v13.clone();
                        move |v: LrcPtr<Dice_ui::Heap4>| {
                            Dice_ui::closure87(v0_1.clone(), v13.clone(), v)
                        }
                    })(value.clone())
                });
            let v26 = {
                let clo_2 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v19 = v19.clone();
                    let v20 = v20.clone();
                    let v23 = v23.clone();
                    move || {
                        Dice_ui::closure90(v0_1.clone(), v19.clone(), v20.clone(), v23.clone(), ())
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v28: leptos::Memo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::create_memo(move |_| v26(()));
            let v31 = {
                let clo_3 = Func0::new({
                    let v1 = v1.clone();
                    let v14 = v14.clone();
                    let v28 = v28.clone();
                    let v8 = v8.clone();
                    move || Dice_ui::closure99(v1.clone(), v8.clone(), v14.clone(), v28.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            leptos::create_memo(move |_| v31(()))
        }
        pub fn closure104(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US44 {
            Dice_ui::US44::US44_0(v0_1)
        }
        pub fn closure105(unitVar: (), v0_1: std::string::String) -> Dice_ui::US44 {
            Dice_ui::US44::US44_1(v0_1)
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US44 {
            match &v0_1 {
                Err(v0_1_1_0) => Dice_ui::closure105((), v0_1_1_0.clone()),
                Ok(v0_1_0_0) => Dice_ui::closure104((), v0_1_0_0.clone()),
            }
        }
        pub fn closure107(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US46 {
            Dice_ui::US46::US46_0(v0_1)
        }
        pub fn method111() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US46,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure107((), v),
            )
        }
        pub fn closure106(unitVar: (), v0_1: Dice_ui::US44) -> Dice_ui::US45 {
            match &v0_1 {
                Dice_ui::US44::US44_0(v0_1_0_0) => Dice_ui::US45::US45_0(defaultValue(
                    Dice_ui::US46::US46_1,
                    map(Dice_ui::method111(), v0_1_0_0.clone()),
                )),
                Dice_ui::US44::US44_1(v0_1_1_0) => Dice_ui::US45::US45_1(v0_1_1_0.clone()),
            }
        }
        pub fn closure108(unitVar: (), v0_1: Dice_ui::US45) -> bool {
            if let Dice_ui::US45::US45_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US46::US46_1 = &match &v0_1 {
                    Dice_ui::US45::US45_0(x) => x.clone(),
                    _ => unreachable!(),
                } {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method112() -> Func1<Dice_ui::US45, bool> {
            Func1::new(move |v: Dice_ui::US45| Dice_ui::closure108((), v))
        }
        pub fn method113(v0_1: Vec<Dice_ui::US45>) -> Vec<Dice_ui::US45> {
            v0_1
        }
        pub fn closure111(
            unitVar: (),
            v0_: usize,
            v0__1: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (
            usize,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v0_1: LrcPtr<(
                usize,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = v0_1.1.clone();
            (
                v0_1.0.clone(),
                b.0.clone(),
                b.1.clone(),
                b.2.clone(),
                b.3.clone(),
                b.4.clone(),
                b.5.clone(),
                b.6.clone(),
                b.7.clone(),
                b.8.clone(),
                b.9.clone(),
                b.10.clone(),
                b.11.clone(),
            )
        }
        pub fn closure112(
            v0_1: i32,
            v1: string,
            _arg: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            (
                v1,
                v0_1 as usize,
                LrcPtr::new(Dice_ui::Heap5 {
                    l0: _arg.1.clone(),
                    l1: _arg.2.clone(),
                    l2: _arg.3.clone(),
                    l3: _arg.4.clone(),
                    l4: _arg.5.clone(),
                    l5: _arg.6.clone(),
                    l6: _arg.7.clone(),
                    l7: _arg.8.clone(),
                    l8: _arg.9.clone(),
                    l9: _arg.10.clone(),
                    l10: _arg.11.clone(),
                    l11: _arg.12.clone(),
                }),
            )
        }
        pub fn closure110(v0_1: Array<string>, v1: i32, v2: Dice_ui::US45) -> Dice_ui::US49 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US45::US45_0(v2_0_0) => {
                    let v4: Dice_ui::US46 = v2_0_0.clone();
                    Dice_ui::US49::US49_0(match &v4 {
                        Dice_ui::US46::US46_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US46::US46_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13
                                .into_iter()
                                .map(|x| {
                                    Func1::new(
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            ),
                                        )>| {
                                            Dice_ui::closure111(
                                                (),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        },
                                    )(x.clone())
                                })
                                .collect::<Vec<_>>();
                            let v18: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v16);
                            let v20: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v18.to_vec();
                            Dice_ui::US50::US50_0(
                                v20.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1 = v1.clone();
                                            let v3 = v3.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            )| {
                                                Dice_ui::closure112(v1, v3.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US50::US50_1,
                    })
                }
                Dice_ui::US45::US45_1(v2_1_0) => Dice_ui::US49::US49_1(v2_1_0.clone()),
            }
        }
        pub fn closure109(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US45, Dice_ui::US49> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US45| Dice_ui::closure110(v0_1.clone(), v1, v)
            })
        }
        pub fn method114(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US45, Dice_ui::US49>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure109(v0_1.clone(), v)
            })
        }
        pub fn method115(v0_1: Vec<Dice_ui::US45>) -> Vec<Dice_ui::US45> {
            v0_1
        }
        pub fn closure113(unitVar: (), v0_1: Dice_ui::US49) -> Dice_ui::US51 {
            match &v0_1 {
                Dice_ui::US49::US49_0(v0_1_0_0) => {
                    let v1: Dice_ui::US50 = v0_1_0_0.clone();
                    Dice_ui::US51::US51_0(match &v1 {
                        Dice_ui::US50::US50_0(v1_0_0) => Some(match &v1 {
                            Dice_ui::US50::US50_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US49::US49_1(v0_1_1_0) => Dice_ui::US51::US51_1(v0_1_1_0.clone()),
            }
        }
        pub fn closure114(
            unitVar: (),
            v0_1: Dice_ui::US51,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            match &v0_1 {
                Dice_ui::US51::US51_0(v0_1_0_0) => Ok::<
                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_0_0.clone()),
                Dice_ui::US51::US51_1(v0_1_1_0) => Err::<
                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_1_0.clone()),
            }
        }
        pub fn method116(v0_1: i32, v1: LrcPtr<Dice_ui::Mut4>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure115(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US51 {
            Dice_ui::US51::US51_0(v0_1)
        }
        pub fn closure116(unitVar: (), v0_1: std::string::String) -> Dice_ui::US51 {
            Dice_ui::US51::US51_1(v0_1)
        }
        pub fn closure117(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method117() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US50> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure117((), v)
            })
        }
        pub fn method118(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method119(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method120(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure118(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method121() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure118((), arg10_0040)
            })
        }
        pub fn method122(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure102(
            v0_1: leptos::Memo<Array<string>>,
            v1: leptos::Memo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v1();
            let v6: Vec<Dice_ui::US44> = v3
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |v: Result<
                            Option<
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure103((), v),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v9: Vec<Dice_ui::US45> = v6
                .into_iter()
                .map(|x| {
                    Func1::new(move |v_1: Dice_ui::US44| Dice_ui::closure106((), v_1))(x.clone())
                })
                .collect::<Vec<_>>();
            let v15: string = append(
                append(
                    string("transactions.render (8) / txns move / root: "),
                    Dice_ui::method10(400_i64, sprintf!("{:?}", v9.clone())),
                ),
                string(""),
            );
            let v17: bool = true;
            leptos::logging::log!("{}", v15);
            let v18 = Dice_ui::method112();
            let v19: Vec<Dice_ui::US45> = Dice_ui::method113(v9.clone());
            let v21: Vec<Dice_ui::US45> = v19
                .into_iter()
                .filter(|x| v18(x.clone().clone()))
                .collect::<Vec<_>>();
            let v28: bool = count(fable_library_rust::NativeArray_::array_from(v21))
                == count(fable_library_rust::NativeArray_::array_from(v9.clone()));
            let v140: Dice_ui::US47 = if v28 {
                Dice_ui::US47::US47_0(Dice_ui::US48::US48_1)
            } else {
                let v33 = Dice_ui::method114(v0_1());
                let v34: Vec<Dice_ui::US45> = Dice_ui::method115(v9);
                let v36: Vec<Dice_ui::US49> = v34
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v33(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v39: Vec<Dice_ui::US51> = v36
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v_2: Dice_ui::US49| Dice_ui::closure113((), v_2))(
                            x.clone(),
                        )
                    })
                    .collect::<Vec<_>>();
                let v42: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = v39
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v_3: Dice_ui::US51| Dice_ui::closure114((), v_3))(
                            x.clone(),
                        )
                    })
                    .collect::<Vec<_>>();
                let v45: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                let v47: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v42);
                let v48: i32 = count(v47.clone());
                let v50: LrcPtr<Dice_ui::Mut4> = LrcPtr::new(Dice_ui::Mut4 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(Dice_ui::US52::US52_0(v45)),
                });
                while Dice_ui::method116(v48, v50.clone()) {
                    let v52: i32 = v50.l0.get().clone();
                    let v53: Dice_ui::US52 = v50.l1.get().clone();
                    let v54: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v47[v52].clone();
                    let v57: Dice_ui::US51 = match &v54 {
                        Err(v54_1_0) => Dice_ui::closure116((), v54_1_0.clone()),
                        Ok(v54_0_0) => Dice_ui::closure115((), v54_0_0.clone()),
                    };
                    let v80: Dice_ui::US49 = match &v57 {
                        Dice_ui::US51::US51_0(v57_0_0) => Dice_ui::US49::US49_0(defaultValue(
                            Dice_ui::US50::US50_1,
                            map(Dice_ui::method117(), v57_0_0.clone()),
                        )),
                        Dice_ui::US51::US51_1(v57_1_0) => Dice_ui::US49::US49_1(v57_1_0.clone()),
                    };
                    let v101: Dice_ui::US52 = if let Dice_ui::US52::US52_0(v53_0_0) = &v53 {
                        match &v80 {
                            Dice_ui::US49::US49_0(v80_0_0) => {
                                let v82: Dice_ui::US50 = v80_0_0.clone();
                                if let Dice_ui::US50::US50_0(v82_0_0) = &v82 {
                                    let v84: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        Dice_ui::method118(match &v82 {
                                            Dice_ui::US50::US50_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        });
                                    let v85: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        Dice_ui::method119(match &v53 {
                                            Dice_ui::US52::US52_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        });
                                    let v87: bool = true;
                                    let mut v85 = v85;
                                    let v89: bool = true;
                                    v85.extend(v84);
                                    Dice_ui::US52::US52_0(v85)
                                } else {
                                    v53.clone()
                                }
                            }
                            Dice_ui::US49::US49_1(v80_1_0) => {
                                Dice_ui::US52::US52_1(v80_1_0.clone())
                            }
                        }
                    } else {
                        if let Dice_ui::US49::US49_1(v80_1_0) = &v80 {
                            Dice_ui::US52::US52_1(match &v80 {
                                Dice_ui::US49::US49_1(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        } else {
                            v53.clone()
                        }
                    };
                    let v102: i32 = v52 + 1_i32;
                    v50.l0.set(v102);
                    v50.l1.set(v101);
                    ()
                }
                {
                    let v103: Dice_ui::US52 = v50.l1.get().clone();
                    let v117: Dice_ui::US52 = match &v103 {
                        Dice_ui::US52::US52_0(v103_0_0) => {
                            let v105: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method120(v103_0_0.clone());
                            let v106 = Dice_ui::method121();
                            let v108: bool = true;
                            let mut v105 = v105;
                            let v110: bool = true;
                            v105.sort_by_key(|x| v106(x.clone()));
                            Dice_ui::US52::US52_0(v105)
                        }
                        Dice_ui::US52::US52_1(v103_1_0) => Dice_ui::US52::US52_1(v103_1_0.clone()),
                    };
                    let v132: Dice_ui::US53 = match &v117 {
                        Dice_ui::US52::US52_0(v117_0_0) => {
                            let v119: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method122(v117_0_0.clone());
                            let v121: bool = true;
                            let mut v119 = v119;
                            let v123: bool = true;
                            v119.reverse();
                            let v125: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v119;
                            Dice_ui::US53::US53_0(fable_library_rust::NativeArray_::array_from(
                                v125,
                            ))
                        }
                        Dice_ui::US52::US52_1(v117_1_0) => Dice_ui::US53::US53_1(v117_1_0.clone()),
                    };
                    match &v132 {
                        Dice_ui::US53::US53_0(v132_0_0) => {
                            Dice_ui::US47::US47_0(Dice_ui::US48::US48_0(v132_0_0.clone()))
                        }
                        Dice_ui::US53::US53_1(v132_1_0) => Dice_ui::US47::US47_1(v132_1_0.clone()),
                    }
                }
            };
            let v153: Dice_ui::US54 = match &v140 {
                Dice_ui::US47::US47_0(v140_0_0) => {
                    let v141: Dice_ui::US48 = v140_0_0.clone();
                    Dice_ui::US54::US54_0(match &v141 {
                        Dice_ui::US48::US48_0(v141_0_0) => Some(match &v141 {
                            Dice_ui::US48::US48_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US47::US47_1(v140_1_0) => Dice_ui::US54::US54_1(v140_1_0.clone()),
            };
            let v159: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = match &v153 {
                Dice_ui::US54::US54_0(v153_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v153_0_0.clone()),
                Dice_ui::US54::US54_1(v153_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v153_1_0.clone()),
            };
            let v165: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        append(
                            append(
                                string("use_transactions.render (9) / txns create_memo / result: "),
                                sprintf!("{:?}", v159.clone()),
                            ),
                            string(" / loading: "),
                        ),
                        ofBoolean(v28),
                    ),
                    string(""),
                ),
            );
            let v167: bool = true;
            leptos::logging::log!("{}", v165);
            v159
        }
        pub fn closure120(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US54 {
            Dice_ui::US54::US54_0(v0_1)
        }
        pub fn closure121(unitVar: (), v0_1: std::string::String) -> Dice_ui::US54 {
            Dice_ui::US54::US54_1(v0_1)
        }
        pub fn closure122(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US48 {
            Dice_ui::US48::US48_0(v0_1)
        }
        pub fn method123() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US48> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure122((), v)
            })
        }
        pub fn closure124(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method124() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure124((), v))
        }
        pub fn method125() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))
        }
        pub fn method126(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure125(
            unitVar: (),
            v0_1: string,
        ) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US24::US24_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method127() -> Func1<string, (string, Dice_ui::US24, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure125((), v))
        }
        pub fn method128(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn closure123(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(string, Dice_ui::US24, string, bool, bool), std::string::String> {
            let v8: &str = &*string("2.0");
            let v29: std::string::String = String::from(v8);
            let v51: &str = &*string("dontcare");
            let v72: std::string::String = String::from(v51);
            let v94: &str = &*string("EXPERIMENTAL_tx_status");
            let v115: std::string::String = String::from(v94);
            let v138: &str = &*string("bowen");
            let v176: Array<std::string::String> =
                new_array(&[(_arg.2.clone()).l3.clone(), String::from(v138)]);
            let v178: Vec<std::string::String> = v176.to_vec();
            let v180: crate::model::near::rpc::RpcInput = crate::model::near::rpc::RpcInput {
                jsonrpc: v29,
                id: v72,
                method: v115,
                params: v178,
            };
            let v182: Result<std::string::String, serde_json::Error> = serde_json::to_string(&v180);
            let v183 = Dice_ui::method124();
            let v188: Result<std::string::String, std::string::String> = v182.map_err(|x| v183(x));
            let v197 = Dice_ui::method125();
            let v198: Result<std::string::String, std::string::String> = Dice_ui::method126(v188);
            let v200: Result<string, std::string::String> = v198.map(|x| v197(x));
            let v201 = Dice_ui::method127();
            let v202: Result<string, std::string::String> = Dice_ui::method128(v200);
            v202.map(|x| v201(x))
        }
        pub fn closure119(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US24, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v0_1();
            let v5: Dice_ui::US54 = match &v2 {
                Err(v2_1_0) => Dice_ui::closure121((), v2_1_0.clone()),
                Ok(v2_0_0) => Dice_ui::closure120((), v2_0_0.clone()),
            };
            let v28: Dice_ui::US47 = match &v5 {
                Dice_ui::US54::US54_0(v5_0_0) => Dice_ui::US47::US47_0(defaultValue(
                    Dice_ui::US48::US48_1,
                    map(Dice_ui::method123(), v5_0_0.clone()),
                )),
                Dice_ui::US54::US54_1(v5_1_0) => Dice_ui::US47::US47_1(v5_1_0.clone()),
            };
            let v50: Dice_ui::US55 = match &v28 {
                Dice_ui::US47::US47_0(v28_0_0) => {
                    let v29: Dice_ui::US48 = v28_0_0.clone();
                    if let Dice_ui::US48::US48_0(v29_0_0) = &v29 {
                        let v32: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = match &v29 {
                            Dice_ui::US48::US48_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .to_vec();
                        let v35: Vec<
                            Result<
                                (string, Dice_ui::US24, string, bool, bool),
                                std::string::String,
                            >,
                        > = v32
                            .into_iter()
                            .map(|x| {
                                Func1::new(
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure123((), arg10_0040)
                                    },
                                )(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v37: Result<
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                            std::string::String,
                        > = v35.into_iter().collect();
                        let v39: Vec<(string, Dice_ui::US24, string, bool, bool)> = v37?;
                        Dice_ui::US55::US55_0(Dice_ui::US56::US56_0(
                            fable_library_rust::NativeArray_::array_from(v39),
                        ))
                    } else {
                        Dice_ui::US55::US55_0(Dice_ui::US56::US56_1)
                    }
                }
                Dice_ui::US47::US47_1(v28_1_0) => Dice_ui::US55::US55_1(v28_1_0.clone()),
            };
            let v63: Dice_ui::US57 = match &v50 {
                Dice_ui::US55::US55_0(v50_0_0) => {
                    let v51: Dice_ui::US56 = v50_0_0.clone();
                    Dice_ui::US57::US57_0(match &v51 {
                        Dice_ui::US56::US56_0(v51_0_0) => Some(match &v51 {
                            Dice_ui::US56::US56_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    })
                }
                Dice_ui::US55::US55_1(v50_1_0) => Dice_ui::US57::US57_1(v50_1_0.clone()),
            };
            let v69: Result<
                Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                std::string::String,
            > = match &v63 {
                Dice_ui::US57::US57_0(v63_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >(v63_0_0.clone()),
                Dice_ui::US57::US57_1(v63_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >(v63_1_0.clone()),
            };
            let v75: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        string(
                            "use_transactions.render (10) / rpc_requests create_memo / result: ",
                        ),
                        sprintf!("{:?}", v69.clone()),
                    ),
                    string(""),
                ),
            );
            let v77: bool = true;
            leptos::logging::log!("{}", v75);
            v69
        }
        pub fn closure127(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
        ) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn closure128(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn closure129(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method129(
        ) -> Func1<Array<(string, Dice_ui::US24, string, bool, bool)>, Dice_ui::US56> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US24, string, bool, bool)>| {
                    Dice_ui::closure129((), v)
                },
            )
        }
        pub fn closure126(
            v0_1: leptos::Memo<
                Result<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                std::string::String,
            > = v0_1();
            let v5: Dice_ui::US57 = match &v2 {
                Err(v2_1_0) => Dice_ui::closure128((), v2_1_0.clone()),
                Ok(v2_0_0) => Dice_ui::closure127((), v2_0_0.clone()),
            };
            let v28: Dice_ui::US55 = match &v5 {
                Dice_ui::US57::US57_0(v5_0_0) => Dice_ui::US55::US55_0(defaultValue(
                    Dice_ui::US56::US56_1,
                    map(Dice_ui::method129(), v5_0_0.clone()),
                )),
                Dice_ui::US57::US57_1(v5_1_0) => Dice_ui::US55::US55_1(v5_1_0.clone()),
            };
            let v34: Array<(string, Dice_ui::US24, string, bool, bool)> =
                if let Dice_ui::US55::US55_0(v28_0_0) = &v28 {
                    let v29: Dice_ui::US56 = match &v28 {
                        Dice_ui::US55::US55_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US56::US56_0(v29_0_0) = &v29 {
                        match &v29 {
                            Dice_ui::US56::US56_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                    } else {
                        new_empty::<(string, Dice_ui::US24, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US24, string, bool, bool)>()
                };
            let v36: Vec<(string, Dice_ui::US24, string, bool, bool)> = v34.to_vec();
            let v42: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' create_memo / result: ",
                        ),
                        sprintf!("{:?}", v36.clone()),
                    ),
                    string(""),
                ),
            );
            let v44: bool = true;
            leptos::logging::log!("{}", v42);
            v36
        }
        pub fn closure134(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn closure133(
            unitVar: (),
            v0_1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                std::string::String,
                Option<std::string::String>,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            v0_1.into_iter()
                .map(|(k, v)| {
                    (
                        k,
                        Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                            Dice_ui::closure134((), v)
                        })(v),
                    )
                })
                .collect()
        }
        pub fn closure132(
            unitVar: (),
            v0_1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().predecessor_id;
            let v4: crate::model::near::rpc::ReceiptDetail = v0_1.clone().receipt;
            let v6: crate::model::near::rpc::ActionDetail = v4.action;
            let v8: Vec<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            > = v6.clone().actions;
            let v11: Vec<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = v8
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |v: std::collections::HashMap<
                            std::string::String,
                            crate::model::near::rpc::TransferDetail,
                        >| Dice_ui::closure133((), v),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v13: Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = fable_library_rust::NativeArray_::array_from(v11);
            let v15: std::string::String = v6.clone().gas_price;
            let v17: Vec<std::string::String> = v6.clone().input_data_ids;
            let v19: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v17);
            let v21: Vec<std::string::String> = v6.clone().output_data_receivers;
            (
                v2,
                v13,
                v15,
                v19,
                fable_library_rust::NativeArray_::array_from(v21),
                v6.clone().signer_id,
                v6.signer_public_key,
                v0_1.clone().receipt_id,
                v0_1.receiver_id,
            )
        }
        pub fn closure136(
            unitVar: (),
            v0_1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            (v0_1.clone().cost, v0_1.clone().cost_category, v0_1.gas_used)
        }
        pub fn closure138(
            unitVar: (),
            v0_1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            (v0_1.clone().direction, v0_1.hash)
        }
        pub fn closure137(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: Vec<(std::string::String, std::string::String)> = v0_1
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::Proof| Dice_ui::closure138((), v))(
                        x.clone(),
                    )
                })
                .collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v3)
        }
        pub fn method131() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure137((), v))
        }
        pub fn closure135(
            unitVar: (),
            v0_1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Array<(std::string::String, std::string::String)>,
        ) {
            let v2: std::string::String = v0_1.clone().block_hash;
            let v4: std::string::String = v0_1.clone().id;
            let v6: crate::model::near::rpc::OutcomeDetail = v0_1.clone().outcome;
            let v8: std::string::String = v6.clone().executor_id;
            let v10: u64 = v6.clone().gas_burnt;
            let v12: Vec<std::string::String> = v6.clone().logs;
            let v14: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v12);
            let v16: crate::model::near::rpc::Metadata = v6.clone().metadata;
            let v18: Vec<crate::model::near::rpc::GasProfile> = v16.clone().gas_profile;
            let v21: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v18
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::GasProfile| {
                        Dice_ui::closure136((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v23: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v21);
            let v25: u8 = v16.version;
            let v27: Vec<std::string::String> = v6.clone().receipt_ids;
            let v29: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v27);
            let v31: std::collections::HashMap<std::string::String, std::string::String> =
                v6.clone().status;
            let v33: Option<std::string::String> = v6.tokens_burnt;
            let v35: Option<Vec<crate::model::near::rpc::Proof>> = v0_1.proof;
            (
                v2,
                v4,
                v8,
                v10,
                v14,
                v23,
                v25,
                v29,
                v31,
                v33,
                defaultValue(
                    new_empty::<(std::string::String, std::string::String)>(),
                    map(Dice_ui::method131(), v35),
                ),
            )
        }
        pub fn closure131(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::Receipt| {
                        Dice_ui::closure132((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v7: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v5);
            let v9: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v12: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v9
                .into_iter()
                .map(|x| {
                    Func1::new(move |v_1: crate::model::near::rpc::ReceiptsOutcome| {
                        Dice_ui::closure135((), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            (v7, fable_library_rust::NativeArray_::array_from(v12))
        }
        pub fn method130() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure131((), v)
            })
        }
        pub fn closure140(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method133() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure140((), v))
        }
        pub fn closure139(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method133(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method132() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure139((), v))
        }
        pub fn closure130(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v6: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method130(), v4);
            let v31: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v6, map(Dice_ui::method132(), v31), v0_1.id)
        }
        pub fn closure144(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method136(
        ) -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure144((), v))
        }
        pub fn method137(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure143(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v51: Dice_ui::US30 = match &v0_1 {
                Dice_ui::US36::US36_0(v0_1_0_0) => {
                    let v8: Dice_ui::US37 = match &v0_1 {
                        Dice_ui::US36::US36_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US30::US30_0(match &v8 {
                        Dice_ui::US37::US37_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US26> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US33 =
                                defaultValue(Dice_ui::US33::US33_1, map(Dice_ui::method83(), v10));
                            let v34: Dice_ui::US26 = if let Dice_ui::US33::US33_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US26 = match &v24 {
                                    Dice_ui::US33::US33_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US26::US26_0(v28_0_0) = &v28 {
                                    Dice_ui::US26::US26_0(match &v28 {
                                        Dice_ui::US26::US26_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US26::US26_1
                                }
                            } else {
                                Dice_ui::US26::US26_1
                            };
                            Dice_ui::US31::US31_0(match &v34 {
                                Dice_ui::US26::US26_0(v34_0_0) => {
                                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US26::US26_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US32::US32_1,
                            })
                        }
                        Dice_ui::US37::US37_1(v8_1_0) => Dice_ui::US31::US31_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US30::US30_1,
            };
            let v62: string = append(
                append(
                    append(
                        append(
                            string("state_core.use_request (15) / result memo / request: "),
                            Dice_ui::method10(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            ),
                        ),
                        string(" / state_data: "),
                    ),
                    Dice_ui::method10(400_i64, sprintf!("{:?}", v51.clone())),
                ),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                append(
                    string("state_core.use_request (16) / effect / json: "),
                    Dice_ui::method10(400_i64, sprintf!("{:?}", v1.clone())),
                ),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US32 = match &v1 {
                Dice_ui::US42::US42_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US32> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone()),
                    );
                    let v90: Dice_ui::US43 =
                        defaultValue(Dice_ui::US43::US43_1, map(Dice_ui::method105(), v76));
                    if let Dice_ui::US43::US43_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US32 = match &v90 {
                            Dice_ui::US43::US43_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US32::US32_0(v94_0_0) = &v94 {
                            Dice_ui::US32::US32_0(match &v94 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        } else {
                            Dice_ui::US32::US32_1
                        }
                    } else {
                        Dice_ui::US32::US32_1
                    }
                }
                _ => Dice_ui::US32::US32_1,
            };
            if let Dice_ui::US32::US32_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method42(match &v104 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                });
                let v111: &str = &*v106;
                let v129: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v130 = Dice_ui::method43();
                let v135: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v129.map_err(|x| v130(x));
                let v144 = Dice_ui::method136();
                let v145: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method137(v135);
                v145.map(|x| v144(x))
            } else {
                if let Dice_ui::US30::US30_0(v51_0_0) = &v51 {
                    let v148: Dice_ui::US31 = match &v51 {
                        Dice_ui::US30::US30_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US31::US31_0(v148_0_0) = &v148 {
                        let v149: Dice_ui::US32 = match &v148 {
                            Dice_ui::US31::US31_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US32::US32_0(v149_0_0) = &v149 {
                            let v151: string = Dice_ui::method42(match &v149 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            let v156: &str = &*v151;
                            let v174: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v156);
                            let v175 = Dice_ui::method43();
                            let v180: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v174.map_err(|x| v175(x));
                            let v189 = Dice_ui::method136();
                            let v190: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method137(v180);
                            v190.map(|x| v189(x))
                        } else {
                            let v196: string = append(
                                append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                ),
                                string(""),
                            );
                            let v198: bool = true;
                            leptos::logging::log!("{}", v196);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v205: string = append(
                            append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            ),
                            string(""),
                        );
                        let v207: bool = true;
                        leptos::logging::log!("{}", v205);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v214: string = append(
                        append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104, v51)),
                        ),
                        string(""),
                    );
                    let v216: bool = true;
                    leptos::logging::log!("{}", v214);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure142(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure143(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method135(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure142(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure141(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            >,
            v3: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v0_1();
            let v9: string = append(
                append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                ),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                v1();
            let v27: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method80(), v13));
            let v71: Dice_ui::US36 = match &v27 {
                Dice_ui::US27::US27_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v34: Dice_ui::US25 = match &v31 {
                        Err(v31_1_0) => Dice_ui::closure81((), v31_1_0.clone()),
                        Ok(v31_0_0) => Dice_ui::closure80((), v31_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v34 {
                        Dice_ui::US25::US25_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method81(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(v60))
                        }
                        Dice_ui::US25::US25_1(v34_1_0) => Dice_ui::US37::US37_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v77: string = append(
                append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    Dice_ui::method10(400_i64, sprintf!("{:?}", v71.clone())),
                ),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                leptos::SignalGet::get(&v2);
            let v95: Dice_ui::US38 =
                defaultValue(Dice_ui::US38::US38_1, map(Dice_ui::method102(), v81));
            let v106: Dice_ui::US39 = match &v95 {
                Dice_ui::US38::US38_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US39::US39_0(match &v99 {
                        Err(v99_1_0) => Dice_ui::closure93((), v99_1_0.clone()),
                        Ok(v99_0_0) => Dice_ui::closure92((), v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US39::US39_1,
            };
            let v142: Dice_ui::US41 = match &v106 {
                Dice_ui::US39::US39_0(v106_0_0) => {
                    let v107: Dice_ui::US40 = match &v106 {
                        Dice_ui::US39::US39_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US41::US41_0(match &v107 {
                        Dice_ui::US40::US40_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method103(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US42::US42_0(_vec_map)
                        }
                        Dice_ui::US40::US40_1(v107_1_0) => Dice_ui::US42::US42_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US41::US41_1,
            };
            let v145: Vec<Dice_ui::US32> = new_empty::<Dice_ui::US32>().to_vec();
            let v149: Dice_ui::US42 = match &v142 {
                Dice_ui::US41::US41_0(v142_0_0) => match &v142 {
                    Dice_ui::US41::US41_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => Dice_ui::US42::US42_0(v145),
            };
            match &v149 {
                Dice_ui::US42::US42_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US32 = x;
                        if let Dice_ui::US32::US32_0(v154_0_0) = &v154 {
                            let v160: &str = &*match &v154 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            let v198: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v200: bool = true;
                            leptos::Action::dispatch(&v3, v198.clone());
                            ()
                        }
                        {
                            let v202: bool = true;
                            let v204: bool = true;
                        }
                    });
                    {
                        //;
                        ()
                    }
                }
                _ => (),
            }
            {
                let v206 = Dice_ui::method135(v71, v149.clone());
                let v207: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method93(v5);
                let v209: Vec<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = v207
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v206(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v211: Array<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = fable_library_rust::NativeArray_::array_from(v209);
                let v217: string = Dice_ui::method10(
                    200_i64,
                    append(
                        append(
                            string("state_core.use_requests (18) / result_func func0 / result: "),
                            sprintf!("{:?}", v211.clone()),
                        ),
                        string(""),
                    ),
                );
                let v219: bool = true;
                leptos::logging::log!("{}", v217);
                v211
            }
        }
        pub fn method139(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure147(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method139(v0_1), v1)
        }
        pub fn method138(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure147(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method140(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn closure146(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2 = Dice_ui::method138(v0_1);
            let v3: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> =
                Dice_ui::method140(v1);
            v3.map(|x| v2(x))
        }
        pub fn closure145(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v2: leptos::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::Memo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::Signal<bool> = leptos::Resource::loading(&v1.clone());
            let v7: bool = leptos::SignalGet::get(&v5);
            let v9: leptos::Signal<bool> = leptos::Resource::loading(&v2.clone());
            let v11: bool = leptos::SignalGet::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> = leptos::SignalGet::get(&v1);
            let v27: Dice_ui::US4 =
                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::SignalGet::get(&v2);
            let v46: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method80(), v32));
            let v90: Dice_ui::US36 = match &v46 {
                Dice_ui::US27::US27_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v53: Dice_ui::US25 = match &v50 {
                        Err(v50_1_0) => Dice_ui::closure81((), v50_1_0.clone()),
                        Ok(v50_0_0) => Dice_ui::closure80((), v50_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v53 {
                        Dice_ui::US25::US25_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method81(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(v79))
                        }
                        Dice_ui::US25::US25_1(v53_1_0) => Dice_ui::US37::US37_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v95: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append(append(append(append(append(append(append(append(string("state_core.use_request (19) / result move / database: "),
                                                                        v95),
                                                                 string(" / database_loading: ")),
                                                          ofBoolean(v7)),
                                                   string(" / state_data: ")),
                                            v100),
                                     string(" / state_data_loading: ")),
                              ofBoolean(v11)), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v3();
            let v107: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v105.to_vec();
            let v110: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        move |v_3: Result<
                            Option<crate::model::near::rpc::RpcResponse>,
                            std::string::String,
                        >| Dice_ui::closure146(v0_1.clone(), v_3)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v116: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v110.clone()),
                    ),
                    string(""),
                ),
            );
            let v118: bool = true;
            leptos::logging::log!("{}", v116);
            v110
        }
        pub fn method134(
            v0_1: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::Memo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v8: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method6();
            let v11 = {
                let clo = Func0::new({
                    let v8 = v8.clone();
                    move || Dice_ui::closure74(v8.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v13: leptos::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>> =
                leptos::create_memo(move |_| v11(()));
            let v14: leptos::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method73(v0_1.clone(), v8.clone());
            let v17 = {
                let clo_1 = Func0::new({
                    let v14 = v14.clone();
                    move || Dice_ui::closure77(v14.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v19: leptos::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::create_memo(move |_| v17(()));
            let v20: leptos::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            > = Dice_ui::method79(v0_1.clone(), v19.clone());
            let v23: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>> =
                leptos::create_action(move |value: &std::sync::Arc<Heap4>| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        let v13 = v13.clone();
                        move |v: LrcPtr<Dice_ui::Heap4>| {
                            Dice_ui::closure87(v0_1.clone(), v13.clone(), v)
                        }
                    })(value.clone())
                });
            let v26 = {
                let clo_2 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v19 = v19.clone();
                    let v20 = v20.clone();
                    let v23 = v23.clone();
                    move || {
                        Dice_ui::closure141(v0_1.clone(), v19.clone(), v20.clone(), v23.clone(), ())
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v28: leptos::Memo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::create_memo(move |_| v26(()));
            let v31 = {
                let clo_3 = Func0::new({
                    let v1 = v1.clone();
                    let v14 = v14.clone();
                    let v28 = v28.clone();
                    let v8 = v8.clone();
                    move || {
                        Dice_ui::closure145(v1.clone(), v8.clone(), v14.clone(), v28.clone(), ())
                    }
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            leptos::create_memo(move |_| v31(()))
        }
        pub fn method141() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure149(unitVar: (), v0_1: Dice_ui::US15) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(v0_1)
        }
        pub fn closure150(unitVar: (), v0_1: std::string::String) -> Dice_ui::US59 {
            Dice_ui::US59::US59_1(v0_1)
        }
        pub fn closure151(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US61 {
            Dice_ui::US61::US61_0(v0_1)
        }
        pub fn closure152(unitVar: (), v0_1: std::string::String) -> Dice_ui::US61 {
            Dice_ui::US61::US61_1(v0_1)
        }
        pub fn method142(
            v0_1: Result<Dice_ui::US58, std::string::String>,
        ) -> Result<Dice_ui::US58, std::string::String> {
            v0_1
        }
        pub fn closure148(
            unitVar: (),
            v0_1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US58, std::string::String>>>,
        > {
            let v4: string = append(
                append(
                    string("dice_view.render (2) / set_max_action / value: "),
                    sprintf!("{:?}", v0_1),
                ),
                string(""),
            );
            let v6: bool = true;
            leptos::logging::log!("{}", v4);
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v14: &str = &*string("2.0");
                let v35: std::string::String = String::from(v14);
                let v57: &str = &*string("dontcare");
                let v78: std::string::String = String::from(v57);
                let v100: &str = &*string("EXPERIMENTAL_tx_status");
                let v121: std::string::String = String::from(v100);
                let v143: &str = &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                let v164: std::string::String = String::from(v143);
                let v186: &str = &*string("bowen");
                let v224: Array<std::string::String> = new_array(&[v164, String::from(v186)]);
                let v226: Vec<std::string::String> = v224.to_vec();
                let v228: crate::model::near::rpc::RpcInput = crate::model::near::rpc::RpcInput {
                    jsonrpc: v35,
                    id: v78,
                    method: v121,
                    params: v226,
                };
                let v229: string = Dice_ui::method141();
                let v234: &str = &*v229;
                let v272: std::string::String = Dice_ui::method88(String::from(v234));
                let v274: reqwest_wasm::RequestBuilder = reqwest_wasm::Client::builder()
                    .build()
                    .map_err(|err| err.to_string())?
                    .post(v272);
                let v277: reqwest_wasm::RequestBuilder =
                    Dice_ui::method90(reqwest_wasm::RequestBuilder::json(v274, &v228));
                let v279: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                        >,
                    >,
                > = Box::pin(reqwest_wasm::RequestBuilder::send(v277));
                let v281: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v279.await;
                let v282 = Dice_ui::method91();
                let v287: Result<reqwest_wasm::Response, std::string::String> =
                    v281.map_err(|x| v282(x));
                let v297: reqwest_wasm::Response = v287?;
                let v299: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<std::string::String, reqwest_wasm::Error>,
                        >,
                    >,
                > = Box::pin(reqwest_wasm::Response::text(v297));
                let v301: Result<std::string::String, reqwest_wasm::Error> = v299.await;
                let v302 = Dice_ui::method91();
                let v307: Result<std::string::String, std::string::String> =
                    v301.map_err(|x| v302(x));
                let v319: Result<Dice_ui::US15, std::string::String> =
                    Ok::<Dice_ui::US15, std::string::String>(Dice_ui::US15::US15_0(v307?));
                let v325: string =
                Dice_ui::method10(200_i64,
                                  append(append(string("dice_view.render (x) / roll_action create_action / result1 / result: "),
                                                sprintf!("{:?}",
                                                         v319.clone())),
                                         string("")));
                let v327: bool = true;
                leptos::logging::log!("{}", v325);
                let v330: Dice_ui::US59 = match &v319 {
                    Err(v319_1_0) => Dice_ui::closure150((), v319_1_0.clone()),
                    Ok(v319_0_0) => Dice_ui::closure149((), v319_0_0.clone()),
                };
                let v470: Dice_ui::US60 = if let Dice_ui::US59::US59_0(v330_0_0) = &v330 {
                    let v331: Dice_ui::US15 = match &v330 {
                        Dice_ui::US59::US59_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US15::US15_0(v331_0_0) = &v331 {
                        let v335: string = Dice_ui::method42(
                            fable_library_rust::String_::fromString(match &v331 {
                                Dice_ui::US15::US15_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                        );
                        let v340: &str = &*v335;
                        let v358: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                            serde_json::from_str(&v340);
                        let v359 = Dice_ui::method43();
                        let v370: Result<
                            crate::model::near::rpc::RpcResponse,
                            std::string::String,
                        > = v358.map_err(|x| v359(x));
                        let v375: Dice_ui::US61 = match &v370 {
                            Err(v370_1_0) => Dice_ui::closure152((), v370_1_0.clone()),
                            Ok(v370_0_0) => Dice_ui::closure151((), v370_0_0.clone()),
                        };
                        let v454: Dice_ui::US62 = match &v375 {
                            Dice_ui::US61::US61_0(v375_0_0) => {
                                let v376: crate::model::near::rpc::RpcResponse = v375_0_0.clone();
                                let v378: std::string::String = v376.clone().jsonrpc;
                                let v380: Option<crate::model::near::rpc::TransactionStatus> =
                                    v376.clone().result;
                                let v382: Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )> = map(Dice_ui::method130(), v380);
                                let v407: Option<crate::model::near::rpc::RpcError> =
                                    v376.clone().error;
                                Dice_ui::US62::US62_0(
                                    v378,
                                    v382,
                                    map(Dice_ui::method132(), v407),
                                    v376.id,
                                )
                            }
                            Dice_ui::US61::US61_1(v375_1_0) => {
                                Dice_ui::US62::US62_1(v375_1_0.clone())
                            }
                        };
                        match &v454 {
                            Dice_ui::US62::US62_0(v454_0_0, v454_0_1, v454_0_2, v454_0_3) => {
                                Dice_ui::US60::US60_0(Dice_ui::US58::US58_0(
                                    v454_0_0.clone(),
                                    v454_0_1.clone(),
                                    v454_0_2.clone(),
                                    v454_0_3.clone(),
                                ))
                            }
                            Dice_ui::US62::US62_1(v454_1_0) => {
                                Dice_ui::US60::US60_1(v454_1_0.clone())
                            }
                        }
                    } else {
                        Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                    }
                } else {
                    Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                };
                let v476: Result<Dice_ui::US58, std::string::String> = match &v470 {
                    Dice_ui::US60::US60_0(v470_0_0) => {
                        Ok::<Dice_ui::US58, std::string::String>(v470_0_0.clone())
                    }
                    Dice_ui::US60::US60_1(v470_1_0) => {
                        Err::<Dice_ui::US58, std::string::String>(v470_1_0.clone())
                    }
                };
                let v482: string =
                Dice_ui::method10(200_i64,
                                  append(append(string("dice_view.render (x) / roll_action create_action / result2 / result: "),
                                                sprintf!("{:?}",
                                                         v476.clone())),
                                         string("")));
                let v484: bool = true;
                leptos::logging::log!("{}", v482);
                let v485: Result<Dice_ui::US58, std::string::String> = Dice_ui::method142(v476);
                let v488: string = string("}");
                let v494: bool = true;
                let v489 = v485;
                let v503: string = append(
                    append(
                        append(append(string("true; v489 "), v488), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v504: bool = true;
                v489
            }); // rust.fix_closure';
            let v506 = __future_init;
            v506
        }
        pub fn closure155(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn closure156(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn closure154(
            unitVar: (),
            v0_1: Result<Dice_ui::US58, std::string::String>,
        ) -> Dice_ui::US60 {
            match &v0_1 {
                Err(v0_1_1_0) => Dice_ui::closure156((), v0_1_1_0.clone()),
                Ok(v0_1_0_0) => Dice_ui::closure155((), v0_1_0_0.clone()),
            }
        }
        pub fn method143() -> Func1<Result<Dice_ui::US58, std::string::String>, Dice_ui::US60> {
            Func1::new(move |v: Result<Dice_ui::US58, std::string::String>| {
                Dice_ui::closure154((), v)
            })
        }
        pub fn closure157(unitVar: (), v0_1: Dice_ui::US60) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method144() -> Func1<Dice_ui::US60, Dice_ui::US63> {
            Func1::new(move |v: Dice_ui::US60| Dice_ui::closure157((), v))
        }
        pub fn closure153(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::RwSignal<Option<Result<Dice_ui::US58, std::string::String>>> =
                leptos::Action::value(&v0_1);
            let v4: Option<Result<Dice_ui::US58, std::string::String>> =
                leptos::SignalGet::get(&v2);
            let v6: Option<Dice_ui::US60> = map(Dice_ui::method143(), v4);
            let v32: Dice_ui::US63 =
                defaultValue(Dice_ui::US63::US63_1, map(Dice_ui::method144(), v6));
            let v53: Dice_ui::US60 = if let Dice_ui::US63::US63_0(v32_0_0) = &v32 {
                let v36: Dice_ui::US60 = match &v32 {
                    Dice_ui::US63::US63_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                match &v36 {
                    Dice_ui::US60::US60_0(v36_0_0) => {
                        let v39: Dice_ui::US58 = v36_0_0.clone();
                        if let Dice_ui::US58::US58_0(v39_0_0, v39_0_1, v39_0_2, v39_0_3) = &v39 {
                            Dice_ui::US60::US60_0(Dice_ui::US58::US58_0(
                                match &v39 {
                                    Dice_ui::US58::US58_0(x, _, _, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v39 {
                                    Dice_ui::US58::US58_0(_, x, _, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v39 {
                                    Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v39 {
                                    Dice_ui::US58::US58_0(_, _, _, x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            ))
                        } else {
                            Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                        }
                    }
                    Dice_ui::US60::US60_1(v36_1_0) => Dice_ui::US60::US60_1(v36_1_0.clone()),
                }
            } else {
                Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
            };
            let v69: Dice_ui::US64 = match &v53 {
                Dice_ui::US60::US60_0(v53_0_0) => {
                    let v54: Dice_ui::US58 = v53_0_0.clone();
                    Dice_ui::US64::US64_0(match &v54 {
                        Dice_ui::US58::US58_0(v54_0_0, v54_0_1, v54_0_2, v54_0_3) => Some((
                            match &v54 {
                                Dice_ui::US58::US58_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v54 {
                                Dice_ui::US58::US58_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v54 {
                                Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v54 {
                                Dice_ui::US58::US58_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US60::US60_1(v53_1_0) => Dice_ui::US64::US64_1(v53_1_0.clone()),
            };
            let v75: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v69 {
                Dice_ui::US64::US64_0(v69_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_0_0.clone()),
                Dice_ui::US64::US64_1(v69_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_1_0.clone()),
            };
            let v81: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        string("dice_view.render (x) / roll create_memo / result: "),
                        sprintf!("{:?}", v75.clone()),
                    ),
                    string(""),
                ),
            );
            let v83: bool = true;
            leptos::logging::log!("{}", v81);
            v75
        }
        pub fn closure159(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(v0_1)
        }
        pub fn closure160(unitVar: (), v0_1: std::string::String) -> Dice_ui::US64 {
            Dice_ui::US64::US64_1(v0_1)
        }
        pub fn closure161(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method145() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US58,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure161((), arg10_0040),
            )
        }
        pub fn closure162(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method146() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US65,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure162((), arg10_0040),
            )
        }
        pub fn closure158(
            v0_1: leptos::Memo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = v0_1();
            let v5: Dice_ui::US64 = match &v2 {
                Err(v2_1_0) => Dice_ui::closure160((), v2_1_0.clone()),
                Ok(v2_0_0) => Dice_ui::closure159((), v2_0_0.clone()),
            };
            let v31: Dice_ui::US60 = match &v5 {
                Dice_ui::US64::US64_0(v5_0_0) => Dice_ui::US60::US60_0(defaultValue(
                    Dice_ui::US58::US58_1,
                    map(Dice_ui::method145(), v5_0_0.clone()),
                )),
                Dice_ui::US64::US64_1(v5_1_0) => Dice_ui::US60::US60_1(v5_1_0.clone()),
            };
            let v72: Dice_ui::US32 = if let Dice_ui::US60::US60_0(v31_0_0) = &v31 {
                let v32: Dice_ui::US58 = match &v31 {
                    Dice_ui::US60::US60_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US58::US58_0(v32_0_0, v32_0_1, v32_0_2, v32_0_3) = &v32 {
                    let v55: Dice_ui::US65 = defaultValue(
                        Dice_ui::US65::US65_1,
                        map(
                            Dice_ui::method146(),
                            match &v32 {
                                Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                    );
                    if let Dice_ui::US65::US65_0(
                        v55_0_0,
                        v55_0_1,
                        v55_0_2,
                        v55_0_3,
                        v55_0_4,
                        v55_0_5,
                    ) = &v55
                    {
                        Dice_ui::US32::US32_0(append(
                            append(
                                append(
                                    append(
                                        append(
                                            append(
                                                append(
                                                    toString(match &v55 {
                                                        Dice_ui::US65::US65_0(x, _, _, _, _, _) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    }),
                                                    string(": "),
                                                ),
                                                toString(match &v55 {
                                                    Dice_ui::US65::US65_0(_, _, _, _, x, _) => {
                                                        x.clone()
                                                    }
                                                    _ => unreachable!(),
                                                }),
                                            ),
                                            string(" - "),
                                        ),
                                        toString(match &v55 {
                                            Dice_ui::US65::US65_0(_, _, _, _, _, x) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                    ),
                                    string(" ("),
                                ),
                                toString(match &v55 {
                                    Dice_ui::US65::US65_0(_, x, _, _, _, _) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US32::US32_1
                    }
                } else {
                    Dice_ui::US32::US32_1
                }
            } else {
                Dice_ui::US32::US32_1
            };
            let v79: Option<string> = match &v72 {
                Dice_ui::US32::US32_0(v72_0_0) => Some(match &v72 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => None::<string>,
            };
            let v85: string = Dice_ui::method10(
                200_i64,
                append(
                    append(
                        string("dice_view.render (x) / error_message create_memo / result: "),
                        sprintf!("{:?}", v79.clone()),
                    ),
                    string(""),
                ),
            );
            let v87: bool = true;
            leptos::logging::log!("{}", v85);
            v79
        }
        pub fn closure163(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US32 {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::SignalGet::get(&v3.l3.clone());
            let v21: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_1,
                map(Dice_ui::method40(), v6.l1.clone()),
            );
            match &v21 {
                Dice_ui::US15::US15_0(v21_0_0) => {
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(match &v21 {
                        Dice_ui::US15::US15_0(x) => x.clone(),
                        _ => unreachable!(),
                    }))
                }
                _ => Dice_ui::US32::US32_1,
            }
        }
        pub fn closure166(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ) = leptos::create_signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure165(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure166(v0_1, v)
            })
        }
        pub fn method147() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure165((), v))
        }
        pub fn method148(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure164(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::SignalGet::get(&v3.l3.clone());
            let v10: Vec<(bool, std::string::String)> = v6
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                        Dice_ui::closure56((), tupledArg.0.clone(), tupledArg.1.clone())
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v11 = Dice_ui::method60();
            let v12: Vec<(bool, std::string::String)> = Dice_ui::method61(v10);
            let v14: Vec<(bool, std::string::String)> = v12
                .into_iter()
                .filter(|x| v11(x.clone().clone()))
                .collect::<Vec<_>>();
            let v17: Vec<std::string::String> = v14
                .into_iter()
                .map(|x| {
                    Func1::new(move |arg10_0040_1: (bool, std::string::String)| {
                        Dice_ui::closure58((), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v18 = Dice_ui::method147();
            let v19: Vec<std::string::String> = Dice_ui::method148(v17);
            v19.iter()
                .enumerate()
                .map(|(i, x)| v18(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn closure168(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::ReadSignal<std::string::String>,
            leptos::WriteSignal<std::string::String>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn closure169(
            unitVar: (),
            _arg: (
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::ReadSignal<std::string::String>) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure167(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<std::string::String>,
                            leptos::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            > = v0_1();
            let v5: Vec<(
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::ReadSignal<std::string::String>,
                                leptos::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure168((), tupledArg.0.clone(), tupledArg.1.clone())
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            v5.into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040_1: (
                            i32,
                            leptos::ReadSignal<std::string::String>,
                            leptos::WriteSignal<std::string::String>,
                        )| Dice_ui::closure169((), arg10_0040_1),
                    )(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn method149(v0_1: Array<leptos::View>) -> Array<leptos::View> {
            v0_1
        }
        pub fn closure175(
            unitVar: (),
            v0_1: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method155(
        ) -> Func1<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>, Dice_ui::US66>
        {
            Func1::new(
                move |v: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>| {
                    Dice_ui::closure175((), v)
                },
            )
        }
        pub fn closure179(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method159() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure179((), ()))
        }
        pub fn method160(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn closure180(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v2: Func0<leptos::Fragment> = Func0::new(move || v0_1());
            let v5: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(move || v2())]);
            let v7: Vec<leptos::View> = v5.to_vec();
            leptos::Fragment::new(v7)
        }
        pub fn method161(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure180(v0_1.clone(), ())
            })
        }
        pub fn closure181(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Path>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure178(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string = string(
                " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure181((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method158() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure178((), ()))
        }
        pub fn closure177(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v15: string =
                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method158()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v15), string(">{v17()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    class="text-red-700"
                    stroke="currentColor"
                    stroke-width="1.5"
                    viewBox="0 0 24 24"
                    height="100%"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    {v17()}
                </svg>
            };
            let v25: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method157() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure177((), ()))
        }
        pub fn closure182(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("No data");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method162() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure182((), ()))
        }
        pub fn closure176(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"[height:17px]\"");
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method157()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="[height:17px]">{v5()}</span> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method162()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v15), string(">{v17()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Pre> =
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v17()}</pre> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method156() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure176((), ()))
        }
        pub fn method163(
            v0_1: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> {
            v0_1
        }
        pub fn closure183(
            unitVar: (),
            _arg: (i32, leptos::ReadSignal<std::string::String>),
        ) -> i32 {
            _arg.0.clone()
        }
        pub fn method164() -> Func1<(i32, leptos::ReadSignal<std::string::String>), i32> {
            Func1::new(
                move |arg10_0040: (i32, leptos::ReadSignal<std::string::String>)| {
                    Dice_ui::closure183((), arg10_0040)
                },
            )
        }
        pub fn method166(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure185(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: i32,
            v4: std::string::String,
            unitVar: (),
        ) {
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v7: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v2.l0.clone();
            let v9: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v7.clone());
            let v12: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v9.l3.clone());
            let v19: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v7);
            let v25: &str = &*v6;
            let v66: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v12.l0.clone(),
                l1: Some(String::from(v25)),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v68: bool = true;
            leptos::SignalSet::set(&v19.l3.clone(), v66);
            ()
        }
        pub fn closure187(unitVar: (), v0_1: leptos::Memo<Dice_ui::US32>) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method168() -> Func1<leptos::Memo<Dice_ui::US32>, Dice_ui::US68> {
            Func1::new(move |v: leptos::Memo<Dice_ui::US32>| Dice_ui::closure187((), v))
        }
        pub fn closure188(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure190(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method170() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure190((), ()))
        }
        pub fn closure189(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v11: string = string(
                " stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"",
            );
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v11), string(">{v13()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">
                    {v13()}
                </circle>
            };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v27: string =
                string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v29 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v27), string(">{v29()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::svg::Path> = leptos::view! {
                <path d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">
                    {v29()}
                </path>
            };
            let v37: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v34)]);
            let v39: Vec<leptos::View> = v37.to_vec();
            leptos::Fragment::new(v39)
        }
        pub fn method169() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure189((), ()))
        }
        pub fn closure186(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = fable_library_rust::String_::fromString(v3);
            let v19: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method168(), v1));
            let v29: Dice_ui::US43 = match &v19 {
                Dice_ui::US68::US68_0(v19_0_0) => Dice_ui::US43::US43_0(match &v19 {
                    Dice_ui::US68::US68_0(x) => x.clone(),
                    _ => unreachable!(),
                }()),
                _ => Dice_ui::US43::US43_1,
            };
            let v36: Dice_ui::US32 = if let Dice_ui::US43::US43_0(v29_0_0) = &v29 {
                let v30: Dice_ui::US32 = match &v29 {
                    Dice_ui::US43::US43_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US32::US32_0(v30_0_0) = &v30 {
                    Dice_ui::US32::US32_0(match &v30 {
                        Dice_ui::US32::US32_0(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Dice_ui::US32::US32_1
                }
            } else {
                Dice_ui::US32::US32_1
            };
            let v74: leptos::View = if let Dice_ui::US32::US32_0(v36_0_0) = &v36 {
                if v5.clone()
                    == match &v36 {
                        Dice_ui::US32::US32_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                {
                    let v41 = {
                        let clo = Func0::new(move || Dice_ui::closure188((), ()));
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v55: string =
                            string(" class=move || \" \".to_owned() + &v41(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v57 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method169()));
                    let v60: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v55), string(">{v57()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v62: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || " ".to_owned() + &v41(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v57()}
                        </svg>
                    };
                    leptos::IntoView::into_view(v62)
                } else {
                    let v66: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
                    leptos::CollectView::collect_view(v66.to_vec())
                }
            } else {
                let v71: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
                leptos::CollectView::collect_view(v71.to_vec())
            };
            let v79: &str = &*v5;
            let v100: std::string::String = String::from(v79);
            let v118: leptos::leptos_dom::Text = leptos::html::text(v100);
            let v121: Array<leptos::View> = new_array(&[v74, leptos::IntoView::into_view(v118)]);
            let v123: Vec<leptos::View> = v121.to_vec();
            leptos::Fragment::new(v123)
        }
        pub fn method167(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure186(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure191(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Button>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure184(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            _arg: (i32, leptos::ReadSignal<std::string::String>),
        ) -> leptos::Fragment {
            let v6: std::string::String = leptos::SignalGet::get(&_arg.1.clone());
            let v7: std::string::String = Dice_ui::method166(v6.clone());
            let v8 = Func0::new({
                let _arg = _arg.clone();
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v6 = v6.clone();
                move || {
                    Dice_ui::closure185(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        _arg.0.clone(),
                        v6.clone(),
                        (),
                    )
                }
            });
            {
                let v10: string =
                    string("class=\"flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
                let v17: string = append(
                    append(
                        string(" aria-label=v7"),
                        append(
                            append(
                                string(" on:click=move |_| v8()"),
                                append(append(append(string(" "), v10), string("")), string("")),
                            ),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v19 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method167(
                    v0_1.clone(),
                    v1.clone(),
                    v2.clone(),
                    v6.clone(),
                )));
                let v22: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<button "), v17), string(">{v19()}</")),
                                string("button"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v25: Array<leptos::HtmlElement<leptos::html::Button>> = new_array(&[
                    leptos::view! {
                        <button
                            aria-label=v7
                            on:click=move |_| v8()
                            class="flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500"
                        >
                            {v19()}
                        </button>
                    },
                ]);
                let v27: Vec<leptos::HtmlElement<leptos::html::Button>> = v25.to_vec();
                let v30: Vec<leptos::View> = v27
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v: leptos::HtmlElement<leptos::html::Button>| {
                            Dice_ui::closure191((), v)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v32: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v30);
                let v34: Vec<leptos::View> = v32.to_vec();
                leptos::Fragment::new(v34)
            }
        }
        pub fn method165(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func1<(i32, leptos::ReadSignal<std::string::String>), leptos::Fragment> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (i32, leptos::ReadSignal<std::string::String>)| {
                    Dice_ui::closure184(v0_1.clone(), v1.clone(), v2.clone(), arg10_0040)
                }
            })
        }
        pub fn closure174(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v16: Dice_ui::US66 = defaultValue(
                Dice_ui::US66::US66_1,
                map(Dice_ui::method155(), v0_1.clone()),
            );
            let v26: Dice_ui::US67 = match &v16 {
                Dice_ui::US66::US66_0(v16_0_0) => Dice_ui::US67::US67_0(match &v16 {
                    Dice_ui::US66::US66_0(x) => x.clone(),
                    _ => unreachable!(),
                }()),
                _ => Dice_ui::US67::US67_1,
            };
            let v29: Vec<(i32, leptos::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::ReadSignal<std::string::String>)>().to_vec();
            let v32: Vec<(i32, leptos::ReadSignal<std::string::String>)> = match &v26 {
                Dice_ui::US67::US67_0(v26_0_0) => match &v26 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => v29,
            };
            if count(fable_library_rust::NativeArray_::array_from(v32)) as u64 == 0_u64 {
                let v40: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v42 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method156()));
                let v45: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v40), string(">{v42()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v47: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v42()}</div> };
                let v50: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v47)]);
                let v52: Vec<leptos::View> = v50.to_vec();
                leptos::Fragment::new(v52)
            } else {
                let v68: Dice_ui::US66 = defaultValue(
                    Dice_ui::US66::US66_1,
                    map(Dice_ui::method155(), v0_1.clone()),
                );
                match &v68 {
                    Dice_ui::US66::US66_0(v68_0_0) => {
                        let v73: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> =
                            Dice_ui::method163(match &v68 {
                                Dice_ui::US66::US66_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                        let v74 = Dice_ui::method164();
                        let v75 = Dice_ui::method165(v0_1, v1, v2);
                        let v87: string =
                            string("leptos::IntoView::into_view(leptos::view! { <leptos::For  children=move |x| v75(x) let:x key=move |x| v74(x.to_owned()) each=v73 /> })");
                        let v89: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(
                            leptos::view! {
                                <leptos::For
                                    children=move |x| v75(x)
                                    let:x
                                    key=move |x| v74(x.to_owned())
                                    each=v73
                                />
                            },
                        )]);
                        let v91: Vec<leptos::View> = v89.to_vec();
                        leptos::Fragment::new(v91)
                    }
                    _ => {
                        let v96: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
                        leptos::Fragment::new(v96)
                    }
                }
            }
        }
        pub fn method154(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure174(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure173(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v6: string = append(append(append(string(" "), v3), string("")), string(""));
            let v8 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method154(v0_1, v1, v2)));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v6), string(">{v8()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                <div class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">
                    {v8()}
                </div>
            };
            let v16: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v13)]);
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method153(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure173(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure192(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v2: Func0<leptos::Fragment> = Func0::new(move || v0_1());
            let v5: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(move || v2())]);
            let v7: Vec<leptos::View> = v5.to_vec();
            leptos::Fragment::new(v7)
        }
        pub fn method171(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure192(v0_1.clone(), ())
            })
        }
        pub fn closure194(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure195(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure196(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v1: Array<leptos::View> = new_array(&[v0_1]);
            let v3: Vec<leptos::View> = v1.to_vec();
            leptos::Fragment::new(v3)
        }
        pub fn method173(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure196(v0_1.clone(), ())
            })
        }
        pub fn closure198(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure199(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure202(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v16: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method168(), v1));
            let v26: Dice_ui::US43 = match &v16 {
                Dice_ui::US68::US68_0(v16_0_0) => Dice_ui::US43::US43_0(match &v16 {
                    Dice_ui::US68::US68_0(x) => x.clone(),
                    _ => unreachable!(),
                }()),
                _ => Dice_ui::US43::US43_1,
            };
            let v33: Dice_ui::US32 = if let Dice_ui::US43::US43_0(v26_0_0) = &v26 {
                let v27: Dice_ui::US32 = match &v26 {
                    Dice_ui::US43::US43_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US32::US32_0(v27_0_0) = &v27 {
                    Dice_ui::US32::US32_0(match &v27 {
                        Dice_ui::US32::US32_0(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Dice_ui::US32::US32_1
                }
            } else {
                Dice_ui::US32::US32_1
            };
            match &v33 {
                Dice_ui::US32::US32_0(v33_0_0) => match &v33 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string("Select..."),
            }
        }
        pub fn method177(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure202(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure203(v0_1: Func0<string>, unitVar: ()) -> leptos::Fragment {
            let v1: string = v0_1();
            let v6: &str = &*v1;
            let v27: std::string::String = String::from(v6);
            let v45: leptos::leptos_dom::Text = leptos::html::text(v27);
            let v48: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v45)]);
            let v50: Vec<leptos::View> = v48.to_vec();
            leptos::Fragment::new(v50)
        }
        pub fn method178(v0_1: Func0<string>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure203(v0_1.clone(), ())
            })
        }
        pub fn closure201(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v7: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method178(
                Dice_ui::method177(v0_1, v1, v2),
            )));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v7), string(">{v9()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v9()}</span>
            };
            let v17: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v14)]);
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method176(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure201(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure205(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure206(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path
                        clip-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        fill-rule="evenodd"
                    >
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure181((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method180() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure206((), ()))
        }
        pub fn closure204(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure205((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v12: string =
                string(" class=move || \" \".to_owned() + &v2(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v14 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method180()));
            let v17: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v12), string(">{v14()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    class=move || " ".to_owned() + &v2(())
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    {v14()}
                </svg>
            };
            let v22: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v19)]);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method179() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure204((), ()))
        }
        pub fn closure200(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: string = string(" class=\"flex items-center gap-2\"");
            let v8 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method176(v0_1, v1, v2)));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v6), string(">{v8()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v8()}</div> };
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v18: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v20 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method179()));
            let v23: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v18), string(">{v20()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v20()}</span> };
            let v28: Array<leptos::View> = new_array(&[v15, leptos::IntoView::into_view(v25)]);
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method175(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure200(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure207(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            v0_1()
        }
        pub fn method181(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure207(v0_1.clone(), ())
            })
        }
        pub fn closure197(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6 = {
                let clo = Func0::new(move || Dice_ui::closure198((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v9 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    move || Dice_ui::closure199(v0_1.clone(), v1.clone(), v2.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v9(()) + \" \" + &v6(())");
            let v13: string = append(append(append(string(" "), v10), string("")), string(""));
            let v15 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method175(
                v0_1.clone(),
                v1.clone(),
                v2.clone(),
            )));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v13), string(">{v15()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v9(()) + " " + &v6(())
                }>{v15()}</summary>
            };
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v25: string = string(" class=\"flex flex-1 flex-col\"");
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method181(v3)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v25), string(">{v27()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v27()}</div> };
            let v35: Array<leptos::View> = new_array(&[v22, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method174(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure197(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure193(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: leptos::View,
            v4: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v7 = {
                let clo = Func0::new(move || Dice_ui::closure194((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v10 = {
                let clo_1 = Func0::new(move || Dice_ui::closure195((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v16 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method173(v3)));
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v14), string(">{v16()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v16()}</div> };
            let v23: leptos::View = leptos::IntoView::into_view(v21);
            let v24: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v7(())");
            let v28: string = append(
                append(
                    string(" open=move || v10(())"),
                    append(append(append(string(" "), v24), string("")), string("")),
                ),
                string(""),
            );
            let v30 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method174(v0_1, v1, v2, v4)));
            let v33: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v28), string(">{v30()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v35: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v10(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v7(())
                    }
                >
                    {v30()}
                </details>
            };
            let v38: Array<leptos::View> = new_array(&[v23, leptos::IntoView::into_view(v35)]);
            let v40: Vec<leptos::View> = v38.to_vec();
            leptos::Fragment::new(v40)
        }
        pub fn method172(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: leptos::View,
            v4: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure193(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure172(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Dice_ui::US32>,
            v2: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: &str = &*string("Account");
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v49: leptos::View = leptos::IntoView::into_view(v47);
            let v52: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>> =
                Some(v2);
            let v55: Option<leptos::Memo<Dice_ui::US32>> = Some(v1);
            let v59: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
            let v67: string = string(" class=\"flex flex-col [position:relative]\"");
            let v69 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method172(
                v52.clone(),
                v55.clone(),
                v0_1.clone(),
                leptos::CollectView::collect_view(v59.to_vec()),
                Dice_ui::method171(Dice_ui::method153(v52, v55, v0_1)),
            )));
            let v72: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v67), string(">{v69()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v74: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-col [position:relative]">{v69()}</div> };
            let v77: Array<leptos::View> = new_array(&[v49, leptos::IntoView::into_view(v74)]);
            let v79: Vec<leptos::View> = v77.to_vec();
            leptos::Fragment::new(v79)
        }
        pub fn method152(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Dice_ui::US32>,
            v2: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure172(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure209(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> i32 {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            (leptos::SignalGetUntracked::get_untracked(&v3.l3.clone())).l2
        }
        pub fn method183(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<i32> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure209(v0_1.clone(), ())
            })
        }
        pub fn closure210(v0_1: LrcPtr<Dice_ui::Heap2>, v1: std::string::String) {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v4: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v2.clone());
            let v7: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v4.l3.clone());
            let v14: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v2);
            let v17: string = toString(v1);
            let v24: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v7.l0.clone(),
                l1: v7.l1.clone(),
                l2: if string("") == v17.clone() {
                    1_i32
                } else {
                    toInt32(v17)
                },
                l3: v7.l3,
                l4: v7.l4.clone(),
            });
            let v26: bool = true;
            leptos::SignalSet::set(&v14.l3.clone(), v24);
            ()
        }
        pub fn method184(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func1<std::string::String, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure210(v0_1.clone(), v)
            })
        }
        pub fn closure211(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure208(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v6: &str = &*string("Max");
            let v27: std::string::String = String::from(v6);
            let v45: leptos::leptos_dom::Text = leptos::html::text(v27);
            let v47: leptos::View = leptos::IntoView::into_view(v45);
            let v48 = Dice_ui::method183(v0_1.clone());
            let v49 = Dice_ui::method184(v0_1);
            let v52 = {
                let clo = Func0::new(move || Dice_ui::closure211((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v62: string =
                string("leptos::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v49(leptos::event_target_value(&event)) prop:value=move || v48() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v52(()) /> }");
            let v64: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                <input
                    on:keyup=move |event: web_sys::KeyboardEvent| v49(
                        leptos::event_target_value(&event),
                    )
                    prop:value=move || v48()
                    class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v52(())
                />
            };
            let v67: Array<leptos::View> = new_array(&[v47, leptos::IntoView::into_view(v64)]);
            let v69: Vec<leptos::View> = v67.to_vec();
            leptos::Fragment::new(v69)
        }
        pub fn method182(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure208(v0_1.clone(), ())
            })
        }
        pub fn closure213(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::ReadSignal<bool> = leptos::Action::pending(&v0_1);
            leptos::SignalGet::get(&v2)
        }
        pub fn method186(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure214(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US58, std::string::String>>,
            unitVar: (),
        ) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v9: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                l0: (leptos::SignalGetUntracked::get_untracked(&v4.l3.clone())).l2,
            });
            let v11: bool = true;
            leptos::Action::dispatch(&v1, v9.clone());
            ()
        }
        pub fn closure216(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure219(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method190() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure219((), ()))
        }
        pub fn closure218(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0s"
                    values="0.2; 1; .2"
                    attributeType="XML"
                    attributeName="opacity"
                >
                    {v15()}
                </animate>
            };
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v35: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
            let v37 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v39: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v35), string(">{v37()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v41: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0s"
                    values="10; 20; 10"
                    attributeType="XML"
                    attributeName="height"
                >
                    {v37()}
                </animate>
            };
            let v43: leptos::View = leptos::IntoView::into_view(v41);
            let v56: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v58 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v60: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v56), string(">{v58()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v62: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0s"
                    values="10; 5; 10"
                    attributeType="XML"
                    attributeName="y"
                >
                    {v58()}
                </animate>
            };
            let v65: Array<leptos::View> = new_array(&[v22, v43, leptos::IntoView::into_view(v62)]);
            let v67: Vec<leptos::View> = v65.to_vec();
            leptos::Fragment::new(v67)
        }
        pub fn method189() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure218((), ()))
        }
        pub fn closure220(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.15s"
                    values="0.2; 1; .2"
                    attributeType="XML"
                    attributeName="opacity"
                >
                    {v15()}
                </animate>
            };
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v35: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v37 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v39: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v35), string(">{v37()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v41: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.15s"
                    values="10; 20; 10"
                    attributeType="XML"
                    attributeName="opacity"
                >
                    {v37()}
                </animate>
            };
            let v43: leptos::View = leptos::IntoView::into_view(v41);
            let v56: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v58 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v60: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v56), string(">{v58()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v62: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.15s"
                    values="10; 5; 10"
                    attributeType="XML"
                    attributeName="y"
                >
                    {v58()}
                </animate>
            };
            let v65: Array<leptos::View> = new_array(&[v22, v43, leptos::IntoView::into_view(v62)]);
            let v67: Vec<leptos::View> = v65.to_vec();
            leptos::Fragment::new(v67)
        }
        pub fn method191() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure220((), ()))
        }
        pub fn closure221(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.3s"
                    values="0.2; 1; .2"
                    attributeType="XML"
                    attributeName="opacity"
                >
                    {v15()}
                </animate>
            };
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v35: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
            let v37 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v39: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v35), string(">{v37()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v41: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.3s"
                    values="10; 20; 10"
                    attributeType="XML"
                    attributeName="height"
                >
                    {v37()}
                </animate>
            };
            let v43: leptos::View = leptos::IntoView::into_view(v41);
            let v56: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v58 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method190()));
            let v60: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v56), string(">{v58()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v62: leptos::HtmlElement<leptos::svg::Animate> = leptos::view! {
                <animate
                    repeatCount="indefinite"
                    dur="0.6s"
                    begin="0.3s"
                    values="10; 5; 10"
                    attributeType="XML"
                    attributeName="y"
                >
                    {v58()}
                </animate>
            };
            let v65: Array<leptos::View> = new_array(&[v22, v43, leptos::IntoView::into_view(v62)]);
            let v67: Vec<leptos::View> = v65.to_vec();
            leptos::Fragment::new(v67)
        }
        pub fn method192() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure221((), ()))
        }
        pub fn closure222(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Rect>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure217(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
            let v15 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method189()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v13), string(">{v15()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Rect> = leptos::view! {
                <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">
                    {v15()}
                </rect>
            };
            let v33: string =
                string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
            let v35 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method191()));
            let v37: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v33), string(">{v35()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v39: leptos::HtmlElement<leptos::svg::Rect> = leptos::view! {
                <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">
                    {v35()}
                </rect>
            };
            let v52: string = string(
                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
            );
            let v54 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method192()));
            let v56: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v52), string(">{v54()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v59: Array<leptos::HtmlElement<leptos::svg::Rect>> = new_array(&[
                v20,
                v39,
                leptos::view! {
                    <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">
                        {v54()}
                    </rect>
                },
            ]);
            let v61: Vec<leptos::HtmlElement<leptos::svg::Rect>> = v59.to_vec();
            let v64: Vec<leptos::View> = v61
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Rect>| {
                        Dice_ui::closure222((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v66: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v64);
            let v68: Vec<leptos::View> = v66.to_vec();
            leptos::Fragment::new(v68)
        }
        pub fn method188() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure217((), ()))
        }
        pub fn closure215(v0_1: Func0<bool>, unitVar: ()) -> leptos::Fragment {
            let v6: &str = &*string("Roll");
            let v27: std::string::String = String::from(v6);
            let v45: leptos::leptos_dom::Text = leptos::html::text(v27);
            let v87: Array<leptos::View> = new_array(&[
                leptos::IntoView::into_view(v45),
                if v0_1() {
                    let v52 = {
                        let clo = Func0::new(move || Dice_ui::closure216((), ()));
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v72: string =
                                    string(" class=move || \" \".to_owned() + &v52(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                    let v74 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method188()));
                    let v77: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v72), string(">{v74()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v79: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || " ".to_owned() + &v52(())
                            xml:space="preserve"
                            style="enable-background:new 0 0 50 50;"
                            viewBox="0 0 24 30"
                            y="0px"
                            x="0px"
                            xmlns:xlink="http://www.w3.org/1999/xlink"
                            xmlns="http://www.w3.org/2000/svg"
                            version="1.1"
                        >
                            {v74()}
                        </svg>
                    };
                    leptos::IntoView::into_view(v79)
                } else {
                    let v83: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
                    leptos::CollectView::collect_view(v83.to_vec())
                },
            ]);
            let v89: Vec<leptos::View> = v87.to_vec();
            leptos::Fragment::new(v89)
        }
        pub fn method187(v0_1: Func0<bool>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure215(v0_1.clone(), ())
            })
        }
        pub fn closure224(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v5: &str = &*v0_1;
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method194(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure224(v0_1.clone(), ())
            })
        }
        pub fn closure223(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"[height:17px]\"");
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method157()));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="[height:17px]">{v6()}</span> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method194(v0_1)));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v16), string(">{v18()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Pre> =
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v18()}</pre> };
            let v26: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v23)]);
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method193(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure223(v0_1.clone(), ())
            })
        }
        pub fn closure212(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US58, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure213(v1.clone(), ())
                })()
            });
            let v6: Func0<bool> = Dice_ui::method186(v5.clone());
            let v7 = Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure214(v0_1.clone(), v1.clone(), ())
            });
            {
                let v9: string =
                    string("class=\"flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
                let v16: string = append(
                    append(
                        string(" on:click=move |_| v7()"),
                        append(
                            append(
                                string(" prop:disabled=move || v6()"),
                                append(append(append(string(" "), v9), string("")), string("")),
                            ),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method187(v5)));
                let v21: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<button "), v16), string(">{v18()}</")),
                                string("button"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v23: leptos::HtmlElement<leptos::html::Button> = leptos::view! {
                    <button
                        on:click=move |_| v7()
                        prop:disabled=move || v6()
                        class="flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500"
                    >
                        {v18()}
                    </button>
                };
                let v25: leptos::View = leptos::IntoView::into_view(v23);
                let v27: Option<string> = v2();
                let v41: Dice_ui::US32 =
                    defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method103(), v27));
                let v63: Array<leptos::View> = new_array(&[
                    v25,
                    if let Dice_ui::US32::US32_0(v41_0_0) = &v41 {
                        let v48: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v50 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method193(
                            match &v41 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        )));
                        let v53: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(append(string("<div "), v48), string(">{v50()}</")),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v55: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v50()}</div> };
                        leptos::IntoView::into_view(v55)
                    } else {
                        let v59: Array<leptos::View> =
                            Dice_ui::method149(new_empty::<leptos::View>());
                        leptos::CollectView::collect_view(v59.to_vec())
                    },
                ]);
                let v65: Vec<leptos::View> = v63.to_vec();
                leptos::Fragment::new(v65)
            }
        }
        pub fn method185(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US58, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure212(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure171(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US58, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US32>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v10 =
                Dice_ui::method161(Dice_ui::method160(Dice_ui::method152(v0_1.clone(), v3, v4)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                <div class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">
                    {v10()}
                </div>
            };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method182(v0_1.clone())));
            let v24: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v20), string(">{v22()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                <div class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">
                    {v22()}
                </div>
            };
            let v28: leptos::View = leptos::IntoView::into_view(v26);
            let v31: string = string(" class=\"flex\"");
            let v33 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method185(v0_1, v1, v2)));
            let v35: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v31), string(">{v33()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex">{v33()}</div> };
            let v40: Array<leptos::View> = new_array(&[v17, v28, leptos::IntoView::into_view(v37)]);
            let v42: Vec<leptos::View> = v40.to_vec();
            leptos::Fragment::new(v42)
        }
        pub fn method151(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US58, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US32>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure171(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure225(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Div>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure170(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US58, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US32>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v10 =
                Dice_ui::method161(Dice_ui::method160(Dice_ui::method151(v0_1, v1, v2, v3, v4)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::html::Div>> = new_array(&[
                leptos::view! { <div class="flex flex-col p-[10px] gap-[11px]">{v10()}</div> },
            ]);
            let v18: Vec<leptos::HtmlElement<leptos::html::Div>> = v16.to_vec();
            let v21: Vec<leptos::View> = v18
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::html::Div>| {
                        Dice_ui::closure225((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v23: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v21);
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method150(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US58, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US32>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure170(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure227(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure228(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure230(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure231(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method199() -> Func0<string> {
            Func0::new(move || Dice_ui::closure234((), ()))
        }
        pub fn closure233(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method161(Dice_ui::method160(Dice_ui::method178(Dice_ui::method199())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method198() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure233((), ()))
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method198()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method179()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method197() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure229(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure230((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure231((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method197()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method181(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method196(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure229(v0_1.clone(), ())
            })
        }
        pub fn closure226(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure227((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure228((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method173(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method196(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method195(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure226(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("No account selected");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method202() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"[height:17px]\"");
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method157()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="[height:17px]">{v5()}</span> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method202()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v15), string(">{v17()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Pre> =
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v17()}</pre> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method201() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure236((), ()))
        }
        pub fn closure239(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US32) {
            let v3: string = fable_library_rust::String_::fromString(_arg.0.clone());
            let v17: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_1,
                map(Dice_ui::method40(), _arg.1.clone()),
            );
            (
                v3,
                match &v17 {
                    Dice_ui::US15::US15_0(v17_0_0) => {
                        Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(match &v17 {
                            Dice_ui::US15::US15_0(x) => x.clone(),
                            _ => unreachable!(),
                        }))
                    }
                    _ => Dice_ui::US32::US32_1,
                },
            )
        }
        pub fn closure240(unitVar: (), _arg: (string, Dice_ui::US32)) -> bool {
            let v1: Dice_ui::US32 = _arg.1.clone();
            if string("FUNCTION_CALL") == _arg.0.clone() {
                if let Dice_ui::US32::US32_0(v1_0_0) = &v1 {
                    string("generate_random_number")
                        == match &v1 {
                            Dice_ui::US32::US32_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method204() -> Func1<(string, Dice_ui::US32), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US32)| {
                Dice_ui::closure240((), arg10_0040)
            })
        }
        pub fn method205(v0_1: Vec<(string, Dice_ui::US32)>) -> Vec<(string, Dice_ui::US32)> {
            v0_1
        }
        pub fn closure238(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: Vec<(string, Dice_ui::US32)> = v5
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure239((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v9 = Dice_ui::method204();
            let v10: Vec<(string, Dice_ui::US32)> = Dice_ui::method205(v8);
            let v12: Vec<(string, Dice_ui::US32)> = v10
                .into_iter()
                .filter(|x| v9(x.clone().clone()))
                .collect::<Vec<_>>();
            if count(fable_library_rust::NativeArray_::array_from(v12)) > 0_i32 {
                _arg.0.clone() == fable_library_rust::String_::fromString(v2.l2.clone())
            } else {
                false
            }
        }
        pub fn method203() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure238((), arg10_0040)
            })
        }
        pub fn method206(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure242(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Block Timestamp");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method208() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure242((), ()))
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Predecessor");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method209() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure243((), ()))
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Receiver");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method210() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure244((), ()))
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Fee");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method211() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Result");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method212() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure246((), ()))
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Status");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method213() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure247((), ()))
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method208()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v3), string(">{v5()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v5()}
                </th>
            };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method209()));
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v15), string(">{v17()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v17()}
                </th>
            };
            let v23: leptos::View = leptos::IntoView::into_view(v21);
            let v26: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v28 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method210()));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v26), string(">{v28()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v28()}
                </th>
            };
            let v34: leptos::View = leptos::IntoView::into_view(v32);
            let v37: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v39 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method211()));
            let v41: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v37), string(">{v39()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v39()}
                </th>
            };
            let v45: leptos::View = leptos::IntoView::into_view(v43);
            let v48: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v50 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method212()));
            let v52: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v48), string(">{v50()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v54: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v50()}
                </th>
            };
            let v56: leptos::View = leptos::IntoView::into_view(v54);
            let v59: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v61 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method213()));
            let v63: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v59), string(">{v61()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v65: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v61()}
                </th>
            };
            let v68: Array<leptos::View> =
                new_array(&[v12, v23, v34, v45, v56, leptos::IntoView::into_view(v65)]);
            let v70: Vec<leptos::View> = v68.to_vec();
            leptos::Fragment::new(v70)
        }
        pub fn method207() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn method216(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure251(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US69 {
            Dice_ui::US69::US69_0(v0_1)
        }
        pub fn method217() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US69> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure251((), v))
        }
        pub fn closure250(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v7: i64 = Dice_ui::method216(toInt64(fable_library_rust::String_::fromString(
                v0_1.l5.clone(),
            ))) / 1000_i64;
            let v9: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v7);
            let v23: Dice_ui::US69 =
                defaultValue(Dice_ui::US69::US69_1, map(Dice_ui::method217(), v9));
            let v42: Dice_ui::US32 = match &v23 {
                Dice_ui::US69::US69_0(v23_0_0) => {
                    let v29: chrono::NaiveDateTime = match &v23 {
                        Dice_ui::US69::US69_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v31: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v29);
                    let v33: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v34: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v36: std::string::String = v31.format(v34).to_string();
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v36))
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v48: Dice_ui::US70 = match &v42 {
                Dice_ui::US32::US32_0(v42_0_0) => Dice_ui::US70::US70_0(match &v42 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US70::US70_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v53: string = match &v48 {
                Dice_ui::US70::US70_0(v48_0_0) => v48_0_0.clone(),
                Dice_ui::US70::US70_1(v48_1_0) => append(
                    append(string("sm\'.to_string result / Error: "), v48_1_0.clone()),
                    string(""),
                ),
            };
            let v58: &str = &*v53;
            let v79: std::string::String = String::from(v58);
            let v97: leptos::leptos_dom::Text = leptos::html::text(v79);
            let v100: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v97)]);
            let v102: Vec<leptos::View> = v100.to_vec();
            leptos::Fragment::new(v102)
        }
        pub fn method215(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure250(v0_1.clone(), ())
            })
        }
        pub fn closure252(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l1.clone());
            let v8: &str = &*v3;
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v50: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v47)]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method218(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure252(v0_1.clone(), ())
            })
        }
        pub fn closure253(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l2.clone());
            let v8: &str = &*v3;
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v50: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v47)]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method219(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure253(v0_1.clone(), ())
            })
        }
        pub fn closure254(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = toString(v0_1.l10);
            let v10: &str = &*v3;
            let v31: std::string::String = String::from(v10);
            let v49: leptos::leptos_dom::Text = leptos::html::text(v31);
            let v52: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v49)]);
            let v54: Vec<leptos::View> = v52.to_vec();
            leptos::Fragment::new(v54)
        }
        pub fn method220(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure254(v0_1.clone(), ())
            })
        }
        pub fn method222(v0_1: i32, v1: LrcPtr<Dice_ui::Mut5>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure255(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v1: Array<std::string::String> = v0_1.l11.clone();
            if count(v1.clone()) as u64 == 0_u64 {
                let v9: &str = &*string("");
                let v30: std::string::String = String::from(v9);
                let v48: leptos::leptos_dom::Text = leptos::html::text(v30);
                let v51: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v48)]);
                let v53: Vec<leptos::View> = v51.to_vec();
                leptos::Fragment::new(v53)
            } else {
                let v56: i32 = count(v1.clone());
                let v58: LrcPtr<Dice_ui::Mut5> = LrcPtr::new(Dice_ui::Mut5 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(Dice_ui::US32::US32_1),
                });
                while Dice_ui::method222(v56, v58.clone()) {
                    let v60: i32 = v58.l0.get().clone();
                    let v63: i32 = v60.wrapping_neg() + v56 - 1_i32;
                    let v64: Dice_ui::US32 = v58.l1.get().clone();
                    let v65: std::string::String = v1[v63].clone();
                    let v69: Array<string> = split(
                        fable_library_rust::String_::fromString(v65),
                        string(" / result: "),
                        -1_i32,
                        0_i32,
                    );
                    let v78: Dice_ui::US32 = if let Dice_ui::US32::US32_1 = &v64 {
                        if count(v69.clone()) as u64 == 2_u64 {
                            let v74: string = v69[0_i32].clone();
                            Dice_ui::US32::US32_0(v69[1_i32].clone())
                        } else {
                            v64.clone()
                        }
                    } else {
                        v64
                    };
                    let v79: i32 = v60 + 1_i32;
                    v58.l0.set(v79);
                    v58.l1.set(v78);
                    ()
                }
                {
                    let v80: Dice_ui::US32 = v58.l1.get().clone();
                    let v84: string = match &v80 {
                        Dice_ui::US32::US32_0(v80_0_0) => match &v80 {
                            Dice_ui::US32::US32_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => string("?"),
                    };
                    let v89: &str = &*v84;
                    let v110: std::string::String = String::from(v89);
                    let v128: leptos::leptos_dom::Text = leptos::html::text(v110);
                    let v131: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v128)]);
                    let v133: Vec<leptos::View> = v131.to_vec();
                    leptos::Fragment::new(v133)
                }
            }
        }
        pub fn method221(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure255(v0_1.clone(), ())
            })
        }
        pub fn closure256(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = if v0_1.l9 {
                string("Ok")
            } else {
                string("Outcome Error")
            };
            let v8: Dice_ui::US64 = match &v1 {
                Err(v1_1_0) => Dice_ui::closure160((), v1_1_0.clone()),
                Ok(v1_0_0) => Dice_ui::closure159((), v1_0_0.clone()),
            };
            let v34: Dice_ui::US60 = match &v8 {
                Dice_ui::US64::US64_0(v8_0_0) => Dice_ui::US60::US60_0(defaultValue(
                    Dice_ui::US58::US58_1,
                    map(Dice_ui::method145(), v8_0_0.clone()),
                )),
                Dice_ui::US64::US64_1(v8_1_0) => Dice_ui::US60::US60_1(v8_1_0.clone()),
            };
            let v130: Dice_ui::US70 = match &v34 {
                Dice_ui::US60::US60_0(v34_0_0) => {
                    let v35: Dice_ui::US58 = v34_0_0.clone();
                    if let Dice_ui::US58::US58_0(v35_0_0, v35_0_1, v35_0_2, v35_0_3) = &v35 {
                        let v38: Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )> = match &v35 {
                            Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v58: Dice_ui::US65 = defaultValue(
                            Dice_ui::US65::US65_1,
                            map(Dice_ui::method146(), v38.clone()),
                        );
                        match &v58 {
                            Dice_ui::US65::US65_0(
                                v58_0_0,
                                v58_0_1,
                                v58_0_2,
                                v58_0_3,
                                v58_0_4,
                                v58_0_5,
                            ) => {
                                let v86: Dice_ui::US65 = defaultValue(
                                    Dice_ui::US65::US65_1,
                                    map(Dice_ui::method146(), v38.clone()),
                                );
                                let v99: Dice_ui::US32 = if let Dice_ui::US65::US65_0(
                                    v86_0_0,
                                    v86_0_1,
                                    v86_0_2,
                                    v86_0_3,
                                    v86_0_4,
                                    v86_0_5,
                                ) = &v86
                                {
                                    Dice_ui::US32::US32_0(append(
                                        append(
                                            append(
                                                append(
                                                    append(
                                                        append(
                                                            append(
                                                                toString(match &v86 {
                                                                    Dice_ui::US65::US65_0(
                                                                        x,
                                                                        _,
                                                                        _,
                                                                        _,
                                                                        _,
                                                                        _,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                }),
                                                                string(": "),
                                                            ),
                                                            toString(match &v86 {
                                                                Dice_ui::US65::US65_0(
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    x,
                                                                    _,
                                                                ) => x.clone(),
                                                                _ => unreachable!(),
                                                            }),
                                                        ),
                                                        string(" - "),
                                                    ),
                                                    toString(match &v86 {
                                                        Dice_ui::US65::US65_0(_, _, _, _, _, x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    }),
                                                ),
                                                string(" ("),
                                            ),
                                            toString(match &v86 {
                                                Dice_ui::US65::US65_0(_, x, _, _, _, _) => {
                                                    x.clone()
                                                }
                                                _ => unreachable!(),
                                            }),
                                        ),
                                        string(")"),
                                    ))
                                } else {
                                    Dice_ui::US32::US32_1
                                };
                                Dice_ui::US70::US70_1(match &v99 {
                                    Dice_ui::US32::US32_0(v99_0_0) => match &v99 {
                                        Dice_ui::US32::US32_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => Dice_ui::method10(400_i64, sprintf!("{:?}", ())),
                                })
                            }
                            _ => Dice_ui::US70::US70_0(Dice_ui::method10(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        match &v35 {
                                            Dice_ui::US58::US58_0(x, _, _, _) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        match &v35 {
                                            Dice_ui::US58::US58_0(_, x, _, _) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        v38.clone(),
                                        match &v35 {
                                            Dice_ui::US58::US58_0(_, _, _, x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                    )
                                ),
                            )),
                        }
                    } else {
                        Dice_ui::US70::US70_1(sprintf!(
                            "RPC Response: {}",
                            Dice_ui::method10(400_i64, sprintf!("{:?}", v34.clone()))
                        ))
                    }
                }
                Dice_ui::US60::US60_1(v34_1_0) => {
                    Dice_ui::US70::US70_1(fable_library_rust::String_::fromString(v34_1_0.clone()))
                }
            };
            let v142: string = sprintf!(
                "{} / {}",
                v5,
                match &v130 {
                    Dice_ui::US70::US70_0(v130_0_0) => sprintf!(
                        "RPC Response: {}",
                        Dice_ui::method10(400_i64, sprintf!("{:?}", v130_0_0.clone()))
                    ),
                    Dice_ui::US70::US70_1(v130_1_0) => sprintf!("Error: {}", v130_1_0.clone()),
                }
            );
            let v147: &str = &*v142;
            let v168: std::string::String = String::from(v147);
            let v186: leptos::leptos_dom::Text = leptos::html::text(v168);
            let v189: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v186)]);
            let v191: Vec<leptos::View> = v189.to_vec();
            leptos::Fragment::new(v191)
        }
        pub fn method223(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure256(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure249(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v7 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method215(v0_1.clone())));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v5), string(">{v7()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">{v7()}</td>
            };
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v19 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method218(v0_1.clone())));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v17), string(">{v19()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v19()}
                </td>
            };
            let v25: leptos::View = leptos::IntoView::into_view(v23);
            let v28: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v30 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method219(v0_1.clone())));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v28), string(">{v30()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v30()}
                </td>
            };
            let v36: leptos::View = leptos::IntoView::into_view(v34);
            let v39: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v41 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method220(v0_1.clone())));
            let v43: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v39), string(">{v41()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v41()}
                </td>
            };
            let v47: leptos::View = leptos::IntoView::into_view(v45);
            let v50: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v52 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method221(v0_1.clone())));
            let v54: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v50), string(">{v52()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v56: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v52()}
                </td>
            };
            let v58: leptos::View = leptos::IntoView::into_view(v56);
            let v61: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v63 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method223(v0_1, v1)));
            let v65: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v61), string(">{v63()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v67: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v63()}
                </td>
            };
            let v70: Array<leptos::View> =
                new_array(&[v14, v25, v36, v47, v58, leptos::IntoView::into_view(v67)]);
            let v72: Vec<leptos::View> = v70.to_vec();
            leptos::Fragment::new(v72)
        }
        pub fn method214(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure249(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure248(
            v0_1: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::View {
            let v5: Array<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = fable_library_rust::NativeArray_::array_from(v0_1);
            let v7: i32 = _arg.1.clone() as i32;
            let v14: string = string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
            let v16 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method214(
                _arg.2.clone(),
                v5[v7].clone(),
            )));
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<tr "), v14), string(">{v16()}</")),
                            string("tr"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Tr> =
                leptos::view! { <tr class="odd:bg-gray-50 dark:odd:bg-gray-800/50">{v16()}</tr> };
            leptos::IntoView::into_view(v21)
        }
        pub fn closure258(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method225(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure258(v0_1.clone(), ())
            })
        }
        pub fn closure259(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method226(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure259(v0_1.clone(), ())
            })
        }
        pub fn closure257(
            v0_1: leptos::Fragment,
            v1: leptos::Fragment,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = string(" class=\"ltr:text-left rtl:text-right\"");
            let v7 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method225(v0_1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<thead "), v5), string(">{v7()}</")),
                            string("thead"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Thead> =
                leptos::view! { <thead class="ltr:text-left rtl:text-right">{v7()}</thead> };
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
            let v19 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method226(v1)));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<tbody "), v17), string(">{v19()}</")),
                            string("tbody"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Tbody> = leptos::view! { <tbody class="divide-y divide-gray-200 dark:divide-gray-700">{v19()}</tbody> };
            let v27: Array<leptos::View> = new_array(&[v14, leptos::IntoView::into_view(v24)]);
            let v29: Vec<leptos::View> = v27.to_vec();
            leptos::Fragment::new(v29)
        }
        pub fn method224(v0_1: leptos::Fragment, v1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure257(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure261(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure262((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v22: string =
                string(" class=move || \" \".to_owned() + &v2(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
            let v24 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method188()));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v22), string(">{v24()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    class=move || " ".to_owned() + &v2(())
                    xml:space="preserve"
                    style="enable-background:new 0 0 50 50;"
                    viewBox="0 0 24 30"
                    y="0px"
                    x="0px"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns="http://www.w3.org/2000/svg"
                    version="1.1"
                >
                    {v24()}
                </svg>
            };
            let v31: leptos::View = leptos::IntoView::into_view(v29);
            let v37: &str = &*string("Loading...");
            let v58: std::string::String = String::from(v37);
            let v76: leptos::leptos_dom::Text = leptos::html::text(v58);
            let v79: Array<leptos::View> = new_array(&[v31, leptos::IntoView::into_view(v76)]);
            let v81: Vec<leptos::View> = v79.to_vec();
            leptos::Fragment::new(v81)
        }
        pub fn method228() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure261((), ()))
        }
        pub fn closure260(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex flex-1 [gap:4px] items-center\"");
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method228()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 [gap:4px] items-center">{v5()}</div> };
            let v13: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v10)]);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method227() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure260((), ()))
        }
        pub fn closure235(
            v0_1: leptos::Memo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v2();
            let v130: Array<leptos::View> = new_array(&[
                if count(fable_library_rust::NativeArray_::array_from(v4)) as u64 == 0_u64 {
                    let v12: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v14 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method201()));
                    let v17: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v12), string(">{v14()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v19: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v14()}</div> };
                    leptos::IntoView::into_view(v19)
                } else {
                    let v23: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v1();
                    let v26: Dice_ui::US54 = match &v23 {
                        Err(v23_1_0) => Dice_ui::closure121((), v23_1_0.clone()),
                        Ok(v23_0_0) => Dice_ui::closure120((), v23_0_0.clone()),
                    };
                    let v49: Dice_ui::US47 = match &v26 {
                        Dice_ui::US54::US54_0(v26_0_0) => Dice_ui::US47::US47_0(defaultValue(
                            Dice_ui::US48::US48_1,
                            map(Dice_ui::method123(), v26_0_0.clone()),
                        )),
                        Dice_ui::US54::US54_1(v26_1_0) => Dice_ui::US47::US47_1(v26_1_0.clone()),
                    };
                    match &v49 {
                        Dice_ui::US47::US47_0(v49_0_0) => {
                            let v50: Dice_ui::US48 = v49_0_0.clone();
                            if let Dice_ui::US48::US48_0(v50_0_0) = &v50 {
                                let v53: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    match &v50 {
                                        Dice_ui::US48::US48_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .to_vec();
                                let v54 = Dice_ui::method203();
                                let v55: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method206(v53);
                                let v57: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v55
                                    .into_iter()
                                    .filter(|x| v54(x.clone().clone()))
                                    .collect::<Vec<_>>();
                                let v60 =
                                    Dice_ui::method161(Dice_ui::method160(Dice_ui::method207()));
                                let v64: string = string("leptos::view! { <tr >{v60()}</tr> }");
                                let v66: leptos::HtmlElement<leptos::html::Tr> =
                                    leptos::view! { <tr>{v60()}</tr> };
                                let v69: Array<leptos::View> =
                                    new_array(&[leptos::IntoView::into_view(v66)]);
                                let v71: Vec<leptos::View> = v69.to_vec();
                                let v73: leptos::Fragment = leptos::Fragment::new(v71);
                                let v75: Vec<
                                    Result<
                                        Option<(
                                            std::string::String,
                                            Option<(
                                                Array<(
                                                    std::string::String,
                                                    Array<
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            (
                                                                std::string::String,
                                                                Option<std::string::String>,
                                                                Option<f64>,
                                                                Option<std::string::String>,
                                                            ),
                                                        >,
                                                    >,
                                                    std::string::String,
                                                    Array<std::string::String>,
                                                    Array<std::string::String>,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    u64,
                                                    Array<std::string::String>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    u8,
                                                    Array<std::string::String>,
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        std::string::String,
                                                    >,
                                                    Option<std::string::String>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                )>,
                                            )>,
                                            Option<(
                                                std::string::String,
                                                std::string::String,
                                                Option<(
                                                    Option<std::string::String>,
                                                    Option<std::string::String>,
                                                )>,
                                                i32,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Option<std::string::String>,
                                        )>,
                                        std::string::String,
                                    >,
                                > = v0_1();
                                let v78: Vec<leptos::View> = v57
                                    .into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v75 = v75.clone();
                                            move |arg10_0040: (
                                                string,
                                                usize,
                                                LrcPtr<Dice_ui::Heap5>,
                                            )| {
                                                Dice_ui::closure248(v75.clone(), arg10_0040)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>();
                                let v80: Array<leptos::View> =
                                    fable_library_rust::NativeArray_::array_from(v78);
                                let v82: Vec<leptos::View> = v80.to_vec();
                                let v87: string =
                                                string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v89 = Dice_ui::method161(Dice_ui::method160(
                                    Dice_ui::method224(v73, leptos::Fragment::new(v82)),
                                ));
                                let v92: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<table "), v87),
                                                    string(">{v89()}</"),
                                                ),
                                                string("table"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v94: leptos::HtmlElement<leptos::html::Table> = leptos::view! {
                                    <table class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">
                                        {v89()}
                                    </table>
                                };
                                leptos::IntoView::into_view(v94)
                            } else {
                                let v100: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v102 =
                                    Dice_ui::method161(Dice_ui::method160(Dice_ui::method227()));
                                let v105: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v100),
                                                    string(">{v102()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v107: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="grid place-content-center py-[10vh]">{v102()}</div> };
                                leptos::IntoView::into_view(v107)
                            }
                        }
                        Dice_ui::US47::US47_1(v49_1_0) => {
                            let v117: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v119 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method193(
                                fable_library_rust::String_::fromString(v49_1_0.clone()),
                            )));
                            let v122: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v117),
                                                string(">{v119()}</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v124: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v119()}</div> };
                            leptos::IntoView::into_view(v124)
                        }
                    }
                },
            ]);
            let v132: Vec<leptos::View> = v130.to_vec();
            leptos::Fragment::new(v132)
        }
        pub fn method200(
            v0_1: leptos::Memo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure235(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure265(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure266(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure269(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method233() -> Func0<string> {
            Func0::new(move || Dice_ui::closure269((), ()))
        }
        pub fn closure268(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method161(Dice_ui::method160(Dice_ui::method178(Dice_ui::method233())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method232() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure268((), ()))
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method232()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method179()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method231() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure267((), ()))
        }
        pub fn closure264(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure265((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure266((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method231()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method181(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method230(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure264(v0_1.clone(), ())
            })
        }
        pub fn closure263(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure227((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure228((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method173(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method230(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method229(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure263(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure272(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::create_signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure271(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure272(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method234() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure271((), v))
        }
        pub fn method235(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure270(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::SignalGet::get(&v3.l3.clone());
            let v8 = Dice_ui::method234();
            let v9: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method235(v6.l0.clone());
            v9.iter()
                .enumerate()
                .map(|(i, x)| v8(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn closure274(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn closure275(
            v0_1: i32,
            _arg: (
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            (v0_1, _arg.0.clone(), _arg.1.clone())
        }
        pub fn closure273(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::SignalGet::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v0_1();
            let v8: Vec<(
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure274((), tupledArg.0.clone(), tupledArg.1.clone())
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            v8.into_iter()
                .map(|x| {
                    Func1::new({
                        let v3 = v3.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure275(v3, arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure276(
            v0_1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v0_1();
            count(fable_library_rust::NativeArray_::array_from(v2))
        }
        pub fn method236(
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method237(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure280(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            leptos::SignalGet::get(&((LrcPtr::new((v0_, v0__1))).1.clone()).0.clone())
        }
        pub fn closure279(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v0_1();
            let v11: i32 = count(fable_library_rust::NativeArray_::array_from(v8.clone()));
            let v17: &str = &*string("");
            let v38: std::string::String = String::from(v17);
            let patternInput: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::create_signal(LrcPtr::new((false, v38)));
            let v59: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v60: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method236(v59.0.clone(), v59.1.clone());
            let v61: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method237(v8);
            let v63: bool = true;
            let mut v61 = v61;
            let v65: bool = true;
            v61.push(v60);
            let v67: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v61;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v67
                    .into_iter()
                    .map(|x| {
                        Func1::new(
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                                ),
                            )>| {
                                Dice_ui::closure280((), tupledArg.0.clone(), tupledArg.1.clone())
                            },
                        )(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure281(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + v0_1
        }
        pub fn closure278(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v5: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v9: bool = true;
            leptos::SignalUpdate::update(&v5.l3.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure279(v1.clone(), v)
                })(x.clone())
            });
            let v12: bool = true;
            leptos::SignalUpdate::update(&v2, |x| {
                *x = Func1::new(move |v_1: i32| Dice_ui::closure281((), v_1))(x.clone())
            });
            ()
        }
        pub fn closure277(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v5: bool = true;
            leptos::batch(move || {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    move || Dice_ui::closure278(v0_1.clone(), v1.clone(), v2.clone(), ())
                })()
            });
            ()
        }
        pub fn closure282(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure283(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure181((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method238() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure283((), ()))
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v5)
        }
        pub fn closure285(
            v0_1: leptos::HtmlElement<leptos::svg::Svg>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v0_1)]);
            let v5: Vec<leptos::View> = v3.to_vec();
            leptos::Fragment::new(v5)
        }
        pub fn method239(v0_1: leptos::HtmlElement<leptos::svg::Svg>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure285(v0_1.clone(), ())
            })
        }
        pub fn method242(
            v0_1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
        ) -> leptos::Memo<
            Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        > {
            v0_1
        }
        pub fn closure288(
            unitVar: (),
            _arg: (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (i32, i32) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn method243() -> Func1<
            (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (i32, i32),
        > {
            Func1::new(
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure288((), arg10_0040),
            )
        }
        pub fn method246(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn closure291(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append(append(string("account-"), toString(v0_1)), string(""));
            let v6: &str = &*v1;
            String::from(v6)
        }
        pub fn method249(v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure295(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method249(v1 == v0_1) {
                v2.clone()
            } else {
                LrcPtr::new((v2.0.clone() == false, v2.1.clone()))
            }
        }
        pub fn closure294(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure295(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method248(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure294(v0_1, v)
            })
        }
        pub fn closure293(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3.clone());
            let v8: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v5.l3.clone());
            let v15: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3);
            let v17 = Dice_ui::method248(v1);
            let v18: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method235(v8.l0.clone());
            let v21: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v18
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v17(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v8.l1.clone(),
                l2: v8.l2,
                l3: v8.l3,
                l4: v8.l4.clone(),
            });
            let v23: bool = true;
            leptos::SignalSet::set(&v15.l3.clone(), v21);
            ()
        }
        pub fn closure296(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::SignalGet::get(&v0_1)).0.clone()
        }
        pub fn method250(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure296(v0_1.clone(), ())
            })
        }
        pub fn method251(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure291(v0_1, ())
            })
        }
        pub fn closure298(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path
                        clip-rule="evenodd"
                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                        fill-rule="evenodd"
                    >
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure181((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method253() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure298((), ()))
        }
        pub fn closure299(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path
                        clip-rule="evenodd"
                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                        fill-rule="evenodd"
                    >
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure181((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method254() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure299((), ()))
        }
        pub fn closure300(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Svg>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure297(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v11: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method253()));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v11), string(">{v13()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    class="h-4 w-4"
                    xmlns="http://www.w3.org/2000/svg"
                    data-unchecked-icon
                >
                    {v13()}
                </svg>
            };
            let v29: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v31 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method254()));
            let v33: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v29), string(">{v31()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: Array<leptos::HtmlElement<leptos::svg::Svg>> = new_array(&[
                v18,
                leptos::view! {
                    <svg
                        fill="currentColor"
                        viewBox="0 0 20 20"
                        class="hidden h-4 w-4"
                        xmlns="http://www.w3.org/2000/svg"
                        data-checked-icon
                    >
                        {v31()}
                    </svg>
                },
            ]);
            let v38: Vec<leptos::HtmlElement<leptos::svg::Svg>> = v36.to_vec();
            let v41: Vec<leptos::View> = v38
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Svg>| {
                        Dice_ui::closure300((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v43: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v41);
            let v45: Vec<leptos::View> = v43.to_vec();
            leptos::Fragment::new(v45)
        }
        pub fn method252() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure297((), ()))
        }
        pub fn closure301(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method255() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure301((), ()))
        }
        pub fn closure292(
            v0_1: i32,
            v1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3 = Func1::new({
                let v0_1 = v0_1.clone();
                let v2 = v2.clone();
                move |v: leptos::ev::Event| Dice_ui::closure293(v2.clone(), v0_1, v)
            });
            {
                let v5 = Dice_ui::method250(v1);
                let v6 = Dice_ui::method251(v0_1);
                let v7: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v20: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v5()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v3(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v6()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v7),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v22: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        prop:checked=move || v5()
                        on:change=move |event| v3(event)
                        id=move || v6()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                };
                let v24: leptos::View = leptos::IntoView::into_view(v22);
                let v25: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v27: string = append(append(append(string(" "), v25), string("")), string(""));
                let v29 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method252()));
                let v32: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v27), string(">{v29()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v34: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v29()}
                    </span>
                };
                let v36: leptos::View = leptos::IntoView::into_view(v34);
                let v37: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v39: string = append(append(append(string(" "), v37), string("")), string(""));
                let v41 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method255()));
                let v43: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v39), string(">{v41()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v45: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v41()}
                    </span>
                };
                let v48: Array<leptos::View> =
                    new_array(&[v24, v36, leptos::IntoView::into_view(v45)]);
                let v50: Vec<leptos::View> = v48.to_vec();
                leptos::Fragment::new(v50)
            }
        }
        pub fn method247(
            v0_1: i32,
            v1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure292(v0_1, v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure302(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> std::string::String {
            (leptos::SignalGet::get(&v0_1)).1.clone()
        }
        pub fn method256(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure302(v0_1.clone(), ())
            })
        }
        pub fn method259(v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure305(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method259(v2 == v0_1) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure304(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure305(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method258(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure304(v0_1, v1.clone(), v)
            })
        }
        pub fn closure303(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: std::string::String) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3.clone());
            let v8: LrcPtr<Dice_ui::Heap0> =
                leptos::SignalGetUntracked::get_untracked(&v5.l3.clone());
            let v15: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3);
            let v17 = Dice_ui::method258(v1, v2);
            let v18: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method235(v8.l0.clone());
            let v21: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v18
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v17(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v8.l1.clone(),
                l2: v8.l2,
                l3: v8.l3,
                l4: v8.l4.clone(),
            });
            let v23: bool = true;
            leptos::SignalSet::set(&v15.l3.clone(), v21);
            ()
        }
        pub fn method257(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32) -> Func1<std::string::String, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: std::string::String| Dice_ui::closure303(v0_1.clone(), v1, v)
            })
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method260(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure311(unitVar: (), v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn method262() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure311((), v))
        }
        pub fn closure310(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v11: bool = (LrcPtr::new((v1_, v1__1))).0.clone() == v0_1;
            (Dice_ui::method262())(v11)
        }
        pub fn method261(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure310(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure309(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method260(v0_1());
            let v11 = Dice_ui::method261(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17
                    .into_iter()
                    .map(|x| {
                        Func1::new(
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                                ),
                            )>| {
                                Dice_ui::closure280((), tupledArg.0.clone(), tupledArg.1.clone())
                            },
                        )(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure308(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v6: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v10: bool = true;
            leptos::SignalUpdate::update(&v6.l3.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    let v3 = v3.clone();
                    move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure309(v1.clone(), v3, v)
                })(x.clone())
            });
            let v13: bool = true;
            leptos::SignalUpdate::update(&v2, |x| {
                *x = Func1::new(move |v_1: i32| Dice_ui::closure281((), v_1))(x.clone())
            });
            ()
        }
        pub fn closure307(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v6: bool = true;
            leptos::batch(move || {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || Dice_ui::closure308(v0_1.clone(), v1.clone(), v2.clone(), v3, ())
                })()
            });
            ()
        }
        pub fn closure312(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure313(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string = string(
                " d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure181((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method263() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure313((), ()))
        }
        pub fn closure314(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v5)
        }
        pub fn closure290(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            v4: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v5: i32,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: i32 = Dice_ui::method246(v5);
            let v7 = Func0::new({
                let v6 = v6.clone();
                move || Dice_ui::closure291(v6, ())
            });
            {
                let v14: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v7()");
                let v16 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method247(
                    v6,
                    v4.clone(),
                    v0_1.clone(),
                )));
                let v19: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<label "), v14), string(">{v16()}</")),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v21: leptos::HtmlElement<leptos::html::Label> = leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v7()
                    >
                        {v16()}
                    </label>
                };
                let v23: leptos::View = leptos::IntoView::into_view(v21);
                let v24 = Dice_ui::method256(v4);
                let v25 = Dice_ui::method257(v0_1.clone(), v6);
                let v28 = {
                    let clo = Func0::new(move || Dice_ui::closure306((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v37: string =
                    string("leptos::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v25(leptos::event_target_value(&event)) prop:value=move || v24() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v28(()) /> }");
                let v39: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        on:keyup=move |event: web_sys::KeyboardEvent| v25(
                            leptos::event_target_value(&event),
                        )
                        prop:value=move || v24()
                        class=move || {
                            "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v28(())
                        }
                    />
                };
                let v94: Array<leptos::View> = new_array(&[
                    v23,
                    leptos::IntoView::into_view(v39),
                    if v1() == 1_i32 {
                        let v46: Array<leptos::View> =
                            Dice_ui::method149(new_empty::<leptos::View>());
                        leptos::CollectView::collect_view(v46.to_vec())
                    } else {
                        let v49 = Func0::new({
                            let v0_1 = v0_1.clone();
                            let v2 = v2.clone();
                            let v3 = v3.clone();
                            let v6 = v6.clone();
                            move || {
                                Dice_ui::closure307(v0_1.clone(), v2.clone(), v3.clone(), v6, ())
                            }
                        });
                        {
                            let v53 = {
                                let clo_1 = Func0::new(move || Dice_ui::closure312((), ()));
                                Func1::new({
                                    let clo_1 = clo_1.clone();
                                    move |arg_1: ()| clo_1()
                                })
                            };
                            let v66: string =
                                            string(" class=move || \" \".to_owned() + &v53(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v68 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method263()));
                            let v71: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<svg "), v66),
                                                string(">{v68()}</"),
                                            ),
                                            string("svg"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v73: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                                <svg
                                    class=move || " ".to_owned() + &v53(())
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    {v68()}
                                </svg>
                            };
                            let v78 = {
                                let clo_2 = Func0::new(move || Dice_ui::closure314((), ()));
                                Func1::new({
                                    let clo_2 = clo_2.clone();
                                    move |arg_2: ()| clo_2()
                                })
                            };
                            let v79: string =
                                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v78(())");
                            let v83: string = append(
                                append(
                                    string(" aria-label=\"Delete\""),
                                    append(
                                        append(
                                            string(" on:click=move |_| v49()"),
                                            append(
                                                append(append(string(" "), v79), string("")),
                                                string(""),
                                            ),
                                        ),
                                        string(""),
                                    ),
                                ),
                                string(""),
                            );
                            let v85 =
                                Dice_ui::method161(Dice_ui::method160(Dice_ui::method239(v73)));
                            let v88: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<button "), v83),
                                                string(">{v85()}</"),
                                            ),
                                            string("button"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v90: leptos::HtmlElement<leptos::html::Button> = leptos::view! {
                                <button
                                    aria-label="Delete"
                                    on:click=move |_| v49()
                                    class=move || {
                                        "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] "
                                            .to_owned() + &v78(())
                                    }
                                >
                                    {v85()}
                                </button>
                            };
                            leptos::IntoView::into_view(v90)
                        }
                    },
                ]);
                let v96: Vec<leptos::View> = v94.to_vec();
                leptos::Fragment::new(v96)
            }
        }
        pub fn method245(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            v4: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v5: i32,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                move || {
                    Dice_ui::closure290(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5,
                        (),
                    )
                }
            })
        }
        pub fn closure289(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            _arg: (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::Fragment {
            let v10: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
            let v12 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method245(
                v0_1,
                v1,
                v2,
                v3,
                _arg.2.clone(),
                _arg.1.clone(),
            )));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">{v12()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex gap-[8px] [align-items:center]">{v12()}</div> };
            let v20: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v17)]);
            let v22: Vec<leptos::View> = v20.to_vec();
            leptos::Fragment::new(v22)
        }
        pub fn method244(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::Fragment,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| {
                    Dice_ui::closure289(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        arg10_0040,
                    )
                }
            })
        }
        pub fn closure287(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = Dice_ui::method242(v1);
            let v6 = Dice_ui::method243();
            let v7 = Dice_ui::method244(v0_1, v2, v3, v4);
            let v19: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos::For  children=move |x| v7(x) let:x key=move |x| v6(x.to_owned()) each=v5 /> })");
            let v21: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(
                leptos::view! {
                    <leptos::For
                        children=move |x| v7(x)
                        let:x
                        key=move |x| v6(x.to_owned())
                        each=v5
                    />
                },
            )]);
            let v23: Vec<leptos::View> = v21.to_vec();
            leptos::Fragment::new(v23)
        }
        pub fn method241(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure287(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure286(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v10 =
                Dice_ui::method161(Dice_ui::method160(Dice_ui::method241(v0_1, v1, v2, v3, v4)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 flex-col p-[8px] gap-[8px]">{v10()}</div> };
            let v18: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v15)]);
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method240(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure286(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure317(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure318(v0_1: leptos::View, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure321(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method268(v0_1: leptos::View) -> Func0<string> {
            Func0::new(move || Dice_ui::closure321((), ()))
        }
        pub fn closure320(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v7 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method178(
                Dice_ui::method268(v0_1),
            )));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v5), string(">{v7()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v7()}</span>
            };
            let v15: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v12)]);
            let v17: Vec<leptos::View> = v15.to_vec();
            leptos::Fragment::new(v17)
        }
        pub fn method267(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure320(v0_1.clone(), ())
            })
        }
        pub fn closure319(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex items-center gap-2\"");
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method267(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v6()}</div> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method179()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> };
            let v26: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v23)]);
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method266(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure319(v0_1.clone(), ())
            })
        }
        pub fn closure316(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure317((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    move || Dice_ui::closure318(v0_1.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v7(()) + \" \" + &v4(())");
            let v11: string = append(append(append(string(" "), v8), string("")), string(""));
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method266(v0_1.clone())));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v11), string(">{v13()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v7(()) + " " + &v4(())
                }>{v13()}</summary>
            };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method181(v1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> };
            let v33: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v30)]);
            let v35: Vec<leptos::View> = v33.to_vec();
            leptos::Fragment::new(v35)
        }
        pub fn method265(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure316(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure315(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure227((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure228((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method173(v0_1.clone())));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method265(v0_1, v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method264(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure315(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure324(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Dark Mode");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method271() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure324((), ()))
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("dark-mode");
            String::from(v5)
        }
        pub fn closure329(unitVar: (), v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure328(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: bool = true;
            leptos::SignalUpdate::update(&v4.l0.clone(), |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure329((), v))(x.clone())
            });
            ()
        }
        pub fn closure330(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalGet::get(&v3.l0.clone())
        }
        pub fn method274(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure330(v0_1.clone(), ())
            })
        }
        pub fn method275() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure326((), ()))
        }
        pub fn closure327(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure328(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method274(v0_1.clone());
                let v4 = Dice_ui::method275();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        prop:checked=move || v3()
                        on:change=move |event| v1(event)
                        id=move || v4()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                };
                let v22: leptos::View = leptos::IntoView::into_view(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v25: string = append(append(append(string(" "), v23), string("")), string(""));
                let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method252()));
                let v30: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v25), string(">{v27()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v32: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                };
                let v34: leptos::View = leptos::IntoView::into_view(v32);
                let v35: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v37: string = append(append(append(string(" "), v35), string("")), string(""));
                let v39 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method255()));
                let v41: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v37), string(">{v39()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v43: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v39()}
                    </span>
                };
                let v46: Array<leptos::View> =
                    new_array(&[v22, v34, leptos::IntoView::into_view(v43)]);
                let v48: Vec<leptos::View> = v46.to_vec();
                leptos::Fragment::new(v48)
            }
        }
        pub fn method273(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure327(v0_1.clone(), ())
            })
        }
        pub fn closure325(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure326((), ()));
            {
                let v8: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method273(v0_1)));
                let v13: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<label "), v8), string(">{v10()}</")),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v15: leptos::HtmlElement<leptos::html::Label> = leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v10()}
                    </label>
                };
                let v18: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v15)]);
                let v20: Vec<leptos::View> = v18.to_vec();
                leptos::Fragment::new(v20)
            }
        }
        pub fn method272(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure325(v0_1.clone(), ())
            })
        }
        pub fn closure331(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure332(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure333(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure335(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn method277(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn closure334(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method276(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure334(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure336(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Debug");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method278() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure336((), ()))
        }
        pub fn closure338(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("debug");
            String::from(v5)
        }
        pub fn closure340(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: bool = true;
            leptos::SignalUpdate::update(&v4.l1.clone(), |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure329((), v))(x.clone())
            });
            ()
        }
        pub fn closure341(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::SignalGet::get(&v3.l1.clone())
        }
        pub fn method281(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure341(v0_1.clone(), ())
            })
        }
        pub fn method282() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure338((), ()))
        }
        pub fn closure339(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure340(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method281(v0_1.clone());
                let v4 = Dice_ui::method282();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        prop:checked=move || v3()
                        on:change=move |event| v1(event)
                        id=move || v4()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                };
                let v22: leptos::View = leptos::IntoView::into_view(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v25: string = append(append(append(string(" "), v23), string("")), string(""));
                let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method252()));
                let v30: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v25), string(">{v27()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v32: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                };
                let v34: leptos::View = leptos::IntoView::into_view(v32);
                let v35: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v37: string = append(append(append(string(" "), v35), string("")), string(""));
                let v39 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method255()));
                let v41: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v37), string(">{v39()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v43: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v39()}
                    </span>
                };
                let v46: Array<leptos::View> =
                    new_array(&[v22, v34, leptos::IntoView::into_view(v43)]);
                let v48: Vec<leptos::View> = v46.to_vec();
                leptos::Fragment::new(v48)
            }
        }
        pub fn method280(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure339(v0_1.clone(), ())
            })
        }
        pub fn closure337(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure338((), ()));
            {
                let v8: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method280(v0_1)));
                let v13: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<label "), v8), string(">{v10()}</")),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v15: leptos::HtmlElement<leptos::html::Label> = leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v10()}
                    </label>
                };
                let v18: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v15)]);
                let v20: Vec<leptos::View> = v18.to_vec();
                leptos::Fragment::new(v20)
            }
        }
        pub fn method279(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure337(v0_1.clone(), ())
            })
        }
        pub fn closure342(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure343(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method283(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure343(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure344(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Dl>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure323(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method271();
            let v2 = Dice_ui::method272(v0_1.clone());
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure331((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v7() -> string {
                Dice_ui::closure332((), ())
            }
            let v8 = {
                let clo_1 = Func0::from(v7);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v10() -> string {
                Dice_ui::closure333((), ())
            }
            let v11 = {
                let clo_2 = Func0::from(v10);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v15: string = append(append(append(string(" "), v12), string("")), string(""));
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method276(v1, v2)));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v15), string(">{v17()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())
                }>{v17()}</dl>
            };
            let v23 = Dice_ui::method278();
            let v24 = Dice_ui::method279(v0_1);
            let v27 = {
                let clo_3 = Func0::new(move || Dice_ui::closure342((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v29 = {
                let clo_4 = Func0::from(v7);
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v31 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v32: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v31(()) + \" \" + &v29(()) + \" \" + &v27(())");
            let v34: string = append(append(append(string(" "), v32), string("")), string(""));
            let v36 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method283(v23, v24)));
            let v38: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v34), string(">{v36()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v41: Array<leptos::HtmlElement<leptos::html::Dl>> = new_array(&[
                v22,
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                            .to_owned() + &v31(()) + " " + &v29(()) + " " + &v27(())
                    }>{v36()}</dl>
                },
            ]);
            let v43: Vec<leptos::HtmlElement<leptos::html::Dl>> = v41.to_vec();
            let v46: Vec<leptos::View> = v43
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::html::Dl>| {
                        Dice_ui::closure344((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v48: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v46);
            let v50: Vec<leptos::View> = v48.to_vec();
            leptos::Fragment::new(v50)
        }
        pub fn method270(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure323(v0_1.clone(), ())
            })
        }
        pub fn closure322(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method270(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 flex-col p-[11px] gap-[11px]">{v6()}</div> };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method269(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure322(v0_1.clone(), ())
            })
        }
        pub fn closure347(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure351(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method288() -> Func0<string> {
            Func0::new(move || Dice_ui::closure351((), ()))
        }
        pub fn closure350(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method161(Dice_ui::method160(Dice_ui::method178(Dice_ui::method288())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method287() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure350((), ()))
        }
        pub fn closure349(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method287()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method179()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method286() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure349((), ()))
        }
        pub fn closure346(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure347((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure348((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method286()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method181(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method285(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure346(v0_1.clone(), ())
            })
        }
        pub fn closure345(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure227((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure228((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method173(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method285(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method284(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure345(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure353(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Global State");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method290() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure353((), ()))
        }
        pub fn method292(v0_1: LrcPtr<Dice_ui::Heap2>) -> LrcPtr<Dice_ui::Heap2> {
            v0_1
        }
        pub fn closure356(unitVar: (), v0_1: std::string::String) -> Dice_ui::US71 {
            Dice_ui::US71::US71_0(v0_1)
        }
        pub fn closure357(unitVar: (), v0_1: std::string::String) -> Dice_ui::US71 {
            Dice_ui::US71::US71_1(v0_1)
        }
        pub fn closure355(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v4: LrcPtr<Dice_ui::Heap2> = Dice_ui::method292(v0_1);
            let v6: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v4).map_err(|x| x.to_string());
            let v9: Dice_ui::US71 = match &v6 {
                Err(v6_1_0) => Dice_ui::closure357((), v6_1_0.clone()),
                Ok(v6_0_0) => Dice_ui::closure356((), v6_0_0.clone()),
            };
            match &v9 {
                Dice_ui::US71::US71_0(v9_0_0) => {
                    fable_library_rust::String_::fromString(v9_0_0.clone())
                }
                Dice_ui::US71::US71_1(v9_1_0) => append(
                    append(string("Error: "), toString(v9_1_0.clone())),
                    string(""),
                ),
            }
        }
        pub fn closure358(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure359(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v5: &str = &*v0_1;
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method293(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure359(v0_1.clone(), ())
            })
        }
        pub fn closure354(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> = leptos::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9 = {
                let clo = Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure355(v6.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11: leptos::Memo<string> = leptos::create_memo(move |_| v9(()));
            let v13: string = v11();
            let v16 = {
                let clo_1 = Func0::new(move || Dice_ui::closure358((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v17: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v16(())");
            let v20: string = append(append(append(string(" "), v17), string("")), string(""));
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method293(v13)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v20), string(">{v22()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Pre> = leptos::view! {
                <pre class=move || {
                    "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                        .to_owned() + &v16(())
                }>{v22()}</pre>
            };
            let v30: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method291() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure354((), ()))
        }
        pub fn closure360(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure361(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method294(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure361(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure352(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1 = Dice_ui::method290();
            let v1 = Dice_ui::method291();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure360((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure332((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v14: string = append(append(append(string(" "), v11), string("")), string(""));
            let v16 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method294(v0_1, v1)));
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v14), string(">{v16()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())
                }>{v16()}</dl>
            };
            let v24: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v21)]);
            let v26: Vec<leptos::View> = v24.to_vec();
            leptos::Fragment::new(v26)
        }
        pub fn method289() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure352((), ()))
        }
        pub fn closure364(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure365(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure368(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method299() -> Func0<string> {
            Func0::new(move || Dice_ui::closure368((), ()))
        }
        pub fn closure367(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method161(Dice_ui::method160(Dice_ui::method178(Dice_ui::method299())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method298() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure367((), ()))
        }
        pub fn closure366(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method298()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method179()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method297() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure366((), ()))
        }
        pub fn closure363(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure364((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure365((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method297()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method181(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method296(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure363(v0_1.clone(), ())
            })
        }
        pub fn closure362(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure227((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure228((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method173(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method296(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method295(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure362(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure369(v0_1: leptos::WriteSignal<bool>, unitVar: ()) {
            let v3: bool = true;
            leptos::SignalUpdate::update(&v0_1, |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure329((), v))(x.clone())
            });
            ()
        }
        pub fn closure370(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure371(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v7: string = append(
                append(
                    append(string(" "), v2),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                ),
                string(""),
            );
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::svg::Path> = leptos::view! {
                <path
                    d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z"
                    stroke-linejoin="round"
                    stroke-linecap="round"
                >
                    {v9()}
                </path>
            };
            let v16: leptos::View = leptos::IntoView::into_view(v14);
            let v23: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v25 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v23), string(">{v25()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::svg::Path> = leptos::view! {
                <path
                    d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    stroke-linejoin="round"
                    stroke-linecap="round"
                >
                    {v25()}
                </path>
            };
            let v32: Array<leptos::View> = new_array(&[v16, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method300() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure371((), ()))
        }
        pub fn method301(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure372(v0_1: leptos::ReadSignal<bool>, unitVar: ()) -> std::string::String {
            let v10: &'static str = Dice_ui::method301(if leptos::SignalGet::get(&v0_1) {
                let v4: string = string("r#\"\"#");
                r#""#
            } else {
                let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                r#"bg-gray-300 hover:bg-gray-200"#
            });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure375(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Settings");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method304() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure375((), ()))
        }
        pub fn closure376(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v2: Func0<leptos::Fragment> = Func0::new(move || v0_1());
            let v5: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(move || v2())]);
            let v7: Vec<leptos::View> = v5.to_vec();
            leptos::Fragment::new(v7)
        }
        pub fn method305(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure376(v0_1.clone(), ())
            })
        }
        pub fn closure378(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            v0_1()
        }
        pub fn method307(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure378(v0_1.clone(), ())
            })
        }
        pub fn closure379(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method308() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure379((), ()))
        }
        pub fn closure377(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"pr-[15px] [font-size:13px]\"");
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method307(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="pr-[15px] [font-size:13px]">{v6()}</span> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"h-px flex-1 bg-gray-300\"");
            let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method308()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="h-px flex-1 bg-gray-300">{v18()}</span> };
            let v25: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method306(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure377(v0_1.clone(), ())
            })
        }
        pub fn closure380(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Table View");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method309() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure380((), ()))
        }
        pub fn closure382(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("table-view");
            String::from(v5)
        }
        pub fn closure385(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure384(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: bool = true;
            leptos::SignalUpdate::update(&v4.l3.clone(), |x| {
                *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure385((), v))(
                    x.clone(),
                )
            });
            ()
        }
        pub fn closure386(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            if let Dice_ui::US1::US1_1 = &(leptos::SignalGet::get(&v3.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method312(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure386(v0_1.clone(), ())
            })
        }
        pub fn method313() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure382((), ()))
        }
        pub fn closure383(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure384(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method312(v0_1.clone());
                let v4 = Dice_ui::method313();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::HtmlElement<leptos::html::Input> = leptos::view! {
                    <input
                        prop:checked=move || v3()
                        on:change=move |event| v1(event)
                        id=move || v4()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                };
                let v22: leptos::View = leptos::IntoView::into_view(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v25: string = append(append(append(string(" "), v23), string("")), string(""));
                let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method252()));
                let v30: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v25), string(">{v27()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v32: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                };
                let v34: leptos::View = leptos::IntoView::into_view(v32);
                let v35: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v37: string = append(append(append(string(" "), v35), string("")), string(""));
                let v39 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method255()));
                let v41: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<span "), v37), string(">{v39()}</")),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v43: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v39()}
                    </span>
                };
                let v46: Array<leptos::View> =
                    new_array(&[v22, v34, leptos::IntoView::into_view(v43)]);
                let v48: Vec<leptos::View> = v46.to_vec();
                leptos::Fragment::new(v48)
            }
        }
        pub fn method311(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure383(v0_1.clone(), ())
            })
        }
        pub fn closure381(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure382((), ()));
            {
                let v8: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method311(v0_1)));
                let v13: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<label "), v8), string(">{v10()}</")),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v15: leptos::HtmlElement<leptos::html::Label> = leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v10()}
                    </label>
                };
                let v18: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v15)]);
                let v20: Vec<leptos::View> = v18.to_vec();
                leptos::Fragment::new(v20)
            }
        }
        pub fn method310(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure381(v0_1.clone(), ())
            })
        }
        pub fn closure387(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure388(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method314(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure388(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure374(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v6: string = string(" class=\"flex items-center pb-[6px]\"");
            let v8 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method306(
                Dice_ui::method305(Dice_ui::method304()),
            )));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v6), string(">{v8()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="flex items-center pb-[6px]">{v8()}</span> };
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v16 = Dice_ui::method309();
            let v17 = Dice_ui::method310(v0_1);
            let v20 = {
                let clo = Func0::new(move || Dice_ui::closure387((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v23 = {
                let clo_1 = Func0::new(move || Dice_ui::closure332((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v26 = {
                let clo_2 = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v27: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v26(()) + \" \" + &v23(()) + \" \" + &v20(())");
            let v29: string = append(append(append(string(" "), v27), string("")), string(""));
            let v31 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method314(v16, v17)));
            let v34: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v29), string(">{v31()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v26(()) + " " + &v23(()) + " " + &v20(())
                }>{v31()}</dl>
            };
            let v39: Array<leptos::View> = new_array(&[v15, leptos::IntoView::into_view(v36)]);
            let v41: Vec<leptos::View> = v39.to_vec();
            leptos::Fragment::new(v41)
        }
        pub fn method303(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure374(v0_1.clone(), ())
            })
        }
        pub fn closure392(v0_1: i64, unitVar: ()) -> leptos::Fragment {
            let v1: string = append(
                append(string("Transaction "), toString(v0_1 + 1_i64)),
                string(""),
            );
            let v6: &str = &*v1;
            let v27: std::string::String = String::from(v6);
            let v45: leptos::leptos_dom::Text = leptos::html::text(v27);
            let v48: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v45)]);
            let v50: Vec<leptos::View> = v48.to_vec();
            leptos::Fragment::new(v50)
        }
        pub fn method317(v0_1: i64) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure392(v0_1, ())
            })
        }
        pub fn closure394(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Account");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method319() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure394((), ()))
        }
        pub fn closure395(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v5: &str = &*v0_1;
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method320(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure395(v0_1.clone(), ())
            })
        }
        pub fn closure396(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure397(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure398(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method321(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure398(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure399(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Block Timestamp");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method322() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure399((), ()))
        }
        pub fn closure400(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v17: i64 =
                Dice_ui::method216(toInt64(fable_library_rust::String_::fromString(v5))) / 1000_i64;
            let v19: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v17);
            let v33: Dice_ui::US69 =
                defaultValue(Dice_ui::US69::US69_1, map(Dice_ui::method217(), v19));
            let v52: Dice_ui::US32 = match &v33 {
                Dice_ui::US69::US69_0(v33_0_0) => {
                    let v39: chrono::NaiveDateTime = match &v33 {
                        Dice_ui::US69::US69_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v41: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v39);
                    let v43: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v44: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v46: std::string::String = v41.format(v44).to_string();
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v46))
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v58: Dice_ui::US70 = match &v52 {
                Dice_ui::US32::US32_0(v52_0_0) => Dice_ui::US70::US70_0(match &v52 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US70::US70_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v63: string = match &v58 {
                Dice_ui::US70::US70_0(v58_0_0) => v58_0_0.clone(),
                Dice_ui::US70::US70_1(v58_1_0) => append(
                    append(string("sm\'.to_string result / Error: "), v58_1_0.clone()),
                    string(""),
                ),
            };
            let v68: &str = &*v63;
            let v89: std::string::String = String::from(v68);
            let v107: leptos::leptos_dom::Text = leptos::html::text(v89);
            let v110: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v107)]);
            let v112: Vec<leptos::View> = v110.to_vec();
            leptos::Fragment::new(v112)
        }
        pub fn method323(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure400(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure401(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure402(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure403(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method324(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure403(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure404(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Predecessor");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method325() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure404((), ()))
        }
        pub fn closure405(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v18: &str = &*v13;
            let v39: std::string::String = String::from(v18);
            let v57: leptos::leptos_dom::Text = leptos::html::text(v39);
            let v60: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v57)]);
            let v62: Vec<leptos::View> = v60.to_vec();
            leptos::Fragment::new(v62)
        }
        pub fn method326(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure405(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure406(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure407(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure408(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method327(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure408(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure409(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Receiver");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method328() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure409((), ()))
        }
        pub fn closure410(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v18: &str = &*v13;
            let v39: std::string::String = String::from(v18);
            let v57: leptos::leptos_dom::Text = leptos::html::text(v39);
            let v60: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v57)]);
            let v62: Vec<leptos::View> = v60.to_vec();
            leptos::Fragment::new(v62)
        }
        pub fn method329(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure410(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure411(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure412(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure413(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method330(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure413(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure414(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Actions");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method331() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure414((), ()))
        }
        pub fn closure417(v0_1: std::string::String, unitVar: ()) -> leptos::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == v2.clone() {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == v2.clone() {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == v2.clone() {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v16: &str = &*v11;
            let v37: std::string::String = String::from(v16);
            let v55: leptos::leptos_dom::Text = leptos::html::text(v37);
            let v58: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v55)]);
            let v60: Vec<leptos::View> = v58.to_vec();
            leptos::Fragment::new(v60)
        }
        pub fn method333(v0_1: std::string::String) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure417(v0_1.clone(), ())
            })
        }
        pub fn closure420(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Method");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method336() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure420((), ()))
        }
        pub fn closure421(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v14: Dice_ui::US15 =
                defaultValue(Dice_ui::US15::US15_1, map(Dice_ui::method40(), v0_1));
            match &v14 {
                Dice_ui::US15::US15_0(v14_0_0) => {
                    let v20: string = fable_library_rust::String_::fromString(match &v14 {
                        Dice_ui::US15::US15_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    let v25: &str = &*v20;
                    let v46: std::string::String = String::from(v25);
                    let v64: leptos::leptos_dom::Text = leptos::html::text(v46);
                    let v67: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v64)]);
                    let v69: Vec<leptos::View> = v67.to_vec();
                    leptos::Fragment::new(v69)
                }
                _ => {
                    let v77: &str = &*string("None");
                    let v98: std::string::String = String::from(v77);
                    let v116: leptos::leptos_dom::Text = leptos::html::text(v98);
                    let v119: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v116)]);
                    let v121: Vec<leptos::View> = v119.to_vec();
                    leptos::Fragment::new(v121)
                }
            }
        }
        pub fn method337(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure421(v0_1.clone(), ())
            })
        }
        pub fn closure422(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure423(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure425(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure424(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure425((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method338(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure424(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure419(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method336();
            let v2 = Dice_ui::method337(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure422((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure423((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v15: string = append(append(append(string(" "), v12), string("")), string(""));
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method338(v1, v2)));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v15), string(">{v17()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())
                }>{v17()}</dl>
            };
            let v25: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method335(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure419(v0_1.clone(), ())
            })
        }
        pub fn closure418(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex flex-1 flex-col\"");
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method335(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v6()}</div> };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method334(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure418(v0_1.clone(), ())
            })
        }
        pub fn closure426(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure427(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure428(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure430(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure429(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure430((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method339(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure429(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure416(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> leptos::View {
            let v2 = Dice_ui::method333(_arg.0.clone());
            let v3 = Dice_ui::method334(_arg.1.clone());
            let v6 = {
                let clo = Func0::new(move || Dice_ui::closure426((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v9 = {
                let clo_1 = Func0::new(move || Dice_ui::closure427((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v12 = {
                let clo_2 = Func0::new(move || Dice_ui::closure428((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v13: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v12(()) + \" \" + &v9(()) + \" \" + &v6(())");
            let v16: string = append(append(append(string(" "), v13), string("")), string(""));
            let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method339(v2, v3)));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v16), string(">{v18()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v12(()) + " " + &v9(()) + " " + &v6(())
                }>{v18()}</dl>
            };
            leptos::IntoView::into_view(v23)
        }
        pub fn closure415(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v16: Vec<leptos::View> = v13
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure416((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v18: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v16);
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method332(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure415(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure431(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure432(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure434(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure433(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure434((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method340(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure433(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure435(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Deposit");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method341() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure435((), ()))
        }
        pub fn closure436(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = toString(v8);
            let v20: &str = &*v13;
            let v41: std::string::String = String::from(v20);
            let v59: leptos::leptos_dom::Text = leptos::html::text(v41);
            let v62: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v59)]);
            let v64: Vec<leptos::View> = v62.to_vec();
            leptos::Fragment::new(v64)
        }
        pub fn method342(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure436(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure437(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure438(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure439(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method343(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure439(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure440(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Outcome Status");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method344() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure440((), ()))
        }
        pub fn closure441(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = ofBoolean(v9);
            let v20: &str = &*v13;
            let v41: std::string::String = String::from(v20);
            let v59: leptos::leptos_dom::Text = leptos::html::text(v41);
            let v62: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v59)]);
            let v64: Vec<leptos::View> = v62.to_vec();
            leptos::Fragment::new(v64)
        }
        pub fn method345(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure441(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure442(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure443(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure444(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method346(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure444(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure445(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Fee");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method347() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure445((), ()))
        }
        pub fn closure446(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = toString(v10);
            let v20: &str = &*v13;
            let v41: std::string::String = String::from(v20);
            let v59: leptos::leptos_dom::Text = leptos::html::text(v41);
            let v62: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v59)]);
            let v64: Vec<leptos::View> = v62.to_vec();
            leptos::Fragment::new(v64)
        }
        pub fn method348(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure446(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure447(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure448(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure449(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method349(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure449(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure450(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Block Height");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method350() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure450((), ()))
        }
        pub fn closure451(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = toString(v6);
            let v20: &str = &*v13;
            let v41: std::string::String = String::from(v20);
            let v59: leptos::leptos_dom::Text = leptos::html::text(v41);
            let v62: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v59)]);
            let v64: Vec<leptos::View> = v62.to_vec();
            leptos::Fragment::new(v64)
        }
        pub fn method351(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure451(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure452(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure453(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure454(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method352(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure454(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure455(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Hash");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method353() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure455((), ()))
        }
        pub fn closure456(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v18: &str = &*v13;
            let v39: std::string::String = String::from(v18);
            let v57: leptos::leptos_dom::Text = leptos::html::text(v39);
            let v60: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v57)]);
            let v62: Vec<leptos::View> = v60.to_vec();
            leptos::Fragment::new(v62)
        }
        pub fn method354(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure456(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure457(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure458(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure459(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method355(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure459(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure460(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Block Hash");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method356() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure460((), ()))
        }
        pub fn closure461(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v18: &str = &*v13;
            let v39: std::string::String = String::from(v18);
            let v57: leptos::leptos_dom::Text = leptos::html::text(v39);
            let v60: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v57)]);
            let v62: Vec<leptos::View> = v60.to_vec();
            leptos::Fragment::new(v62)
        }
        pub fn method357(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure461(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure462(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure463(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure464(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method358(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure464(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure465(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Receipt ID");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method359() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure465((), ()))
        }
        pub fn closure466(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v18: &str = &*v13;
            let v39: std::string::String = String::from(v18);
            let v57: leptos::leptos_dom::Text = leptos::html::text(v39);
            let v60: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v57)]);
            let v62: Vec<leptos::View> = v60.to_vec();
            leptos::Fragment::new(v62)
        }
        pub fn method360(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure466(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure467(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure468(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure469(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method361(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure469(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure470(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Logs");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method362() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure470((), ()))
        }
        pub fn closure472(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure471(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: Vec<string> = v13
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(x.clone())
                })
                .collect::<Vec<_>>();
            let v29: string = replace(
                join(
                    string("\n"),
                    toArray(ofArray(fable_library_rust::NativeArray_::array_from(v16))),
                ),
                string("\\n"),
                string("\n"),
            );
            let v32 = {
                let clo = Func0::new(move || Dice_ui::closure472((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v33: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v32(())");
            let v36: string = append(append(append(string(" "), v33), string("")), string(""));
            let v38 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method293(v29)));
            let v41: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v36), string(">{v38()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::HtmlElement<leptos::html::Pre> = leptos::view! {
                <pre class=move || {
                    "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                        .to_owned() + &v32(())
                }>{v38()}</pre>
            };
            let v46: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v43)]);
            let v48: Vec<leptos::View> = v46.to_vec();
            leptos::Fragment::new(v48)
        }
        pub fn method363(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure471(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure473(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure474(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure475(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure335((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v10 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v0_1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v8), string(">{v10()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Dt> =
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v10()}</dt> };
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v20: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method277(v1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v20), string(">{v22()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Dd> = leptos::view! {
                <dd class=move || {
                    "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned() + &v4(())
                }>{v22()}</dd>
            };
            let v30: Array<leptos::View> = new_array(&[v17, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method364(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure475(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure393(
            v0_1: string,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: std::string::String,
            v7: u32,
            v8: Array<(std::string::String, Option<std::string::String>)>,
            v9: f64,
            v10: bool,
            v11: f64,
            v12: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v13 = Dice_ui::method319();
            let v14 = Dice_ui::method320(v0_1);
            let v17 = {
                let clo = Func0::new(move || Dice_ui::closure396((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v20 = {
                let clo_1 = Func0::new(move || Dice_ui::closure397((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v22() -> string {
                Dice_ui::closure333((), ())
            }
            let v23 = {
                let clo_2 = Func0::from(v22);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v24: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v23(()) + \" \" + &v20(()) + \" \" + &v17(())");
            let v27: string = append(append(append(string(" "), v24), string("")), string(""));
            let v29 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method321(v13, v14)));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v27), string(">{v29()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v23(()) + " " + &v20(()) + " " + &v17(())
                }>{v29()}</dl>
            };
            let v36: leptos::View = leptos::IntoView::into_view(v34);
            let v37 = Dice_ui::method322();
            let v38 = Dice_ui::method323(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v41 = {
                let clo_3 = Func0::new(move || Dice_ui::closure401((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v44 = {
                let clo_4 = Func0::new(move || Dice_ui::closure402((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v46 = {
                let clo_5 = Func0::from(v22);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v47: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v46(()) + \" \" + &v44(()) + \" \" + &v41(())");
            let v49: string = append(append(append(string(" "), v47), string("")), string(""));
            let v51 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method324(v37, v38)));
            let v53: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v49), string(">{v51()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v55: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v46(()) + " " + &v44(()) + " " + &v41(())
                }>{v51()}</dl>
            };
            let v57: leptos::View = leptos::IntoView::into_view(v55);
            let v58 = Dice_ui::method325();
            let v59 = Dice_ui::method326(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v62 = {
                let clo_6 = Func0::new(move || Dice_ui::closure406((), ()));
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v65 = {
                let clo_7 = Func0::new(move || Dice_ui::closure407((), ()));
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v67 = {
                let clo_8 = Func0::from(v22);
                Func1::new({
                    let clo_8 = clo_8.clone();
                    move |arg_8: ()| clo_8()
                })
            };
            let v68: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v67(()) + \" \" + &v65(()) + \" \" + &v62(())");
            let v70: string = append(append(append(string(" "), v68), string("")), string(""));
            let v72 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method327(v58, v59)));
            let v74: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v70), string(">{v72()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v76: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v67(()) + " " + &v65(()) + " " + &v62(())
                }>{v72()}</dl>
            };
            let v78: leptos::View = leptos::IntoView::into_view(v76);
            let v79 = Dice_ui::method328();
            let v80 = Dice_ui::method329(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v83 = {
                let clo_9 = Func0::new(move || Dice_ui::closure411((), ()));
                Func1::new({
                    let clo_9 = clo_9.clone();
                    move |arg_9: ()| clo_9()
                })
            };
            let v86 = {
                let clo_10 = Func0::new(move || Dice_ui::closure412((), ()));
                Func1::new({
                    let clo_10 = clo_10.clone();
                    move |arg_10: ()| clo_10()
                })
            };
            let v88 = {
                let clo_11 = Func0::from(v22);
                Func1::new({
                    let clo_11 = clo_11.clone();
                    move |arg_11: ()| clo_11()
                })
            };
            let v89: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v88(()) + \" \" + &v86(()) + \" \" + &v83(())");
            let v91: string = append(append(append(string(" "), v89), string("")), string(""));
            let v93 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method330(v79, v80)));
            let v95: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v91), string(">{v93()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v97: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v88(()) + " " + &v86(()) + " " + &v83(())
                }>{v93()}</dl>
            };
            let v99: leptos::View = leptos::IntoView::into_view(v97);
            let v100 = Dice_ui::method331();
            let v101 = Dice_ui::method332(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v104 = {
                let clo_12 = Func0::new(move || Dice_ui::closure431((), ()));
                Func1::new({
                    let clo_12 = clo_12.clone();
                    move |arg_12: ()| clo_12()
                })
            };
            let v107 = {
                let clo_13 = Func0::new(move || Dice_ui::closure432((), ()));
                Func1::new({
                    let clo_13 = clo_13.clone();
                    move |arg_13: ()| clo_13()
                })
            };
            let v109 = {
                let clo_14 = Func0::from(v22);
                Func1::new({
                    let clo_14 = clo_14.clone();
                    move |arg_14: ()| clo_14()
                })
            };
            let v110: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v109(()) + \" \" + &v107(()) + \" \" + &v104(())");
            let v112: string = append(append(append(string(" "), v110), string("")), string(""));
            let v114 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method340(v100, v101)));
            let v116: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v112), string(">{v114()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v118: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v109(()) + " " + &v107(()) + " " + &v104(())
                }>{v114()}</dl>
            };
            let v120: leptos::View = leptos::IntoView::into_view(v118);
            let v121 = Dice_ui::method341();
            let v122 = Dice_ui::method342(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v125 = {
                let clo_15 = Func0::new(move || Dice_ui::closure437((), ()));
                Func1::new({
                    let clo_15 = clo_15.clone();
                    move |arg_15: ()| clo_15()
                })
            };
            let v128 = {
                let clo_16 = Func0::new(move || Dice_ui::closure438((), ()));
                Func1::new({
                    let clo_16 = clo_16.clone();
                    move |arg_16: ()| clo_16()
                })
            };
            let v130 = {
                let clo_17 = Func0::from(v22);
                Func1::new({
                    let clo_17 = clo_17.clone();
                    move |arg_17: ()| clo_17()
                })
            };
            let v131: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v130(()) + \" \" + &v128(()) + \" \" + &v125(())");
            let v133: string = append(append(append(string(" "), v131), string("")), string(""));
            let v135 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method343(v121, v122)));
            let v137: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v133), string(">{v135()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v139: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v130(()) + " " + &v128(()) + " " + &v125(())
                }>{v135()}</dl>
            };
            let v141: leptos::View = leptos::IntoView::into_view(v139);
            let v142 = Dice_ui::method344();
            let v143 = Dice_ui::method345(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v146 = {
                let clo_18 = Func0::new(move || Dice_ui::closure442((), ()));
                Func1::new({
                    let clo_18 = clo_18.clone();
                    move |arg_18: ()| clo_18()
                })
            };
            let v149 = {
                let clo_19 = Func0::new(move || Dice_ui::closure443((), ()));
                Func1::new({
                    let clo_19 = clo_19.clone();
                    move |arg_19: ()| clo_19()
                })
            };
            let v151 = {
                let clo_20 = Func0::from(v22);
                Func1::new({
                    let clo_20 = clo_20.clone();
                    move |arg_20: ()| clo_20()
                })
            };
            let v152: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v151(()) + \" \" + &v149(()) + \" \" + &v146(())");
            let v154: string = append(append(append(string(" "), v152), string("")), string(""));
            let v156 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method346(v142, v143)));
            let v158: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v154), string(">{v156()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v160: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v151(()) + " " + &v149(()) + " " + &v146(())
                }>{v156()}</dl>
            };
            let v162: leptos::View = leptos::IntoView::into_view(v160);
            let v163 = Dice_ui::method347();
            let v164 = Dice_ui::method348(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v167 = {
                let clo_21 = Func0::new(move || Dice_ui::closure447((), ()));
                Func1::new({
                    let clo_21 = clo_21.clone();
                    move |arg_21: ()| clo_21()
                })
            };
            let v170 = {
                let clo_22 = Func0::new(move || Dice_ui::closure448((), ()));
                Func1::new({
                    let clo_22 = clo_22.clone();
                    move |arg_22: ()| clo_22()
                })
            };
            let v172 = {
                let clo_23 = Func0::from(v22);
                Func1::new({
                    let clo_23 = clo_23.clone();
                    move |arg_23: ()| clo_23()
                })
            };
            let v173: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v172(()) + \" \" + &v170(()) + \" \" + &v167(())");
            let v175: string = append(append(append(string(" "), v173), string("")), string(""));
            let v177 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method349(v163, v164)));
            let v179: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v175), string(">{v177()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v181: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v172(()) + " " + &v170(()) + " " + &v167(())
                }>{v177()}</dl>
            };
            let v183: leptos::View = leptos::IntoView::into_view(v181);
            let v184 = Dice_ui::method350();
            let v185 = Dice_ui::method351(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v188 = {
                let clo_24 = Func0::new(move || Dice_ui::closure452((), ()));
                Func1::new({
                    let clo_24 = clo_24.clone();
                    move |arg_24: ()| clo_24()
                })
            };
            let v191 = {
                let clo_25 = Func0::new(move || Dice_ui::closure453((), ()));
                Func1::new({
                    let clo_25 = clo_25.clone();
                    move |arg_25: ()| clo_25()
                })
            };
            let v193 = {
                let clo_26 = Func0::from(v22);
                Func1::new({
                    let clo_26 = clo_26.clone();
                    move |arg_26: ()| clo_26()
                })
            };
            let v194: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v193(()) + \" \" + &v191(()) + \" \" + &v188(())");
            let v196: string = append(append(append(string(" "), v194), string("")), string(""));
            let v198 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method352(v184, v185)));
            let v200: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v196), string(">{v198()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v202: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v193(()) + " " + &v191(()) + " " + &v188(())
                }>{v198()}</dl>
            };
            let v204: leptos::View = leptos::IntoView::into_view(v202);
            let v205 = Dice_ui::method353();
            let v206 = Dice_ui::method354(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v209 = {
                let clo_27 = Func0::new(move || Dice_ui::closure457((), ()));
                Func1::new({
                    let clo_27 = clo_27.clone();
                    move |arg_27: ()| clo_27()
                })
            };
            let v212 = {
                let clo_28 = Func0::new(move || Dice_ui::closure458((), ()));
                Func1::new({
                    let clo_28 = clo_28.clone();
                    move |arg_28: ()| clo_28()
                })
            };
            let v214 = {
                let clo_29 = Func0::from(v22);
                Func1::new({
                    let clo_29 = clo_29.clone();
                    move |arg_29: ()| clo_29()
                })
            };
            let v215: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v214(()) + \" \" + &v212(()) + \" \" + &v209(())");
            let v217: string = append(append(append(string(" "), v215), string("")), string(""));
            let v219 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method355(v205, v206)));
            let v221: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v217), string(">{v219()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v223: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v214(()) + " " + &v212(()) + " " + &v209(())
                }>{v219()}</dl>
            };
            let v225: leptos::View = leptos::IntoView::into_view(v223);
            let v226 = Dice_ui::method356();
            let v227 = Dice_ui::method357(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v230 = {
                let clo_30 = Func0::new(move || Dice_ui::closure462((), ()));
                Func1::new({
                    let clo_30 = clo_30.clone();
                    move |arg_30: ()| clo_30()
                })
            };
            let v233 = {
                let clo_31 = Func0::new(move || Dice_ui::closure463((), ()));
                Func1::new({
                    let clo_31 = clo_31.clone();
                    move |arg_31: ()| clo_31()
                })
            };
            let v235 = {
                let clo_32 = Func0::from(v22);
                Func1::new({
                    let clo_32 = clo_32.clone();
                    move |arg_32: ()| clo_32()
                })
            };
            let v236: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v235(()) + \" \" + &v233(()) + \" \" + &v230(())");
            let v238: string = append(append(append(string(" "), v236), string("")), string(""));
            let v240 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method358(v226, v227)));
            let v242: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v238), string(">{v240()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v244: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v235(()) + " " + &v233(()) + " " + &v230(())
                }>{v240()}</dl>
            };
            let v246: leptos::View = leptos::IntoView::into_view(v244);
            let v247 = Dice_ui::method359();
            let v248 = Dice_ui::method360(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v251 = {
                let clo_33 = Func0::new(move || Dice_ui::closure467((), ()));
                Func1::new({
                    let clo_33 = clo_33.clone();
                    move |arg_33: ()| clo_33()
                })
            };
            let v254 = {
                let clo_34 = Func0::new(move || Dice_ui::closure468((), ()));
                Func1::new({
                    let clo_34 = clo_34.clone();
                    move |arg_34: ()| clo_34()
                })
            };
            let v256 = {
                let clo_35 = Func0::from(v22);
                Func1::new({
                    let clo_35 = clo_35.clone();
                    move |arg_35: ()| clo_35()
                })
            };
            let v257: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v256(()) + \" \" + &v254(()) + \" \" + &v251(())");
            let v259: string = append(append(append(string(" "), v257), string("")), string(""));
            let v261 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method361(v247, v248)));
            let v263: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v259), string(">{v261()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v265: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v256(()) + " " + &v254(()) + " " + &v251(())
                }>{v261()}</dl>
            };
            let v296: Array<leptos::View> = new_array(&[
                v36,
                v57,
                v78,
                v99,
                v120,
                v141,
                v162,
                v183,
                v204,
                v225,
                v246,
                leptos::IntoView::into_view(v265),
                if count(v12.clone()) as u64 == 0_u64 {
                    let v271: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
                    leptos::CollectView::collect_view(v271.to_vec())
                } else {
                    let v274 = Dice_ui::method362();
                    let v275 =
                        Dice_ui::method363(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
                    let v278 = {
                        let clo_36 = Func0::new(move || Dice_ui::closure473((), ()));
                        Func1::new({
                            let clo_36 = clo_36.clone();
                            move |arg_36: ()| clo_36()
                        })
                    };
                    let v281 = {
                        let clo_37 = Func0::new(move || Dice_ui::closure474((), ()));
                        Func1::new({
                            let clo_37 = clo_37.clone();
                            move |arg_37: ()| clo_37()
                        })
                    };
                    let v283 = {
                        let clo_38 = Func0::from(v22);
                        Func1::new({
                            let clo_38 = clo_38.clone();
                            move |arg_38: ()| clo_38()
                        })
                    };
                    let v284: string =
                                    string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v283(()) + \" \" + &v281(()) + \" \" + &v278(())");
                    let v286: string =
                        append(append(append(string(" "), v284), string("")), string(""));
                    let v288 =
                        Dice_ui::method161(Dice_ui::method160(Dice_ui::method364(v274, v275)));
                    let v290: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<dl "), v286), string(">{v288()}</")),
                                    string("dl"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v292: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                        <dl class=move || {
                            "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                                .to_owned() + &v283(()) + " " + &v281(()) + " " + &v278(())
                        }>{v288()}</dl>
                    };
                    leptos::IntoView::into_view(v292)
                },
            ]);
            let v298: Vec<leptos::View> = v296.to_vec();
            leptos::Fragment::new(v298)
        }
        pub fn method318(
            v0_1: string,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: std::string::String,
            v7: u32,
            v8: Array<(std::string::String, Option<std::string::String>)>,
            v9: f64,
            v10: bool,
            v11: f64,
            v12: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v12 = v12.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure393(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6.clone(),
                        v7,
                        v8.clone(),
                        v9,
                        v10,
                        v11,
                        v12.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure391(
            v0_1: string,
            v1: i64,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: std::string::String,
            v7: std::string::String,
            v8: u32,
            v9: Array<(std::string::String, Option<std::string::String>)>,
            v10: f64,
            v11: bool,
            v12: f64,
            v13: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v19: string = string(" class=\"flex items-center pb-[6px]\"");
            let v21 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method306(
                Dice_ui::method305(Dice_ui::method317(v1)),
            )));
            let v24: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v19), string(">{v21()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::HtmlElement<leptos::html::Span> =
                leptos::view! { <span class="flex items-center pb-[6px]">{v21()}</span> };
            let v28: leptos::View = leptos::IntoView::into_view(v26);
            let v31: string = string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
            let v33 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method318(
                v0_1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13,
            )));
            let v36: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v31), string(">{v33()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v38: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">{v33()}</div> };
            let v41: Array<leptos::View> = new_array(&[v28, leptos::IntoView::into_view(v38)]);
            let v43: Vec<leptos::View> = v41.to_vec();
            leptos::Fragment::new(v43)
        }
        pub fn method316(
            v0_1: string,
            v1: i64,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: std::string::String,
            v7: std::string::String,
            v8: u32,
            v9: Array<(std::string::String, Option<std::string::String>)>,
            v10: f64,
            v11: bool,
            v12: f64,
            v13: Array<std::string::String>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v12 = v12.clone();
                let v13 = v13.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure391(
                        v0_1.clone(),
                        v1,
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6.clone(),
                        v7.clone(),
                        v8,
                        v9.clone(),
                        v10,
                        v11,
                        v12,
                        v13.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure390(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::View {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v16: i64 = _arg.1.clone() as i64;
            let v19: bool = true;
            leptos::logging::log!("{}", string("transaction.render (1)"));
            let v21: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::use_context::<std::sync::Arc<Heap2>>();
            let v23: LrcPtr<Dice_ui::Heap2> = v21.unwrap();
            let v27: string = string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
            let v29 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method316(
                _arg.0.clone(),
                v16,
                v2.l0.clone(),
                v2.l1.clone(),
                v2.l2.clone(),
                v2.l3.clone(),
                v2.l4.clone(),
                v2.l5.clone(),
                v2.l6,
                v2.l7.clone(),
                v2.l8,
                v2.l9,
                v2.l10,
                v2.l11.clone(),
            )));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v27), string(">{v29()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col overflow-x-auto">{v29()}</div> };
            leptos::IntoView::into_view(v34)
        }
        pub fn closure389(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v0_1.to_vec();
            let v5: Vec<leptos::View> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                        Dice_ui::closure390((), arg10_0040)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v7: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v5);
            let v9: Vec<leptos::View> = v7.to_vec();
            leptos::Fragment::new(v9)
        }
        pub fn method315(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure389(v0_1.clone(), ())
            })
        }
        pub fn closure478(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v5: &str = &*v0_1;
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method366(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure478(v0_1.clone(), ())
            })
        }
        pub fn closure479(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v7: i64 = Dice_ui::method216(toInt64(fable_library_rust::String_::fromString(
                v0_1.l5.clone(),
            ))) / 1000_i64;
            let v9: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v7);
            let v23: Dice_ui::US69 =
                defaultValue(Dice_ui::US69::US69_1, map(Dice_ui::method217(), v9));
            let v42: Dice_ui::US32 = match &v23 {
                Dice_ui::US69::US69_0(v23_0_0) => {
                    let v29: chrono::NaiveDateTime = match &v23 {
                        Dice_ui::US69::US69_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v31: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v29);
                    let v33: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v34: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v36: std::string::String = v31.format(v34).to_string();
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v36))
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v48: Dice_ui::US70 = match &v42 {
                Dice_ui::US32::US32_0(v42_0_0) => Dice_ui::US70::US70_0(match &v42 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US70::US70_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v53: string = match &v48 {
                Dice_ui::US70::US70_0(v48_0_0) => v48_0_0.clone(),
                Dice_ui::US70::US70_1(v48_1_0) => append(
                    append(string("sm\'.to_string result / Error: "), v48_1_0.clone()),
                    string(""),
                ),
            };
            let v58: &str = &*v53;
            let v79: std::string::String = String::from(v58);
            let v97: leptos::leptos_dom::Text = leptos::html::text(v79);
            let v100: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v97)]);
            let v102: Vec<leptos::View> = v100.to_vec();
            leptos::Fragment::new(v102)
        }
        pub fn method367(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure479(v0_1.clone(), ())
            })
        }
        pub fn closure480(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l1.clone());
            let v8: &str = &*v3;
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v50: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v47)]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method368(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure480(v0_1.clone(), ())
            })
        }
        pub fn closure481(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l2.clone());
            let v8: &str = &*v3;
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v50: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v47)]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method369(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure481(v0_1.clone(), ())
            })
        }
        pub fn closure483(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> leptos::View {
            let v2 = Dice_ui::method333(_arg.0.clone());
            let v3 = Dice_ui::method334(_arg.1.clone());
            let v6 = {
                let clo = Func0::new(move || Dice_ui::closure426((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v9 = {
                let clo_1 = Func0::new(move || Dice_ui::closure427((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v12 = {
                let clo_2 = Func0::new(move || Dice_ui::closure428((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v13: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v12(()) + \" \" + &v9(()) + \" \" + &v6(())");
            let v16: string = append(append(append(string(" "), v13), string("")), string(""));
            let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method339(v2, v3)));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v16), string(">{v18()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                        .to_owned() + &v12(()) + " " + &v9(()) + " " + &v6(())
                }>{v18()}</dl>
            };
            leptos::IntoView::into_view(v23)
        }
        pub fn closure482(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: Vec<(std::string::String, Option<std::string::String>)> =
                v0_1.l7.clone().to_vec();
            let v6: Vec<leptos::View> = v3
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure483((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v8: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v6);
            let v10: Vec<leptos::View> = v8.to_vec();
            leptos::Fragment::new(v10)
        }
        pub fn method370(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure482(v0_1.clone(), ())
            })
        }
        pub fn closure484(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = toString(v0_1.l8);
            let v10: &str = &*v3;
            let v31: std::string::String = String::from(v10);
            let v49: leptos::leptos_dom::Text = leptos::html::text(v31);
            let v52: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v49)]);
            let v54: Vec<leptos::View> = v52.to_vec();
            leptos::Fragment::new(v54)
        }
        pub fn method371(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure484(v0_1.clone(), ())
            })
        }
        pub fn closure485(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = toString(v0_1.l10);
            let v10: &str = &*v3;
            let v31: std::string::String = String::from(v10);
            let v49: leptos::leptos_dom::Text = leptos::html::text(v31);
            let v52: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v49)]);
            let v54: Vec<leptos::View> = v52.to_vec();
            leptos::Fragment::new(v54)
        }
        pub fn method372(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure485(v0_1.clone(), ())
            })
        }
        pub fn closure486(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = toString(v0_1.l6);
            let v10: &str = &*v3;
            let v31: std::string::String = String::from(v10);
            let v49: leptos::leptos_dom::Text = leptos::html::text(v31);
            let v52: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v49)]);
            let v54: Vec<leptos::View> = v52.to_vec();
            leptos::Fragment::new(v54)
        }
        pub fn method373(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure486(v0_1.clone(), ())
            })
        }
        pub fn closure488(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn closure487(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v1: Array<std::string::String> = v0_1.l11.clone();
            if count(v1.clone()) as u64 == 0_u64 {
                let v9: &str = &*string("");
                let v30: std::string::String = String::from(v9);
                let v48: leptos::leptos_dom::Text = leptos::html::text(v30);
                let v51: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v48)]);
                let v53: Vec<leptos::View> = v51.to_vec();
                leptos::Fragment::new(v53)
            } else {
                let v57: Vec<std::string::String> = v1.to_vec();
                let v60: Vec<string> = v57
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(
                            x.clone(),
                        )
                    })
                    .collect::<Vec<_>>();
                let v73: string = replace(
                    join(
                        string("\n"),
                        toArray(ofArray(fable_library_rust::NativeArray_::array_from(v60))),
                    ),
                    string("\\n"),
                    string("\n"),
                );
                let v76 = {
                    let clo = Func0::new(move || Dice_ui::closure488((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v77: string =
                    string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v76(())");
                let v80: string = append(append(append(string(" "), v77), string("")), string(""));
                let v82 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method293(v73)));
                let v85: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<pre "), v80), string(">{v82()}</")),
                                string("pre"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v87: leptos::HtmlElement<leptos::html::Pre> = leptos::view! {
                    <pre class=move || {
                        "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                            .to_owned() + &v76(())
                    }>{v82()}</pre>
                };
                let v90: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v87)]);
                let v92: Vec<leptos::View> = v90.to_vec();
                leptos::Fragment::new(v92)
            }
        }
        pub fn method374(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure487(v0_1.clone(), ())
            })
        }
        pub fn closure489(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = ofBoolean(v0_1.l9);
            let v10: &str = &*v3;
            let v31: std::string::String = String::from(v10);
            let v49: leptos::leptos_dom::Text = leptos::html::text(v31);
            let v52: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v49)]);
            let v54: Vec<leptos::View> = v52.to_vec();
            leptos::Fragment::new(v54)
        }
        pub fn method375(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure489(v0_1.clone(), ())
            })
        }
        pub fn closure490(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l3.clone());
            let v8: &str = &*v3;
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v50: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v47)]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method376(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure490(v0_1.clone(), ())
            })
        }
        pub fn closure491(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l4.clone());
            let v8: &str = &*v3;
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v50: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v47)]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method377(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure491(v0_1.clone(), ())
            })
        }
        pub fn closure492(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l0.clone());
            let v8: &str = &*v3;
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v50: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v47)]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method378(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure492(v0_1.clone(), ())
            })
        }
        pub fn closure477(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: string,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v7 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method366(v1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v5), string(">{v7()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">{v7()}</td>
            };
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v19 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method367(v0_1.clone())));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v17), string(">{v19()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v19()}
                </td>
            };
            let v25: leptos::View = leptos::IntoView::into_view(v23);
            let v28: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v30 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method368(v0_1.clone())));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v28), string(">{v30()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v30()}
                </td>
            };
            let v36: leptos::View = leptos::IntoView::into_view(v34);
            let v39: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v41 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method369(v0_1.clone())));
            let v43: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v39), string(">{v41()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v41()}
                </td>
            };
            let v47: leptos::View = leptos::IntoView::into_view(v45);
            let v50: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v52 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method370(v0_1.clone())));
            let v54: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v50), string(">{v52()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v56: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v52()}
                </td>
            };
            let v58: leptos::View = leptos::IntoView::into_view(v56);
            let v61: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v63 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method371(v0_1.clone())));
            let v65: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v61), string(">{v63()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v67: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v63()}
                </td>
            };
            let v69: leptos::View = leptos::IntoView::into_view(v67);
            let v72: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v74 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method372(v0_1.clone())));
            let v76: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v72), string(">{v74()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v78: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v74()}
                </td>
            };
            let v80: leptos::View = leptos::IntoView::into_view(v78);
            let v83: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v85 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method373(v0_1.clone())));
            let v87: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v83), string(">{v85()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v89: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v85()}
                </td>
            };
            let v91: leptos::View = leptos::IntoView::into_view(v89);
            let v94: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
            let v96 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method374(v0_1.clone())));
            let v98: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v94), string(">{v96()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v100: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">
                    {v96()}
                </td>
            };
            let v102: leptos::View = leptos::IntoView::into_view(v100);
            let v105: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v107 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method375(v0_1.clone())));
            let v109: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v105), string(">{v107()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v111: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v107()}
                </td>
            };
            let v113: leptos::View = leptos::IntoView::into_view(v111);
            let v116: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v118 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method376(v0_1.clone())));
            let v120: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v116), string(">{v118()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v122: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v118()}
                </td>
            };
            let v124: leptos::View = leptos::IntoView::into_view(v122);
            let v127: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v129 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method377(v0_1.clone())));
            let v131: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v127), string(">{v129()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v133: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v129()}
                </td>
            };
            let v135: leptos::View = leptos::IntoView::into_view(v133);
            let v138: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v140 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method378(v0_1)));
            let v142: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v138), string(">{v140()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v144: leptos::HtmlElement<leptos::html::Td> = leptos::view! {
                <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                    {v140()}
                </td>
            };
            let v147: Array<leptos::View> = new_array(&[
                v14,
                v25,
                v36,
                v47,
                v58,
                v69,
                v80,
                v91,
                v102,
                v113,
                v124,
                v135,
                leptos::IntoView::into_view(v144),
            ]);
            let v149: Vec<leptos::View> = v147.to_vec();
            leptos::Fragment::new(v149)
        }
        pub fn method365(v0_1: LrcPtr<Dice_ui::Heap5>, v1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure477(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure476(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::HtmlElement<leptos::html::Tr> {
            let v5: bool = true;
            leptos::logging::log!("{}", string("transaction.tr_render (1)"));
            let v9: string = string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
            let v11 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method365(
                _arg.2.clone(),
                _arg.0.clone(),
            )));
            let v14: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<tr "), v9), string(">{v11()}</")),
                            string("tr"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            leptos::view! { <tr class="odd:bg-gray-50 dark:odd:bg-gray-800/50">{v11()}</tr> }
        }
        pub fn closure493(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Tr>,
        ) -> leptos::View {
            leptos::IntoView::into_view(v0_1)
        }
        pub fn closure495(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Account");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method380() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure495((), ()))
        }
        pub fn closure496(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Block Timestamp");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method381() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure496((), ()))
        }
        pub fn closure497(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Predecessor");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method382() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure497((), ()))
        }
        pub fn closure498(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Receiver");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method383() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure498((), ()))
        }
        pub fn closure499(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Action");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method384() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure499((), ()))
        }
        pub fn closure500(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Deposit");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method385() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure500((), ()))
        }
        pub fn closure501(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Fee");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method386() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure501((), ()))
        }
        pub fn closure502(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Block Height");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method387() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure502((), ()))
        }
        pub fn method390(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method390: loop {
                break '_method390 (if v1.get().clone() < count(v0_1.get().clone()) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if length(fable_library_rust::String_::fromString(v4)) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = v1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method390;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method389(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method389: loop {
                break '_method389 (if v1.get().clone() < count(v0_1.get().clone()) {
                    if Dice_ui::method390(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = v1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method389;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure503(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: string = if false == Dice_ui::method389(v0_1, 0_i32) {
                string("")
            } else {
                string("Logs")
            };
            let v11: &str = &*v6;
            let v32: std::string::String = String::from(v11);
            let v50: leptos::leptos_dom::Text = leptos::html::text(v32);
            let v53: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v50)]);
            let v55: Vec<leptos::View> = v53.to_vec();
            leptos::Fragment::new(v55)
        }
        pub fn method388(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure503(v0_1.clone(), ())
            })
        }
        pub fn closure504(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Outcome Status");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method391() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure504((), ()))
        }
        pub fn closure505(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Hash");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method392() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure505((), ()))
        }
        pub fn closure506(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Block Hash");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method393() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure506((), ()))
        }
        pub fn closure507(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Receipt ID");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method394() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure507((), ()))
        }
        pub fn closure494(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method380()));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v4), string(">{v6()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v6()}
                </th>
            };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method381()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v16), string(">{v18()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v18()}
                </th>
            };
            let v24: leptos::View = leptos::IntoView::into_view(v22);
            let v27: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v29 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method382()));
            let v31: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v27), string(">{v29()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v29()}
                </th>
            };
            let v35: leptos::View = leptos::IntoView::into_view(v33);
            let v38: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v40 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method383()));
            let v42: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v38), string(">{v40()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v44: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v40()}
                </th>
            };
            let v46: leptos::View = leptos::IntoView::into_view(v44);
            let v49: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v51 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method384()));
            let v53: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v49), string(">{v51()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v55: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v51()}
                </th>
            };
            let v57: leptos::View = leptos::IntoView::into_view(v55);
            let v60: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v62 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method385()));
            let v64: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v60), string(">{v62()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v66: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v62()}
                </th>
            };
            let v68: leptos::View = leptos::IntoView::into_view(v66);
            let v71: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v73 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method386()));
            let v75: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v71), string(">{v73()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v77: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v73()}
                </th>
            };
            let v79: leptos::View = leptos::IntoView::into_view(v77);
            let v82: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v84 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method387()));
            let v86: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v82), string(">{v84()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v88: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v84()}
                </th>
            };
            let v90: leptos::View = leptos::IntoView::into_view(v88);
            let v93: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v95 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method388(v0_1)));
            let v97: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v93), string(">{v95()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v99: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v95()}
                </th>
            };
            let v101: leptos::View = leptos::IntoView::into_view(v99);
            let v104: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v106 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method391()));
            let v108: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v104), string(">{v106()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v110: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v106()}
                </th>
            };
            let v112: leptos::View = leptos::IntoView::into_view(v110);
            let v115: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v117 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method392()));
            let v119: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v115), string(">{v117()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v121: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v117()}
                </th>
            };
            let v123: leptos::View = leptos::IntoView::into_view(v121);
            let v126: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v128 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method393()));
            let v130: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v126), string(">{v128()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v132: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v128()}
                </th>
            };
            let v134: leptos::View = leptos::IntoView::into_view(v132);
            let v137: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v139 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method394()));
            let v141: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v137), string(">{v139()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v143: leptos::HtmlElement<leptos::html::Th> = leptos::view! {
                <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                    {v139()}
                </th>
            };
            let v146: Array<leptos::View> = new_array(&[
                v13,
                v24,
                v35,
                v46,
                v57,
                v68,
                v79,
                v90,
                v101,
                v112,
                v123,
                v134,
                leptos::IntoView::into_view(v143),
            ]);
            let v148: Vec<leptos::View> = v146.to_vec();
            leptos::Fragment::new(v148)
        }
        pub fn method379(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure494(v0_1.clone(), ())
            })
        }
        pub fn closure373(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>>,
            v3: leptos::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v23: leptos::View = if leptos::SignalGet::get(&v3) {
                let v9: string = string(" class=\"px-[12px] py-[10px]\"");
                let v11 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method303(v0_1.clone())));
                let v14: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v9), string(">{v11()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v16: leptos::HtmlElement<leptos::html::Div> =
                    leptos::view! { <div class="px-[12px] py-[10px]">{v11()}</div> };
                leptos::IntoView::into_view(v16)
            } else {
                let v20: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
                leptos::CollectView::collect_view(v20.to_vec())
            };
            let v25: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v2();
            let v173: Array<leptos::View> = new_array(&[
                v23,
                if count(fable_library_rust::NativeArray_::array_from(v25)) as u64 == 0_u64 {
                    let v33: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v35 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method201()));
                    let v38: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v33), string(">{v35()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v40: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v35()}</div> };
                    leptos::IntoView::into_view(v40)
                } else {
                    let v44: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v1();
                    let v47: Dice_ui::US54 = match &v44 {
                        Err(v44_1_0) => Dice_ui::closure121((), v44_1_0.clone()),
                        Ok(v44_0_0) => Dice_ui::closure120((), v44_0_0.clone()),
                    };
                    let v70: Dice_ui::US47 = match &v47 {
                        Dice_ui::US54::US54_0(v47_0_0) => Dice_ui::US47::US47_0(defaultValue(
                            Dice_ui::US48::US48_1,
                            map(Dice_ui::method123(), v47_0_0.clone()),
                        )),
                        Dice_ui::US54::US54_1(v47_1_0) => Dice_ui::US47::US47_1(v47_1_0.clone()),
                    };
                    match &v70 {
                        Dice_ui::US47::US47_0(v70_0_0) => {
                            let v71: Dice_ui::US48 = v70_0_0.clone();
                            if let Dice_ui::US48::US48_0(v71_0_0) = &v71 {
                                let v72: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> = match &v71
                                {
                                    Dice_ui::US48::US48_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                let v75: LrcPtr<Dice_ui::Heap1> =
                                    leptos::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
                                if if let Dice_ui::US1::US1_0 =
                                    &(leptos::SignalGet::get(&v75.l3.clone())).l4
                                {
                                    true
                                } else {
                                    false
                                } {
                                    let v81: string =
                                                    string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                    let v84: string = append(
                                        append(append(string(" "), v81), string("")),
                                        string(""),
                                    );
                                    let v86 = Dice_ui::method161(Dice_ui::method160(
                                        Dice_ui::method315(v72.clone()),
                                    ));
                                    let v89: string = append(
                                        append(
                                            string("leptos::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<div "), v84),
                                                        string(">{v86()}</"),
                                                    ),
                                                    string("div"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v91: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                                        <div class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">
                                            {v86()}
                                        </div>
                                    };
                                    leptos::IntoView::into_view(v91)
                                } else {
                                    let v95: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        v72.clone().to_vec();
                                    let v98: Vec<leptos::HtmlElement<leptos::html::Tr>> = v95
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new(
                                                move |arg10_0040: (
                                                    string,
                                                    usize,
                                                    LrcPtr<Dice_ui::Heap5>,
                                                )| {
                                                    Dice_ui::closure476((), arg10_0040)
                                                },
                                            )(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                    let v101: Vec<leptos::View> = v98
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new(
                                                move |v_2: leptos::HtmlElement<
                                                    leptos::html::Tr,
                                                >| {
                                                    Dice_ui::closure493((), v_2)
                                                },
                                            )(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                    let v103: Array<leptos::View> =
                                        fable_library_rust::NativeArray_::array_from(v101);
                                    let v105: Vec<leptos::View> = v103.to_vec();
                                    let v107: leptos::Fragment = leptos::Fragment::new(v105);
                                    let v110: bool = true;
                                    leptos::logging::log!(
                                        "{}",
                                        string("transaction.tr_head_render (1)")
                                    );
                                    let v113 = Dice_ui::method161(Dice_ui::method160(
                                        Dice_ui::method379(v72),
                                    ));
                                    let v117: string =
                                        string("leptos::view! { <tr >{v113()}</tr> }");
                                    let v119: leptos::HtmlElement<leptos::html::Tr> =
                                        leptos::view! { <tr>{v113()}</tr> };
                                    let v122: Array<leptos::View> =
                                        new_array(&[leptos::IntoView::into_view(v119)]);
                                    let v124: Vec<leptos::View> = v122.to_vec();
                                    let v129: string =
                                                    string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                    let v131 = Dice_ui::method161(Dice_ui::method160(
                                        Dice_ui::method224(leptos::Fragment::new(v124), v107),
                                    ));
                                    let v134: string = append(
                                        append(
                                            string("leptos::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<table "), v129),
                                                        string(">{v131()}</"),
                                                    ),
                                                    string("table"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v136: leptos::HtmlElement<leptos::html::Table> = leptos::view! {
                                        <table class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">
                                            {v131()}
                                        </table>
                                    };
                                    leptos::IntoView::into_view(v136)
                                }
                            } else {
                                let v143: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v145 =
                                    Dice_ui::method161(Dice_ui::method160(Dice_ui::method227()));
                                let v148: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v143),
                                                    string(">{v145()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v150: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="grid place-content-center py-[10vh]">{v145()}</div> };
                                leptos::IntoView::into_view(v150)
                            }
                        }
                        Dice_ui::US47::US47_1(v70_1_0) => {
                            let v160: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v162 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method193(
                                fable_library_rust::String_::fromString(v70_1_0.clone()),
                            )));
                            let v165: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v160),
                                                string(">{v162()}</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v167: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v162()}</div> };
                            leptos::IntoView::into_view(v167)
                        }
                    }
                },
            ]);
            let v175: Vec<leptos::View> = v173.to_vec();
            leptos::Fragment::new(v175)
        }
        pub fn method302(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>>,
            v3: leptos::ReadSignal<bool>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure373(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure510(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure511(v0_1: leptos::View, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure514(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method399(v0_1: leptos::View) -> Func0<string> {
            Func0::new(move || Dice_ui::closure514((), ()))
        }
        pub fn closure513(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v7 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method178(
                Dice_ui::method399(v0_1),
            )));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v5), string(">{v7()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v7()}</span>
            };
            let v15: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v12)]);
            let v17: Vec<leptos::View> = v15.to_vec();
            leptos::Fragment::new(v17)
        }
        pub fn method398(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure513(v0_1.clone(), ())
            })
        }
        pub fn closure512(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex items-center gap-2\"");
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method398(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v6()}</div> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method179()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> };
            let v26: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v23)]);
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method397(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure512(v0_1.clone(), ())
            })
        }
        pub fn closure509(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure510((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    move || Dice_ui::closure511(v0_1.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v7(()) + \" \" + &v4(())");
            let v11: string = append(append(append(string(" "), v8), string("")), string(""));
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method397(v0_1.clone())));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v11), string(">{v13()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v7(()) + " " + &v4(())
                }>{v13()}</summary>
            };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method181(v1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> };
            let v33: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v30)]);
            let v35: Vec<leptos::View> = v33.to_vec();
            leptos::Fragment::new(v35)
        }
        pub fn method396(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure509(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure508(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure227((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure228((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method173(v0_1.clone())));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method396(v0_1, v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method395(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure508(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure516(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Transactions");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method401() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure516((), ()))
        }
        pub fn closure518(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure517(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v0_1();
            let v9: std::string::String = format!("{:#?}", v2);
            let v11: string = fable_library_rust::String_::fromString(v9);
            let v32 = {
                let clo = Func0::new(move || Dice_ui::closure518((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v33: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v32(())");
            let v36: string = append(append(append(string(" "), v33), string("")), string(""));
            let v38 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method293(v11)));
            let v41: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v36), string(">{v38()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::HtmlElement<leptos::html::Pre> = leptos::view! {
                <pre class=move || {
                    "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                        .to_owned() + &v32(())
                }>{v38()}</pre>
            };
            let v46: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v43)]);
            let v48: Vec<leptos::View> = v46.to_vec();
            leptos::Fragment::new(v48)
        }
        pub fn method402(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure517(v0_1.clone(), ())
            })
        }
        pub fn closure515(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1 = Dice_ui::method401();
            let v2 = Dice_ui::method402(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure360((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure332((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v15: string = append(append(append(string(" "), v12), string("")), string(""));
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method294(v1, v2)));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v15), string(">{v17()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: Array<leptos::HtmlElement<leptos::html::Dl>> = new_array(&[
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] "
                            .to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())
                    }>{v17()}</dl>
                },
            ]);
            let v25: Vec<leptos::HtmlElement<leptos::html::Dl>> = v23.to_vec();
            let v28: Vec<leptos::View> = v25
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::html::Dl>| {
                        Dice_ui::closure344((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v30: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v28);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method400(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure515(v0_1.clone(), ())
            })
        }
        pub fn closure521(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure522(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure525(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method407() -> Func0<string> {
            Func0::new(move || Dice_ui::closure525((), ()))
        }
        pub fn closure524(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 =
                Dice_ui::method161(Dice_ui::method160(Dice_ui::method178(Dice_ui::method407())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = leptos::view! {
                <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">{v6()}</span>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method406() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure524((), ()))
        }
        pub fn closure523(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method406()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> };
            let v12: leptos::View = leptos::IntoView::into_view(v10);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method179()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v15), string(">{v17()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Span> = leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v17()}</span> };
            let v25: Array<leptos::View> = new_array(&[v12, leptos::IntoView::into_view(v22)]);
            let v27: Vec<leptos::View> = v25.to_vec();
            leptos::Fragment::new(v27)
        }
        pub fn method405() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure523((), ()))
        }
        pub fn closure520(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure521((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure522((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method405()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Summary> = leptos::view! {
                <summary class=move || {
                    "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 "
                        .to_owned() + v6(()) + " " + &v3(())
                }>{v12()}</summary>
            };
            let v19: leptos::View = leptos::IntoView::into_view(v17);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v24 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method181(v0_1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">{v24()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 flex-col">{v24()}</div> };
            let v32: Array<leptos::View> = new_array(&[v19, leptos::IntoView::into_view(v29)]);
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method404(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure520(v0_1.clone(), ())
            })
        }
        pub fn closure519(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure227((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure228((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v13 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method173(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v11), string(">{v13()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v13()}</div> };
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v21: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v25: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v21), string("")), string("")),
                ),
                string(""),
            );
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method404(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v25), string(">{v27()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Details> = leptos::view! {
                <details
                    open=move || v7(())
                    class=move || {
                        "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                            .to_owned() + &v4(())
                    }
                >
                    {v27()}
                </details>
            };
            let v35: Array<leptos::View> = new_array(&[v20, leptos::IntoView::into_view(v32)]);
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method403(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure519(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure526(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method408(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure526(v0_1.clone(), ())
            })
        }
        pub fn closure54(v0_1: leptos::ReadSignal<Dice_ui::US19>, unitVar: ()) -> leptos::Fragment {
            let v2: Dice_ui::US19 = leptos::SignalGet::get(&v0_1);
            let v517: Dice_ui::US23 = match &v2 {
                Dice_ui::US19::US19_1(v2_1_0) => {
                    let v6: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v8: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::use_context::<std::sync::Arc<Heap2>>();
                    let v10: LrcPtr<Dice_ui::Heap2> = v8.unwrap();
                    let v13: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v16 = {
                        let clo = Func0::new({
                            let v10 = v10.clone();
                            move || Dice_ui::closure55(v10.clone(), ())
                        });
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v18: leptos::Memo<Vec<string>> = leptos::create_memo(move |_| v16(()));
                    let v21 = {
                        let clo_1 = Func0::new({
                            let v18 = v18.clone();
                            move || Dice_ui::closure60(v18.clone(), ())
                        });
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v23: leptos::Memo<Array<(string, Dice_ui::US24, string, bool, bool)>> =
                        leptos::create_memo(move |_| v21(()));
                    let v26 = {
                        let clo_2 = Func0::new({
                            let v10 = v10.clone();
                            let v18 = v18.clone();
                            move || Dice_ui::closure62(v10.clone(), v18.clone(), ())
                        });
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v28: leptos::Memo<
                        Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
                    > = leptos::create_memo(move |_| v26(()));
                    let v31 = {
                        let clo_3 = Func0::new({
                            let v28 = v28.clone();
                            move || Dice_ui::closure65(v28.clone(), ())
                        });
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v33: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>> =
                        leptos::create_memo(move |_| v31(()));
                    let v36 = {
                        let clo_4 = Func0::new({
                            let v28 = v28.clone();
                            move || Dice_ui::closure67(v28.clone(), ())
                        });
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v38: leptos::Memo<Array<string>> = leptos::create_memo(move |_| v36(()));
                    let v40: leptos::Memo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method72(
                        v33,
                        Func1::new(move |v: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure70((), v)
                        }),
                    );
                    let v46: string = Dice_ui::method10(
                        200_i64,
                        append(
                            append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v40.clone()),
                            ),
                            string(""),
                        ),
                    );
                    let v48: bool = true;
                    leptos::logging::log!("{}", v46);
                    let v51 = {
                        let clo_5 = Func0::new({
                            let v38 = v38.clone();
                            let v40 = v40.clone();
                            move || Dice_ui::closure102(v38.clone(), v40.clone(), ())
                        });
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v53: leptos::Memo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::create_memo(move |_| v51(()));
                    let v56 = {
                        let clo_6 = Func0::new({
                            let v53 = v53.clone();
                            move || Dice_ui::closure119(v53.clone(), ())
                        });
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v58: leptos::Memo<
                        Result<
                            Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::create_memo(move |_| v56(()));
                    let v61 = {
                        let clo_7 = Func0::new({
                            let v58 = v58.clone();
                            move || Dice_ui::closure126(v58.clone(), ())
                        });
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v65: leptos::Memo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method134(
                        leptos::create_memo(move |_| v61(())),
                        Func1::new(move |v_1: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure130((), v_1)
                        }),
                    );
                    let v71: string = Dice_ui::method10(
                        200_i64,
                        append(
                            append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v65.clone()),
                            ),
                            string(""),
                        ),
                    );
                    let v73: bool = true;
                    leptos::logging::log!("{}", v71);
                    let v76: leptos::Action<
                        LrcPtr<Dice_ui::Heap6>,
                        Result<Dice_ui::US58, std::string::String>,
                    > = leptos::create_action(move |value: &std::sync::Arc<Heap6>| {
                        Func1::new(move |v_2: LrcPtr<Dice_ui::Heap6>| Dice_ui::closure148((), v_2))(
                            value.clone(),
                        )
                    });
                    let v79 = {
                        let clo_8 = Func0::new({
                            let v76 = v76.clone();
                            move || Dice_ui::closure153(v76.clone(), ())
                        });
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v81: leptos::Memo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::create_memo(move |_| v79(()));
                    let v84 = {
                        let clo_9 = Func0::new({
                            let v81 = v81.clone();
                            move || Dice_ui::closure158(v81.clone(), ())
                        });
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v86: leptos::Memo<Option<string>> = leptos::create_memo(move |_| v84(()));
                    let v89 = {
                        let clo_10 = Func0::new({
                            let v10 = v10.clone();
                            move || Dice_ui::closure163(v10.clone(), ())
                        });
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v91: leptos::Memo<Dice_ui::US32> = leptos::create_memo(move |_| v89(()));
                    let v94 = {
                        let clo_11 = Func0::new({
                            let v10 = v10.clone();
                            move || Dice_ui::closure164(v10.clone(), ())
                        });
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v96: leptos::Memo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::ReadSignal<std::string::String>,
                                    leptos::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::create_memo(move |_| v94(()));
                    let v99 = {
                        let clo_12 = Func0::new({
                            let v96 = v96.clone();
                            move || Dice_ui::closure167(v96.clone(), ())
                        });
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    let v101: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> =
                        leptos::create_memo(move |_| v99(()));
                    let v103: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
                    let v111: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v113 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method195(
                        leptos::CollectView::collect_view(v103.to_vec()),
                        Dice_ui::method171(Dice_ui::method150(
                            v10.clone(),
                            v76.clone(),
                            v86,
                            v91,
                            v101,
                        )),
                    )));
                    let v116: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v111), string(">{v113()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v118: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v113()}</div> };
                    let v120: leptos::View = leptos::IntoView::into_view(v118);
                    let v122: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
                    let v129: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v131 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method229(
                        leptos::CollectView::collect_view(v122.to_vec()),
                        Dice_ui::method171(Dice_ui::method200(v65, v53.clone(), v28.clone())),
                    )));
                    let v133: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v129), string(">{v131()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v135: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v131()}</div> };
                    let v138: Array<leptos::View> =
                        new_array(&[v120, leptos::IntoView::into_view(v135)]);
                    let v140: Vec<leptos::View> = v138.to_vec();
                    Dice_ui::US23::US23_0(leptos::Fragment::new(v140))
                }
                Dice_ui::US19::US19_2 => {
                    let v146: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v148: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::use_context::<std::sync::Arc<Heap2>>();
                    let v150: LrcPtr<Dice_ui::Heap2> = v148.unwrap();
                    let v156: &str = &*string("???");
                    let v177: std::string::String = String::from(v156);
                    let v195: leptos::leptos_dom::Text = leptos::html::text(v177);
                    let v198: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v195)]);
                    let v200: Vec<leptos::View> = v198.to_vec();
                    Dice_ui::US23::US23_0(leptos::Fragment::new(v200))
                }
                Dice_ui::US19::US19_4 => {
                    let v376: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v378: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::use_context::<std::sync::Arc<Heap2>>();
                    let v380: LrcPtr<Dice_ui::Heap2> = v378.unwrap();
                    let v383 = {
                        let clo_13 = Func0::new({
                            let v380 = v380.clone();
                            move || Dice_ui::closure270(v380.clone(), ())
                        });
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v385: leptos::Memo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                                ),
                            )>,
                        >,
                    > = leptos::create_memo(move |_| v383(()));
                    let patternInput: (leptos::ReadSignal<i32>, leptos::WriteSignal<i32>) =
                        leptos::create_signal(0_i32);
                    let v388: leptos::WriteSignal<i32> = patternInput.1.clone();
                    let v391 = {
                        let clo_14 = Func0::new({
                            let patternInput = patternInput.clone();
                            let v385 = v385.clone();
                            move || Dice_ui::closure273(v385.clone(), patternInput.0.clone(), ())
                        });
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v393: leptos::Memo<
                        Vec<(
                            i32,
                            i32,
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::create_memo(move |_| v391(()));
                    let v396 = {
                        let clo_15 = Func0::new({
                            let v393 = v393.clone();
                            move || Dice_ui::closure276(v393.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v398: leptos::Memo<i32> = leptos::create_memo(move |_| v396(()));
                    let v399 = Func0::new({
                        let v380 = v380.clone();
                        let v385 = v385.clone();
                        let v388 = v388.clone();
                        move || Dice_ui::closure277(v380.clone(), v385.clone(), v388.clone(), ())
                    });
                    {
                        let v403 = {
                            let clo_16 = Func0::new(move || Dice_ui::closure282((), ()));
                            Func1::new({
                                let clo_16 = clo_16.clone();
                                move |arg_16: ()| clo_16()
                            })
                        };
                        let v417: string =
                                string(" class=move || \" \".to_owned() + &v403(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v419 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method238()));
                        let v422: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<svg "), v417),
                                            string(">{v419()}</"),
                                        ),
                                        string("svg"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v424: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                            <svg
                                class=move || " ".to_owned() + &v403(())
                                stroke="currentColor"
                                stroke-width="1.5"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                {v419()}
                            </svg>
                        };
                        let v429 = {
                            let clo_17 = Func0::new(move || Dice_ui::closure284((), ()));
                            Func1::new({
                                let clo_17 = clo_17.clone();
                                move |arg_17: ()| clo_17()
                            })
                        };
                        let v430: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v429(())");
                        let v434: string = append(
                            append(
                                string(" aria-label=\"Add\""),
                                append(
                                    append(
                                        string(" on:click=move |_| v399()"),
                                        append(
                                            append(append(string(" "), v430), string("")),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(""),
                        );
                        let v436 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method239(v424)));
                        let v439: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<button "), v434),
                                            string(">{v436()}</"),
                                        ),
                                        string("button"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v441: leptos::HtmlElement<leptos::html::Button> = leptos::view! {
                            <button
                                aria-label="Add"
                                on:click=move |_| v399()
                                class=move || {
                                    "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] "
                                        .to_owned() + &v429(())
                                }
                            >
                                {v436()}
                            </button>
                        };
                        let v443: leptos::View = leptos::IntoView::into_view(v441);
                        let v445: Array<leptos::View> =
                            Dice_ui::method149(new_empty::<leptos::View>());
                        let v447: leptos::View = leptos::CollectView::collect_view(v445.to_vec());
                        let v452: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v454 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method264(
                            v443,
                            Dice_ui::method171(Dice_ui::method240(
                                v380.clone(),
                                v393.clone(),
                                v398,
                                v385.clone(),
                                v388.clone(),
                            )),
                        )));
                        let v457: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v452),
                                            string(">{v454()}</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v459: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v454()}</div> };
                        let v461: leptos::View = leptos::IntoView::into_view(v459);
                        let v463: Array<leptos::View> =
                            Dice_ui::method149(new_empty::<leptos::View>());
                        let v470: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v472 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method284(
                            leptos::CollectView::collect_view(v463.to_vec()),
                            Dice_ui::method171(Dice_ui::method269(v380.clone())),
                        )));
                        let v474: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v470),
                                            string(">{v472()}</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v476: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v472()}</div> };
                        let v478: leptos::View = leptos::IntoView::into_view(v476);
                        let v481: LrcPtr<Dice_ui::Heap1> =
                            leptos::SignalGetUntracked::get_untracked(&v380.l0.clone());
                        let v507: Array<leptos::View> = new_array(&[
                            v461,
                            v478,
                            if leptos::SignalGet::get(&v481.l1.clone()) {
                                let v486: Array<leptos::View> =
                                    Dice_ui::method149(new_empty::<leptos::View>());
                                let v493: string =
                                    string(" class=\"flex flex-col [position:relative]\"");
                                let v495 =
                                    Dice_ui::method161(Dice_ui::method160(Dice_ui::method295(
                                        leptos::CollectView::collect_view(v486.to_vec()),
                                        Dice_ui::method171(Dice_ui::method289()),
                                    )));
                                let v497: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v493),
                                                    string(">{v495()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v499: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v495()}</div> };
                                leptos::IntoView::into_view(v499)
                            } else {
                                let v503: Array<leptos::View> =
                                    Dice_ui::method149(new_empty::<leptos::View>());
                                leptos::CollectView::collect_view(v503.to_vec())
                            },
                        ]);
                        let v509: Vec<leptos::View> = v507.to_vec();
                        Dice_ui::US23::US23_0(leptos::Fragment::new(v509))
                    }
                }
                Dice_ui::US19::US19_3 => {
                    let v206: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v208: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::use_context::<std::sync::Arc<Heap2>>();
                    let v210: LrcPtr<Dice_ui::Heap2> = v208.unwrap();
                    let v213: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v216 = {
                        let clo_18 = Func0::new({
                            let v210 = v210.clone();
                            move || Dice_ui::closure55(v210.clone(), ())
                        });
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v218: leptos::Memo<Vec<string>> = leptos::create_memo(move |_| v216(()));
                    let v221 = {
                        let clo_19 = Func0::new({
                            let v218 = v218.clone();
                            move || Dice_ui::closure60(v218.clone(), ())
                        });
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    let v223: leptos::Memo<Array<(string, Dice_ui::US24, string, bool, bool)>> =
                        leptos::create_memo(move |_| v221(()));
                    let v226 = {
                        let clo_20 = Func0::new({
                            let v210 = v210.clone();
                            let v218 = v218.clone();
                            move || Dice_ui::closure62(v210.clone(), v218.clone(), ())
                        });
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v228: leptos::Memo<
                        Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
                    > = leptos::create_memo(move |_| v226(()));
                    let v231 = {
                        let clo_21 = Func0::new({
                            let v228 = v228.clone();
                            move || Dice_ui::closure65(v228.clone(), ())
                        });
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v233: leptos::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>> =
                        leptos::create_memo(move |_| v231(()));
                    let v236 = {
                        let clo_22 = Func0::new({
                            let v228 = v228.clone();
                            move || Dice_ui::closure67(v228.clone(), ())
                        });
                        Func1::new({
                            let clo_22 = clo_22.clone();
                            move |arg_22: ()| clo_22()
                        })
                    };
                    let v238: leptos::Memo<Array<string>> = leptos::create_memo(move |_| v236(()));
                    let v240: leptos::Memo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method72(
                        v233,
                        Func1::new(move |v_3: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure70((), v_3)
                        }),
                    );
                    let v246: string = Dice_ui::method10(
                        200_i64,
                        append(
                            append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v240.clone()),
                            ),
                            string(""),
                        ),
                    );
                    let v248: bool = true;
                    leptos::logging::log!("{}", v246);
                    let v251 = {
                        let clo_23 = Func0::new({
                            let v238 = v238.clone();
                            let v240 = v240.clone();
                            move || Dice_ui::closure102(v238.clone(), v240.clone(), ())
                        });
                        Func1::new({
                            let clo_23 = clo_23.clone();
                            move |arg_23: ()| clo_23()
                        })
                    };
                    let v253: leptos::Memo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::create_memo(move |_| v251(()));
                    let v256 = {
                        let clo_24 = Func0::new({
                            let v253 = v253.clone();
                            move || Dice_ui::closure119(v253.clone(), ())
                        });
                        Func1::new({
                            let clo_24 = clo_24.clone();
                            move |arg_24: ()| clo_24()
                        })
                    };
                    let v258: leptos::Memo<
                        Result<
                            Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::create_memo(move |_| v256(()));
                    let v261 = {
                        let clo_25 = Func0::new({
                            let v258 = v258.clone();
                            move || Dice_ui::closure126(v258.clone(), ())
                        });
                        Func1::new({
                            let clo_25 = clo_25.clone();
                            move |arg_25: ()| clo_25()
                        })
                    };
                    let v271: string = Dice_ui::method10(
                        200_i64,
                        append(
                            append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method134(
                                        leptos::create_memo(move |_| { v261(()) }),
                                        Func1::new(
                                            move |v_4: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure130((), v_4)
                                            }
                                        )
                                    )
                                ),
                            ),
                            string(""),
                        ),
                    );
                    let v273: bool = true;
                    leptos::logging::log!("{}", v271);
                    let patternInput_1: (leptos::ReadSignal<bool>, leptos::WriteSignal<bool>) =
                        leptos::create_signal(false);
                    let v275: leptos::ReadSignal<bool> = patternInput_1.0.clone();
                    let v277 = Func0::new({
                        let patternInput_1 = patternInput_1.clone();
                        move || Dice_ui::closure369(patternInput_1.1.clone(), ())
                    });
                    {
                        let v281 = {
                            let clo_26 = Func0::new(move || Dice_ui::closure370((), ()));
                            Func1::new({
                                let clo_26 = clo_26.clone();
                                move |arg_26: ()| clo_26()
                            })
                        };
                        let v295: string =
                                string(" class=move || \" \".to_owned() + &v281(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v297 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method300()));
                        let v300: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<svg "), v295),
                                            string(">{v297()}</"),
                                        ),
                                        string("svg"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v302: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                            <svg
                                class=move || " ".to_owned() + &v281(())
                                stroke="currentColor"
                                stroke-width="1.5"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                {v297()}
                            </svg>
                        };
                        let v307 = {
                            let clo_27 = Func0::new({
                                let v275 = v275.clone();
                                move || Dice_ui::closure372(v275.clone(), ())
                            });
                            Func1::new({
                                let clo_27 = clo_27.clone();
                                move |arg_27: ()| clo_27()
                            })
                        };
                        let v308: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v307(())");
                        let v312: string = append(
                            append(
                                string(" aria-label=\"Settings\""),
                                append(
                                    append(
                                        string(" on:click=move |_| v277()"),
                                        append(
                                            append(append(string(" "), v308), string("")),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(""),
                        );
                        let v314 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method239(v302)));
                        let v317: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<button "), v312),
                                            string(">{v314()}</"),
                                        ),
                                        string("button"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v319: leptos::HtmlElement<leptos::html::Button> = leptos::view! {
                            <button
                                aria-label="Settings"
                                on:click=move |_| v277()
                                class=move || {
                                    "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] "
                                        .to_owned() + &v307(())
                                }
                            >
                                {v314()}
                            </button>
                        };
                        let v321: leptos::View = leptos::IntoView::into_view(v319);
                        let v323: Array<leptos::View> =
                            Dice_ui::method149(new_empty::<leptos::View>());
                        let v325: leptos::View = leptos::CollectView::collect_view(v323.to_vec());
                        let v330: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v332 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method395(
                            v321,
                            Dice_ui::method171(Dice_ui::method302(
                                v210.clone(),
                                v253.clone(),
                                v228.clone(),
                                v275.clone(),
                            )),
                        )));
                        let v335: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v330),
                                            string(">{v332()}</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v337: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v332()}</div> };
                        let v339: leptos::View = leptos::IntoView::into_view(v337);
                        let v342: LrcPtr<Dice_ui::Heap1> =
                            leptos::SignalGetUntracked::get_untracked(&v210.l0.clone());
                        let v368: Array<leptos::View> = new_array(&[
                            v339,
                            if leptos::SignalGet::get(&v342.l1.clone()) {
                                let v347: Array<leptos::View> =
                                    Dice_ui::method149(new_empty::<leptos::View>());
                                let v354: string =
                                    string(" class=\"flex flex-col [position:relative]\"");
                                let v356 =
                                    Dice_ui::method161(Dice_ui::method160(Dice_ui::method403(
                                        leptos::CollectView::collect_view(v347.to_vec()),
                                        Dice_ui::method171(Dice_ui::method400(v253.clone())),
                                    )));
                                let v358: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v354),
                                                    string(">{v356()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v360: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-col [position:relative]">{v356()}</div> };
                                leptos::IntoView::into_view(v360)
                            } else {
                                let v364: Array<leptos::View> =
                                    Dice_ui::method149(new_empty::<leptos::View>());
                                leptos::CollectView::collect_view(v364.to_vec())
                            },
                        ]);
                        let v370: Vec<leptos::View> = v368.to_vec();
                        Dice_ui::US23::US23_0(leptos::Fragment::new(v370))
                    }
                }
                _ => Dice_ui::US23::US23_1,
            };
            let v538: Array<leptos::View> = new_array(&[match &v517 {
                Dice_ui::US23::US23_0(v517_0_0) => {
                    let v522: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v524 =
                        Dice_ui::method161(Dice_ui::method160(Dice_ui::method408(match &v517 {
                            Dice_ui::US23::US23_0(x) => x.clone(),
                            _ => unreachable!(),
                        })));
                    let v527: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v522), string(">{v524()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v529: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 flex-col [overflow-y:auto]">{v524()}</div> };
                    leptos::IntoView::into_view(v529)
                }
                _ => {
                    let v533: Array<leptos::View> = Dice_ui::method149(new_empty::<leptos::View>());
                    leptos::CollectView::collect_view(v533.to_vec())
                }
            }]);
            let v540: Vec<leptos::View> = v538.to_vec();
            leptos::Fragment::new(v540)
        }
        pub fn method59(v0_1: leptos::ReadSignal<Dice_ui::US19>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure54(v0_1.clone(), ())
            })
        }
        pub fn closure529(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v5: &str = &*string("Tab");
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method411() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure529((), ()))
        }
        pub fn closure532(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: Dice_ui::US19,
            unitVar: (),
        ) -> bool {
            let v3: Dice_ui::US19 = leptos::SignalGet::get(&v0_1);
            {
                let copyOfStruct: Dice_ui::US19 = v3;
                if let Dice_ui::US19::US19_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US19 = v1.clone();
                    if let Dice_ui::US19::US19_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US19::US19_2 = &copyOfStruct {
                        if let Dice_ui::US19::US19_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US19::US19_4 = &copyOfStruct {
                            if let Dice_ui::US19::US19_4 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US19::US19_3 = &copyOfStruct {
                                if let Dice_ui::US19::US19_3 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US19::US19_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn method413(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: Dice_ui::US19,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure532(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure533(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v5: &str = &*v0_1;
            let v26: std::string::String = String::from(v5);
            let v44: leptos::leptos_dom::Text = leptos::html::text(v26);
            let v47: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v44)]);
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method414(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure533(v0_1.clone(), ())
            })
        }
        pub fn closure531(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: Dice_ui::US19,
        ) -> leptos::View {
            let v12: string = match &v1 {
                Dice_ui::US19::US19_1(v1_1_0) => string("Dice"),
                Dice_ui::US19::US19_2 => string("Lists"),
                Dice_ui::US19::US19_4 => string("Settings"),
                Dice_ui::US19::US19_3 => string("Transactions"),
                _ => string(""),
            };
            let v13 = Dice_ui::method413(v0_1, v1.clone());
            let v17: string = string(" select=v13()");
            let v19 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method414(v12)));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<option "), v17), string(">{v19()}</")),
                            string("option"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Option_> =
                leptos::view! { <option select=v13()>{v19()}</option> };
            leptos::IntoView::into_view(v24)
        }
        pub fn closure530(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: Array<Dice_ui::US19> = new_array(&[
                Dice_ui::US19::US19_1(Dice_ui::US20::US20_0),
                Dice_ui::US19::US19_2,
                Dice_ui::US19::US19_3,
                Dice_ui::US19::US19_4,
            ]);
            let v8: Vec<Dice_ui::US19> = v6.to_vec();
            let v11: Vec<leptos::View> = v8
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        move |v: Dice_ui::US19| Dice_ui::closure531(v0_1.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v13: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v11);
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method412(v0_1: leptos::ReadSignal<Dice_ui::US19>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure530(v0_1.clone(), ())
            })
        }
        pub fn closure528(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v8 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method411()));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<label "), v6), string(">{v8()}</")),
                            string("label"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Label> =
                leptos::view! {
                    <label class="sr-only" for="Tab">
                        {v8()}
                    </label>
                };
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v20: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v22 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method412(v0_1)));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<select "), v20), string(">{v22()}</")),
                            string("select"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Select> = leptos::view! {
                <select class="w-full rounded-md border-gray-200" id="Tab">
                    {v22()}
                </select>
            };
            let v30: Array<leptos::View> = new_array(&[v15, leptos::IntoView::into_view(v27)]);
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method410(v0_1: leptos::ReadSignal<Dice_ui::US19>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure528(v0_1.clone(), ())
            })
        }
        pub fn closure538(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure540(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method419() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure540((), ()))
        }
        pub fn closure539(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v15: string =
                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
            let v17 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method419()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v15), string(">{v17()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::svg::Rect> = leptos::view! {
                <rect
                    stroke-linejoin="round"
                    stroke-linecap="round"
                    rx="2"
                    height="18"
                    width="18"
                    y="3"
                    x="3"
                >
                    {v17()}
                </rect>
            };
            let v24: leptos::View = leptos::IntoView::into_view(v22);
            let v33: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
            let v35 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v38: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v33), string(">{v35()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v40: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="7.5" cx="7.5">
                    {v35()}
                </circle>
            };
            let v42: leptos::View = leptos::IntoView::into_view(v40);
            let v51: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
            let v53 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v55: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v51), string(">{v53()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v57: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="7.5" cx="16.5">
                    {v53()}
                </circle>
            };
            let v59: leptos::View = leptos::IntoView::into_view(v57);
            let v68: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
            let v70 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v72: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v68), string(">{v70()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v74: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="12" cx="12">
                    {v70()}
                </circle>
            };
            let v76: leptos::View = leptos::IntoView::into_view(v74);
            let v85: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
            let v87 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v89: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v85), string(">{v87()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v91: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="16.5" cx="7.5">
                    {v87()}
                </circle>
            };
            let v93: leptos::View = leptos::IntoView::into_view(v91);
            let v102: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
            let v104 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v106: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v102), string(">{v104()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v108: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1.5" cy="16.5" cx="16.5">
                    {v104()}
                </circle>
            };
            let v111: Array<leptos::View> =
                new_array(&[v24, v42, v59, v76, v93, leptos::IntoView::into_view(v108)]);
            let v113: Vec<leptos::View> = v111.to_vec();
            leptos::Fragment::new(v113)
        }
        pub fn method418() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure539((), ()))
        }
        pub fn closure541(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::svg::Path> = leptos::view! {
                <path
                    d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5"
                    stroke-linejoin="round"
                    stroke-linecap="round"
                >
                    {v9()}
                </path>
            };
            let v16: leptos::View = leptos::IntoView::into_view(v14);
            let v25: string = string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
            let v27 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v25), string(">{v27()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1" cy="6.75" cx="3">
                    {v27()}
                </circle>
            };
            let v34: leptos::View = leptos::IntoView::into_view(v32);
            let v43: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
            let v45 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v47: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v43), string(">{v45()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v49: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1" cy="12" cx="3">
                    {v45()}
                </circle>
            };
            let v51: leptos::View = leptos::IntoView::into_view(v49);
            let v60: string = string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
            let v62 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method170()));
            let v64: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v60), string(">{v62()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v66: leptos::HtmlElement<leptos::svg::Circle> = leptos::view! {
                <circle fill="currentColor" r="1" cy="17.25" cx="3">
                    {v62()}
                </circle>
            };
            let v69: Array<leptos::View> =
                new_array(&[v16, v34, v51, leptos::IntoView::into_view(v66)]);
            let v71: Vec<leptos::View> = v69.to_vec();
            leptos::Fragment::new(v71)
        }
        pub fn method420() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure541((), ()))
        }
        pub fn closure542(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method159()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: Array<leptos::HtmlElement<leptos::svg::Path>> = new_array(&[
                leptos::view! {
                    <path
                        d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7"
                        stroke-linejoin="round"
                        stroke-linecap="round"
                    >
                        {v9()}
                    </path>
                },
            ]);
            let v17: Vec<leptos::HtmlElement<leptos::svg::Path>> = v15.to_vec();
            let v20: Vec<leptos::View> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| {
                        Dice_ui::closure181((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v20);
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method421() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure542((), ()))
        }
        pub fn closure543(
            v0_1: leptos::Memo<string>,
            v1: string,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(append(append(v0_1(), string("#/")), v1), string(""));
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure544(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: Dice_ui::US19,
            unitVar: (),
        ) -> bool {
            let v3: Dice_ui::US19 = leptos::SignalGet::get(&v0_1);
            {
                let copyOfStruct: Dice_ui::US19 = v3;
                if let Dice_ui::US19::US19_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US19 = v1.clone();
                    if let Dice_ui::US19::US19_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US19::US19_2 = &copyOfStruct {
                        if let Dice_ui::US19::US19_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US19::US19_4 = &copyOfStruct {
                            if let Dice_ui::US19::US19_4 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US19::US19_3 = &copyOfStruct {
                                if let Dice_ui::US19::US19_3 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US19::US19_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn closure545(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: Dice_ui::US19,
            unitVar: (),
        ) -> &'static str {
            let v3: Dice_ui::US19 = leptos::SignalGet::get(&v0_1);
            if {
                let copyOfStruct: Dice_ui::US19 = v3;
                if let Dice_ui::US19::US19_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US19 = v1.clone();
                    if let Dice_ui::US19::US19_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US19::US19_2 = &copyOfStruct {
                        if let Dice_ui::US19::US19_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US19::US19_4 = &copyOfStruct {
                            if let Dice_ui::US19::US19_4 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US19::US19_3 = &copyOfStruct {
                                if let Dice_ui::US19::US19_3 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US19::US19_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            } {
                let v9: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v12: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure546(v0_1: leptos::Fragment, v1: string, unitVar: ()) -> leptos::Fragment {
            let v3: leptos::View = leptos::IntoView::into_view(v0_1);
            let v8: &str = &*v1;
            let v29: std::string::String = String::from(v8);
            let v47: leptos::leptos_dom::Text = leptos::html::text(v29);
            let v50: Array<leptos::View> = new_array(&[v3, leptos::IntoView::into_view(v47)]);
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method422(v0_1: leptos::Fragment, v1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure546(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure537(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: leptos::Memo<string>,
            v2: Dice_ui::US19,
        ) -> leptos::View {
            let v13: string = match &v2 {
                Dice_ui::US19::US19_1(v2_1_0) => string("dice"),
                Dice_ui::US19::US19_2 => string("lists"),
                Dice_ui::US19::US19_4 => string("settings"),
                Dice_ui::US19::US19_3 => string("transactions"),
                _ => string(""),
            };
            let v151: leptos::Fragment = match &v2 {
                Dice_ui::US19::US19_1(v2_1_0) => {
                    let v17 = {
                        let clo = Func0::new(move || Dice_ui::closure538((), ()));
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v31: string =
                            string(" class=move || \" \".to_owned() + &v17(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v33 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method418()));
                    let v36: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v31), string(">{v33()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v38: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || " ".to_owned() + &v17(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v33()}
                        </svg>
                    };
                    let v41: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v38)]);
                    let v43: Vec<leptos::View> = v41.to_vec();
                    leptos::Fragment::new(v43)
                }
                Dice_ui::US19::US19_2 => {
                    let v48 = {
                        let clo_1 = Func0::new(move || Dice_ui::closure538((), ()));
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v64: string =
                            string(" class=move || \"text-gray-700 \".to_owned() + &v48(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v66 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method420()));
                    let v69: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v64), string(">{v66()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v71: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || "text-gray-700 ".to_owned() + &v48(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            height="100%"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v66()}
                        </svg>
                    };
                    let v74: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v71)]);
                    let v76: Vec<leptos::View> = v74.to_vec();
                    leptos::Fragment::new(v76)
                }
                Dice_ui::US19::US19_4 => {
                    let v114 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure538((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v128: string =
                            string(" class=move || \" \".to_owned() + &v114(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v130 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method300()));
                    let v133: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v128), string(">{v130()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v135: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || " ".to_owned() + &v114(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v130()}
                        </svg>
                    };
                    let v138: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v135)]);
                    let v140: Vec<leptos::View> = v138.to_vec();
                    leptos::Fragment::new(v140)
                }
                Dice_ui::US19::US19_3 => {
                    let v81 = {
                        let clo_3 = Func0::new(move || Dice_ui::closure538((), ()));
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v97: string =
                            string(" class=move || \"text-gray-700 \".to_owned() + &v81(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v99 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method421()));
                    let v102: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v97), string(">{v99()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v104: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=move || "text-gray-700 ".to_owned() + &v81(())
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            height="100%"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v99()}
                        </svg>
                    };
                    let v107: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v104)]);
                    let v109: Vec<leptos::View> = v107.to_vec();
                    leptos::Fragment::new(v109)
                }
                _ => {
                    let v145: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
                    leptos::Fragment::new(v145)
                }
            };
            let v162: string = match &v2 {
                Dice_ui::US19::US19_1(v2_1_0) => string("Dice"),
                Dice_ui::US19::US19_2 => string("Lists"),
                Dice_ui::US19::US19_4 => string("Settings"),
                Dice_ui::US19::US19_3 => string("Transactions"),
                _ => string(""),
            };
            let v163 = Func0::new({
                let v1 = v1.clone();
                let v13 = v13.clone();
                move || Dice_ui::closure543(v1.clone(), v13.clone(), ())
            });
            {
                let v167 = {
                    let clo_4 = Func0::new({
                        let v0_1 = v0_1.clone();
                        let v2 = v2.clone();
                        move || Dice_ui::closure544(v0_1.clone(), v2.clone(), ())
                    });
                    Func1::new({
                        let clo_4 = clo_4.clone();
                        move |arg_4: ()| clo_4()
                    })
                };
                let v170 = {
                    let clo_5 = Func0::new({
                        let v0_1 = v0_1.clone();
                        let v2 = v2.clone();
                        move || Dice_ui::closure545(v0_1.clone(), v2.clone(), ())
                    });
                    Func1::new({
                        let clo_5 = clo_5.clone();
                        move |arg_5: ()| clo_5()
                    })
                };
                let v172: string =
                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v170(())");
                let v178: string = append(
                    append(
                        string(" aria-current=move || if v167(()) { \"page\" } else { \"\" }"),
                        append(
                            append(append(string(" "), v172), string(" href=move || v163()")),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v180 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method422(v151, v162)));
                let v183: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<a "), v178), string(">{v180()}</")),
                                string("a"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v185: leptos::HtmlElement<leptos::html::A> = leptos::view! {
                    <a
                        aria-current=move || if v167(()) { "page" } else { "" }
                        class=move || {
                            "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium "
                                .to_owned() + v170(())
                        }
                        href=move || v163()
                    >
                        {v180()}
                    </a>
                };
                leptos::IntoView::into_view(v185)
            }
        }
        pub fn closure536(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: leptos::Memo<string>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v7: Array<Dice_ui::US19> = new_array(&[
                Dice_ui::US19::US19_1(Dice_ui::US20::US20_0),
                Dice_ui::US19::US19_2,
                Dice_ui::US19::US19_3,
                Dice_ui::US19::US19_4,
            ]);
            let v9: Vec<Dice_ui::US19> = v7.to_vec();
            let v12: Vec<leptos::View> = v9
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move |v: Dice_ui::US19| Dice_ui::closure537(v0_1.clone(), v1.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v14: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v12);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method417(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: leptos::Memo<string>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure536(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure535(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: leptos::Memo<string>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v7: string = append(
                append(
                    string(" aria-label=\"Tabs\""),
                    append(append(append(string(" "), v2), string("")), string("")),
                ),
                string(""),
            );
            let v9 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method417(v0_1, v1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<nav "), v7), string(">{v9()}</")),
                            string("nav"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::html::Nav> = leptos::view! {
                <nav
                    aria-label="Tabs"
                    class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]"
                >
                    {v9()}
                </nav>
            };
            let v17: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v14)]);
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method416(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: leptos::Memo<string>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure535(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure534(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: leptos::Memo<string>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v7 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method416(v0_1, v1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v5), string(">{v7()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex flex-1 border-t border-gray-200">{v7()}</div> };
            let v15: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v12)]);
            let v17: Vec<leptos::View> = v15.to_vec();
            leptos::Fragment::new(v17)
        }
        pub fn method415(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            v1: leptos::Memo<string>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure534(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure527(
            v0_1: leptos::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v5: leptos_router::Location = leptos_router::use_location();
            let v8 = {
                let clo = Func0::new({
                    let v5 = v5.clone();
                    move || Dice_ui::closure47(v5.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v10: leptos::Memo<string> = leptos::create_memo(move |_| v8(()));
            let v14: string = string(" class=\"hidden\"");
            let v16 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method410(v0_1.clone())));
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v14), string(">{v16()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="hidden">{v16()}</div> };
            let v24: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v26 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method415(v0_1, v10)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v24), string(">{v26()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: Array<leptos::HtmlElement<leptos::html::Div>> = new_array(&[
                v21,
                leptos::view! { <div class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">{v26()}</div> },
            ]);
            let v33: Vec<leptos::HtmlElement<leptos::html::Div>> = v31.to_vec();
            let v36: Vec<leptos::View> = v33
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: leptos::HtmlElement<leptos::html::Div>| {
                        Dice_ui::closure225((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v38: Array<leptos::View> = fable_library_rust::NativeArray_::array_from(v36);
            let v40: Vec<leptos::View> = v38.to_vec();
            leptos::Fragment::new(v40)
        }
        pub fn method409(v0_1: leptos::ReadSignal<Dice_ui::US19>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure527(v0_1.clone(), ())
            })
        }
        pub fn closure53(v0_1: leptos::ReadSignal<Dice_ui::US19>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method59(v0_1.clone())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<main "), v4), string(">{v6()}</")),
                            string("main"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Main> = leptos::view! { <main class="flex flex-1 flex-col [overflow:hidden]">{v6()}</main> };
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"flex\"");
            let v18 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method409(v0_1)));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v16), string(">{v18()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Div> =
                leptos::view! { <div class="flex">{v18()}</div> };
            let v26: Array<leptos::View> = new_array(&[v13, leptos::IntoView::into_view(v23)]);
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method58(v0_1: leptos::ReadSignal<Dice_ui::US19>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure53(v0_1.clone(), ())
            })
        }
        pub fn closure52(v0_1: leptos::ReadSignal<Dice_ui::US19>, unitVar: ()) -> leptos::Fragment {
            let v1: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v4: string = append(append(append(string(" "), v1), string("")), string(""));
            let v6 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method58(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = leptos::view! {
                <div class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">
                    {v6()}
                </div>
            };
            let v14: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v11)]);
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method57(v0_1: leptos::ReadSignal<Dice_ui::US19>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure52(v0_1.clone(), ())
            })
        }
        pub fn closure46(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v4: leptos_router::Location = leptos_router::use_location();
            let v6: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::use_navigate());
            let v8: leptos_router::Location = leptos_router::use_location();
            let v11 = {
                let clo = Func0::new({
                    let v8 = v8.clone();
                    move || Dice_ui::closure47(v8.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v13: leptos::Memo<string> = leptos::create_memo(move |_| v11(()));
            let v15: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::use_context::<std::sync::Arc<Heap2>>();
            let v17: LrcPtr<Dice_ui::Heap2> = v15.unwrap();
            let patternInput: (
                leptos::ReadSignal<Dice_ui::US19>,
                leptos::WriteSignal<Dice_ui::US19>,
            ) = leptos::create_signal(Dice_ui::US19::US19_0);
            let patternInput_1: (leptos::ReadSignal<bool>, leptos::WriteSignal<bool>) =
                leptos::create_signal(false);
            let v27 = {
                let clo_1 = Func0::new({
                    let patternInput_1 = patternInput_1.clone();
                    let v13 = v13.clone();
                    let v17 = v17.clone();
                    let v4 = v4.clone();
                    let v6 = v6.clone();
                    move || {
                        Dice_ui::closure48(
                            v4.clone(),
                            v6.clone(),
                            v13.clone(),
                            v17.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.0.clone(),
                            (),
                        )
                    }
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v29: bool = true;
            leptos::create_effect(move |_| v27(()));
            let v32 = {
                let clo_2 = Func0::new({
                    let patternInput = patternInput.clone();
                    let v4 = v4.clone();
                    move || Dice_ui::closure49(v4.clone(), patternInput.1.clone(), ())
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v34: bool = true;
            leptos::create_effect(move |_| v32(()));
            let v38: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v40 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method57(
                patternInput.0.clone(),
            )));
            let v43: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v38), string(">{v40()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::HtmlElement<leptos::html::Div> = leptos::view! { <div class="flex flex-1 max-[100px]:[overflow-x:auto]">{v40()}</div> };
            let v48: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v45)]);
            let v50: Vec<leptos::View> = v48.to_vec();
            leptos::Fragment::new(v50)
        }
        pub fn method53() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure46((), ()))
        }
        pub fn closure5(unitVar: (), v0_1: i32) -> leptos::HtmlElement<leptos::html::Div> {
            let v1: string = append(
                append(string("home.render () / router: "), toString(v0_1)),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> = leptos::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v11: leptos::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method6();
            let v14: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v15: leptos::Resource<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Dice_ui::US3,
            > = Dice_ui::method13(v11.clone());
            let v18 = {
                let clo = Func0::new({
                    let v15 = v15.clone();
                    let v7 = v7.clone();
                    move || Dice_ui::closure25(v7.clone(), v15.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v20: bool = true;
            leptos::create_effect(move |_| v18(()));
            let v23 = {
                let clo_1 = Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure40(v7.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v25: leptos::Memo<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            > = leptos::create_memo(move |_| v23(()));
            let patternInput: (leptos::ReadSignal<bool>, leptos::WriteSignal<bool>) =
                leptos::create_signal(false);
            let v31: leptos::Action<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::create_action(move |value: &std::sync::Arc<Heap3>| {
                    Func1::new({
                        let v11 = v11.clone();
                        move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure41(v11.clone(), v)
                    })(value.clone())
                });
            let v34 = {
                let clo_2 = Func0::new({
                    let patternInput = patternInput.clone();
                    let v25 = v25.clone();
                    let v31 = v31.clone();
                    let v7 = v7.clone();
                    move || {
                        Dice_ui::closure42(
                            v7.clone(),
                            v25.clone(),
                            patternInput.1.clone(),
                            patternInput.0.clone(),
                            v31.clone(),
                            (),
                        )
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v36: bool = true;
            leptos::create_effect(move |_| v34(()));
            let v38 = Dice_ui::method52(v7.clone());
            let v44: string = string(" class:dark={move || v38()} class=\"flex flex-1\"");
            let v46 = Dice_ui::method161(Dice_ui::method160(Dice_ui::method53()));
            let v49: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v44), string(">{v46()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            leptos::view! {
                <div class:dark=move || v38() class="flex flex-1">
                    {v46()}
                </div>
            }
        }
        pub fn method5() -> Func1<i32, leptos::HtmlElement<leptos::html::Div>> {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method423(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure547(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::html::Div> = v0_1(1_i32);
            let v4: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v1)]);
            let v6: Vec<leptos::View> = v4.to_vec();
            leptos::Fragment::new(v6)
        }
        pub fn method424(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure547(v0_1.clone(), ())
            })
        }
        pub fn closure548(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Vec<leptos::View> = new_empty::<leptos::View>().to_vec();
            leptos::Fragment::new(v2)
        }
        pub fn method425() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure548((), ()))
        }
        pub fn closure549(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::html::Div> = v0_1(2_i32);
            let v4: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v1)]);
            let v6: Vec<leptos::View> = v4.to_vec();
            leptos::Fragment::new(v6)
        }
        pub fn method426(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure549(v0_1.clone(), ())
            })
        }
        pub fn closure550(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::html::Div> = v0_1(3_i32);
            let v4: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v1)]);
            let v6: Vec<leptos::View> = v4.to_vec();
            leptos::Fragment::new(v6)
        }
        pub fn method427(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure550(v0_1.clone(), ())
            })
        }
        pub fn closure551(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::html::Div> = v0_1(4_i32);
            let v4: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(v1)]);
            let v6: Vec<leptos::View> = v4.to_vec();
            leptos::Fragment::new(v6)
        }
        pub fn method428(
            v0_1: Func1<i32, leptos::HtmlElement<leptos::html::Div>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure551(v0_1.clone(), ())
            })
        }
        pub fn closure4(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v0_1 = Dice_ui::method5();
            let v6: &str = &*string("");
            let v44: std::string::String = Dice_ui::method423(String::from(v6));
            let v45 = Dice_ui::method424(v0_1.clone());
            let v46 = Dice_ui::method425();
            let v55: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v46()) view=move || v45() path=v44 /> })");
            let v56: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v46())
                        view=move || v45()
                        path=v44
                    />
                },
            );
            let v62: &str = &*string("/");
            let v100: std::string::String = Dice_ui::method423(String::from(v62));
            let v101 = Dice_ui::method426(v0_1.clone());
            let v102 = Dice_ui::method425();
            let v110: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v102()) view=move || v101() path=v100 /> })");
            let v111: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v102())
                        view=move || v101()
                        path=v100
                    />
                },
            );
            let v117: &str = &*string("/*");
            let v155: std::string::String = Dice_ui::method423(String::from(v117));
            let v156 = Dice_ui::method427(v0_1.clone());
            let v157 = Dice_ui::method425();
            let v165: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v157()) view=move || v156() path=v155 /> })");
            let v166: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v157())
                        view=move || v156()
                        path=v155
                    />
                },
            );
            let v172: &str = &*string("*");
            let v210: std::string::String = Dice_ui::method423(String::from(v172));
            let v211 = Dice_ui::method428(v0_1);
            let v212 = Dice_ui::method425();
            let v220: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v212()) view=move || v211() path=v210 /> })");
            let v222: Array<leptos::View> = new_array(&[
                v56,
                v111,
                v166,
                leptos::IntoView::into_view(
                    leptos::view! {
                        <leptos_router::Route
                            children=Box::new(move || v212())
                            view=move || v211()
                            path=v210
                        />
                    },
                ),
            ]);
            let v224: Vec<leptos::View> = v222.to_vec();
            leptos::Fragment::new(v224)
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure4((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Routes  children=Box::new(move || v2(())) /> })");
            let v10: Array<leptos::View> = new_array(&[leptos::IntoView::into_view(
                leptos::view! { <leptos_router::Routes children=Box::new(move || v2(())) /> },
            )]);
            let v12: Vec<leptos::View> = v10.to_vec();
            leptos::Fragment::new(v12)
        }
        pub fn method4() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure3((), ()))
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::RwSignal<bool> = leptos::create_rw_signal(false);
            let v8: leptos::RwSignal<bool> = leptos::create_rw_signal(false);
            let v14: &str = &*string("");
            let v35: std::string::String = String::from(v14);
            let v53: leptos::RwSignal<std::string::String> = leptos::create_rw_signal(v35);
            let v59: &str = &*string("i574n.near");
            let v80: std::string::String = String::from(v59);
            let v103: &str = &*string("luckier.near");
            let v142: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v80)),
                LrcPtr::new((true, String::from(v103))),
            ]);
            let v147: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v142.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v150: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v53,
                l3: leptos::create_rw_signal(v147),
            });
            let v152: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = leptos::create_rw_signal(v150);
            let v154: std::collections::HashMap<std::string::String, leptos::RwSignal<bool>> =
                std::collections::HashMap::new();
            let v157: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v152,
                l1: leptos::create_rw_signal(v154),
            });
            let v159: bool = true;
            leptos::provide_context::<std::sync::Arc<Heap2>>(v157);
            let v160 = Dice_ui::method4();
            let v165: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Router  children=Box::new(move || v160()) /> })");
            leptos::IntoView::into_view(
                leptos::view! { <leptos_router::Router children=Box::new(move || v160()) /> },
            )
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))());
            ()
        }
        pub fn closure552(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method429() -> Func0<()> {
            Func0::new(move || Dice_ui::closure552((), ()))
        }
        pub fn method430(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(append(string("main / args: "), toString(v0_1)), string(""));
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::document().body();
                let v21: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v28: string = append(
                    append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v21.clone()),
                    ),
                    string(""),
                );
                let v30: bool = true;
                leptos::logging::log!("{}", v28);
                if let Dice_ui::US0::US0_0(v21_0_0) = &v21 {
                    let v32: string = Dice_ui::method1();
                    let v37: &str = &*v32;
                    let v54: web_sys::HtmlElement = Dice_ui::method2(match &v21 {
                        Dice_ui::US0::US0_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    v54.set_inner_html(v37);
                    Dice_ui::method3()
                } else {
                    let v56 = Dice_ui::method429();
                    let v59: Box<dyn Fn()> = Dice_ui::method430(Box::new(move || v56()));
                    let v61: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v59);
                    let v63: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v61);
                    let v65: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v63);
                    leptos::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v65)
                        .unwrap();
                    v61.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_75bc3c80::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_6140596b;
pub use module_6140596b::*;
#[path = "../../deps/polyglot/lib/spiral/async__wasm.rs"]
mod module_daedefb8;
pub use module_daedefb8::*;
#[path = "../../deps/polyglot/lib/spiral/common_wasm.rs"]
mod module_70286a4c;
pub use module_70286a4c::*;
#[path = "../../deps/polyglot/lib/spiral/crypto_wasm.rs"]
mod module_4a98a962;
pub use module_4a98a962::*;
#[path = "../../deps/polyglot/lib/spiral/date_time_wasm.rs"]
mod module_94ca555f;
pub use module_94ca555f::*;
#[path = "../../deps/polyglot/lib/spiral/file_system_wasm.rs"]
mod module_b697ea1d;
pub use module_b697ea1d::*;
#[path = "../../deps/polyglot/lib/spiral/lib_wasm.rs"]
mod module_ed8da8a6;
pub use module_ed8da8a6::*;
#[path = "../../deps/polyglot/lib/spiral/networking_wasm.rs"]
mod module_9dd8007f;
pub use module_9dd8007f::*;
#[path = "../../deps/polyglot/lib/spiral/platform_wasm.rs"]
mod module_4c4781e;
pub use module_4c4781e::*;
#[path = "../../deps/polyglot/lib/spiral/runtime_wasm.rs"]
mod module_c40559dd;
pub use module_c40559dd::*;
#[path = "../../deps/polyglot/lib/spiral/sm_wasm.rs"]
mod module_fc92da1f;
pub use module_fc92da1f::*;
#[path = "../../deps/polyglot/lib/spiral/threading_wasm.rs"]
mod module_af40e92f;
pub use module_af40e92f::*;
#[path = "../../deps/polyglot/lib/spiral/trace_wasm.rs"]
mod module_981750e0;
pub use module_981750e0::*;
pub mod Polyglot {
    // pub use crate::module_6140596b::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
