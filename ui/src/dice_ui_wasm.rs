#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_eef1bd43 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::NativeArray_::count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::substring2;
        use fable_library_rust::String_::toString;
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0,
            US0_1(web_sys::HtmlElement),
        }
        impl Dice_ui::US0 {
            pub fn get_IsUS0_0(this_: &MutCell<Dice_ui::US0>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS0_1(this_: &MutCell<Dice_ui::US0>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl Dice_ui::US1 {
            pub fn get_IsUS1_0(this_: &MutCell<Dice_ui::US1>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS1_1(this_: &MutCell<Dice_ui::US1>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Option<std::string::String>,
            pub l1: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Dice_ui::Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::RwSignal<bool>,
            pub l1: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>>,
            pub l2: leptos::RwSignal<bool>,
            pub l3: leptos::RwSignal<std::string::String>,
        }
        impl core::fmt::Display for Dice_ui::Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::RwSignal<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Dice_ui::Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0,
            US2_1,
        }
        impl Dice_ui::US2 {
            pub fn get_IsUS2_0(this_: &MutCell<Dice_ui::US2>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS2_1(this_: &MutCell<Dice_ui::US2>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(rexie::Error),
            US3_1(rexie::Rexie),
        }
        impl Dice_ui::US3 {
            pub fn get_IsUS3_0(this_: &MutCell<Dice_ui::US3>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS3_1(this_: &MutCell<Dice_ui::US3>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: LrcPtr<Dice_ui::Heap0>,
            pub l2: bool,
            pub l3: std::string::String,
        }
        impl core::fmt::Display for Dice_ui::Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0,
            US4_1(LrcPtr<Dice_ui::Heap3>),
        }
        impl Dice_ui::US4 {
            pub fn get_IsUS4_0(this_: &MutCell<Dice_ui::US4>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS4_1(this_: &MutCell<Dice_ui::US4>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0,
            US5_1(rexie::Rexie),
        }
        impl Dice_ui::US5 {
            pub fn get_IsUS5_0(this_: &MutCell<Dice_ui::US5>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS5_1(this_: &MutCell<Dice_ui::US5>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0,
            US6_1(Option<LrcPtr<Dice_ui::Heap3>>),
        }
        impl Dice_ui::US6 {
            pub fn get_IsUS6_0(this_: &MutCell<Dice_ui::US6>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS6_1(this_: &MutCell<Dice_ui::US6>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0,
            US7_1(serde_json::Value),
        }
        impl Dice_ui::US7 {
            pub fn get_IsUS7_0(this_: &MutCell<Dice_ui::US7>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS7_1(this_: &MutCell<Dice_ui::US7>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(std::string::String),
            US8_1(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
        }
        impl Dice_ui::US8 {
            pub fn get_IsUS8_0(this_: &MutCell<Dice_ui::US8>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS8_1(this_: &MutCell<Dice_ui::US8>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0,
            US9_1(Dice_ui::US4),
        }
        impl Dice_ui::US9 {
            pub fn get_IsUS9_0(this_: &MutCell<Dice_ui::US9>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS9_1(this_: &MutCell<Dice_ui::US9>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(wasm_bindgen::JsValue),
            US10_1(Option<web_sys::Storage>),
        }
        impl Dice_ui::US10 {
            pub fn get_IsUS10_0(this_: &MutCell<Dice_ui::US10>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS10_1(this_: &MutCell<Dice_ui::US10>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0,
            US12_1(web_sys::Storage),
        }
        impl Dice_ui::US12 {
            pub fn get_IsUS12_0(this_: &MutCell<Dice_ui::US12>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS12_1(this_: &MutCell<Dice_ui::US12>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(wasm_bindgen::JsValue),
            US11_1(Dice_ui::US12),
        }
        impl Dice_ui::US11 {
            pub fn get_IsUS11_0(this_: &MutCell<Dice_ui::US11>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS11_1(this_: &MutCell<Dice_ui::US11>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(wasm_bindgen::JsValue),
            US13_1(Option<std::string::String>),
        }
        impl Dice_ui::US13 {
            pub fn get_IsUS13_0(this_: &MutCell<Dice_ui::US13>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS13_1(this_: &MutCell<Dice_ui::US13>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0,
            US15_1(std::string::String),
        }
        impl Dice_ui::US15 {
            pub fn get_IsUS15_0(this_: &MutCell<Dice_ui::US15>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS15_1(this_: &MutCell<Dice_ui::US15>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(wasm_bindgen::JsValue),
            US14_1(Dice_ui::US15),
        }
        impl Dice_ui::US14 {
            pub fn get_IsUS14_0(this_: &MutCell<Dice_ui::US14>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS14_1(this_: &MutCell<Dice_ui::US14>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0,
            US16_1(Dice_ui::US15),
        }
        impl Dice_ui::US16 {
            pub fn get_IsUS16_0(this_: &MutCell<Dice_ui::US16>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS16_1(this_: &MutCell<Dice_ui::US16>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US17 {
            US17_0(rexie::Error),
            US17_1,
        }
        impl Dice_ui::US17 {
            pub fn get_IsUS17_0(this_: &MutCell<Dice_ui::US17>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS17_1(this_: &MutCell<Dice_ui::US17>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0,
            US18_1(leptos::RwSignal<bool>),
        }
        impl Dice_ui::US18 {
            pub fn get_IsUS18_0(this_: &MutCell<Dice_ui::US18>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS18_1(this_: &MutCell<Dice_ui::US18>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US19 {
            US19_0,
            US19_1(bool),
        }
        impl Dice_ui::US19 {
            pub fn get_IsUS19_0(this_: &MutCell<Dice_ui::US19>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS19_1(this_: &MutCell<Dice_ui::US19>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US21 {
            US21_0,
        }
        impl Dice_ui::US21 {
            pub fn get_IsUS21_0(this_: &MutCell<Dice_ui::US21>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US20 {
            US20_0,
            US20_1(Dice_ui::US21),
            US20_2,
            US20_3,
            US20_4,
        }
        impl Dice_ui::US20 {
            pub fn get_IsUS20_0(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS20_1(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS20_2(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS20_3(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS20_4(this_: &MutCell<Dice_ui::US20>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(std::string::String),
            US22_1(leptos_router::Url),
        }
        impl Dice_ui::US22 {
            pub fn get_IsUS22_0(this_: &MutCell<Dice_ui::US22>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS22_1(this_: &MutCell<Dice_ui::US22>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US23 {
            US23_0,
            US23_1(Dice_ui::US20),
        }
        impl Dice_ui::US23 {
            pub fn get_IsUS23_0(this_: &MutCell<Dice_ui::US23>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS23_1(this_: &MutCell<Dice_ui::US23>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US23>,
        }
        impl core::fmt::Display for Dice_ui::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0,
            US24_1(leptos::Fragment),
        }
        impl Dice_ui::US24 {
            pub fn get_IsUS24_0(this_: &MutCell<Dice_ui::US24>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS24_1(this_: &MutCell<Dice_ui::US24>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US25 {
            US25_0,
            US25_1,
        }
        impl Dice_ui::US25 {
            pub fn get_IsUS25_0(this_: &MutCell<Dice_ui::US25>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS25_1(this_: &MutCell<Dice_ui::US25>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Dice_ui::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<(bool, string, bool, Dice_ui::US25, string)>>,
        }
        impl core::fmt::Display for Dice_ui::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default)]
        pub struct Mut3 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<string>>,
        }
        impl core::fmt::Display for Dice_ui::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Default,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Dice_ui::Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(std::string::String),
            US26_1(Option<LrcPtr<Dice_ui::Heap4>>),
        }
        impl Dice_ui::US26 {
            pub fn get_IsUS26_0(this_: &MutCell<Dice_ui::US26>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS26_1(this_: &MutCell<Dice_ui::US26>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0,
            US27_1(LrcPtr<Dice_ui::Heap4>),
        }
        impl Dice_ui::US27 {
            pub fn get_IsUS27_0(this_: &MutCell<Dice_ui::US27>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS27_1(this_: &MutCell<Dice_ui::US27>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US28 {
            US28_0,
            US28_1(Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
        }
        impl Dice_ui::US28 {
            pub fn get_IsUS28_0(this_: &MutCell<Dice_ui::US28>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS28_1(this_: &MutCell<Dice_ui::US28>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(std::string::String),
            US30_1(Array<Dice_ui::US27>),
        }
        impl Dice_ui::US30 {
            pub fn get_IsUS30_0(this_: &MutCell<Dice_ui::US30>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS30_1(this_: &MutCell<Dice_ui::US30>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0,
            US29_1(Dice_ui::US30),
        }
        impl Dice_ui::US29 {
            pub fn get_IsUS29_0(this_: &MutCell<Dice_ui::US29>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS29_1(this_: &MutCell<Dice_ui::US29>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(std::string::String),
            US31_1(Array<Option<LrcPtr<Dice_ui::Heap4>>>),
        }
        impl Dice_ui::US31 {
            pub fn get_IsUS31_0(this_: &MutCell<Dice_ui::US31>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS31_1(this_: &MutCell<Dice_ui::US31>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US34 {
            US34_0,
            US34_1(string),
        }
        impl Dice_ui::US34 {
            pub fn get_IsUS34_0(this_: &MutCell<Dice_ui::US34>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS34_1(this_: &MutCell<Dice_ui::US34>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(std::string::String),
            US33_1(Dice_ui::US34),
        }
        impl Dice_ui::US33 {
            pub fn get_IsUS33_0(this_: &MutCell<Dice_ui::US33>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS33_1(this_: &MutCell<Dice_ui::US33>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0,
            US32_1(Dice_ui::US33),
        }
        impl Dice_ui::US32 {
            pub fn get_IsUS32_0(this_: &MutCell<Dice_ui::US32>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS32_1(this_: &MutCell<Dice_ui::US32>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0,
            US35_1(Dice_ui::US27),
        }
        impl Dice_ui::US35 {
            pub fn get_IsUS35_0(this_: &MutCell<Dice_ui::US35>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS35_1(this_: &MutCell<Dice_ui::US35>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(std::string::String),
            US36_1(Option<string>),
        }
        impl Dice_ui::US36 {
            pub fn get_IsUS36_0(this_: &MutCell<Dice_ui::US36>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS36_1(this_: &MutCell<Dice_ui::US36>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0(std::string::String),
            US37_1,
        }
        impl Dice_ui::US37 {
            pub fn get_IsUS37_0(this_: &MutCell<Dice_ui::US37>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS37_1(this_: &MutCell<Dice_ui::US37>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0,
            US38_1(Result<Array<Option<string>>, std::string::String>),
        }
        impl Dice_ui::US38 {
            pub fn get_IsUS38_0(this_: &MutCell<Dice_ui::US38>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS38_1(this_: &MutCell<Dice_ui::US38>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(std::string::String),
            US40_1(Array<Option<string>>),
        }
        impl Dice_ui::US40 {
            pub fn get_IsUS40_0(this_: &MutCell<Dice_ui::US40>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS40_1(this_: &MutCell<Dice_ui::US40>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0,
            US39_1(Dice_ui::US40),
        }
        impl Dice_ui::US39 {
            pub fn get_IsUS39_0(this_: &MutCell<Dice_ui::US39>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS39_1(this_: &MutCell<Dice_ui::US39>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US42 {
            US42_0(std::string::String),
            US42_1(Array<Dice_ui::US34>),
        }
        impl Dice_ui::US42 {
            pub fn get_IsUS42_0(this_: &MutCell<Dice_ui::US42>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS42_1(this_: &MutCell<Dice_ui::US42>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0,
            US41_1(Dice_ui::US42),
        }
        impl Dice_ui::US41 {
            pub fn get_IsUS41_0(this_: &MutCell<Dice_ui::US41>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS41_1(this_: &MutCell<Dice_ui::US41>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US43 {
            US43_0,
            US43_1(Dice_ui::US34),
        }
        impl Dice_ui::US43 {
            pub fn get_IsUS43_0(this_: &MutCell<Dice_ui::US43>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS43_1(this_: &MutCell<Dice_ui::US43>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US44 {
            US44_0,
            US44_1(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
        }
        impl Dice_ui::US44 {
            pub fn get_IsUS44_0(this_: &MutCell<Dice_ui::US44>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS44_1(this_: &MutCell<Dice_ui::US44>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(std::string::String),
            US45_1(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
        }
        impl Dice_ui::US45 {
            pub fn get_IsUS45_0(this_: &MutCell<Dice_ui::US45>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS45_1(this_: &MutCell<Dice_ui::US45>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq)]
        pub struct Heap5 {
            pub l0: Array<(std::string::String, Option<std::string::String>)>,
            pub l1: f64,
            pub l2: u32,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: Array<std::string::String>,
            pub l6: bool,
            pub l7: f64,
            pub l8: std::string::String,
            pub l9: std::string::String,
            pub l10: std::string::String,
            pub l11: std::string::String,
        }
        impl core::fmt::Display for Dice_ui::Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(std::string::String),
            US46_1(
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
            ),
        }
        impl Dice_ui::US46 {
            pub fn get_IsUS46_0(this_: &MutCell<Dice_ui::US46>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS46_1(this_: &MutCell<Dice_ui::US46>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0,
            US48_1(
                Array<(
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
            ),
        }
        impl Dice_ui::US48 {
            pub fn get_IsUS48_0(this_: &MutCell<Dice_ui::US48>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS48_1(this_: &MutCell<Dice_ui::US48>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(std::string::String),
            US47_1(Dice_ui::US48),
        }
        impl Dice_ui::US47 {
            pub fn get_IsUS47_0(this_: &MutCell<Dice_ui::US47>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS47_1(this_: &MutCell<Dice_ui::US47>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0,
            US50_1(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
        }
        impl Dice_ui::US50 {
            pub fn get_IsUS50_0(this_: &MutCell<Dice_ui::US50>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS50_1(this_: &MutCell<Dice_ui::US50>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(std::string::String),
            US49_1(Dice_ui::US50),
        }
        impl Dice_ui::US49 {
            pub fn get_IsUS49_0(this_: &MutCell<Dice_ui::US49>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS49_1(this_: &MutCell<Dice_ui::US49>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(std::string::String),
            US51_1(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
        }
        impl Dice_ui::US51 {
            pub fn get_IsUS51_0(this_: &MutCell<Dice_ui::US51>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS51_1(this_: &MutCell<Dice_ui::US51>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(std::string::String),
            US52_1(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
        }
        impl Dice_ui::US52 {
            pub fn get_IsUS52_0(this_: &MutCell<Dice_ui::US52>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS52_1(this_: &MutCell<Dice_ui::US52>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut4 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US52>,
        }
        impl core::fmt::Display for Dice_ui::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(std::string::String),
            US53_1(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
        }
        impl Dice_ui::US53 {
            pub fn get_IsUS53_0(this_: &MutCell<Dice_ui::US53>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS53_1(this_: &MutCell<Dice_ui::US53>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US55 {
            US55_0,
            US55_1(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
        }
        impl Dice_ui::US55 {
            pub fn get_IsUS55_0(this_: &MutCell<Dice_ui::US55>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS55_1(this_: &MutCell<Dice_ui::US55>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(std::string::String),
            US54_1(Dice_ui::US55),
        }
        impl Dice_ui::US54 {
            pub fn get_IsUS54_0(this_: &MutCell<Dice_ui::US54>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS54_1(this_: &MutCell<Dice_ui::US54>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US56 {
            US56_0(std::string::String),
            US56_1(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
        }
        impl Dice_ui::US56 {
            pub fn get_IsUS56_0(this_: &MutCell<Dice_ui::US56>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS56_1(this_: &MutCell<Dice_ui::US56>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US58 {
            US58_0,
            US58_1(Array<(bool, string, bool, Dice_ui::US25, string)>),
        }
        impl Dice_ui::US58 {
            pub fn get_IsUS58_0(this_: &MutCell<Dice_ui::US58>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS58_1(this_: &MutCell<Dice_ui::US58>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(std::string::String),
            US57_1(Dice_ui::US58),
        }
        impl Dice_ui::US57 {
            pub fn get_IsUS57_0(this_: &MutCell<Dice_ui::US57>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS57_1(this_: &MutCell<Dice_ui::US57>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(std::string::String),
            US59_1(Option<Array<(bool, string, bool, Dice_ui::US25, string)>>),
        }
        impl Dice_ui::US59 {
            pub fn get_IsUS59_0(this_: &MutCell<Dice_ui::US59>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS59_1(this_: &MutCell<Dice_ui::US59>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Dice_ui::Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0,
            US60_1(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<std::collections::HashMap<std::string::String, std::string::String>>,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                    )>,
                )>,
            ),
        }
        impl Dice_ui::US60 {
            pub fn get_IsUS60_0(this_: &MutCell<Dice_ui::US60>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS60_1(this_: &MutCell<Dice_ui::US60>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(std::string::String),
            US61_1(Dice_ui::US15),
        }
        impl Dice_ui::US61 {
            pub fn get_IsUS61_0(this_: &MutCell<Dice_ui::US61>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS61_1(this_: &MutCell<Dice_ui::US61>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(std::string::String),
            US62_1(Dice_ui::US60),
        }
        impl Dice_ui::US62 {
            pub fn get_IsUS62_0(this_: &MutCell<Dice_ui::US62>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS62_1(this_: &MutCell<Dice_ui::US62>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(std::string::String),
            US63_1(crate::model::near::rpc::RpcResponse),
        }
        impl Dice_ui::US63 {
            pub fn get_IsUS63_0(this_: &MutCell<Dice_ui::US63>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS63_1(this_: &MutCell<Dice_ui::US63>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(std::string::String),
            US64_1(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<std::collections::HashMap<std::string::String, std::string::String>>,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                    )>,
                )>,
            ),
        }
        impl Dice_ui::US64 {
            pub fn get_IsUS64_0(this_: &MutCell<Dice_ui::US64>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS64_1(this_: &MutCell<Dice_ui::US64>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0,
            US65_1(Dice_ui::US62),
        }
        impl Dice_ui::US65 {
            pub fn get_IsUS65_0(this_: &MutCell<Dice_ui::US65>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS65_1(this_: &MutCell<Dice_ui::US65>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(std::string::String),
            US66_1(
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
            ),
        }
        impl Dice_ui::US66 {
            pub fn get_IsUS66_0(this_: &MutCell<Dice_ui::US66>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS66_1(this_: &MutCell<Dice_ui::US66>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0,
            US67_1(
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        }
        impl Dice_ui::US67 {
            pub fn get_IsUS67_0(this_: &MutCell<Dice_ui::US67>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS67_1(this_: &MutCell<Dice_ui::US67>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0,
            US68_1(leptos::Memo<Dice_ui::US34>),
        }
        impl Dice_ui::US68 {
            pub fn get_IsUS68_0(this_: &MutCell<Dice_ui::US68>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS68_1(this_: &MutCell<Dice_ui::US68>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US69 {
            US69_0,
            US69_1(leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>),
        }
        impl Dice_ui::US69 {
            pub fn get_IsUS69_0(this_: &MutCell<Dice_ui::US69>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS69_1(this_: &MutCell<Dice_ui::US69>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US70 {
            US70_0,
            US70_1(Array<(i32, leptos::ReadSignal<std::string::String>)>),
        }
        impl Dice_ui::US70 {
            pub fn get_IsUS70_0(this_: &MutCell<Dice_ui::US70>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS70_1(this_: &MutCell<Dice_ui::US70>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US71 {
            US71_0,
            US71_1(chrono::DateTime<chrono::Utc>),
        }
        impl Dice_ui::US71 {
            pub fn get_IsUS71_0(this_: &MutCell<Dice_ui::US71>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS71_1(this_: &MutCell<Dice_ui::US71>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US71 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US72 {
            US72_0(string),
            US72_1(string),
        }
        impl Dice_ui::US72 {
            pub fn get_IsUS72_0(this_: &MutCell<Dice_ui::US72>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS72_1(this_: &MutCell<Dice_ui::US72>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US72 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US34>,
        }
        impl core::fmt::Display for Dice_ui::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US73 {
            US73_0(std::string::String),
            US73_1(std::string::String),
        }
        impl Dice_ui::US73 {
            pub fn get_IsUS73_0(this_: &MutCell<Dice_ui::US73>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
            pub fn get_IsUS73_1(this_: &MutCell<Dice_ui::US73>, unitArg: ()) -> bool {
                if unreachable!() {
                    true
                } else {
                    false
                }
            }
        }
        impl core::fmt::Display for Dice_ui::US73 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0(v0_1: string) -> string {
            v0_1
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_1(v0_1)
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn method4() -> bool {
            false
        }
        pub fn method5() -> string {
            string("")
        }
        pub fn method6(v0_1: string) -> string {
            v0_1
        }
        pub fn method7(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method8() -> string {
            string("i574n.near")
        }
        pub fn method9() -> string {
            string("luckier.near")
        }
        pub fn method10(
            v0_1: Array<LrcPtr<(bool, std::string::String)>>,
        ) -> Array<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn method11(
            v0_1: Array<LrcPtr<(bool, std::string::String)>>,
        ) -> Array<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn method12(v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            v0_1
        }
        pub fn method13(v0_1: LrcPtr<Dice_ui::Heap1>) -> LrcPtr<Dice_ui::Heap1> {
            v0_1
        }
        pub fn method14(
            v0_1: std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
        ) -> std::collections::HashMap<std::string::String, leptos::RwSignal<bool>> {
            v0_1
        }
        pub fn method17() -> string {
            string("")
        }
        pub fn method18(v0_1: string) -> string {
            v0_1
        }
        pub fn closure6(unitVar: (), unitVar_1: ()) -> Dice_ui::US2 {
            Dice_ui::US2::US2_0
        }
        pub fn method20() -> Func0<Dice_ui::US2> {
            Func0::new(move || Dice_ui::closure6((), ()))
        }
        pub fn method22(v0_1: Func0<Dice_ui::US2>) -> Func0<Dice_ui::US2> {
            v0_1
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Rexie) -> Dice_ui::US3 {
            Dice_ui::US3::US3_1(v0_1)
        }
        pub fn closure8(unitVar: (), v0_1: rexie::Error) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method25(v0_1: Dice_ui::US3) -> Dice_ui::US3 {
            v0_1
        }
        pub fn method24() -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>> {
            let __result = Box::pin(async {
                //;
                {
                    let v1: string =
                    string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                    let v2: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Result<rexie::Rexie, rexie::Error>>>,
                    > = Box::pin(
                        rexie::Rexie::builder("database")
                            .version(1)
                            .add_object_store(rexie::ObjectStore::new("store"))
                            .build(),
                    );
                    let v4: Result<rexie::Rexie, rexie::Error> = v2.await;
                    let v8: Dice_ui::US3 = Dice_ui::method25(match &v4 {
                        Err(v4_1_0) => Dice_ui::closure8((), v4_1_0.clone()),
                        Ok(v4_0_0) => Dice_ui::closure7((), v4_0_0.clone()),
                    });
                    v8
                }
            });
            {
                //;
                __result
            }
        }
        pub fn method26(v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method23() -> std::pin::Pin<Box<dyn std::future::Future<Output = rexie::Rexie>>> {
            let __result = Box::pin(async move {
                //;
                {
                    let v2: string = Dice_ui::method0(string(
                        "state_core.use_database (2) / database create_local_resource",
                    ));
                    leptos::logging::log!("{}", v2);
                    {
                        let v5: string = Dice_ui::method0(string("state_core.build_database ()"));
                        leptos::logging::log!("{}", v5);
                        {
                            let v7: std::pin::Pin<
                                Box<dyn std::future::Future<Output = Dice_ui::US3>>,
                            > = Dice_ui::method24();
                            let v9: Dice_ui::US3 = v7.await;
                            let v15: rexie::Rexie = match &v9 {
                                Dice_ui::US3::US3_1(v9_1_0) => v9_1_0.clone(),
                                Dice_ui::US3::US3_0(v9_0_0) => panic!(
                                    "{}",
                                    sprintf!(
                                        "resultm.get / Result value was Error: {}",
                                        v9_0_0.clone()
                                    ),
                                ),
                            };
                            let v17: string =
                            append(append(string("state_core.use_database (3) / database create_local_resource / result: "),
                                          sprintf!("{:?}", v15.clone())),
                                   string(""));
                            let v23: string = Dice_ui::method0(if length(v17.clone()) <= 200_i32 {
                                v17.clone()
                            } else {
                                append(substring2(v17, 0_i32, 200_i32), string("..."))
                            });
                            leptos::logging::log!("{}", v23);
                            {
                                let v25: rexie::Rexie = Dice_ui::method26(v15);
                                v25
                            }
                        }
                    }
                }
            });
            {
                {
                    {
                        {
                            //;
                            __result
                        }
                    }
                }
            }
        }
        pub fn method27(
            v0_1: std::pin::Pin<Box<dyn std::future::Future<Output = rexie::Rexie>>>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = rexie::Rexie>>> {
            v0_1
        }
        pub fn method21(v0_1: Func0<Dice_ui::US2>) -> leptos::Resource<Dice_ui::US2, rexie::Rexie> {
            let v1 = Dice_ui::method22(v0_1);
            let __result = leptos::create_local_resource(
                move || v1(),
                |x| async move {
                    //;
                    {
                        let v4: Dice_ui::US2 = x;
                        let v6: std::pin::Pin<Box<dyn std::future::Future<Output = rexie::Rexie>>> =
                            Dice_ui::method27(Dice_ui::method23());
                        let v8: rexie::Rexie = v6.await;
                        v8
                    }
                },
            );
            {
                //;
                __result
            }
        }
        pub fn method29(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
        ) -> leptos::Resource<Dice_ui::US2, rexie::Rexie> {
            v0_1
        }
        pub fn closure9(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            unitVar: (),
        ) -> Option<rexie::Rexie> {
            let v1: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method29(v0_1);
            leptos::SignalGet::get(&v1)
        }
        pub fn method28(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
        ) -> Func0<Option<rexie::Rexie>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure9(v0_1.clone(), ())
            })
        }
        pub fn method31(v0_1: Func0<Option<rexie::Rexie>>) -> Func0<Option<rexie::Rexie>> {
            v0_1
        }
        pub fn closure10(unitVar: (), v0_1: rexie::Rexie) -> Dice_ui::US5 {
            Dice_ui::US5::US5_1(v0_1)
        }
        pub fn method34(v0_1: Array<string>) -> Array<string> {
            v0_1
        }
        pub fn closure11(unitVar: (), v0_1: string) -> std::string::String {
            let v2: string = Dice_ui::method6(Dice_ui::method18(v0_1));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            String::from(v4)
        }
        pub fn method35() -> Func1<string, std::string::String> {
            Func1::new(move |v: string| Dice_ui::closure11((), v))
        }
        pub fn method36(v0_1: Array<string>) -> Array<string> {
            v0_1
        }
        pub fn method37(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method38(v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn closure12(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method39() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure12((), v))
        }
        pub fn method40(
            v0_1: Result<rexie::Transaction, rexie::Error>,
        ) -> Result<rexie::Transaction, rexie::Error> {
            v0_1
        }
        pub fn method41() -> string {
            string("store")
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method42() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn method43(
            v0_1: Result<rexie::Store, rexie::Error>,
        ) -> Result<rexie::Store, rexie::Error> {
            v0_1
        }
        pub fn method44() -> string {
            string("core-state-heap")
        }
        pub fn closure14(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method45() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure14((), v))
        }
        pub fn method46(
            v0_1: Result<wasm_bindgen::JsValue, rexie::Error>,
        ) -> Result<wasm_bindgen::JsValue, rexie::Error> {
            v0_1
        }
        pub fn method47(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure15(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method48() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure15((), v))
        }
        pub fn method49(
            v0_1: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error>,
        ) -> Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> {
            v0_1
        }
        pub fn closure16(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US7 {
            Dice_ui::US7::US7_1(v0_1)
        }
        pub fn method50(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method51() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure17((), v))
        }
        pub fn method52(
            v0_1: Result<Vec<u8>, serde_json::Error>,
        ) -> Result<Vec<u8>, serde_json::Error> {
            v0_1
        }
        pub fn method53(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method54(v0_1: Array<u8>) -> Array<u8> {
            v0_1
        }
        pub fn closure18(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method55() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure18((), v))
        }
        pub fn method56(
            v0_1: Result<Option<LrcPtr<Dice_ui::Heap3>>, borsh::io::Error>,
        ) -> Result<Option<LrcPtr<Dice_ui::Heap3>>, borsh::io::Error> {
            v0_1
        }
        pub fn method57(
            v0_1: Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String>,
        ) -> Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String> {
            v0_1
        }
        pub fn method33(
            v0_1: rexie::Rexie,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async {
                //;
                {
                    let v4: Array<string> = Dice_ui::method34(new_array(&[string("store")]));
                    let v5 = Dice_ui::method35();
                    let v6: Array<string> = Dice_ui::method36(v4);
                    let v8: Vec<string> = v6.to_vec();
                    let v11: Vec<std::string::String> =
                        Dice_ui::method37(v8.iter().map(|x| v5(x.clone())).collect());
                    let v13: Array<std::string::String> =
                        fable_library_rust::NativeArray_::array_from(v11);
                    let v14: rexie::Rexie = Dice_ui::method38(v0_1);
                    let v16: Result<rexie::Transaction, rexie::Error> =
                        v14.transaction(&v13, rexie::TransactionMode::ReadOnly);
                    let v17 = Dice_ui::method39();
                    let v18: Result<rexie::Transaction, rexie::Error> = Dice_ui::method40(v16);
                    let v20: Result<rexie::Transaction, std::string::String> =
                        v18.map_err(|x| v17(x));
                    let v22: rexie::Transaction = v20?;
                    let v23: string = Dice_ui::method41();
                    let v25: &str = fable_library_rust::String_::LrcStr::as_str(&v23);
                    let v27: Result<rexie::Store, rexie::Error> = v22.store(v25);
                    let v28 = Dice_ui::method42();
                    let v29: Result<rexie::Store, rexie::Error> = Dice_ui::method43(v27);
                    let v31: Result<rexie::Store, std::string::String> = v29.map_err(|x| v28(x));
                    let v33: rexie::Store = v31?;
                    let v34: string = Dice_ui::method44();
                    let v36: &str = fable_library_rust::String_::LrcStr::as_str(&v34);
                    let v38: wasm_bindgen::JsValue = wasm_bindgen::JsValue::from_str(v36);
                    let v40: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<wasm_bindgen::JsValue, rexie::Error>,
                            >,
                        >,
                    > = Box::pin(rexie::Store::get(&v33, &v38));
                    let v42: Result<wasm_bindgen::JsValue, rexie::Error> = v40.await;
                    let v43 = Dice_ui::method45();
                    let v44: Result<wasm_bindgen::JsValue, rexie::Error> = Dice_ui::method46(v42);
                    let v46: Result<wasm_bindgen::JsValue, std::string::String> =
                        v44.map_err(|x| v43(x));
                    let v49: wasm_bindgen::JsValue = Dice_ui::method47(v46?);
                    let v51: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                        serde_wasm_bindgen::from_value(v49);
                    let v52 = Dice_ui::method48();
                    let v53: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                        Dice_ui::method49(v51);
                    let v55: Result<Option<serde_json::Value>, std::string::String> =
                        v53.map_err(|x| v52(x));
                    let v60: Dice_ui::US7 = defaultValue(
                        Dice_ui::US7::US7_0,
                        map(
                            Func1::new(move |v: serde_json::Value| Dice_ui::closure16((), v)),
                            v55?,
                        ),
                    );
                    let v95: Dice_ui::US6 = match &v60 {
                        Dice_ui::US7::US7_1(v60_1_0) => {
                            let v62: serde_json::Value = Dice_ui::method50(v60_1_0.clone());
                            let v64: Result<Vec<u8>, serde_json::Error> =
                                serde_json::from_value(v62);
                            let v65 = Dice_ui::method51();
                            let v66: Result<Vec<u8>, serde_json::Error> = Dice_ui::method52(v64);
                            let v68: Result<Vec<u8>, std::string::String> = v66.map_err(|x| v65(x));
                            let v71: Vec<u8> = Dice_ui::method53(v68?);
                            let v73: Array<u8> = fable_library_rust::NativeArray_::array_from(v71);
                            let v76: string = Dice_ui::method0(append(
                                append(
                                    string("state_core.get_data () / data_len: "),
                                    toString(count(v73.clone())),
                                ),
                                string(""),
                            ));
                            leptos::logging::log!("{}", v76);
                            {
                                let v78: Array<u8> = Dice_ui::method54(v73);
                                let v80: Vec<u8> = v78.to_vec();
                                let v82: &[u8] = v80.as_slice();
                                let mut v82 = v82;
                                {
                                    let v85: Result<
                                        Option<LrcPtr<Dice_ui::Heap3>>,
                                        borsh::io::Error,
                                    > = borsh::BorshDeserialize::deserialize(&mut v82);
                                    let v86 = Dice_ui::method55();
                                    let v87: Result<
                                        Option<LrcPtr<Dice_ui::Heap3>>,
                                        borsh::io::Error,
                                    > = Dice_ui::method56(v85);
                                    let v89: Result<
                                        Option<LrcPtr<Dice_ui::Heap3>>,
                                        std::string::String,
                                    > = v87.map_err(|x| v86(x));
                                    Dice_ui::US6::US6_1(v89?)
                                }
                            }
                        }
                        _ => Dice_ui::US6::US6_0,
                    };
                    let v102: Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String> =
                        Dice_ui::method57(Ok::<
                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                            std::string::String,
                        >(match &v95 {
                            Dice_ui::US6::US6_1(v95_1_0) => Some(v95_1_0.clone()),
                            _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                        }));
                    v102
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure19(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US8 {
            Dice_ui::US8::US8_1(v0_1)
        }
        pub fn closure20(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn closure21(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US6 {
            Dice_ui::US6::US6_1(v0_1)
        }
        pub fn closure22(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US4 {
            Dice_ui::US4::US4_1(v0_1)
        }
        pub fn method58(v0_1: Dice_ui::US4) -> Dice_ui::US4 {
            v0_1
        }
        pub fn method32(
            v0_1: Option<rexie::Rexie>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US4>>> {
            let __result = Box::pin(async {
                //;
                {
                    let v4: string =
                    Dice_ui::method0(append(append(string("state_core.use_core_database (2) / core_state_heap create_local_resource / database: "),
                                                   sprintf!("{:?}",
                                                            v0_1.clone())),
                                            string("")));
                    leptos::logging::log!("{}", v4);
                    {
                        let v8: Dice_ui::US5 = defaultValue(
                            Dice_ui::US5::US5_0,
                            map(
                                Func1::new(move |v: rexie::Rexie| Dice_ui::closure10((), v)),
                                v0_1,
                            ),
                        );
                        let v33: Dice_ui::US6 = match &v8 {
                            Dice_ui::US5::US5_1(v8_1_0) => {
                                let v12: string = Dice_ui::method0(string(
                                    "state_core.get_data () / id: core-state-heap",
                                ));
                                leptos::logging::log!("{}", v12);
                                {
                                    let v14: std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    > = Dice_ui::method33(v8_1_0.clone());
                                    let v16: Result<
                                        Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                        std::string::String,
                                    > = v14.await;
                                    let v19: Dice_ui::US8 = match &v16 {
                                        Err(v16_1_0) => Dice_ui::closure20((), v16_1_0.clone()),
                                        Ok(v16_0_0) => Dice_ui::closure19((), v16_0_0.clone()),
                                    };
                                    match &v19 {
                                        Dice_ui::US8::US8_1(v19_1_0) => defaultValue(
                                            Dice_ui::US6::US6_0,
                                            map(
                                                Func1::new(
                                                    move |v_3: Option<LrcPtr<Dice_ui::Heap3>>| {
                                                        Dice_ui::closure21((), v_3)
                                                    },
                                                ),
                                                v19_1_0.clone(),
                                            ),
                                        ),
                                        Dice_ui::US8::US8_0(v19_0_0) => {
                                            let v26: string =
                                                Dice_ui::method0(append(append(string("state_core.use_core_database (3) / error: "),
                                                                               toString(v19_0_0.clone())),
                                                                        string("")));
                                            leptos::logging::log!("{}", v26);
                                            Dice_ui::US6::US6_0
                                        }
                                    }
                                }
                            }
                            _ => Dice_ui::US6::US6_0,
                        };
                        let v41: Dice_ui::US9 = match &v33 {
                            Dice_ui::US6::US6_1(v33_1_0) => Dice_ui::US9::US9_1(defaultValue(
                                Dice_ui::US4::US4_0,
                                map(
                                    Func1::new(move |v_4: LrcPtr<Dice_ui::Heap3>| {
                                        Dice_ui::closure22((), v_4)
                                    }),
                                    v33_1_0.clone(),
                                ),
                            )),
                            _ => Dice_ui::US9::US9_0,
                        };
                        let v49: Dice_ui::US4 =
                            Dice_ui::method58(if let Dice_ui::US9::US9_1(v41_1_0) = &v41 {
                                let v42: Dice_ui::US4 = match &v41 {
                                    Dice_ui::US9::US9_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US4::US4_1(v42_1_0) = &v42 {
                                    Dice_ui::US4::US4_1(match &v42 {
                                        Dice_ui::US4::US4_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US4::US4_0
                                }
                            } else {
                                Dice_ui::US4::US4_0
                            });
                        v49
                    }
                }
            });
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn method59(
            v0_1: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US4>>>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US4>>> {
            v0_1
        }
        pub fn method30(
            v0_1: Func0<Option<rexie::Rexie>>,
        ) -> leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4> {
            let v1 = Dice_ui::method31(v0_1);
            let __result = leptos::create_local_resource(
                move || v1(),
                |x| async move {
                    //;
                    {
                        let v6: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US4>>> =
                            Dice_ui::method59(Dice_ui::method32(x));
                        let v8: Dice_ui::US4 = v6.await;
                        v8
                    }
                },
            );
            {
                //;
                __result
            }
        }
        pub fn method61() -> web_sys::Window {
            leptos::leptos_dom::window()
        }
        pub fn method63(v0_1: web_sys::Window) -> web_sys::Window {
            v0_1
        }
        pub fn method62(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            let v1: web_sys::Window = Dice_ui::method63(v0_1);
            v1.local_storage()
        }
        pub fn closure24(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US10 {
            Dice_ui::US10::US10_1(v0_1)
        }
        pub fn closure25(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US10 {
            Dice_ui::US10::US10_0(v0_1)
        }
        pub fn closure26(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US12 {
            Dice_ui::US12::US12_1(v0_1)
        }
        pub fn method64(
            v0_1: leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4>,
        ) -> leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4> {
            v0_1
        }
        pub fn closure27(unitVar: (), v0_1: Dice_ui::US4) -> Dice_ui::US9 {
            Dice_ui::US9::US9_1(v0_1)
        }
        pub fn method65(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn closure28(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US13 {
            Dice_ui::US13::US13_1(v0_1)
        }
        pub fn closure29(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US13 {
            Dice_ui::US13::US13_0(v0_1)
        }
        pub fn method66(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure30(unitVar: (), v0_1: std::string::String) -> Dice_ui::US15 {
            Dice_ui::US15::US15_1(v0_1)
        }
        pub fn method67(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn method69(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method70(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure32(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method71() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure32((), v))
        }
        pub fn method72(
            v0_1: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error>,
        ) -> Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> {
            v0_1
        }
        pub fn closure31(unitVar: (), v0_1: std::string::String) -> Dice_ui::US4 {
            let v2: std::string::String = Dice_ui::method70(Dice_ui::method69(v0_1));
            let v5: string = Dice_ui::method6(fable_library_rust::String_::fromString(v2));
            let v7: &str = fable_library_rust::String_::LrcStr::as_str(&v5);
            let v9: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v7);
            let v10 = Dice_ui::method71();
            let v11: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = Dice_ui::method72(v9);
            let v13: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v11.map_err(|x| v10(x));
            defaultValue(
                Dice_ui::US4::US4_0,
                map(
                    Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure22((), v)),
                    v13.ok(),
                ),
            )
        }
        pub fn method68() -> Func1<std::string::String, Dice_ui::US4> {
            Func1::new(move |v: std::string::String| Dice_ui::closure31((), v))
        }
        pub fn method74(
            v0_1: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>>,
        ) -> leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> {
            v0_1
        }
        pub fn closure34(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v3: string =
                Dice_ui::method0(string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            leptos::logging::log!("{}", v3);
            v0_1.l0
        }
        pub fn method75(v0_1: LrcPtr<Dice_ui::Heap3>) -> Func1<bool, bool> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: bool| Dice_ui::closure34(v0_1.clone(), v)
            })
        }
        pub fn method76(v0_1: leptos::RwSignal<bool>) -> leptos::RwSignal<bool> {
            v0_1
        }
        pub fn closure35(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v3: string = Dice_ui::method0(string(
                "state_core.use_core_database (8) / effect core_state_heap / debug signal_update",
            ));
            leptos::logging::log!("{}", v3);
            v0_1.l2
        }
        pub fn method77(v0_1: LrcPtr<Dice_ui::Heap3>) -> Func1<bool, bool> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: bool| Dice_ui::closure35(v0_1.clone(), v)
            })
        }
        pub fn closure36(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v3: string =
                Dice_ui::method0(string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            leptos::logging::log!("{}", v3);
            v0_1.l3.clone()
        }
        pub fn method78(
            v0_1: LrcPtr<Dice_ui::Heap3>,
        ) -> Func1<std::string::String, std::string::String> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure36(v0_1.clone(), v)
            })
        }
        pub fn method79(
            v0_1: leptos::RwSignal<std::string::String>,
        ) -> leptos::RwSignal<std::string::String> {
            v0_1
        }
        pub fn closure37(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v3: string = Dice_ui::method0(string(
                "state_core.use_core_database (10) / effect core_state_heap / data signal_update",
            ));
            leptos::logging::log!("{}", v3);
            v0_1.l1.clone()
        }
        pub fn method80(
            v0_1: LrcPtr<Dice_ui::Heap3>,
        ) -> Func1<LrcPtr<Dice_ui::Heap0>, LrcPtr<Dice_ui::Heap0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure37(v0_1.clone(), v)
            })
        }
        pub fn method81(
            v0_1: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>>,
        ) -> leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> {
            v0_1
        }
        pub fn closure33(v0_1: LrcPtr<Dice_ui::Heap2>, v1: LrcPtr<Dice_ui::Heap3>, unitVar: ()) {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v2.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3);
            let v7 = Dice_ui::method75(v1.clone());
            let v8: leptos::RwSignal<bool> = Dice_ui::method76(v5.l0.clone());
            leptos::SignalUpdate::update(&v8, |x| *x = v7(x.clone()));
            {
                let v10: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v2.clone());
                let v12: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v10);
                let v14 = Dice_ui::method77(v1.clone());
                let v15: leptos::RwSignal<bool> = Dice_ui::method76(v12.l2.clone());
                leptos::SignalUpdate::update(&v15, |x| *x = v14(x.clone()));
                {
                    let v17: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> =
                        Dice_ui::method74(v2.clone());
                    let v19: LrcPtr<Dice_ui::Heap1> =
                        leptos::SignalGetUntracked::get_untracked(&v17);
                    let v21 = Dice_ui::method78(v1.clone());
                    let v22: leptos::RwSignal<std::string::String> =
                        Dice_ui::method79(v19.l3.clone());
                    leptos::SignalUpdate::update(&v22, |x| *x = v21(x.clone()));
                    {
                        let v24: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v2);
                        let v26: LrcPtr<Dice_ui::Heap1> =
                            leptos::SignalGetUntracked::get_untracked(&v24);
                        let v28 = Dice_ui::method80(v1);
                        let v29: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                            Dice_ui::method81(v26.l1.clone());
                        leptos::SignalUpdate::update(&v29, |x| *x = v28(x.clone()));
                        ()
                    }
                }
            }
        }
        pub fn method73(v0_1: LrcPtr<Dice_ui::Heap2>, v1: LrcPtr<Dice_ui::Heap3>) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure33(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method82(v0_1: Func0<()>) -> Func0<()> {
            v0_1
        }
        pub fn closure23(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4>,
            unitVar: (),
        ) {
            let v3: string = Dice_ui::method0(string(
                "state_core.use_core_database (4) / effect core_state_heap / ##1",
            ));
            leptos::logging::log!("{}", v3);
            {
                let v6: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method62(Dice_ui::method61());
                let v9: Dice_ui::US10 = match &v6 {
                    Err(v6_1_0) => Dice_ui::closure25((), v6_1_0.clone()),
                    Ok(v6_0_0) => Dice_ui::closure24((), v6_0_0.clone()),
                };
                let v18: Dice_ui::US11 = match &v9 {
                    Dice_ui::US10::US10_1(v9_1_0) => Dice_ui::US11::US11_1(defaultValue(
                        Dice_ui::US12::US12_0,
                        map(
                            Func1::new(move |v_2: web_sys::Storage| Dice_ui::closure26((), v_2)),
                            v9_1_0.clone(),
                        ),
                    )),
                    Dice_ui::US10::US10_0(v9_0_0) => Dice_ui::US11::US11_0(v9_0_0.clone()),
                };
                if let Dice_ui::US11::US11_1(v18_1_0) = &v18 {
                    let v19: Dice_ui::US12 = match &v18 {
                        Dice_ui::US11::US11_1(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US12::US12_1(v19_1_0) = &v19 {
                        let v20: web_sys::Storage = match &v19 {
                            Dice_ui::US12::US12_1(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v21: leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4> =
                            Dice_ui::method64(v1);
                        let v24 = Func1::new(move |v_3: Dice_ui::US4| Dice_ui::closure27((), v_3));
                        let v26: Dice_ui::US9 = defaultValue(
                            Dice_ui::US9::US9_0,
                            map(v24.clone(), leptos::SignalGet::get(&v21)),
                        );
                        let v29: string =
                            Dice_ui::method0(append(append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                                           sprintf!("{:?}",
                                                                    v26.clone())),
                                                    string("")));
                        leptos::logging::log!("{}", v29);
                        {
                            let v139: Dice_ui::US4 = if let Dice_ui::US9::US9_1(v26_1_0) = &v26 {
                                let v31: Dice_ui::US4 = match &v26 {
                                    Dice_ui::US9::US9_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US4::US4_1(v31_1_0) = &v31 {
                                    Dice_ui::US4::US4_1(match &v31 {
                                        Dice_ui::US4::US4_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    let v34: web_sys::Storage = Dice_ui::method65(v20.clone());
                                    let v35: string = Dice_ui::method44();
                                    let v37: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v35);
                                    let v39: Result<
                                        Option<std::string::String>,
                                        wasm_bindgen::JsValue,
                                    > = web_sys::Storage::get_item(&v34, v37);
                                    let v42: Dice_ui::US13 = match &v39 {
                                        Err(v39_1_0) => Dice_ui::closure29((), v39_1_0.clone()),
                                        Ok(v39_0_0) => Dice_ui::closure28((), v39_0_0.clone()),
                                    };
                                    let v54: Dice_ui::US14 = match &v42 {
                                        Dice_ui::US13::US13_1(v42_1_0) => {
                                            let v44: Option<std::string::String> =
                                                Dice_ui::method66(v42_1_0.clone());
                                            Dice_ui::US14::US14_1(defaultValue(
                                                Dice_ui::US15::US15_0,
                                                map(
                                                    Func1::new(move |v_6: std::string::String| {
                                                        Dice_ui::closure30((), v_6)
                                                    }),
                                                    serde_json::from_value(v44.into()).unwrap(),
                                                ),
                                            ))
                                        }
                                        Dice_ui::US13::US13_0(v42_0_0) => {
                                            Dice_ui::US14::US14_0(v42_0_0.clone())
                                        }
                                    };
                                    let v60: Dice_ui::US16 = match &v54 {
                                        Dice_ui::US14::US14_1(v54_1_0) => {
                                            Dice_ui::US16::US16_1(v54_1_0.clone())
                                        }
                                        _ => Dice_ui::US16::US16_0,
                                    };
                                    let v67: Dice_ui::US15 =
                                        if let Dice_ui::US16::US16_1(v60_1_0) = &v60 {
                                            let v61: Dice_ui::US15 = match &v60 {
                                                Dice_ui::US16::US16_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            };
                                            if let Dice_ui::US15::US15_1(v61_1_0) = &v61 {
                                                Dice_ui::US15::US15_1(match &v61 {
                                                    Dice_ui::US15::US15_1(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            } else {
                                                Dice_ui::US15::US15_0
                                            }
                                        } else {
                                            Dice_ui::US15::US15_0
                                        };
                                    let v73: Option<std::string::String> =
                                        Dice_ui::method67(match &v67 {
                                            Dice_ui::US15::US15_1(v67_1_0) => Some(v67_1_0.clone()),
                                            _ => None::<std::string::String>,
                                        });
                                    let v74 = Dice_ui::method68();
                                    let v78: Dice_ui::US9 = defaultValue(
                                        Dice_ui::US9::US9_0,
                                        map(v24.clone(), v73.map(|x| v74(x))),
                                    );
                                    if let Dice_ui::US9::US9_1(v78_1_0) = &v78 {
                                        let v79: Dice_ui::US4 = match &v78 {
                                            Dice_ui::US9::US9_1(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if let Dice_ui::US4::US4_1(v79_1_0) = &v79 {
                                            Dice_ui::US4::US4_1(match &v79 {
                                                Dice_ui::US4::US4_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        } else {
                                            Dice_ui::US4::US4_0
                                        }
                                    } else {
                                        Dice_ui::US4::US4_0
                                    }
                                }
                            } else {
                                let v87: web_sys::Storage = Dice_ui::method65(v20);
                                let v88: string = Dice_ui::method44();
                                let v90: &str = fable_library_rust::String_::LrcStr::as_str(&v88);
                                let v92: Result<
                                    Option<std::string::String>,
                                    wasm_bindgen::JsValue,
                                > = web_sys::Storage::get_item(&v87, v90);
                                let v95: Dice_ui::US13 = match &v92 {
                                    Err(v92_1_0) => Dice_ui::closure29((), v92_1_0.clone()),
                                    Ok(v92_0_0) => Dice_ui::closure28((), v92_0_0.clone()),
                                };
                                let v107: Dice_ui::US14 = match &v95 {
                                    Dice_ui::US13::US13_1(v95_1_0) => {
                                        let v97: Option<std::string::String> =
                                            Dice_ui::method66(v95_1_0.clone());
                                        Dice_ui::US14::US14_1(defaultValue(
                                            Dice_ui::US15::US15_0,
                                            map(
                                                Func1::new(move |v_9: std::string::String| {
                                                    Dice_ui::closure30((), v_9)
                                                }),
                                                serde_json::from_value(v97.into()).unwrap(),
                                            ),
                                        ))
                                    }
                                    Dice_ui::US13::US13_0(v95_0_0) => {
                                        Dice_ui::US14::US14_0(v95_0_0.clone())
                                    }
                                };
                                let v113: Dice_ui::US16 = match &v107 {
                                    Dice_ui::US14::US14_1(v107_1_0) => {
                                        Dice_ui::US16::US16_1(v107_1_0.clone())
                                    }
                                    _ => Dice_ui::US16::US16_0,
                                };
                                let v120: Dice_ui::US15 =
                                    if let Dice_ui::US16::US16_1(v113_1_0) = &v113 {
                                        let v114: Dice_ui::US15 = match &v113 {
                                            Dice_ui::US16::US16_1(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if let Dice_ui::US15::US15_1(v114_1_0) = &v114 {
                                            Dice_ui::US15::US15_1(match &v114 {
                                                Dice_ui::US15::US15_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        } else {
                                            Dice_ui::US15::US15_0
                                        }
                                    } else {
                                        Dice_ui::US15::US15_0
                                    };
                                let v126: Option<std::string::String> =
                                    Dice_ui::method67(match &v120 {
                                        Dice_ui::US15::US15_1(v120_1_0) => Some(v120_1_0.clone()),
                                        _ => None::<std::string::String>,
                                    });
                                let v127 = Dice_ui::method68();
                                let v131: Dice_ui::US9 = defaultValue(
                                    Dice_ui::US9::US9_0,
                                    map(v24, v126.map(|x| v127(x))),
                                );
                                if let Dice_ui::US9::US9_1(v131_1_0) = &v131 {
                                    let v132: Dice_ui::US4 = match &v131 {
                                        Dice_ui::US9::US9_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US4::US4_1(v132_1_0) = &v132 {
                                        Dice_ui::US4::US4_1(match &v132 {
                                            Dice_ui::US4::US4_1(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    } else {
                                        Dice_ui::US4::US4_0
                                    }
                                } else {
                                    Dice_ui::US4::US4_0
                                }
                            };
                            let v142: string =
                                Dice_ui::method0(append(append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                                               sprintf!("{:?}",
                                                                        v139.clone())),
                                                        string("")));
                            leptos::logging::log!("{}", v142);
                            if let Dice_ui::US4::US4_1(v139_1_0) = &v139 {
                                let v145 = Dice_ui::method73(
                                    v0_1,
                                    match &v139 {
                                        Dice_ui::US4::US4_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                );
                                let v148: Func0<()> = Dice_ui::method82(Func0::new(move || v145()));
                                leptos::batch(move || v148());
                                ()
                            }
                        }
                    }
                }
            }
        }
        pub fn method60(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Resource<Option<rexie::Rexie>, Dice_ui::US4>,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure23(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method84(
            v0_1: leptos::RwSignal<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
        ) -> leptos::RwSignal<std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>>
        {
            v0_1
        }
        pub fn closure38(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::RwSignal<bool>> {
            let v2: string = Dice_ui::method0(string(
                "state_core.use_core_database (11) / loading create_memo",
            ));
            leptos::logging::log!("{}", v2);
            {
                let v5: leptos::RwSignal<
                    std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
                > = Dice_ui::method84(v0_1.l1.clone());
                leptos::SignalGetUntracked::get_untracked(&v5)
            }
        }
        pub fn method83(
            v0_1: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure38(v0_1.clone(), ())
            })
        }
        pub fn method85() -> bool {
            false
        }
        pub fn method88(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn method90(v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method91(v0_1: Result<(), rexie::Error>) -> Result<(), rexie::Error> {
            v0_1
        }
        pub fn method89(
            v0_1: rexie::Rexie,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>>
        {
            let __result = Box::pin(async move {
                //;
                {
                    let v3: rexie::Rexie = Dice_ui::method90(v0_1);
                    let v5: rexie::Transaction =
                        v3.transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                    let v7: rexie::Store = v5.store("store")?;
                    let mut data = Vec::new();
                    borsh::BorshSerialize::serialize(&v1, &mut data).unwrap();
                    {
                        let v11: Vec<u8> = data;
                        let v13: wasm_bindgen::JsValue =
                            serde_wasm_bindgen::to_value(&v11).unwrap();
                        let v14: string = Dice_ui::method44();
                        let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
                        v7.put(&v13, Some(&v16.into())).await?;
                        v5.done().await?;
                        {
                            let v20: Result<(), rexie::Error> =
                                Dice_ui::method91(Ok::<(), rexie::Error>(()));
                            v20
                        }
                    }
                }
            });
            {
                {
                    {
                        //;
                        __result
                    }
                }
            }
        }
        pub fn closure40(unitVar: (), unitVar_1: ()) -> Dice_ui::US17 {
            Dice_ui::US17::US17_1
        }
        pub fn closure41(unitVar: (), v0_1: rexie::Error) -> Dice_ui::US17 {
            Dice_ui::US17::US17_0(v0_1)
        }
        pub fn method92() {
            ();
        }
        pub fn method87(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: string,
            v2: Dice_ui::US5,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let __result = Box::pin(async move {
                //;
                match &v2 {
                    Dice_ui::US5::US5_1(v2_1_0) => {
                        let v6: string =
                        Dice_ui::method0(append(append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                                       v1), string("")));
                        leptos::logging::log!("{}", v6);
                        {
                            let v11: string = Dice_ui::method0(append(
                                append(
                                    string("state_core.set_data () / data_len: "),
                                    toString(length(sprintf!("{:?}", v0_1.clone())) as i64),
                                ),
                                string(""),
                            ));
                            leptos::logging::log!("{}", v11);
                            {
                                let v14: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = Dice_ui::method89(
                                    v2_1_0.clone(),
                                    Dice_ui::method88(v0_1.clone()),
                                );
                                let v16: Result<(), rexie::Error> = v14.await;
                                let v19: Dice_ui::US17 = match &v16 {
                                    Err(v16_1_0) => Dice_ui::closure41((), v16_1_0.clone()),
                                    _ => Dice_ui::closure40((), ()),
                                };
                                match &v19 {
                                    Dice_ui::US17::US17_1 => (),
                                    Dice_ui::US17::US17_0(v19_0_0) => panic!(
                                        "{}",
                                        sprintf!(
                                            "resultm.get / Result value was Error: {}",
                                            v19_0_0.clone()
                                        ),
                                    ),
                                }
                            }
                        }
                    }
                    _ => {
                        let v23: string =
                        Dice_ui::method0(string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                        leptos::logging::log!("{}", v23);
                        ()
                    }
                }
                Dice_ui::method92();
                ()
            });
            __result
        }
        pub fn closure39(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: string = sprintf!("{:?}", v1.clone());
            let v3: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method29(v0_1);
            Dice_ui::method87(
                v1,
                v2,
                defaultValue(
                    Dice_ui::US5::US5_0,
                    map(
                        Func1::new(move |v: rexie::Rexie| Dice_ui::closure10((), v)),
                        leptos::SignalGet::get(&v3),
                    ),
                ),
            )
        }
        pub fn method86(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
        ) -> Func1<LrcPtr<Dice_ui::Heap3>, std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure39(v0_1.clone(), v)
            })
        }
        pub fn method94(v0_1: leptos::ReadSignal<bool>) -> leptos::ReadSignal<bool> {
            v0_1
        }
        pub fn method95(v0_1: leptos::RwSignal<bool>) -> leptos::RwSignal<bool> {
            v0_1
        }
        pub fn method96(
            v0_1: leptos::RwSignal<std::string::String>,
        ) -> leptos::RwSignal<std::string::String> {
            v0_1
        }
        pub fn method97(
            v0_1: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>>,
        ) -> leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> {
            v0_1
        }
        pub fn method98(
            v0_1: leptos::Memo<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
        ) -> leptos::Memo<std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>>
        {
            v0_1
        }
        pub fn method99() -> string {
            string("dark_mode_key")
        }
        pub fn method100(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure43(unitVar: (), v0_1: leptos::RwSignal<bool>) -> Dice_ui::US18 {
            Dice_ui::US18::US18_1(v0_1)
        }
        pub fn closure44(unitVar: (), v0_1: bool) -> bool {
            let v2: string =
                Dice_ui::method0(string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            leptos::logging::log!("{}", v2);
            true
        }
        pub fn method101() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure44((), v))
        }
        pub fn method102(v0_1: leptos::WriteSignal<bool>) -> leptos::WriteSignal<bool> {
            v0_1
        }
        pub fn method103(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn method104(
            v0_1: leptos::Action<LrcPtr<Dice_ui::Heap3>, ()>,
        ) -> leptos::Action<LrcPtr<Dice_ui::Heap3>, ()> {
            v0_1
        }
        pub fn method105(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method106(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn method107(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure42(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
            v2: leptos::WriteSignal<bool>,
            v3: leptos::ReadSignal<bool>,
            v4: leptos::Action<LrcPtr<Dice_ui::Heap3>, ()>,
            unitVar: (),
        ) {
            let v5: leptos::ReadSignal<bool> = Dice_ui::method94(v3);
            let v7: bool = leptos::SignalGet::get(&v5);
            let v9: string =
                Dice_ui::method0(append(append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                                               ofBoolean(v7)), string("")));
            leptos::logging::log!("{}", v9);
            {
                let v11: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
                let v12: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v11.clone());
                let v16: leptos::RwSignal<bool> =
                    Dice_ui::method95((leptos::SignalGetUntracked::get_untracked(&v12)).l0.clone());
                let v18: bool = leptos::SignalGet::get(&v16);
                let v19: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v11.clone());
                let v23: leptos::RwSignal<bool> =
                    Dice_ui::method95((leptos::SignalGetUntracked::get_untracked(&v19)).l2.clone());
                let v25: bool = leptos::SignalGet::get(&v23);
                let v26: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v11.clone());
                let v30: leptos::RwSignal<std::string::String> =
                    Dice_ui::method96((leptos::SignalGetUntracked::get_untracked(&v26)).l3.clone());
                let v32: std::string::String = leptos::SignalGet::get(&v30);
                let v33: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v11);
                let v37: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                    Dice_ui::method97((leptos::SignalGetUntracked::get_untracked(&v33)).l1.clone());
                let v40: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                    l0: v18,
                    l1: leptos::SignalGet::get(&v37),
                    l2: v25,
                    l3: v32,
                });
                let v43: string =
                    Dice_ui::method0(append(append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                                                   sprintf!("{:?}",
                                                            v40.clone())),
                                            string("")));
                leptos::logging::log!("{}", v43);
                {
                    let v45: leptos::Memo<
                        std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
                    > = Dice_ui::method98(v1);
                    let v47: std::collections::HashMap<
                        std::string::String,
                        leptos::RwSignal<bool>,
                    > = v45();
                    let v49: string = Dice_ui::method6(Dice_ui::method99());
                    let v51: &str = fable_library_rust::String_::LrcStr::as_str(&v49);
                    let v54: std::string::String = Dice_ui::method100(String::from(v51));
                    let v59: Dice_ui::US18 = defaultValue(
                        Dice_ui::US18::US18_0,
                        map(
                            Func1::new(move |v: leptos::RwSignal<bool>| Dice_ui::closure43((), v)),
                            std::collections::HashMap::get(&v47, &v54)
                                .map(|x| x)
                                .cloned(),
                        ),
                    );
                    let v67: Dice_ui::US19 = match &v59 {
                        Dice_ui::US18::US18_1(v59_1_0) => {
                            let v61: leptos::RwSignal<bool> = Dice_ui::method95(v59_1_0.clone());
                            Dice_ui::US19::US19_1(leptos::SignalGet::get(&v61))
                        }
                        _ => Dice_ui::US19::US19_0,
                    };
                    let v70: bool = match &v67 {
                        Dice_ui::US19::US19_1(v67_1_0) => v67_1_0.clone(),
                        _ => false,
                    };
                    let v72: string =
                        Dice_ui::method0(append(append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                                                       ofBoolean(v70)),
                                                string("")));
                    leptos::logging::log!("{}", v72);
                    if v70 == false {
                        if v7 == false {
                            let v76 = Dice_ui::method101();
                            let v77: leptos::WriteSignal<bool> = Dice_ui::method102(v2);
                            leptos::SignalUpdate::update(&v77, |x| *x = v76(x.clone()));
                            ()
                        } else {
                            let v80: string =
                                Dice_ui::method0(string("state_core.use_core_database (18) / effect new_core_state_heap / ##4"));
                            leptos::logging::log!("{}", v80);
                            {
                                let v83: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                                    Dice_ui::method62(Dice_ui::method61());
                                let v86: Dice_ui::US10 = match &v83 {
                                    Err(v83_1_0) => Dice_ui::closure25((), v83_1_0.clone()),
                                    Ok(v83_0_0) => Dice_ui::closure24((), v83_0_0.clone()),
                                };
                                let v95: Dice_ui::US11 = match &v86 {
                                    Dice_ui::US10::US10_1(v86_1_0) => {
                                        Dice_ui::US11::US11_1(defaultValue(
                                            Dice_ui::US12::US12_0,
                                            map(
                                                Func1::new(move |v_3: web_sys::Storage| {
                                                    Dice_ui::closure26((), v_3)
                                                }),
                                                v86_1_0.clone(),
                                            ),
                                        ))
                                    }
                                    Dice_ui::US10::US10_0(v86_0_0) => {
                                        Dice_ui::US11::US11_0(v86_0_0.clone())
                                    }
                                };
                                if let Dice_ui::US11::US11_1(v95_1_0) = &v95 {
                                    let v96: Dice_ui::US12 = match &v95 {
                                        Dice_ui::US11::US11_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US12::US12_1(v96_1_0) = &v96 {
                                        let v98: LrcPtr<Dice_ui::Heap3> =
                                            Dice_ui::method103(v40.clone());
                                        let v99: leptos::Action<LrcPtr<Dice_ui::Heap3>, ()> =
                                            Dice_ui::method104(v4);
                                        leptos::Action::dispatch(&v99, v98.clone());
                                        {
                                            let v101: web_sys::Storage =
                                                Dice_ui::method105(match &v96 {
                                                    Dice_ui::US12::US12_1(x) => x.clone(),
                                                    _ => unreachable!(),
                                                });
                                            let v102: string = Dice_ui::method44();
                                            let v104: &str =
                                                fable_library_rust::String_::LrcStr::as_str(&v102);
                                            let v105: LrcPtr<Dice_ui::Heap3> =
                                                Dice_ui::method106(v40);
                                            let v108: std::string::String = Dice_ui::method107(
                                                serde_json::json!(v105).to_string(),
                                            );
                                            let v110: &str = v108.as_str();
                                            web_sys::Storage::set(&v101, v104, v110).unwrap();
                                            ()
                                        }
                                    }
                                }
                            }
                        };
                    }
                }
            }
        }
        pub fn method93(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                std::collections::HashMap<std::string::String, leptos::RwSignal<bool>>,
            >,
            v2: leptos::WriteSignal<bool>,
            v3: leptos::ReadSignal<bool>,
            v4: leptos::Action<LrcPtr<Dice_ui::Heap3>, ()>,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure42(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure45(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<bool> =
                Dice_ui::method95((leptos::SignalGetUntracked::get_untracked(&v2)).l0.clone());
            leptos::SignalGet::get(&v6)
        }
        pub fn method108(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure45(v0_1.clone(), ())
            })
        }
        pub fn method110(v0_1: leptos_router::Location) -> leptos_router::Location {
            v0_1
        }
        pub fn method111(
            v0_1: leptos::Memo<std::string::String>,
        ) -> leptos::Memo<std::string::String> {
            v0_1
        }
        pub fn method112(v0_1: leptos_router::Location) -> leptos_router::Location {
            v0_1
        }
        pub fn method113() -> Dice_ui::US20 {
            Dice_ui::US20::US20_0
        }
        pub fn method115(v0_1: leptos_router::Location) -> leptos_router::Location {
            v0_1
        }
        pub fn method116(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method117() -> bool {
            true
        }
        pub fn method118(v0_1: leptos::WriteSignal<bool>) -> leptos::WriteSignal<bool> {
            v0_1
        }
        pub fn method119(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method120(
            v0_1: leptos::RwSignal<std::string::String>,
        ) -> leptos::RwSignal<std::string::String> {
            v0_1
        }
        pub fn closure47(
            v0_1: leptos_router::Location,
            v1: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)>,
            v2: string,
            v3: LrcPtr<Dice_ui::Heap2>,
            v4: leptos::WriteSignal<bool>,
            v5: leptos::ReadSignal<bool>,
            unitVar: (),
        ) {
            let v6: leptos::ReadSignal<bool> = Dice_ui::method94(v5);
            let v8: bool = leptos::SignalGet::get(&v6);
            let v9: leptos_router::Location = Dice_ui::method115(v0_1);
            let v12: leptos::Memo<std::string::String> = Dice_ui::method111(v9.hash);
            let v14: std::string::String = v12();
            let v15: string = sprintf!("{}{}", v2, v14.clone());
            let v17: string = Dice_ui::method0(append(
                append(
                    append(
                        append(
                            string("content.render () / effect 1 / new_url_hash: "),
                            v15.clone(),
                        ),
                        string(" / loaded: "),
                    ),
                    ofBoolean(v8),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v17);
            if v8 == false {
                let v20: std::string::String = Dice_ui::method116(v14);
                if v20 == "" {
                    let v24: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> =
                        Dice_ui::method74(v3.l0.clone());
                    let v28: leptos::RwSignal<std::string::String> = Dice_ui::method96(
                        (leptos::SignalGetUntracked::get_untracked(&v24)).l3.clone(),
                    );
                    let v31: std::string::String = Dice_ui::method70(leptos::SignalGet::get(&v28));
                    let v33: string = fable_library_rust::String_::fromString(v31);
                    let v35: string = Dice_ui::method0(append(
                        append(
                            string("content.render () / effect 1 / url_hash: "),
                            v33.clone(),
                        ),
                        string(""),
                    ));
                    leptos::logging::log!("{}", v35);
                    if contains(v33.clone(), string("#")) {
                        let v39: string = Dice_ui::method6(v33);
                        let v41: &str = fable_library_rust::String_::LrcStr::as_str(&v39);
                        v1(v41, Default::default());
                        ()
                    }
                }
                {
                    let v43: bool = Dice_ui::method117();
                    let v44: leptos::WriteSignal<bool> = Dice_ui::method118(v4);
                    leptos::SignalSet::set(&v44, v43);
                    ()
                }
            } else {
                let v47: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> =
                    Dice_ui::method74(v3.l0.clone());
                let v49: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v47);
                let v52: string = Dice_ui::method6(Dice_ui::method18(v15));
                let v54: &str = fable_library_rust::String_::LrcStr::as_str(&v52);
                let v57: std::string::String = Dice_ui::method119(String::from(v54));
                let v58: leptos::RwSignal<std::string::String> = Dice_ui::method120(v49.l3.clone());
                leptos::SignalSet::set(&v58, v57);
                ()
            }
        }
        pub fn method114(
            v0_1: leptos_router::Location,
            v1: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)>,
            v2: string,
            v3: LrcPtr<Dice_ui::Heap2>,
            v4: leptos::WriteSignal<bool>,
            v5: leptos::ReadSignal<bool>,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                move || {
                    Dice_ui::closure47(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        (),
                    )
                }
            })
        }
        pub fn method122(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method123(v0_1: &str) -> &str {
            v0_1
        }
        pub fn closure49(unitVar: (), v0_1: leptos_router::Url) -> Dice_ui::US22 {
            Dice_ui::US22::US22_1(v0_1)
        }
        pub fn closure50(unitVar: (), v0_1: std::string::String) -> Dice_ui::US22 {
            Dice_ui::US22::US22_0(v0_1)
        }
        pub fn method124(v0_1: Array<Dice_ui::US20>) -> Array<Dice_ui::US20> {
            v0_1
        }
        pub fn method125(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method126(v0_1: leptos_router::Url) -> leptos_router::Url {
            v0_1
        }
        pub fn method127(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method128(v0_1: Dice_ui::US20) -> Dice_ui::US20 {
            v0_1
        }
        pub fn method129(
            v0_1: leptos::WriteSignal<Dice_ui::US20>,
        ) -> leptos::WriteSignal<Dice_ui::US20> {
            v0_1
        }
        pub fn closure48(
            v0_1: leptos_router::Location,
            v1: leptos::WriteSignal<Dice_ui::US20>,
            unitVar: (),
        ) {
            let v2: leptos_router::Location = Dice_ui::method115(v0_1);
            let v5: leptos::Memo<std::string::String> = Dice_ui::method111(v2.hash);
            let v8: std::string::String = Dice_ui::method122(v5());
            let v10: Option<&str> = v8.strip_prefix('#');
            let v12: string = string("r#\"\"#");
            let v13: &str = r#""#;
            let v16: &str = Dice_ui::method123(v10.unwrap_or(v13));
            let v18: Result<leptos_router::Url, std::string::String> =
                leptos_router::Url::try_from(v16);
            let v21: Dice_ui::US22 = match &v18 {
                Err(v18_1_0) => Dice_ui::closure50((), v18_1_0.clone()),
                Ok(v18_0_0) => Dice_ui::closure49((), v18_0_0.clone()),
            };
            let v25: string = Dice_ui::method0(append(
                append(
                    string("content.render () / effect 2 / hash_url: "),
                    toString(format!("{:#?}", v21.clone())),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v25);
            match &v21 {
                Dice_ui::US22::US22_1(v21_1_0) => {
                    let v34: Array<Dice_ui::US20> = Dice_ui::method124(new_array(&[
                        Dice_ui::US20::US20_1(Dice_ui::US21::US21_0),
                        Dice_ui::US20::US20_2,
                        Dice_ui::US20::US20_4,
                        Dice_ui::US20::US20_3,
                    ]));
                    let v35: i32 = count(v34.clone());
                    let v37: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                        l0: MutCell::new(0_i32),
                        l1: MutCell::new(Dice_ui::US23::US23_0),
                    });
                    while Dice_ui::method125(v35, v37.clone()) {
                        let v39: i32 = v37.l0.get().clone();
                        let v40: Dice_ui::US23 = v37.l1.get().clone();
                        let v41: Dice_ui::US20 = v34[v39].clone();
                        let v71: Dice_ui::US23 = match &v40 {
                            Dice_ui::US23::US23_1(v40_1_0) => {
                                Dice_ui::US23::US23_1(v40_1_0.clone())
                            }
                            _ => {
                                let v53: string = match &v41 {
                                    Dice_ui::US20::US20_1(v41_1_0) => string("dice"),
                                    Dice_ui::US20::US20_2 => string("lists"),
                                    Dice_ui::US20::US20_3 => string("settings"),
                                    Dice_ui::US20::US20_4 => string("transactions"),
                                    _ => string(""),
                                };
                                let v54: leptos_router::Url = Dice_ui::method126(v21_1_0.clone());
                                let v56: std::string::String = v54.pathname;
                                let v59: string = Dice_ui::method6(Dice_ui::method18(append(
                                    append(string("/"), v53),
                                    string(""),
                                )));
                                let v61: &str = fable_library_rust::String_::LrcStr::as_str(&v59);
                                let v63: std::string::String = String::from(v61);
                                let v64: std::string::String = Dice_ui::method127(v56);
                                if v64.starts_with(&v63) {
                                    Dice_ui::US23::US23_1(v41.clone())
                                } else {
                                    Dice_ui::US23::US23_0
                                }
                            }
                        };
                        let v72: i32 = v39 + 1_i32;
                        v37.l0.set(v72);
                        v37.l1.set(v71);
                        ()
                    }
                    {
                        let v73: Dice_ui::US23 = v37.l1.get().clone();
                        let v74: Dice_ui::US20 = v34[0_i32].clone();
                        let v77: Dice_ui::US20 = match &v73 {
                            Dice_ui::US23::US23_1(v73_1_0) => v73_1_0.clone(),
                            _ => v74,
                        };
                        let v81: string = Dice_ui::method0(append(
                            append(
                                string("content.render () / effect 2 / new_tab: "),
                                toString(format!("{:#?}", v77.clone())),
                            ),
                            string(""),
                        ));
                        leptos::logging::log!("{}", v81);
                        {
                            let v83: Dice_ui::US20 = Dice_ui::method128(v77);
                            let v84: leptos::WriteSignal<Dice_ui::US20> = Dice_ui::method129(v1);
                            leptos::SignalSet::set(&v84, v83);
                            ()
                        }
                    }
                }
                Dice_ui::US22::US22_0(v21_0_0) => {
                    let v88: string = Dice_ui::method0(append(
                        append(
                            string("content.render () / effect 2 / hash_url error: "),
                            toString(v21_0_0.clone()),
                        ),
                        string(""),
                    ));
                    leptos::logging::log!("{}", v88);
                    ()
                }
            }
        }
        pub fn method121(
            v0_1: leptos_router::Location,
            v1: leptos::WriteSignal<Dice_ui::US20>,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure48(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method133(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
        ) -> leptos::ReadSignal<Dice_ui::US20> {
            v0_1
        }
        pub fn method135(
            v0_1: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>>,
        ) -> leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> {
            v0_1
        }
        pub fn method136(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure55(
            unitVar: (),
            v0_: bool,
            v0__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v0_1: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v0_, v0__1));
            (v0_1.0.clone(), v0_1.1.clone())
        }
        pub fn method137() -> Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>
        {
            Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                Dice_ui::closure55((), tupledArg.0.clone(), tupledArg.1.clone())
            })
        }
        pub fn method138(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure56(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method139() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure56((), arg10_0040)
            })
        }
        pub fn method140(
            v0_1: Array<(bool, std::string::String)>,
        ) -> Array<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure57(unitVar: (), _arg: (bool, std::string::String)) -> std::string::String {
            _arg.1.clone()
        }
        pub fn method141() -> Func1<(bool, std::string::String), std::string::String> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure57((), arg10_0040)
            })
        }
        pub fn closure58(unitVar: (), v0_1: std::string::String) -> string {
            let v1: std::string::String = Dice_ui::method70(v0_1);
            fable_library_rust::String_::fromString(v1)
        }
        pub fn method142() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure58((), v))
        }
        pub fn method143(v0_1: Array<std::string::String>) -> Array<std::string::String> {
            v0_1
        }
        pub fn method144(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn closure54(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Array<string> {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method135((leptos::SignalGetUntracked::get_untracked(&v2)).l1.clone());
            let v10: Vec<LrcPtr<(bool, std::string::String)>> =
                Dice_ui::method136((leptos::SignalGetUntracked::get_untracked(&v6)).l1.clone());
            let v12: Array<LrcPtr<(bool, std::string::String)>> =
                fable_library_rust::NativeArray_::array_from(v10);
            let v13 = Dice_ui::method137();
            let v14: Array<LrcPtr<(bool, std::string::String)>> = Dice_ui::method11(v12);
            let v16: Vec<LrcPtr<(bool, std::string::String)>> = v14.to_vec();
            let v19: Vec<(bool, std::string::String)> =
                Dice_ui::method138(v16.iter().map(|x| v13(x.clone())).collect());
            let v21: Array<(bool, std::string::String)> =
                fable_library_rust::NativeArray_::array_from(v19);
            let v22 = Dice_ui::method139();
            let v23: Array<(bool, std::string::String)> = Dice_ui::method140(v21);
            let v25: Vec<(bool, std::string::String)> = v23.to_vec();
            let v28: Vec<(bool, std::string::String)> =
                Dice_ui::method138(v25.into_iter().filter(|x| v22(x.clone().clone())).collect());
            let v30: Array<(bool, std::string::String)> =
                fable_library_rust::NativeArray_::array_from(v28);
            let v31 = Dice_ui::method141();
            let v32: Array<(bool, std::string::String)> = Dice_ui::method140(v30);
            let v34: Vec<(bool, std::string::String)> = v32.to_vec();
            let v37: Vec<std::string::String> =
                Dice_ui::method37(v34.iter().map(|x| v31(x.clone())).collect());
            let v39: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v37);
            let v40 = Dice_ui::method142();
            let v41: Array<std::string::String> = Dice_ui::method143(v39);
            let v43: Vec<std::string::String> = v41.to_vec();
            let v46: Vec<string> = Dice_ui::method144(v43.iter().map(|x| v40(x.clone())).collect());
            let v48: Array<string> = fable_library_rust::NativeArray_::array_from(v46);
            let v50: string = append(
                append(
                    string("use_transactions.render (2) / accounts create_memo / result: "),
                    sprintf!("{:?}", v48.clone()),
                ),
                string(""),
            );
            let v56: string = Dice_ui::method0(if length(v50.clone()) <= 200_i32 {
                v50.clone()
            } else {
                append(substring2(v50, 0_i32, 200_i32), string("..."))
            });
            leptos::logging::log!("{}", v56);
            v48
        }
        pub fn method134(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<Array<string>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure54(v0_1.clone(), ())
            })
        }
        pub fn method146(v0_1: leptos::Memo<Array<string>>) -> leptos::Memo<Array<string>> {
            v0_1
        }
        pub fn closure60(
            unitVar: (),
            v0_1: string,
        ) -> (string, bool, string, bool, Dice_ui::US25, string) {
            (
                v0_1.clone(),
                true,
                string(""),
                false,
                Dice_ui::US25::US25_0,
                append(
                    append(string("https://api2.nearblocks.io/v1/account/"), v0_1),
                    string(""),
                ),
            )
        }
        pub fn method147() -> Func1<string, (string, bool, string, bool, Dice_ui::US25, string)> {
            Func1::new(move |v: string| Dice_ui::closure60((), v))
        }
        pub fn method148(
            v0_1: Vec<(string, bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(string, bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn closure59(
            v0_1: leptos::Memo<Array<string>>,
            unitVar: (),
        ) -> Array<(string, bool, string, bool, Dice_ui::US25, string)> {
            let v1: leptos::Memo<Array<string>> = Dice_ui::method146(v0_1);
            let v3: Array<string> = v1();
            let v4 = Dice_ui::method147();
            let v5: Array<string> = Dice_ui::method36(v3);
            let v7: Vec<string> = v5.to_vec();
            let v10: Vec<(string, bool, string, bool, Dice_ui::US25, string)> =
                Dice_ui::method148(v7.iter().map(|x| v4(x.clone())).collect());
            let v12: Array<(string, bool, string, bool, Dice_ui::US25, string)> =
                fable_library_rust::NativeArray_::array_from(v10);
            let v14: string = append(
                append(
                    string(
                        "use_transactions.render (3) / accounts_metadata create_memo / result: ",
                    ),
                    sprintf!("{:?}", v12.clone()),
                ),
                string(""),
            );
            let v20: string = Dice_ui::method0(if length(v14.clone()) <= 200_i32 {
                v14.clone()
            } else {
                append(substring2(v14, 0_i32, 200_i32), string("..."))
            });
            leptos::logging::log!("{}", v20);
            v12
        }
        pub fn method145(
            v0_1: leptos::Memo<Array<string>>,
        ) -> Func0<Array<(string, bool, string, bool, Dice_ui::US25, string)>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure59(v0_1.clone(), ())
            })
        }
        pub fn method151(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure63(v0_1: string, v1: i32) -> (bool, string, bool, Dice_ui::US25, string) {
            (
                true,
                string(""),
                false,
                Dice_ui::US25::US25_0,
                append(
                    append(
                        append(
                            append(
                                append(
                                    append(string("https://api2.nearblocks.io/v1/account/"), v0_1),
                                    string("/txns?&order=desc&page="),
                                ),
                                toString(v1 + 1_i32),
                            ),
                            string("&per_page="),
                        ),
                        toString(25_i32),
                    ),
                    string(""),
                ),
            )
        }
        pub fn method152(v0_1: string) -> Func1<i32, (bool, string, bool, Dice_ui::US25, string)> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure63(v0_1.clone(), v)
            })
        }
        pub fn method153(v0_1: Array<i32>) -> Array<i32> {
            v0_1
        }
        pub fn method154(
            v0_1: Vec<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn closure62(
            v0_1: LrcPtr<Dice_ui::Heap0>,
            v1: string,
        ) -> (string, Array<(bool, string, bool, Dice_ui::US25, string)>) {
            let v2: i32 = v0_1.l3;
            let v3: Array<i32> = new_init(&0_i32, v2);
            let v4: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method151(v2, v4.clone()) {
                let v6: i32 = v4.l0.get().clone();
                v3.get_mut()[v6 as usize] = v6;
                {
                    let v7: i32 = v6 + 1_i32;
                    v4.l0.set(v7);
                    ()
                }
            }
            {
                let v8 = Dice_ui::method152(v1.clone());
                let v9: Array<i32> = Dice_ui::method153(v3.clone());
                let v11: Vec<i32> = v9.to_vec();
                let v14: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                    Dice_ui::method154(v11.iter().map(|x| v8(x.clone())).collect());
                (v1, fable_library_rust::NativeArray_::array_from(v14))
            }
        }
        pub fn method150(
            v0_1: LrcPtr<Dice_ui::Heap0>,
        ) -> Func1<string, (string, Array<(bool, string, bool, Dice_ui::US25, string)>)> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: string| Dice_ui::closure62(v0_1.clone(), v)
            })
        }
        pub fn method155(
            v0_1: Vec<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>,
        ) -> Vec<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> {
            v0_1
        }
        pub fn closure61(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Array<string>>,
            unitVar: (),
        ) -> Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v7: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method135((leptos::SignalGetUntracked::get_untracked(&v3)).l1.clone());
            let v9: LrcPtr<Dice_ui::Heap0> = leptos::SignalGetUntracked::get_untracked(&v7);
            let v10: leptos::Memo<Array<string>> = Dice_ui::method146(v1);
            let v12: Array<string> = v10();
            let v13 = Dice_ui::method150(v9);
            let v14: Array<string> = Dice_ui::method36(v12);
            let v16: Vec<string> = v14.to_vec();
            let v19: Vec<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> =
                Dice_ui::method155(v16.iter().map(|x| v13(x.clone())).collect());
            let v21: Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> =
                fable_library_rust::NativeArray_::array_from(v19);
            let v23: string = append(
                append(
                    string(
                        "use_transactions.render (4) / accounts_requests create_memo / result: ",
                    ),
                    sprintf!("{:?}", v21.clone()),
                ),
                string(""),
            );
            let v29: string = Dice_ui::method0(if length(v23.clone()) <= 200_i32 {
                v23.clone()
            } else {
                append(substring2(v23, 0_i32, 200_i32), string("..."))
            });
            leptos::logging::log!("{}", v29);
            v21
        }
        pub fn method149(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Array<string>>,
        ) -> Func0<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure61(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method157(
            v0_1: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
        ) -> leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>
        {
            v0_1
        }
        pub fn closure65(
            unitVar: (),
            _arg: (string, Array<(bool, string, bool, Dice_ui::US25, string)>),
        ) -> Array<(bool, string, bool, Dice_ui::US25, string)> {
            _arg.1.clone()
        }
        pub fn method158() -> Func1<
            (string, Array<(bool, string, bool, Dice_ui::US25, string)>),
            Array<(bool, string, bool, Dice_ui::US25, string)>,
        > {
            Func1::new(
                move |arg10_0040: (string, Array<(bool, string, bool, Dice_ui::US25, string)>)| {
                    Dice_ui::closure65((), arg10_0040)
                },
            )
        }
        pub fn method159(
            v0_1: Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>,
        ) -> Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> {
            v0_1
        }
        pub fn method160(
            v0_1: Vec<Array<(bool, string, bool, Dice_ui::US25, string)>>,
        ) -> Vec<Array<(bool, string, bool, Dice_ui::US25, string)>> {
            v0_1
        }
        pub fn method162(
            v0_1: Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Array<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn closure66(
            unitVar: (),
            v0_1: Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            let v1: Array<(bool, string, bool, Dice_ui::US25, string)> = Dice_ui::method162(v0_1);
            v1.to_vec()
        }
        pub fn method161() -> Func1<
            Array<(bool, string, bool, Dice_ui::US25, string)>,
            Vec<(bool, string, bool, Dice_ui::US25, string)>,
        > {
            Func1::new(
                move |v: Array<(bool, string, bool, Dice_ui::US25, string)>| {
                    Dice_ui::closure66((), v)
                },
            )
        }
        pub fn method163(
            v0_1: Array<Array<(bool, string, bool, Dice_ui::US25, string)>>,
        ) -> Array<Array<(bool, string, bool, Dice_ui::US25, string)>> {
            v0_1
        }
        pub fn method164(
            v0_1: Vec<Vec<(bool, string, bool, Dice_ui::US25, string)>>,
        ) -> Vec<Vec<(bool, string, bool, Dice_ui::US25, string)>> {
            v0_1
        }
        pub fn method165(
            v0_1: Array<Vec<(bool, string, bool, Dice_ui::US25, string)>>,
        ) -> Array<Vec<(bool, string, bool, Dice_ui::US25, string)>> {
            v0_1
        }
        pub fn method166(
            v0_1: Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Array<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn method167(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method168(
            v0_1: Vec<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn method169(
            v0_1: Vec<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn closure64(
            v0_1: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
            unitVar: (),
        ) -> Array<(bool, string, bool, Dice_ui::US25, string)> {
            let v1: leptos::Memo<
                Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>,
            > = Dice_ui::method157(v0_1);
            let v3: Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> = v1();
            let v4 = Dice_ui::method158();
            let v5: Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> =
                Dice_ui::method159(v3);
            let v7: Vec<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> = v5.to_vec();
            let v10: Vec<Array<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method160(v7.iter().map(|x| v4(x.clone())).collect());
            let v12: Array<Array<(bool, string, bool, Dice_ui::US25, string)>> =
                fable_library_rust::NativeArray_::array_from(v10);
            let v13 = Dice_ui::method161();
            let v14: Array<Array<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method163(v12);
            let v16: Vec<Array<(bool, string, bool, Dice_ui::US25, string)>> = v14.to_vec();
            let v19: Vec<Vec<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method164(v16.iter().map(|x| v13(x.clone())).collect());
            let v22: Array<Vec<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method165(fable_library_rust::NativeArray_::array_from(v19));
            let v24: Vec<Vec<(bool, string, bool, Dice_ui::US25, string)>> = v22.to_vec();
            let v27: Array<(bool, string, bool, Dice_ui::US25, string)> = Dice_ui::method162(
                Dice_ui::method166(new_empty::<(bool, string, bool, Dice_ui::US25, string)>()),
            );
            let v29: Vec<(bool, string, bool, Dice_ui::US25, string)> = v27.to_vec();
            let v30: Vec<Vec<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method164(v24);
            let v32: Array<Vec<(bool, string, bool, Dice_ui::US25, string)>> =
                fable_library_rust::NativeArray_::array_from(v30);
            let v33: i32 = count(v32.clone());
            let v34: LrcPtr<Dice_ui::Mut2> = LrcPtr::new(Dice_ui::Mut2 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v29),
            });
            while Dice_ui::method167(v33, v34.clone()) {
                let v36: i32 = v34.l0.get().clone();
                let v37: Vec<(bool, string, bool, Dice_ui::US25, string)> = v34.l1.get().clone();
                let v39: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                    Dice_ui::method168(v32[v36].clone());
                let v40: Vec<(bool, string, bool, Dice_ui::US25, string)> = Dice_ui::method169(v37);
                let mut v40 = v40;
                v40.extend(v39);
                {
                    let v44: Vec<(bool, string, bool, Dice_ui::US25, string)> = v40;
                    let v45: i32 = v36 + 1_i32;
                    v34.l0.set(v45);
                    v34.l1.set(v44);
                    ()
                }
            }
            {
                let v47: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                    Dice_ui::method154(v34.l1.get().clone());
                let v49: Array<(bool, string, bool, Dice_ui::US25, string)> =
                    fable_library_rust::NativeArray_::array_from(v47);
                let v51: string = append(
                    append(
                        string(
                            "use_transactions.render (5) / txns_requests create_memo / result: ",
                        ),
                        sprintf!("{:?}", v49.clone()),
                    ),
                    string(""),
                );
                let v57: string = Dice_ui::method0(if length(v51.clone()) <= 200_i32 {
                    v51.clone()
                } else {
                    append(substring2(v51, 0_i32, 200_i32), string("..."))
                });
                leptos::logging::log!("{}", v57);
                v49
            }
        }
        pub fn method156(
            v0_1: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
        ) -> Func0<Array<(bool, string, bool, Dice_ui::US25, string)>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure64(v0_1.clone(), ())
            })
        }
        pub fn closure68(
            unitVar: (),
            _arg: (string, Array<(bool, string, bool, Dice_ui::US25, string)>),
        ) -> Vec<string> {
            let v1: Array<(bool, string, bool, Dice_ui::US25, string)> = _arg.1.clone();
            let v2: i32 = count(v1.clone());
            let v3: Array<string> = new_init(&string(""), v2);
            let v4: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method151(v2, v4.clone()) {
                let v6: i32 = v4.l0.get().clone();
                let patternInput: (bool, string, bool, Dice_ui::US25, string) = v1[v6].clone();
                v3.get_mut()[v6 as usize] = _arg.0.clone();
                {
                    let v12: i32 = v6 + 1_i32;
                    v4.l0.set(v12);
                    ()
                }
            }
            {
                let v13: Array<string> = Dice_ui::method36(v3.clone());
                v13.to_vec()
            }
        }
        pub fn method171(
        ) -> Func1<(string, Array<(bool, string, bool, Dice_ui::US25, string)>), Vec<string>>
        {
            Func1::new(
                move |arg10_0040: (string, Array<(bool, string, bool, Dice_ui::US25, string)>)| {
                    Dice_ui::closure68((), arg10_0040)
                },
            )
        }
        pub fn method172(v0_1: Vec<Vec<string>>) -> Vec<Vec<string>> {
            v0_1
        }
        pub fn method173(v0_1: Array<Vec<string>>) -> Array<Vec<string>> {
            v0_1
        }
        pub fn method174(v0_1: i32, v1: LrcPtr<Dice_ui::Mut3>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method175(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method176(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn closure67(
            v0_1: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
            unitVar: (),
        ) -> Array<string> {
            let v1: leptos::Memo<
                Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>,
            > = Dice_ui::method157(v0_1);
            let v3: Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> = v1();
            let v4 = Dice_ui::method171();
            let v5: Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> =
                Dice_ui::method159(v3);
            let v7: Vec<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)> = v5.to_vec();
            let v10: Vec<Vec<string>> =
                Dice_ui::method172(v7.iter().map(|x| v4(x.clone())).collect());
            let v13: Array<Vec<string>> =
                Dice_ui::method173(fable_library_rust::NativeArray_::array_from(v10));
            let v15: Vec<Vec<string>> = v13.to_vec();
            let v18: Array<string> = Dice_ui::method36(Dice_ui::method34(new_empty::<string>()));
            let v20: Vec<string> = v18.to_vec();
            let v21: Vec<Vec<string>> = Dice_ui::method172(v15);
            let v23: Array<Vec<string>> = fable_library_rust::NativeArray_::array_from(v21);
            let v24: i32 = count(v23.clone());
            let v25: LrcPtr<Dice_ui::Mut3> = LrcPtr::new(Dice_ui::Mut3 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v20),
            });
            while Dice_ui::method174(v24, v25.clone()) {
                let v27: i32 = v25.l0.get().clone();
                let v28: Vec<string> = v25.l1.get().clone();
                let v30: Vec<string> = Dice_ui::method175(v23[v27].clone());
                let v31: Vec<string> = Dice_ui::method176(v28);
                let mut v31 = v31;
                v31.extend(v30);
                {
                    let v35: Vec<string> = v31;
                    let v36: i32 = v27 + 1_i32;
                    v25.l0.set(v36);
                    v25.l1.set(v35);
                    ()
                }
            }
            {
                let v38: Vec<string> = Dice_ui::method144(v25.l1.get().clone());
                let v40: Array<string> = fable_library_rust::NativeArray_::array_from(v38);
                let v42: string = append(
                    append(
                        string(
                            "use_transactions.render (6) / urls_accounts create_memo / result: ",
                        ),
                        sprintf!("{:?}", v40.clone()),
                    ),
                    string(""),
                );
                let v48: string = Dice_ui::method0(if length(v42.clone()) <= 200_i32 {
                    v42.clone()
                } else {
                    append(substring2(v42, 0_i32, 200_i32), string("..."))
                });
                leptos::logging::log!("{}", v48);
                v40
            }
        }
        pub fn method170(
            v0_1: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
        ) -> Func0<Array<string>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure67(v0_1.clone(), ())
            })
        }
        pub fn closure69(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            unitVar: (),
        ) -> Option<rexie::Rexie> {
            let v2: string =
                Dice_ui::method0(string("state_core.use_requests (2) / database_memo"));
            leptos::logging::log!("{}", v2);
            {
                let v4: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method29(v0_1);
                leptos::SignalGet::get(&v4)
            }
        }
        pub fn method177(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
        ) -> Func0<Option<rexie::Rexie>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure69(v0_1.clone(), ())
            })
        }
        pub fn method179(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
        ) -> leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>> {
            v0_1
        }
        pub fn closure70(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            unitVar: (),
        ) -> (
            Option<rexie::Rexie>,
            Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) {
            let v2: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method29(v1);
            let v4: Option<rexie::Rexie> = leptos::SignalGet::get(&v2);
            let v5: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method179(v0_1);
            (v4, v5())
        }
        pub fn method178(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
        ) -> Func0<(
            Option<rexie::Rexie>,
            Array<(bool, string, bool, Dice_ui::US25, string)>,
        )> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure70(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method181(
            v0_1: Func0<(
                Option<rexie::Rexie>,
                Array<(bool, string, bool, Dice_ui::US25, string)>,
            )>,
        ) -> Func0<(
            Option<rexie::Rexie>,
            Array<(bool, string, bool, Dice_ui::US25, string)>,
        )> {
            v0_1
        }
        pub fn method186(
            v0_1: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error>,
        ) -> Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> {
            v0_1
        }
        pub fn method187(
            v0_1: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
        ) -> Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> {
            v0_1
        }
        pub fn method185(
            v0_1: string,
            v1: rexie::Rexie,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async {
                //;
                {
                    let v5: Array<string> = Dice_ui::method34(new_array(&[string("store")]));
                    let v6 = Dice_ui::method35();
                    let v7: Array<string> = Dice_ui::method36(v5);
                    let v9: Vec<string> = v7.to_vec();
                    let v12: Vec<std::string::String> =
                        Dice_ui::method37(v9.iter().map(|x| v6(x.clone())).collect());
                    let v14: Array<std::string::String> =
                        fable_library_rust::NativeArray_::array_from(v12);
                    let v15: rexie::Rexie = Dice_ui::method38(v1);
                    let v17: Result<rexie::Transaction, rexie::Error> =
                        v15.transaction(&v14, rexie::TransactionMode::ReadOnly);
                    let v18 = Dice_ui::method39();
                    let v19: Result<rexie::Transaction, rexie::Error> = Dice_ui::method40(v17);
                    let v21: Result<rexie::Transaction, std::string::String> =
                        v19.map_err(|x| v18(x));
                    let v23: rexie::Transaction = v21?;
                    let v24: string = Dice_ui::method41();
                    let v26: &str = fable_library_rust::String_::LrcStr::as_str(&v24);
                    let v28: Result<rexie::Store, rexie::Error> = v23.store(v26);
                    let v29 = Dice_ui::method42();
                    let v30: Result<rexie::Store, rexie::Error> = Dice_ui::method43(v28);
                    let v32: Result<rexie::Store, std::string::String> = v30.map_err(|x| v29(x));
                    let v34: rexie::Store = v32?;
                    let v35: string = Dice_ui::method6(v0_1);
                    let v37: &str = fable_library_rust::String_::LrcStr::as_str(&v35);
                    let v39: wasm_bindgen::JsValue = wasm_bindgen::JsValue::from_str(v37);
                    let v41: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<wasm_bindgen::JsValue, rexie::Error>,
                            >,
                        >,
                    > = Box::pin(rexie::Store::get(&v34, &v39));
                    let v43: Result<wasm_bindgen::JsValue, rexie::Error> = v41.await;
                    let v44 = Dice_ui::method45();
                    let v45: Result<wasm_bindgen::JsValue, rexie::Error> = Dice_ui::method46(v43);
                    let v47: Result<wasm_bindgen::JsValue, std::string::String> =
                        v45.map_err(|x| v44(x));
                    let v50: wasm_bindgen::JsValue = Dice_ui::method47(v47?);
                    let v52: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                        serde_wasm_bindgen::from_value(v50);
                    let v53 = Dice_ui::method48();
                    let v54: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                        Dice_ui::method49(v52);
                    let v56: Result<Option<serde_json::Value>, std::string::String> =
                        v54.map_err(|x| v53(x));
                    let v61: Dice_ui::US7 = defaultValue(
                        Dice_ui::US7::US7_0,
                        map(
                            Func1::new(move |v: serde_json::Value| Dice_ui::closure16((), v)),
                            v56?,
                        ),
                    );
                    let v96: Dice_ui::US27 = match &v61 {
                        Dice_ui::US7::US7_1(v61_1_0) => {
                            let v63: serde_json::Value = Dice_ui::method50(v61_1_0.clone());
                            let v65: Result<Vec<u8>, serde_json::Error> =
                                serde_json::from_value(v63);
                            let v66 = Dice_ui::method51();
                            let v67: Result<Vec<u8>, serde_json::Error> = Dice_ui::method52(v65);
                            let v69: Result<Vec<u8>, std::string::String> = v67.map_err(|x| v66(x));
                            let v72: Vec<u8> = Dice_ui::method53(v69?);
                            let v74: Array<u8> = fable_library_rust::NativeArray_::array_from(v72);
                            let v77: string = Dice_ui::method0(append(
                                append(
                                    string("state_core.get_data () / data_len: "),
                                    toString(count(v74.clone())),
                                ),
                                string(""),
                            ));
                            leptos::logging::log!("{}", v77);
                            {
                                let v79: Array<u8> = Dice_ui::method54(v74);
                                let v81: Vec<u8> = v79.to_vec();
                                let v83: &[u8] = v81.as_slice();
                                let mut v83 = v83;
                                {
                                    let v86: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> =
                                        borsh::BorshDeserialize::deserialize(&mut v83);
                                    let v87 = Dice_ui::method55();
                                    let v88: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> =
                                        Dice_ui::method186(v86);
                                    let v90: Result<LrcPtr<Dice_ui::Heap4>, std::string::String> =
                                        v88.map_err(|x| v87(x));
                                    Dice_ui::US27::US27_1(v90?)
                                }
                            }
                        }
                        _ => Dice_ui::US27::US27_0,
                    };
                    let v103: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                        Dice_ui::method187(
                            Ok::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(match &v96 {
                                Dice_ui::US27::US27_1(v96_1_0) => Some(v96_1_0.clone()),
                                _ => None::<LrcPtr<Dice_ui::Heap4>>,
                            }),
                        );
                    v103
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure72(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap4>>) -> Dice_ui::US26 {
            Dice_ui::US26::US26_1(v0_1)
        }
        pub fn closure73(unitVar: (), v0_1: std::string::String) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method188() -> string {
            string("database=None")
        }
        pub fn method184(
            v0_1: Option<rexie::Rexie>,
            v1: bool,
            v2: string,
            v3: bool,
            v4: Dice_ui::US25,
            v5: string,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v9: Dice_ui::US5 = defaultValue(
                        Dice_ui::US5::US5_0,
                        map(
                            Func1::new(move |v: rexie::Rexie| Dice_ui::closure10((), v)),
                            v0_1,
                        ),
                    );
                    let v28: Dice_ui::US26 = if let Dice_ui::US5::US5_1(v9_1_0) = &v9 {
                        let v11: string = append(
                            append(
                                append(append(string("url["), v5), string("](")),
                                sprintf!("{:?}", v2),
                            ),
                            string(")"),
                        );
                        let v13: string = Dice_ui::method0(append(
                            append(string("state_core.get_data () / id: "), v11.clone()),
                            string(""),
                        ));
                        leptos::logging::log!("{}", v13);
                        {
                            let v15: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method185(
                                v11,
                                match &v9 {
                                    Dice_ui::US5::US5_1(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            let v17: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                                v15.await;
                            match &v17 {
                                Err(v17_1_0) => Dice_ui::closure73((), v17_1_0.clone()),
                                Ok(v17_0_0) => Dice_ui::closure72((), v17_0_0.clone()),
                            }
                        }
                    } else {
                        let v22: string = Dice_ui::method6(Dice_ui::method188());
                        let v24: &str = fable_library_rust::String_::LrcStr::as_str(&v22);
                        Dice_ui::US26::US26_0(String::from(v24))
                    };
                    let v35: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                        Dice_ui::method187(match &v28 {
                            Dice_ui::US26::US26_1(v28_1_0) => {
                                Ok::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(
                                    v28_1_0.clone(),
                                )
                            }
                            Dice_ui::US26::US26_0(v28_0_0) => {
                                Err::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(
                                    v28_0_0.clone(),
                                )
                            }
                        });
                    v35
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure71(
            v0_1: Option<rexie::Rexie>,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            Dice_ui::method184(
                v0_1,
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            )
        }
        pub fn method183(
            v0_1: Option<rexie::Rexie>,
        ) -> Func1<
            (bool, string, bool, Dice_ui::US25, string),
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                    Dice_ui::closure71(v0_1.clone(), arg10_0040)
                }
            })
        }
        pub fn method189(
            v0_1: Vec<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn method190(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn method191(
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            v0_1
        }
        pub fn method182(
            v0_1: Array<(bool, string, bool, Dice_ui::US25, string)>,
            v1: Option<rexie::Rexie>,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v3: string = sprintf!("{:?}", v1.clone());
                    let v4: string = sprintf!("{:?}", v0_1.clone());
                    let v11: string =
                    Dice_ui::method0(append(append(append(append(string("state_core.use_requests (3) / state_data_resource create_local_resource / request : "),
                                                                 (if length(v4.clone())
                                                                         <=
                                                                         400_i32
                                                                     {
                                                                      v4.clone()
                                                                  } else {
                                                                      append(substring2(v4,
                                                                                        0_i32,
                                                                                        400_i32),
                                                                             string("..."))
                                                                  })),
                                                          string(" / database: ")),
                                                   v3), string("")));
                    leptos::logging::log!("{}", v11);
                    {
                        let v13: Array<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method162(v0_1);
                        let v15: Vec<(bool, string, bool, Dice_ui::US25, string)> = v13.to_vec();
                        let v16 = Dice_ui::method183(v1);
                        let v17: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method189(v15);
                        let v20: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method190(v17.iter().map(|x| v16(x.clone())).collect());
                        let v22: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v20);
                        let v24: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            v22.await;
                        let v27: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(v24?);
                        let v29: string =
                        append(append(string("state_core.use_requests (4) / state_data_resource create_local_resource / result: "),
                                      sprintf!("{:?}", v27.clone())),
                               string(""));
                        let v35: string = Dice_ui::method0(if length(v29.clone()) <= 200_i32 {
                            v29.clone()
                        } else {
                            append(substring2(v29, 0_i32, 200_i32), string("..."))
                        });
                        leptos::logging::log!("{}", v35);
                        {
                            let v37: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = Dice_ui::method191(v27);
                            v37
                        }
                    }
                }
            });
            {
                {
                    {
                        //;
                        __result
                    }
                }
            }
        }
        pub fn method192(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                >,
            >,
        > {
            v0_1
        }
        pub fn method180(
            v0_1: Func0<(
                Option<rexie::Rexie>,
                Array<(bool, string, bool, Dice_ui::US25, string)>,
            )>,
        ) -> leptos::Resource<
            (
                Option<rexie::Rexie>,
                Array<(bool, string, bool, Dice_ui::US25, string)>,
            ),
            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        > {
            let v1 = Dice_ui::method181(v0_1);
            let __result = leptos::create_local_resource(
                move || v1(),
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Option<rexie::Rexie>,
                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                        ) = x;
                        let v7: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method192(Dice_ui::method182(
                            patternInput.1.clone(),
                            patternInput.0.clone(),
                        ));
                        let v9: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            v7.await;
                        v9
                    }
                },
            );
            {
                //;
                __result
            }
        }
        pub fn method194(
            v0_1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
        ) -> leptos::Resource<
            (
                Option<rexie::Rexie>,
                Array<(bool, string, bool, Dice_ui::US25, string)>,
            ),
            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        > {
            v0_1
        }
        pub fn method195(
            v0_1: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            v0_1
        }
        pub fn method198(
            v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
        ) -> Vec<Option<LrcPtr<Dice_ui::Heap4>>> {
            v0_1
        }
        pub fn closure76(
            unitVar: (),
            v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
        ) -> Array<Option<LrcPtr<Dice_ui::Heap4>>> {
            let v1: Vec<Option<LrcPtr<Dice_ui::Heap4>>> = Dice_ui::method198(v0_1);
            fable_library_rust::NativeArray_::array_from(v1)
        }
        pub fn method197(
        ) -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Array<Option<LrcPtr<Dice_ui::Heap4>>>>
        {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure76((), v))
        }
        pub fn method199(
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            v0_1
        }
        pub fn closure75(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            let v1 = Dice_ui::method197();
            let v2: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                Dice_ui::method199(v0_1);
            v2.map(|x| v1(x))
        }
        pub fn method196() -> Func1<
            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        > {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure75((), v)
                },
            )
        }
        pub fn closure74(
            v0_1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v2: string =
                Dice_ui::method0(string("state_core.use_requests (5) / state_data_func"));
            leptos::logging::log!("{}", v2);
            {
                let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method62(Dice_ui::method61());
                let v8: Dice_ui::US10 = match &v5 {
                    Err(v5_1_0) => Dice_ui::closure25((), v5_1_0.clone()),
                    Ok(v5_0_0) => Dice_ui::closure24((), v5_0_0.clone()),
                };
                let v17: Dice_ui::US11 = match &v8 {
                    Dice_ui::US10::US10_1(v8_1_0) => Dice_ui::US11::US11_1(defaultValue(
                        Dice_ui::US12::US12_0,
                        map(
                            Func1::new(move |v_2: web_sys::Storage| Dice_ui::closure26((), v_2)),
                            v8_1_0.clone(),
                        ),
                    )),
                    Dice_ui::US10::US10_0(v8_0_0) => Dice_ui::US11::US11_0(v8_0_0.clone()),
                };
                let v30: Option<
                    Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                > = if let Dice_ui::US11::US11_1(v17_1_0) = &v17 {
                    if let Dice_ui::US12::US12_1(_) = &match &v17 {
                        Dice_ui::US11::US11_1(x) => x.clone(),
                        _ => unreachable!(),
                    } {
                        let v20: leptos::Resource<
                            (
                                Option<rexie::Rexie>,
                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                            ),
                            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                        > = Dice_ui::method194(v0_1);
                        let v23: Option<
                            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                        > = Dice_ui::method195(leptos::SignalGet::get(&v20));
                        let v24 = Dice_ui::method196();
                        v23.map(|x| v24(x))
                    } else {
                        None::<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
                let v32: string = append(
                    append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v30.clone()),
                    ),
                    string(""),
                );
                let v38: string = Dice_ui::method0(if length(v32.clone()) <= 200_i32 {
                    v32.clone()
                } else {
                    append(substring2(v32, 0_i32, 200_i32), string("..."))
                });
                leptos::logging::log!("{}", v38);
                v30
            }
        }
        pub fn method193(
            v0_1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
        ) -> Func0<Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>>
        {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure74(v0_1.clone(), ())
            })
        }
        pub fn method201(
            v0_1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
        ) -> leptos::Memo<Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>>
        {
            v0_1
        }
        pub fn closure77(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            unitVar: (),
        ) -> (
            Array<(bool, string, bool, Dice_ui::US25, string)>,
            Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
        ) {
            let v2: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method179(v0_1);
            let v4: Array<(bool, string, bool, Dice_ui::US25, string)> = v2();
            let v5: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = Dice_ui::method201(v1);
            (v4, v5())
        }
        pub fn method200(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
        ) -> Func0<(
            Array<(bool, string, bool, Dice_ui::US25, string)>,
            Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
        )> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure77(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method203(
            v0_1: Func0<(
                Array<(bool, string, bool, Dice_ui::US25, string)>,
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            )>,
        ) -> Func0<(
            Array<(bool, string, bool, Dice_ui::US25, string)>,
            Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
        )> {
            v0_1
        }
        pub fn closure78(
            unitVar: (),
            v0_1: Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US28 {
            Dice_ui::US28::US28_1(v0_1)
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Array<Option<LrcPtr<Dice_ui::Heap4>>>,
        ) -> Dice_ui::US31 {
            Dice_ui::US31::US31_1(v0_1)
        }
        pub fn closure80(unitVar: (), v0_1: std::string::String) -> Dice_ui::US31 {
            Dice_ui::US31::US31_0(v0_1)
        }
        pub fn closure82(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US27 {
            Dice_ui::US27::US27_1(v0_1)
        }
        pub fn closure81(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap4>>) -> Dice_ui::US27 {
            defaultValue(
                Dice_ui::US27::US27_0,
                map(
                    Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure82((), v)),
                    v0_1,
                ),
            )
        }
        pub fn method205() -> Func1<Option<LrcPtr<Dice_ui::Heap4>>, Dice_ui::US27> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap4>>| Dice_ui::closure81((), v))
        }
        pub fn method206(
            v0_1: Array<Option<LrcPtr<Dice_ui::Heap4>>>,
        ) -> Array<Option<LrcPtr<Dice_ui::Heap4>>> {
            v0_1
        }
        pub fn method207(v0_1: Vec<Dice_ui::US27>) -> Vec<Dice_ui::US27> {
            v0_1
        }
        pub fn closure85(unitVar: (), v0_1: Dice_ui::US27) -> Dice_ui::US35 {
            Dice_ui::US35::US35_1(v0_1)
        }
        pub fn method210(v0_1: Dice_ui::US25) -> Dice_ui::US25 {
            v0_1
        }
        pub fn method211(v0_1: string) -> string {
            v0_1
        }
        pub fn method212(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method213(v0_1: string) -> string {
            v0_1
        }
        pub fn method214(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method215(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method216() -> string {
            string("application/json")
        }
        pub fn method217(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure86(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method218() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure86((), v))
        }
        pub fn method219(
            v0_1: Result<reqwest_wasm::Response, reqwest_wasm::Error>,
        ) -> Result<reqwest_wasm::Response, reqwest_wasm::Error> {
            v0_1
        }
        pub fn method220(
            v0_1: Result<std::string::String, reqwest_wasm::Error>,
        ) -> Result<std::string::String, reqwest_wasm::Error> {
            v0_1
        }
        pub fn method221(
            v0_1: Result<Option<string>, std::string::String>,
        ) -> Result<Option<string>, std::string::String> {
            v0_1
        }
        pub fn method209(
            v0_1: Dice_ui::US29,
            v1: i32,
            v2: bool,
            v3: bool,
            v4: string,
            v5: Dice_ui::US25,
            v6: string,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v38: Dice_ui::US32 = match &v0_1 {
                        Dice_ui::US29::US29_1(v0_1_1_0) => {
                            let v8: Dice_ui::US30 = v0_1_1_0.clone();
                            Dice_ui::US32::US32_1(match &v8 {
                                Dice_ui::US30::US30_1(v8_1_0) => {
                                    let v13: Dice_ui::US35 = defaultValue(
                                        Dice_ui::US35::US35_0,
                                        map(
                                            Func1::new(move |v: Dice_ui::US27| {
                                                Dice_ui::closure85((), v)
                                            }),
                                            tryItem(v1, v8_1_0.clone()),
                                        ),
                                    );
                                    let v20: Dice_ui::US27 =
                                        if let Dice_ui::US35::US35_1(v13_1_0) = &v13 {
                                            let v14: Dice_ui::US27 = match &v13 {
                                                Dice_ui::US35::US35_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            };
                                            if let Dice_ui::US27::US27_1(v14_1_0) = &v14 {
                                                Dice_ui::US27::US27_1(match &v14 {
                                                    Dice_ui::US27::US27_1(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            } else {
                                                Dice_ui::US27::US27_0
                                            }
                                        } else {
                                            Dice_ui::US27::US27_0
                                        };
                                    Dice_ui::US33::US33_1(match &v20 {
                                        Dice_ui::US27::US27_1(v20_1_0) => {
                                            let v23: std::string::String =
                                                Dice_ui::method70((v20_1_0).l0.clone());
                                            Dice_ui::US34::US34_1(
                                                fable_library_rust::String_::fromString(v23),
                                            )
                                        }
                                        _ => Dice_ui::US34::US34_0,
                                    })
                                }
                                Dice_ui::US30::US30_0(v8_0_0) => {
                                    Dice_ui::US33::US33_0(v8_0_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US32::US32_0,
                    };
                    let v39: string = sprintf!("{:?}", (v2, v3, v5.clone()));
                    let v44: string = if length(v39.clone()) <= 400_i32 {
                        v39.clone()
                    } else {
                        append(substring2(v39, 0_i32, 400_i32), string("..."))
                    };
                    let v45: string = sprintf!("{:?}", v0_1.clone());
                    let v50: string = if length(v45.clone()) <= 400_i32 {
                        v45.clone()
                    } else {
                        append(substring2(v45, 0_i32, 400_i32), string("..."))
                    };
                    let v51: string = sprintf!("{:?}", v38.clone());
                    let v56: string = if length(v51.clone()) <= 400_i32 {
                        v51.clone()
                    } else {
                        append(substring2(v51, 0_i32, 400_i32), string("..."))
                    };
                    let v79: bool = if v2 {
                        true
                    } else {
                        if let Dice_ui::US29::US29_1(v0_1_1_0) = &v0_1 {
                            let v57: Dice_ui::US30 = match &v0_1 {
                                Dice_ui::US29::US29_1(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US30::US30_1(v57_1_0) = &v57 {
                                if count(match &v57 {
                                    Dice_ui::US30::US30_1(x) => x.clone(),
                                    _ => unreachable!(),
                                }) as u64
                                    == 0_u64
                                {
                                    false
                                } else {
                                    if let Dice_ui::US32::US32_1(v38_1_0) = &v38 {
                                        let v61: Dice_ui::US33 = match &v38 {
                                            Dice_ui::US32::US32_1(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if let Dice_ui::US33::US33_1(v61_1_0) = &v61 {
                                            if let Dice_ui::US34::US34_0 = &match &v61 {
                                                Dice_ui::US33::US33_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            } {
                                                true
                                            } else {
                                                false
                                            }
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                }
                            } else {
                                if let Dice_ui::US32::US32_1(v38_1_0) = &v38 {
                                    let v67: Dice_ui::US33 = match &v38 {
                                        Dice_ui::US32::US32_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US33::US33_1(v67_1_0) = &v67 {
                                        if let Dice_ui::US34::US34_0 = &match &v67 {
                                            Dice_ui::US33::US33_1(x) => x.clone(),
                                            _ => unreachable!(),
                                        } {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US32::US32_1(v38_1_0) = &v38 {
                                let v73: Dice_ui::US33 = match &v38 {
                                    Dice_ui::US32::US32_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US33::US33_1(v73_1_0) = &v73 {
                                    if let Dice_ui::US34::US34_0 = &match &v73 {
                                        Dice_ui::US33::US33_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    } {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    };
                    let v81: string =
                    Dice_ui::method0(append(append(append(append(append(append(append(append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                                             v50),
                                                                                      string(" / state_data\': ")),
                                                                               v56),
                                                                        string(" / request: ")),
                                                                 v44),
                                                          string(" / should_fetch: ")),
                                                   ofBoolean(v79)),
                                            string("")));
                    leptos::logging::log!("{}", v81);
                    {
                        let v167: Dice_ui::US36 = if v79 == false {
                            Dice_ui::US36::US36_1(None::<string>)
                        } else {
                            let v86: Dice_ui::US25 = Dice_ui::method210(v5);
                            let v108: reqwest_wasm::RequestBuilder = match &v86 {
                                Dice_ui::US25::US25_1 => {
                                    let v99: string = Dice_ui::method6(Dice_ui::method18(
                                        Dice_ui::method213(v6.clone()),
                                    ));
                                    let v101: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v99);
                                    let v104: std::string::String =
                                        Dice_ui::method214(String::from(v101));
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .post(v104)
                                }
                                _ => {
                                    let v89: string = Dice_ui::method6(Dice_ui::method18(
                                        Dice_ui::method211(v6.clone()),
                                    ));
                                    let v91: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v89);
                                    let v94: std::string::String =
                                        Dice_ui::method212(String::from(v91));
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .get(v94)
                                }
                            };
                            let v110: string = Dice_ui::method6(Dice_ui::method18(v4));
                            let v112: &str = fable_library_rust::String_::LrcStr::as_str(&v110);
                            let v114: std::string::String = String::from(v112);
                            let v116: reqwest_wasm::RequestBuilder =
                                reqwest_wasm::RequestBuilder::body(v108, v114);
                            let v141: reqwest_wasm::RequestBuilder =
                                Dice_ui::method217(if v3 == false {
                                    v116
                                } else {
                                    let v122: std::string::String = Dice_ui::method70(
                                        reqwest_wasm::header::CONTENT_TYPE.to_string(),
                                    );
                                    let v124: string =
                                        fable_library_rust::String_::fromString(v122);
                                    let v125: reqwest_wasm::RequestBuilder =
                                        Dice_ui::method215(v116);
                                    let v127: string = Dice_ui::method6(Dice_ui::method18(v124));
                                    let v129: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v127);
                                    let v131: std::string::String = String::from(v129);
                                    let v133: string = Dice_ui::method6(Dice_ui::method216());
                                    let v135: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v133);
                                    let v137: std::string::String = String::from(v135);
                                    reqwest_wasm::RequestBuilder::header(v125, v131, v137)
                                });
                            let v143: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<
                                            reqwest_wasm::Response,
                                            reqwest_wasm::Error,
                                        >,
                                    >,
                                >,
                            > = Box::pin(reqwest_wasm::RequestBuilder::send(v141));
                            let v145: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                v143.await;
                            let v146 = Dice_ui::method218();
                            let v147: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                Dice_ui::method219(v145);
                            let v149: Result<reqwest_wasm::Response, std::string::String> =
                                v147.map_err(|x| v146(x));
                            let v151: reqwest_wasm::Response = v149?;
                            let v153: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<std::string::String, reqwest_wasm::Error>,
                                    >,
                                >,
                            > = Box::pin(reqwest_wasm::Response::text(v151));
                            let v155: Result<std::string::String, reqwest_wasm::Error> = v153.await;
                            let v156 = Dice_ui::method218();
                            let v157: Result<std::string::String, reqwest_wasm::Error> =
                                Dice_ui::method220(v155);
                            let v159: Result<std::string::String, std::string::String> =
                                v157.map_err(|x| v156(x));
                            let v162: std::string::String = Dice_ui::method70(v159?);
                            Dice_ui::US36::US36_1(Some(fable_library_rust::String_::fromString(
                                v162,
                            )))
                        };
                        let v174: Result<Option<string>, std::string::String> =
                            Dice_ui::method221(match &v167 {
                                Dice_ui::US36::US36_1(v167_1_0) => {
                                    Ok::<Option<string>, std::string::String>(v167_1_0.clone())
                                }
                                Dice_ui::US36::US36_0(v167_0_0) => {
                                    Err::<Option<string>, std::string::String>(v167_0_0.clone())
                                }
                            });
                        v174
                    }
                }
            });
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn closure84(
            v0_1: Dice_ui::US29,
            v1: i32,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            Dice_ui::method209(
                v0_1,
                v1,
                _arg.0.clone(),
                _arg.2.clone(),
                _arg.1.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            )
        }
        pub fn closure83(
            v0_1: Dice_ui::US29,
            v1: i32,
        ) -> Func1<
            (bool, string, bool, Dice_ui::US25, string),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                    Dice_ui::closure84(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method208(
            v0_1: Dice_ui::US29,
        ) -> Func1<
            i32,
            Func1<
                (bool, string, bool, Dice_ui::US25, string),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v)
            })
        }
        pub fn method222(
            v0_1: Vec<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Vec<(bool, string, bool, Dice_ui::US25, string)> {
            v0_1
        }
        pub fn method223(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method224(v0_1: Vec<Option<string>>) -> Vec<Option<string>> {
            v0_1
        }
        pub fn method225(
            v0_1: Result<Array<Option<string>>, std::string::String>,
        ) -> Result<Array<Option<string>>, std::string::String> {
            v0_1
        }
        pub fn method204(
            v0_1: Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            v1: Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Array<Option<string>>, std::string::String>,
                >,
            >,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v5: Dice_ui::US28 = defaultValue(
                        Dice_ui::US28::US28_0,
                        map(
                            Func1::new(
                                move |v: Result<
                                    Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >| Dice_ui::closure78((), v),
                            ),
                            v0_1,
                        ),
                    );
                    let v28: Dice_ui::US29 = match &v5 {
                        Dice_ui::US28::US28_1(v5_1_0) => {
                            let v6: Result<
                                Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v5_1_0.clone();
                            let v9: Dice_ui::US31 = match &v6 {
                                Err(v6_1_0) => Dice_ui::closure80((), v6_1_0.clone()),
                                Ok(v6_0_0) => Dice_ui::closure79((), v6_0_0.clone()),
                            };
                            Dice_ui::US29::US29_1(match &v9 {
                                Dice_ui::US31::US31_1(v9_1_0) => {
                                    let v11 = Dice_ui::method205();
                                    let v12: Array<Option<LrcPtr<Dice_ui::Heap4>>> =
                                        Dice_ui::method206(v9_1_0.clone());
                                    let v14: Vec<Option<LrcPtr<Dice_ui::Heap4>>> = v12.to_vec();
                                    let v17: Vec<Dice_ui::US27> = Dice_ui::method207(
                                        v14.iter().map(|x| v11(x.clone())).collect(),
                                    );
                                    Dice_ui::US30::US30_1(
                                        fable_library_rust::NativeArray_::array_from(v17),
                                    )
                                }
                                Dice_ui::US31::US31_0(v9_0_0) => {
                                    Dice_ui::US30::US30_0(v9_0_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US29::US29_0,
                    };
                    let v29: string = sprintf!("{:?}", v28.clone());
                    let v36: string = Dice_ui::method0(append(
                        append(
                            string("state_core.use_requests (8) / result_memo / state_data: "),
                            (if length(v29.clone()) <= 400_i32 {
                                v29.clone()
                            } else {
                                append(substring2(v29, 0_i32, 400_i32), string("..."))
                            }),
                        ),
                        string(""),
                    ));
                    leptos::logging::log!("{}", v36);
                    {
                        let v38: Array<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method162(v1);
                        let v40: Vec<(bool, string, bool, Dice_ui::US25, string)> = v38.to_vec();
                        let v41 = Dice_ui::method208(v28);
                        let v42: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method222(v40);
                        let v45: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method223(
                            v42.iter()
                                .enumerate()
                                .map(|(i, x)| v41(i.try_into().unwrap())(x.clone()))
                                .collect(),
                        );
                        let v47: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v45);
                        let v49: Result<Vec<Option<string>>, std::string::String> = v47.await;
                        let v52: Vec<Option<string>> = Dice_ui::method224(v49?);
                        let v56: Result<Array<Option<string>>, std::string::String> =
                            Dice_ui::method225(Ok::<Array<Option<string>>, std::string::String>(
                                fable_library_rust::NativeArray_::array_from(v52),
                            ));
                        v56
                    }
                }
            });
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn method226(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Array<Option<string>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Array<Option<string>>, std::string::String>,
                >,
            >,
        > {
            v0_1
        }
        pub fn method202(
            v0_1: Func0<(
                Array<(bool, string, bool, Dice_ui::US25, string)>,
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            )>,
        ) -> leptos::Resource<
            (
                Array<(bool, string, bool, Dice_ui::US25, string)>,
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            ),
            Result<Array<Option<string>>, std::string::String>,
        > {
            let v1 = Dice_ui::method203(v0_1);
            let __result = leptos::create_local_resource(
                move || v1(),
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                            Option<
                                Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                            >,
                        ) = x;
                        let v4: Array<(bool, string, bool, Dice_ui::US25, string)> =
                            patternInput.0.clone();
                        let v6: string = sprintf!("{:?}", v4.clone());
                        let v13: string =
                    Dice_ui::method0(append(append(string("state_core.use_requests (7) / json create_local_resource / requests: "),
                                                   (if length(v6.clone()) <=
                                                           400_i32 {
                                                        v6.clone()
                                                    } else {
                                                        append(substring2(v6,
                                                                          0_i32,
                                                                          400_i32),
                                                               string("..."))
                                                    })), string("")));
                        leptos::logging::log!("{}", v13);
                        {
                            let v16: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Array<Option<string>>, std::string::String>,
                                    >,
                                >,
                            > = Dice_ui::method226(Dice_ui::method204(patternInput.1.clone(), v4));
                            let v18: Result<Array<Option<string>>, std::string::String> = v16.await;
                            v18
                        }
                    }
                },
            );
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn method229(
            v0_1: leptos::Memo<Option<rexie::Rexie>>,
        ) -> leptos::Memo<Option<rexie::Rexie>> {
            v0_1
        }
        pub fn method230(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
        ) -> leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>> {
            v0_1
        }
        pub fn method233(v0_1: LrcPtr<Dice_ui::Heap4>) -> LrcPtr<Dice_ui::Heap4> {
            v0_1
        }
        pub fn method234(
            v0_1: string,
            v1: rexie::Rexie,
            v2: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>>
        {
            let __result = Box::pin(async move {
                //;
                {
                    let v4: rexie::Rexie = Dice_ui::method90(v1);
                    let v6: rexie::Transaction =
                        v4.transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                    let v8: rexie::Store = v6.store("store")?;
                    let mut data = Vec::new();
                    borsh::BorshSerialize::serialize(&v2, &mut data).unwrap();
                    {
                        let v12: Vec<u8> = data;
                        let v14: wasm_bindgen::JsValue =
                            serde_wasm_bindgen::to_value(&v12).unwrap();
                        let v15: string = Dice_ui::method6(v0_1);
                        let v17: &str = fable_library_rust::String_::LrcStr::as_str(&v15);
                        v8.put(&v14, Some(&v17.into())).await?;
                        v6.done().await?;
                        {
                            let v21: Result<(), rexie::Error> =
                                Dice_ui::method91(Ok::<(), rexie::Error>(()));
                            v21
                        }
                    }
                }
            });
            {
                {
                    {
                        //;
                        __result
                    }
                }
            }
        }
        pub fn closure89(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method235() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure89((), v))
        }
        pub fn method236(v0_1: Result<(), rexie::Error>) -> Result<(), rexie::Error> {
            v0_1
        }
        pub fn method237(v0_1: Result<(), std::string::String>) -> Result<(), std::string::String> {
            v0_1
        }
        pub fn method232(
            v0_1: LrcPtr<Dice_ui::Heap4>,
            v1: Dice_ui::US5,
            v2: bool,
            v3: string,
            v4: bool,
            v5: Dice_ui::US25,
            v6: string,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let __result = Box::pin(async move {
                //;
                {
                    let v32: Dice_ui::US37 = if let Dice_ui::US5::US5_1(v1_1_0) = &v1 {
                        let v10: string =
                            Dice_ui::method0(append(append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                                           v6.clone()),
                                                    string("")));
                        leptos::logging::log!("{}", v10);
                        {
                            let v12: string = append(
                                append(
                                    append(append(string("url["), v6), string("](")),
                                    sprintf!("{:?}", v3),
                                ),
                                string(")"),
                            );
                            let v16: string = Dice_ui::method0(append(
                                append(
                                    string("state_core.set_data () / data_len: "),
                                    toString(length(sprintf!("{:?}", v0_1.clone())) as i64),
                                ),
                                string(""),
                            ));
                            leptos::logging::log!("{}", v16);
                            {
                                let v19: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = Dice_ui::method234(
                                    v12,
                                    match &v1 {
                                        Dice_ui::US5::US5_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    Dice_ui::method233(v0_1),
                                );
                                let v21: Result<(), rexie::Error> = v19.await;
                                let v22 = Dice_ui::method235();
                                let v23: Result<(), rexie::Error> = Dice_ui::method236(v21);
                                let v25: Result<(), std::string::String> = v23.map_err(|x| v22(x));
                                v25?;
                                Dice_ui::US37::US37_1
                            }
                        }
                    } else {
                        let v29: string =
                            Dice_ui::method0(string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                        leptos::logging::log!("{}", v29);
                        Dice_ui::US37::US37_1
                    };
                    let v38: Result<(), std::string::String> = Dice_ui::method237(match &v32 {
                        Dice_ui::US37::US37_1 => Ok::<(), std::string::String>(()),
                        Dice_ui::US37::US37_0(v32_0_0) => {
                            Err::<(), std::string::String>(v32_0_0.clone())
                        }
                    });
                    v38
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure88(
            v0_1: LrcPtr<Dice_ui::Heap4>,
            v1: Dice_ui::US5,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            Dice_ui::method232(
                v0_1,
                v1,
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            )
        }
        pub fn method231(
            v0_1: LrcPtr<Dice_ui::Heap4>,
            v1: Dice_ui::US5,
        ) -> Func1<
            (bool, string, bool, Dice_ui::US25, string),
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                    Dice_ui::closure88(v0_1.clone(), v1.clone(), arg10_0040)
                }
            })
        }
        pub fn method238(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method239(
            v0_1: Result<Vec<()>, std::string::String>,
        ) -> Result<Vec<()>, std::string::String> {
            v0_1
        }
        pub fn method228(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<Option<rexie::Rexie>>,
            v2: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v4: leptos::Memo<Option<rexie::Rexie>> = Dice_ui::method229(v1);
                    let v9: Dice_ui::US5 = defaultValue(
                        Dice_ui::US5::US5_0,
                        map(
                            Func1::new(move |v: rexie::Rexie| Dice_ui::closure10((), v)),
                            leptos::SignalGetUntracked::get_untracked(&v4),
                        ),
                    );
                    let v10: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>> =
                        Dice_ui::method230(v0_1);
                    let v13: Array<(bool, string, bool, Dice_ui::US25, string)> =
                        Dice_ui::method162(leptos::SignalGetUntracked::get_untracked(&v10));
                    let v15: Vec<(bool, string, bool, Dice_ui::US25, string)> = v13.to_vec();
                    let v16 = Dice_ui::method231(v2, v9);
                    let v17: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                        Dice_ui::method189(v15);
                    let v20: Vec<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = Dice_ui::method238(v17.iter().map(|x| v16(x.clone())).collect());
                    let v22: futures::future::TryJoinAll<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = futures::future::try_join_all(v20);
                    let v24: Result<Vec<()>, std::string::String> = v22.await;
                    let v28: Result<Vec<()>, std::string::String> =
                        Dice_ui::method239(Ok::<Vec<()>, std::string::String>(v24?));
                    v28
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure87(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<Option<rexie::Rexie>>,
            v2: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v6: string = Dice_ui::method0(append(
                append(
                    string("state_core.use_requests (10) / set_state_data_action / value_len: "),
                    toString(length(sprintf!("{:?}", v2.clone())) as i64),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v6);
            Dice_ui::method228(v0_1, v1, v2)
        }
        pub fn method227(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<Option<rexie::Rexie>>,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap4>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure87(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn method241(
            v0_1: leptos::Resource<
                (
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Array<Option<string>>, std::string::String>,
            >,
        ) -> leptos::Resource<
            (
                Array<(bool, string, bool, Dice_ui::US25, string)>,
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            ),
            Result<Array<Option<string>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Result<Array<Option<string>>, std::string::String>,
        ) -> Dice_ui::US38 {
            Dice_ui::US38::US38_1(v0_1)
        }
        pub fn closure92(unitVar: (), v0_1: Array<Option<string>>) -> Dice_ui::US40 {
            Dice_ui::US40::US40_1(v0_1)
        }
        pub fn closure93(unitVar: (), v0_1: std::string::String) -> Dice_ui::US40 {
            Dice_ui::US40::US40_0(v0_1)
        }
        pub fn closure95(unitVar: (), v0_1: string) -> Dice_ui::US34 {
            Dice_ui::US34::US34_1(v0_1)
        }
        pub fn closure94(unitVar: (), v0_1: Option<string>) -> Dice_ui::US34 {
            defaultValue(
                Dice_ui::US34::US34_0,
                map(Func1::new(move |v: string| Dice_ui::closure95((), v)), v0_1),
            )
        }
        pub fn method242() -> Func1<Option<string>, Dice_ui::US34> {
            Func1::new(move |v: Option<string>| Dice_ui::closure94((), v))
        }
        pub fn method243(v0_1: Array<Option<string>>) -> Array<Option<string>> {
            v0_1
        }
        pub fn method244(v0_1: Vec<Dice_ui::US34>) -> Vec<Dice_ui::US34> {
            v0_1
        }
        pub fn method245(v0_1: Array<Dice_ui::US34>) -> Array<Dice_ui::US34> {
            v0_1
        }
        pub fn method247(v0_1: LrcPtr<Dice_ui::Heap4>) -> LrcPtr<Dice_ui::Heap4> {
            v0_1
        }
        pub fn method248(
            v0_1: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
        ) -> leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>> {
            v0_1
        }
        pub fn closure96(
            v0_1: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
            v1: Dice_ui::US34,
        ) {
            if let Dice_ui::US34::US34_1(v1_1_0) = &v1 {
                let v4: string = Dice_ui::method6(Dice_ui::method18(match &v1 {
                    Dice_ui::US34::US34_1(x) => x.clone(),
                    _ => unreachable!(),
                }));
                let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
                let v10: LrcPtr<Dice_ui::Heap4> = Dice_ui::method247(LrcPtr::new(Dice_ui::Heap4 {
                    l0: String::from(v6),
                }));
                let v11: leptos::Action<
                    LrcPtr<Dice_ui::Heap4>,
                    Result<Vec<()>, std::string::String>,
                > = Dice_ui::method248(v0_1);
                leptos::Action::dispatch(&v11, v10.clone());
                ()
            };
        }
        pub fn method246(
            v0_1: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
        ) -> Func1<Dice_ui::US34, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: Dice_ui::US34| Dice_ui::closure96(v0_1.clone(), v)
            })
        }
        pub fn method249(v0_1: Array<Dice_ui::US34>) -> Array<Dice_ui::US34> {
            v0_1
        }
        pub fn method250(v0_1: Vec<()>) -> Vec<()> {
            v0_1
        }
        pub fn closure99(unitVar: (), v0_1: Dice_ui::US34) -> Dice_ui::US43 {
            Dice_ui::US43::US43_1(v0_1)
        }
        pub fn method252(
            v0_1: Result<crate::model::near::nearblocks::Root, serde_json::Error>,
        ) -> Result<crate::model::near::nearblocks::Root, serde_json::Error> {
            v0_1
        }
        pub fn closure100(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method253(
        ) -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure100((), v))
        }
        pub fn method254(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure98(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v38: Dice_ui::US32 = match &v0_1 {
                Dice_ui::US29::US29_1(v0_1_1_0) => {
                    let v8: Dice_ui::US30 = v0_1_1_0.clone();
                    Dice_ui::US32::US32_1(match &v8 {
                        Dice_ui::US30::US30_1(v8_1_0) => {
                            let v13: Dice_ui::US35 = defaultValue(
                                Dice_ui::US35::US35_0,
                                map(
                                    Func1::new(move |v: Dice_ui::US27| Dice_ui::closure85((), v)),
                                    tryItem(v2, v8_1_0.clone()),
                                ),
                            );
                            let v20: Dice_ui::US27 = if let Dice_ui::US35::US35_1(v13_1_0) = &v13 {
                                let v14: Dice_ui::US27 = match &v13 {
                                    Dice_ui::US35::US35_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US27::US27_1(v14_1_0) = &v14 {
                                    Dice_ui::US27::US27_1(match &v14 {
                                        Dice_ui::US27::US27_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US27::US27_0
                                }
                            } else {
                                Dice_ui::US27::US27_0
                            };
                            Dice_ui::US33::US33_1(match &v20 {
                                Dice_ui::US27::US27_1(v20_1_0) => {
                                    let v23: std::string::String =
                                        Dice_ui::method70((v20_1_0).l0.clone());
                                    Dice_ui::US34::US34_1(fable_library_rust::String_::fromString(
                                        v23,
                                    ))
                                }
                                _ => Dice_ui::US34::US34_0,
                            })
                        }
                        Dice_ui::US30::US30_0(v8_0_0) => Dice_ui::US33::US33_0(v8_0_0.clone()),
                    })
                }
                _ => Dice_ui::US32::US32_0,
            };
            let v39: string = sprintf!(
                "{:?}",
                (
                    _arg.0.clone(),
                    _arg.1.clone(),
                    _arg.2.clone(),
                    _arg.3.clone(),
                    _arg.4.clone()
                )
            );
            let v45: string = sprintf!("{:?}", v38.clone());
            let v52: string = Dice_ui::method0(append(
                append(
                    append(
                        append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (if length(v39.clone()) <= 400_i32 {
                                v39.clone()
                            } else {
                                append(substring2(v39, 0_i32, 400_i32), string("..."))
                            }),
                        ),
                        string(" / state_data: "),
                    ),
                    (if length(v45.clone()) <= 400_i32 {
                        v45.clone()
                    } else {
                        append(substring2(v45, 0_i32, 400_i32), string("..."))
                    }),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v52);
            {
                let v54: string = sprintf!("{:?}", v1.clone());
                let v61: string = Dice_ui::method0(append(
                    append(
                        string("state_core.use_request (16) / effect / json: "),
                        (if length(v54.clone()) <= 400_i32 {
                            v54.clone()
                        } else {
                            append(substring2(v54, 0_i32, 400_i32), string("..."))
                        }),
                    ),
                    string(""),
                ));
                leptos::logging::log!("{}", v61);
                {
                    let v78: Dice_ui::US34 = match &v1 {
                        Dice_ui::US42::US42_1(v1_1_0) => {
                            let v67: Dice_ui::US43 = defaultValue(
                                Dice_ui::US43::US43_0,
                                map(
                                    Func1::new(move |v_1: Dice_ui::US34| {
                                        Dice_ui::closure99((), v_1)
                                    }),
                                    tryItem(v2, v1_1_0.clone()),
                                ),
                            );
                            if let Dice_ui::US43::US43_1(v67_1_0) = &v67 {
                                let v68: Dice_ui::US34 = match &v67 {
                                    Dice_ui::US43::US43_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US34::US34_1(v68_1_0) = &v68 {
                                    Dice_ui::US34::US34_1(match &v68 {
                                        Dice_ui::US34::US34_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US34::US34_0
                                }
                            } else {
                                Dice_ui::US34::US34_0
                            }
                        }
                        _ => Dice_ui::US34::US34_0,
                    };
                    if let Dice_ui::US34::US34_1(v78_1_0) = &v78 {
                        let v80: string = Dice_ui::method6(match &v78 {
                            Dice_ui::US34::US34_1(x) => x.clone(),
                            _ => unreachable!(),
                        });
                        let v82: &str = fable_library_rust::String_::LrcStr::as_str(&v80);
                        let v84: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                            serde_json::from_str(&v82);
                        let v85 = Dice_ui::method71();
                        let v86: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                            Dice_ui::method252(v84);
                        let v88: Result<crate::model::near::nearblocks::Root, std::string::String> =
                            v86.map_err(|x| v85(x));
                        let v89 = Dice_ui::method253();
                        let v90: Result<crate::model::near::nearblocks::Root, std::string::String> =
                            Dice_ui::method254(v88);
                        v90.map(|x| v89(x))
                    } else {
                        if let Dice_ui::US32::US32_1(v38_1_0) = &v38 {
                            let v93: Dice_ui::US33 = match &v38 {
                                Dice_ui::US32::US32_1(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US33::US33_1(v93_1_0) = &v93 {
                                let v94: Dice_ui::US34 = match &v93 {
                                    Dice_ui::US33::US33_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US34::US34_1(v94_1_0) = &v94 {
                                    let v96: string = Dice_ui::method6(match &v94 {
                                        Dice_ui::US34::US34_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                    let v98: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v96);
                                    let v100: Result<
                                        crate::model::near::nearblocks::Root,
                                        serde_json::Error,
                                    > = serde_json::from_str(&v98);
                                    let v101 = Dice_ui::method71();
                                    let v102: Result<
                                        crate::model::near::nearblocks::Root,
                                        serde_json::Error,
                                    > = Dice_ui::method252(v100);
                                    let v104: Result<
                                        crate::model::near::nearblocks::Root,
                                        std::string::String,
                                    > = v102.map_err(|x| v101(x));
                                    let v105 = Dice_ui::method253();
                                    let v106: Result<
                                        crate::model::near::nearblocks::Root,
                                        std::string::String,
                                    > = Dice_ui::method254(v104);
                                    v106.map(|x| v105(x))
                                } else {
                                    let v111: string =
                                        Dice_ui::method0(append(append(string("state_core.use_request (17) / json Error / value: "),
                                                                       sprintf!("{:?}",
                                                                                (v78.clone(),
                                                                                 v38.clone()))),
                                                                string("")));
                                    leptos::logging::log!("{}", v111);
                                    Ok::<
                                        Option<crate::model::near::nearblocks::Root>,
                                        std::string::String,
                                    >(
                                        None::<crate::model::near::nearblocks::Root>
                                    )
                                }
                            } else {
                                let v118: string = Dice_ui::method0(append(
                                    append(
                                        string(
                                            "state_core.use_request (17) / json Error / value: ",
                                        ),
                                        sprintf!("{:?}", (v78.clone(), v38.clone())),
                                    ),
                                    string(""),
                                ));
                                leptos::logging::log!("{}", v118);
                                Ok::<
                                    Option<crate::model::near::nearblocks::Root>,
                                    std::string::String,
                                >(
                                    None::<crate::model::near::nearblocks::Root>
                                )
                            }
                        } else {
                            let v125: string = Dice_ui::method0(append(
                                append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v78, v38)),
                                ),
                                string(""),
                            ));
                            leptos::logging::log!("{}", v125);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    }
                }
            }
        }
        pub fn closure97(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (bool, string, bool, Dice_ui::US25, string),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                    Dice_ui::closure98(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method251(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (bool, string, bool, Dice_ui::US25, string),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure97(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn method255(
            v0_1: Vec<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
        ) -> Vec<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            v0_1
        }
        pub fn closure90(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::Resource<
                (
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Array<Option<string>>, std::string::String>,
            >,
            v3: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v4: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method179(v0_1);
            let v6: Array<(bool, string, bool, Dice_ui::US25, string)> = v4();
            let v9: string = Dice_ui::method0(append(
                append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v6.clone()),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v9);
            {
                let v11: leptos::Memo<
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                > = Dice_ui::method201(v1);
                let v16: Dice_ui::US28 = defaultValue(
                    Dice_ui::US28::US28_0,
                    map(
                        Func1::new(
                            move |v: Result<
                                Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >| Dice_ui::closure78((), v),
                        ),
                        v11(),
                    ),
                );
                let v39: Dice_ui::US29 = match &v16 {
                    Dice_ui::US28::US28_1(v16_1_0) => {
                        let v17: Result<
                            Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                            std::string::String,
                        > = v16_1_0.clone();
                        let v20: Dice_ui::US31 = match &v17 {
                            Err(v17_1_0) => Dice_ui::closure80((), v17_1_0.clone()),
                            Ok(v17_0_0) => Dice_ui::closure79((), v17_0_0.clone()),
                        };
                        Dice_ui::US29::US29_1(match &v20 {
                            Dice_ui::US31::US31_1(v20_1_0) => {
                                let v22 = Dice_ui::method205();
                                let v23: Array<Option<LrcPtr<Dice_ui::Heap4>>> =
                                    Dice_ui::method206(v20_1_0.clone());
                                let v25: Vec<Option<LrcPtr<Dice_ui::Heap4>>> = v23.to_vec();
                                let v28: Vec<Dice_ui::US27> = Dice_ui::method207(
                                    v25.iter().map(|x| v22(x.clone())).collect(),
                                );
                                Dice_ui::US30::US30_1(fable_library_rust::NativeArray_::array_from(
                                    v28,
                                ))
                            }
                            Dice_ui::US31::US31_0(v20_0_0) => {
                                Dice_ui::US30::US30_0(v20_0_0.clone())
                            }
                        })
                    }
                    _ => Dice_ui::US29::US29_0,
                };
                let v40: string = sprintf!("{:?}", v39.clone());
                let v47: string = Dice_ui::method0(append(
                    append(
                        string("state_core.use_request (14) / result_memo / state_data: "),
                        (if length(v40.clone()) <= 400_i32 {
                            v40.clone()
                        } else {
                            append(substring2(v40, 0_i32, 400_i32), string("..."))
                        }),
                    ),
                    string(""),
                ));
                leptos::logging::log!("{}", v47);
                {
                    let v49: leptos::Resource<
                        (
                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                            Option<
                                Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                            >,
                        ),
                        Result<Array<Option<string>>, std::string::String>,
                    > = Dice_ui::method241(v2);
                    let v54: Dice_ui::US38 = defaultValue(
                        Dice_ui::US38::US38_0,
                        map(
                            Func1::new(
                                move |v_3: Result<Array<Option<string>>, std::string::String>| {
                                    Dice_ui::closure91((), v_3)
                                },
                            ),
                            leptos::SignalGet::get(&v49),
                        ),
                    );
                    let v62: Dice_ui::US39 = match &v54 {
                        Dice_ui::US38::US38_1(v54_1_0) => {
                            let v55: Result<Array<Option<string>>, std::string::String> =
                                v54_1_0.clone();
                            Dice_ui::US39::US39_1(match &v55 {
                                Err(v55_1_0) => Dice_ui::closure93((), v55_1_0.clone()),
                                Ok(v55_0_0) => Dice_ui::closure92((), v55_0_0.clone()),
                            })
                        }
                        _ => Dice_ui::US39::US39_0,
                    };
                    let v82: Dice_ui::US41 = match &v62 {
                        Dice_ui::US39::US39_1(v62_1_0) => {
                            let v63: Dice_ui::US40 = v62_1_0.clone();
                            Dice_ui::US41::US41_1(match &v63 {
                                Dice_ui::US40::US40_1(v63_1_0) => {
                                    let v65 = Dice_ui::method242();
                                    let v66: Array<Option<string>> =
                                        Dice_ui::method243(v63_1_0.clone());
                                    let v68: Vec<Option<string>> = v66.to_vec();
                                    let v71: Vec<Dice_ui::US34> = Dice_ui::method244(
                                        v68.iter().map(|x| v65(x.clone())).collect(),
                                    );
                                    Dice_ui::US42::US42_1(
                                        fable_library_rust::NativeArray_::array_from(v71),
                                    )
                                }
                                Dice_ui::US40::US40_0(v63_0_0) => {
                                    Dice_ui::US42::US42_0(v63_0_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US41::US41_0,
                    };
                    let v84: Array<Dice_ui::US34> =
                        Dice_ui::method245(new_empty::<Dice_ui::US34>());
                    let v88: Dice_ui::US42 = match &v82 {
                        Dice_ui::US41::US41_1(v82_1_0) => v82_1_0.clone(),
                        _ => Dice_ui::US42::US42_1(v84),
                    };
                    match &v88 {
                        Dice_ui::US42::US42_1(v88_1_0) => {
                            let v90 = Dice_ui::method246(v3);
                            let v91: Array<Dice_ui::US34> = Dice_ui::method249(v88_1_0.clone());
                            let v93: Vec<Dice_ui::US34> = v91.to_vec();
                            let v96: Vec<()> =
                                Dice_ui::method250(v93.iter().map(|x| v90(x.clone())).collect());
                            let v98: Array<()> = fable_library_rust::NativeArray_::array_from(v96);
                            ()
                        }
                        _ => (),
                    }
                    {
                        let v100 = Dice_ui::method251(v39, v88.clone());
                        let v101: Array<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method162(v6);
                        let v103: Vec<(bool, string, bool, Dice_ui::US25, string)> = v101.to_vec();
                        let v106: Vec<
                            Result<
                                Option<crate::model::near::nearblocks::Root>,
                                std::string::String,
                            >,
                        > = Dice_ui::method255(
                            v103.iter()
                                .enumerate()
                                .map(|(i, x)| v100(i.try_into().unwrap())(x.clone()))
                                .collect(),
                        );
                        let v108: Array<
                            Result<
                                Option<crate::model::near::nearblocks::Root>,
                                std::string::String,
                            >,
                        > = fable_library_rust::NativeArray_::array_from(v106);
                        let v110: string = append(
                            append(
                                string(
                                    "state_core.use_requests (18) / result_func func0 / result: ",
                                ),
                                sprintf!("{:?}", v108.clone()),
                            ),
                            string(""),
                        );
                        let v116: string = Dice_ui::method0(if length(v110.clone()) <= 200_i32 {
                            v110.clone()
                        } else {
                            append(substring2(v110, 0_i32, 200_i32), string("..."))
                        });
                        leptos::logging::log!("{}", v116);
                        v108
                    }
                }
            }
        }
        pub fn method240(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::Resource<
                (
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Array<Option<string>>, std::string::String>,
            >,
            v3: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
        ) -> Func0<Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>>
        {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure90(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn method257(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
        ) -> leptos::Resource<Dice_ui::US2, rexie::Rexie> {
            v0_1
        }
        pub fn method258(v0_1: leptos::Signal<bool>) -> leptos::Signal<bool> {
            v0_1
        }
        pub fn method259(
            v0_1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
        ) -> leptos::Resource<
            (
                Option<rexie::Rexie>,
                Array<(bool, string, bool, Dice_ui::US25, string)>,
            ),
            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure102(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US44 {
            Dice_ui::US44::US44_1(v0_1)
        }
        pub fn closure103(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US45 {
            Dice_ui::US45::US45_1(v0_1)
        }
        pub fn closure104(unitVar: (), v0_1: std::string::String) -> Dice_ui::US45 {
            Dice_ui::US45::US45_0(v0_1)
        }
        pub fn method260(
            v0_1: Func0<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
        ) -> Func0<Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>>
        {
            v0_1
        }
        pub fn method263(
            v0_1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<crate::model::near::nearblocks::Root> {
            v0_1
        }
        pub fn method265(
            v0_1: crate::model::near::nearblocks::Root,
        ) -> crate::model::near::nearblocks::Root {
            v0_1
        }
        pub fn method267(
            v0_1: crate::model::near::nearblocks::Txn,
        ) -> crate::model::near::nearblocks::Txn {
            v0_1
        }
        pub fn method268(
            v0_1: crate::model::near::nearblocks::Block,
        ) -> crate::model::near::nearblocks::Block {
            v0_1
        }
        pub fn method270(
            v0_1: crate::model::near::nearblocks::Action,
        ) -> crate::model::near::nearblocks::Action {
            v0_1
        }
        pub fn closure109(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            let v1: crate::model::near::nearblocks::Action = Dice_ui::method270(v0_1);
            (v1.action, v1.method)
        }
        pub fn method269() -> Func1<
            crate::model::near::nearblocks::Action,
            (std::string::String, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::nearblocks::Action| Dice_ui::closure109((), v))
        }
        pub fn method271(
            v0_1: Vec<crate::model::near::nearblocks::Action>,
        ) -> Vec<crate::model::near::nearblocks::Action> {
            v0_1
        }
        pub fn method272(
            v0_1: Vec<(std::string::String, Option<std::string::String>)>,
        ) -> Vec<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn method273(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn method274(
            v0_1: crate::model::near::nearblocks::ActionsAgg,
        ) -> crate::model::near::nearblocks::ActionsAgg {
            v0_1
        }
        pub fn method275(
            v0_1: crate::model::near::nearblocks::Outcomes,
        ) -> crate::model::near::nearblocks::Outcomes {
            v0_1
        }
        pub fn method276(
            v0_1: crate::model::near::nearblocks::OutcomesAgg,
        ) -> crate::model::near::nearblocks::OutcomesAgg {
            v0_1
        }
        pub fn method277(v0_1: Array<std::string::String>) -> Array<std::string::String> {
            v0_1
        }
        pub fn closure108(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Txn,
        ) -> (
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v1: crate::model::near::nearblocks::Txn = Dice_ui::method267(v0_1);
            let v3: std::string::String = v1.receipt_id;
            let v5: std::string::String = v1.predecessor_account_id;
            let v7: std::string::String = v1.receiver_account_id;
            let v9: std::string::String = v1.transaction_hash;
            let v11: std::string::String = v1.included_in_block_hash;
            let v13: std::string::String = v1.block_timestamp;
            let v16: crate::model::near::nearblocks::Block = Dice_ui::method268(v1.block);
            let v18: u32 = v16.block_height;
            let v20: Vec<crate::model::near::nearblocks::Action> = v1.actions;
            let v21 = Dice_ui::method269();
            let v22: Vec<crate::model::near::nearblocks::Action> = Dice_ui::method271(v20);
            let v25: Vec<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method272(v22.iter().map(|x| v21(x.clone())).collect());
            let v28: Array<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method273(fable_library_rust::NativeArray_::array_from(v25));
            let v31: crate::model::near::nearblocks::ActionsAgg =
                Dice_ui::method274(v1.actions_agg);
            let v33: f64 = v31.deposit;
            let v36: crate::model::near::nearblocks::Outcomes = Dice_ui::method275(v1.outcomes);
            let v38: bool = v36.status;
            let v41: crate::model::near::nearblocks::OutcomesAgg =
                Dice_ui::method276(v1.outcomes_agg);
            let v43: f64 = v41.transaction_fee;
            let v46: Vec<std::string::String> = Dice_ui::method37(v1.logs);
            (
                v28,
                v33,
                v18,
                v13,
                v11,
                Dice_ui::method277(fable_library_rust::NativeArray_::array_from(v46)),
                v38,
                v43,
                v5,
                v3,
                v7,
                v9,
            )
        }
        pub fn method266() -> Func1<
            crate::model::near::nearblocks::Txn,
            (
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::nearblocks::Txn| Dice_ui::closure108((), v))
        }
        pub fn method278(
            v0_1: Vec<crate::model::near::nearblocks::Txn>,
        ) -> Vec<crate::model::near::nearblocks::Txn> {
            v0_1
        }
        pub fn method279(
            v0_1: Vec<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Vec<(
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            v0_1
        }
        pub fn method280(
            v0_1: Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Array<(
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            v0_1
        }
        pub fn closure107(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            let v1: crate::model::near::nearblocks::Root = Dice_ui::method265(v0_1);
            let v3: Vec<crate::model::near::nearblocks::Txn> = v1.txns;
            let v4 = Dice_ui::method266();
            let v5: Vec<crate::model::near::nearblocks::Txn> = Dice_ui::method278(v3);
            let v8: Vec<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = Dice_ui::method279(v5.iter().map(|x| v4(x.clone())).collect());
            Dice_ui::method280(fable_library_rust::NativeArray_::array_from(v8))
        }
        pub fn method264() -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        > {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure107((), v))
        }
        pub fn closure106(
            unitVar: (),
            v0_1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        > {
            let v1: Option<crate::model::near::nearblocks::Root> = Dice_ui::method263(v0_1);
            let v2 = Dice_ui::method264();
            v1.map(|x| v2(x))
        }
        pub fn method262() -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
            >,
        > {
            Func1::new(move |v: Option<crate::model::near::nearblocks::Root>| {
                Dice_ui::closure106((), v)
            })
        }
        pub fn method281(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn closure105(
            unitVar: (),
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
            >,
            std::string::String,
        > {
            let v1 = Dice_ui::method262();
            let v2: Result<Option<crate::model::near::nearblocks::Root>, std::string::String> =
                Dice_ui::method281(v0_1);
            v2.map(|x| v1(x))
        }
        pub fn method261() -> Func1<
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            Result<
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
                std::string::String,
            >,
        > {
            Func1::new(
                move |v: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                >| Dice_ui::closure105((), v),
            )
        }
        pub fn method282(
            v0_1: Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            v0_1
        }
        pub fn method283(
            v0_1: Vec<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure101(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            v1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v2: Func0<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Array<
            Result<
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v3: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method257(v0_1.clone());
            let v6: leptos::Signal<bool> = Dice_ui::method258(leptos::Resource::loading(&v3));
            let v8: bool = leptos::SignalGet::get(&v6);
            let v9: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method259(v1.clone());
            let v12: leptos::Signal<bool> = Dice_ui::method258(leptos::Resource::loading(&v9));
            let v14: bool = leptos::SignalGet::get(&v12);
            let v15: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method29(v0_1);
            let v20: Dice_ui::US5 = defaultValue(
                Dice_ui::US5::US5_0,
                map(
                    Func1::new(move |v: rexie::Rexie| Dice_ui::closure10((), v)),
                    leptos::SignalGet::get(&v15),
                ),
            );
            let v21: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method194(v1);
            let v26: Dice_ui::US44 = defaultValue(
                Dice_ui::US44::US44_0,
                map(
                    Func1::new(
                        move |v_1: Result<
                            Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                            std::string::String,
                        >| Dice_ui::closure102((), v_1),
                    ),
                    leptos::SignalGet::get(&v21),
                ),
            );
            let v52: Dice_ui::US29 = match &v26 {
                Dice_ui::US44::US44_1(v26_1_0) => {
                    let v27: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        v26_1_0.clone();
                    let v30: Dice_ui::US45 = match &v27 {
                        Err(v27_1_0) => Dice_ui::closure104((), v27_1_0.clone()),
                        Ok(v27_0_0) => Dice_ui::closure103((), v27_0_0.clone()),
                    };
                    Dice_ui::US29::US29_1(match &v30 {
                        Dice_ui::US45::US45_1(v30_1_0) => {
                            let v32: Vec<Option<LrcPtr<Dice_ui::Heap4>>> =
                                Dice_ui::method198(v30_1_0.clone());
                            let v34: Array<Option<LrcPtr<Dice_ui::Heap4>>> =
                                fable_library_rust::NativeArray_::array_from(v32);
                            let v35 = Dice_ui::method205();
                            let v36: Array<Option<LrcPtr<Dice_ui::Heap4>>> =
                                Dice_ui::method206(v34);
                            let v38: Vec<Option<LrcPtr<Dice_ui::Heap4>>> = v36.to_vec();
                            let v41: Vec<Dice_ui::US27> =
                                Dice_ui::method207(v38.iter().map(|x| v35(x.clone())).collect());
                            Dice_ui::US30::US30_1(fable_library_rust::NativeArray_::array_from(v41))
                        }
                        Dice_ui::US45::US45_0(v30_0_0) => Dice_ui::US30::US30_0(v30_0_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_0,
            };
            let v53: string = sprintf!("{:?}", v20);
            let v58: string = if length(v53.clone()) <= 400_i32 {
                v53.clone()
            } else {
                append(substring2(v53, 0_i32, 400_i32), string("..."))
            };
            let v59: string = sprintf!("{:?}", v52);
            let v64: string = if length(v59.clone()) <= 400_i32 {
                v59.clone()
            } else {
                append(substring2(v59, 0_i32, 400_i32), string("..."))
            };
            let v66: string =
                Dice_ui::method0(append(append(append(append(append(append(append(append(string("state_core.use_request (19) / result move / database: "),
                                                                                         v58),
                                                                                  string(" / database_loading: ")),
                                                                           ofBoolean(v8)),
                                                                    string(" / state_data: ")),
                                                             v64),
                                                      string(" / state_data_loading: ")),
                                               ofBoolean(v14)), string("")));
            leptos::logging::log!("{}", v66);
            {
                let v68: Func0<
                    Array<
                        Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                    >,
                > = Dice_ui::method260(v2);
                let v70: Array<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = (move || v68())();
                let v71 = Dice_ui::method261();
                let v72: Array<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = Dice_ui::method282(v70);
                let v74: Vec<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = v72.to_vec();
                let v77: Vec<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                > = Dice_ui::method283(v74.iter().map(|x| v71(x.clone())).collect());
                let v79: Array<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v77);
                let v81: string = append(
                    append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v79.clone()),
                    ),
                    string(""),
                );
                let v87: string = Dice_ui::method0(if length(v81.clone()) <= 200_i32 {
                    v81.clone()
                } else {
                    append(substring2(v81, 0_i32, 200_i32), string("..."))
                });
                leptos::logging::log!("{}", v87);
                v79
            }
        }
        pub fn method256(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            v1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v2: Func0<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
        ) -> Func0<
            Array<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure101(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn method285(
            v0_1: leptos::Memo<
                Array<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
        ) -> leptos::Memo<
            Array<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure112(
            unitVar: (),
            v0_1: Option<
                Array<(
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
            >,
        ) -> Dice_ui::US46 {
            Dice_ui::US46::US46_1(v0_1)
        }
        pub fn closure113(unitVar: (), v0_1: std::string::String) -> Dice_ui::US46 {
            Dice_ui::US46::US46_0(v0_1)
        }
        pub fn closure111(
            unitVar: (),
            v0_1: Result<
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US46 {
            match &v0_1 {
                Err(v0_1_1_0) => Dice_ui::closure113((), v0_1_1_0.clone()),
                Ok(v0_1_0_0) => Dice_ui::closure112((), v0_1_0_0.clone()),
            }
        }
        pub fn method286() -> Func1<
            Result<
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
                std::string::String,
            >,
            Dice_ui::US46,
        > {
            Func1::new(
                move |v: Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >| Dice_ui::closure111((), v),
            )
        }
        pub fn method287(
            v0_1: Array<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        ) -> Array<
            Result<
                Option<
                    Array<(
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                >,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn method288(v0_1: Vec<Dice_ui::US46>) -> Vec<Dice_ui::US46> {
            v0_1
        }
        pub fn closure115(
            unitVar: (),
            v0_1: Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Dice_ui::US48 {
            Dice_ui::US48::US48_1(v0_1)
        }
        pub fn closure114(unitVar: (), v0_1: Dice_ui::US46) -> Dice_ui::US47 {
            match &v0_1 {
                Dice_ui::US46::US46_1(v0_1_1_0) => Dice_ui::US47::US47_1(defaultValue(
                    Dice_ui::US48::US48_0,
                    map(
                        Func1::new(
                            move |v: Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>| Dice_ui::closure115((), v),
                        ),
                        v0_1_1_0.clone(),
                    ),
                )),
                Dice_ui::US46::US46_0(v0_1_0_0) => Dice_ui::US47::US47_0(v0_1_0_0.clone()),
            }
        }
        pub fn method289() -> Func1<Dice_ui::US46, Dice_ui::US47> {
            Func1::new(move |v: Dice_ui::US46| Dice_ui::closure114((), v))
        }
        pub fn method290(v0_1: Array<Dice_ui::US46>) -> Array<Dice_ui::US46> {
            v0_1
        }
        pub fn method291(v0_1: Vec<Dice_ui::US47>) -> Vec<Dice_ui::US47> {
            v0_1
        }
        pub fn closure116(unitVar: (), v0_1: Dice_ui::US47) -> bool {
            if let Dice_ui::US47::US47_1(v0_1_1_0) = &v0_1 {
                if let Dice_ui::US48::US48_0 = &match &v0_1 {
                    Dice_ui::US47::US47_1(x) => x.clone(),
                    _ => unreachable!(),
                } {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method292() -> Func1<Dice_ui::US47, bool> {
            Func1::new(move |v: Dice_ui::US47| Dice_ui::closure116((), v))
        }
        pub fn method293(v0_1: Array<Dice_ui::US47>) -> Array<Dice_ui::US47> {
            v0_1
        }
        pub fn method295(
            v0_1: Array<(
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Array<(
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            v0_1
        }
        pub fn method296(
            v0_1: Vec<
                LrcPtr<(
                    usize,
                    (
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                usize,
                (
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure119(
            unitVar: (),
            v0_: usize,
            v0__1: (
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        ) -> (
            usize,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v0_1: LrcPtr<(
                usize,
                (
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ) = v0_1.1.clone();
            (
                v0_1.0.clone(),
                b.0.clone(),
                b.1.clone(),
                b.2.clone(),
                b.3.clone(),
                b.4.clone(),
                b.5.clone(),
                b.6.clone(),
                b.7.clone(),
                b.8.clone(),
                b.9.clone(),
                b.10.clone(),
                b.11.clone(),
            )
        }
        pub fn method297() -> Func1<
            LrcPtr<(
                usize,
                (
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            )>,
            (
                usize,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(
                move |tupledArg: LrcPtr<(
                    usize,
                    (
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    ),
                )>| {
                    Dice_ui::closure119((), tupledArg.0.clone(), tupledArg.1.clone())
                },
            )
        }
        pub fn method298(
            v0_1: Array<
                LrcPtr<(
                    usize,
                    (
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        u32,
                        std::string::String,
                        std::string::String,
                        Array<std::string::String>,
                        bool,
                        f64,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    ),
                )>,
            >,
        ) -> Array<
            LrcPtr<(
                usize,
                (
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method299(
            v0_1: Vec<(
                usize,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Vec<(
            usize,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            v0_1
        }
        pub fn closure120(
            v0_1: string,
            _arg: (
                usize,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            (
                v0_1,
                _arg.0.clone(),
                LrcPtr::new(Dice_ui::Heap5 {
                    l0: _arg.1.clone(),
                    l1: _arg.2.clone(),
                    l2: _arg.3.clone(),
                    l3: _arg.4.clone(),
                    l4: _arg.5.clone(),
                    l5: _arg.6.clone(),
                    l6: _arg.7.clone(),
                    l7: _arg.8.clone(),
                    l8: _arg.9.clone(),
                    l9: _arg.10.clone(),
                    l10: _arg.11.clone(),
                    l11: _arg.12.clone(),
                }),
            )
        }
        pub fn method300(
            v0_1: string,
        ) -> Func1<
            (
                usize,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
            (string, usize, LrcPtr<Dice_ui::Heap5>),
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (
                    usize,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    u32,
                    std::string::String,
                    std::string::String,
                    Array<std::string::String>,
                    bool,
                    f64,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure120(v0_1.clone(), arg10_0040)
            })
        }
        pub fn method301(
            v0_1: Array<(
                usize,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                u32,
                std::string::String,
                std::string::String,
                Array<std::string::String>,
                bool,
                f64,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Array<(
            usize,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            u32,
            std::string::String,
            std::string::String,
            Array<std::string::String>,
            bool,
            f64,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            v0_1
        }
        pub fn method302(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure118(v0_1: Array<string>, v1: i32, v2: Dice_ui::US47) -> Dice_ui::US49 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US47::US47_1(v2_1_0) => {
                    let v4: Dice_ui::US48 = v2_1_0.clone();
                    Dice_ui::US49::US49_1(match &v4 {
                        Dice_ui::US48::US48_1(v4_1_0) => {
                            let v6: Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = Dice_ui::method295(v4_1_0.clone());
                            let v8: Vec<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = v6.to_vec();
                            let v11: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        u32,
                                        std::string::String,
                                        std::string::String,
                                        Array<std::string::String>,
                                        bool,
                                        f64,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    ),
                                )>,
                            > = Dice_ui::method296(
                                v8.into_iter().enumerate().map(std::rc::Rc::new).collect(),
                            );
                            let v13: Array<
                                LrcPtr<(
                                    usize,
                                    (
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        u32,
                                        std::string::String,
                                        std::string::String,
                                        Array<std::string::String>,
                                        bool,
                                        f64,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    ),
                                )>,
                            > = fable_library_rust::NativeArray_::array_from(v11);
                            let v14 = Dice_ui::method297();
                            let v15: Array<
                                LrcPtr<(
                                    usize,
                                    (
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        u32,
                                        std::string::String,
                                        std::string::String,
                                        Array<std::string::String>,
                                        bool,
                                        f64,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    ),
                                )>,
                            > = Dice_ui::method298(v13);
                            let v17: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        u32,
                                        std::string::String,
                                        std::string::String,
                                        Array<std::string::String>,
                                        bool,
                                        f64,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    ),
                                )>,
                            > = v15.to_vec();
                            let v20: Vec<(
                                usize,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = Dice_ui::method299(v17.iter().map(|x| v14(x.clone())).collect());
                            let v22: Array<(
                                usize,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = fable_library_rust::NativeArray_::array_from(v20);
                            let v23 = Dice_ui::method300(v3);
                            let v24: Array<(
                                usize,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = Dice_ui::method301(v22);
                            let v26: Vec<(
                                usize,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )> = v24.to_vec();
                            let v29: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method302(v26.iter().map(|x| v23(x.clone())).collect());
                            Dice_ui::US50::US50_1(fable_library_rust::NativeArray_::array_from(v29))
                        }
                        _ => Dice_ui::US50::US50_0,
                    })
                }
                Dice_ui::US47::US47_0(v2_0_0) => Dice_ui::US49::US49_0(v2_0_0.clone()),
            }
        }
        pub fn closure117(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US47, Dice_ui::US49> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US47| Dice_ui::closure118(v0_1.clone(), v1, v)
            })
        }
        pub fn method294(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US47, Dice_ui::US49>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure117(v0_1.clone(), v)
            })
        }
        pub fn method303(v0_1: Vec<Dice_ui::US49>) -> Vec<Dice_ui::US49> {
            v0_1
        }
        pub fn closure121(unitVar: (), v0_1: Dice_ui::US49) -> Dice_ui::US51 {
            match &v0_1 {
                Dice_ui::US49::US49_1(v0_1_1_0) => {
                    let v1: Dice_ui::US50 = v0_1_1_0.clone();
                    Dice_ui::US51::US51_1(match &v1 {
                        Dice_ui::US50::US50_1(v1_1_0) => Some(v1_1_0.clone()),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US49::US49_0(v0_1_0_0) => Dice_ui::US51::US51_0(v0_1_0_0.clone()),
            }
        }
        pub fn method304() -> Func1<Dice_ui::US49, Dice_ui::US51> {
            Func1::new(move |v: Dice_ui::US49| Dice_ui::closure121((), v))
        }
        pub fn method305(v0_1: Array<Dice_ui::US49>) -> Array<Dice_ui::US49> {
            v0_1
        }
        pub fn method306(v0_1: Vec<Dice_ui::US51>) -> Vec<Dice_ui::US51> {
            v0_1
        }
        pub fn closure122(
            unitVar: (),
            v0_1: Dice_ui::US51,
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            match &v0_1 {
                Dice_ui::US51::US51_1(v0_1_1_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_1_0.clone()),
                Dice_ui::US51::US51_0(v0_1_0_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_0_0.clone()),
            }
        }
        pub fn method307() -> Func1<
            Dice_ui::US51,
            Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            Func1::new(move |v: Dice_ui::US51| Dice_ui::closure122((), v))
        }
        pub fn method308(v0_1: Array<Dice_ui::US51>) -> Array<Dice_ui::US51> {
            v0_1
        }
        pub fn method309(
            v0_1: Vec<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Vec<Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>>
        {
            v0_1
        }
        pub fn method312(
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> {
            v0_1
        }
        pub fn method314(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure125(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            let v1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> = Dice_ui::method314(v0_1);
            v1.to_vec()
        }
        pub fn method313() -> Func1<
            Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        > {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure125((), v)
            })
        }
        pub fn closure124(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>> {
            let v1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                Dice_ui::method312(v0_1);
            let v2 = Dice_ui::method313();
            v1.map(|x| v2(x))
        }
        pub fn method311() -> Func1<
            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        > {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure124((), v)
                },
            )
        }
        pub fn method315(
            v0_1: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            >,
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            v0_1
        }
        pub fn closure123(
            unitVar: (),
            v0_1: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            >,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v1 = Dice_ui::method311();
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = Dice_ui::method315(v0_1);
            v2.map(|x| v1(x))
        }
        pub fn method310() -> Func1<
            Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            Func1::new(
                move |v: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >| Dice_ui::closure123((), v),
            )
        }
        pub fn method316(
            v0_1: Array<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Array<
            Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            v0_1
        }
        pub fn method317(
            v0_1: Vec<
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Vec<Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>>
        {
            v0_1
        }
        pub fn method318(
            v0_1: Array<
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Array<Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>>
        {
            v0_1
        }
        pub fn method319(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method320(v0_1: i32, v1: LrcPtr<Dice_ui::Mut4>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure126(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US53 {
            Dice_ui::US53::US53_1(v0_1)
        }
        pub fn closure127(unitVar: (), v0_1: std::string::String) -> Dice_ui::US53 {
            Dice_ui::US53::US53_0(v0_1)
        }
        pub fn closure128(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US55 {
            Dice_ui::US55::US55_1(v0_1)
        }
        pub fn method321(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method322(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method323(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure129(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l3.clone()
        }
        pub fn method324() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure129((), arg10_0040)
            })
        }
        pub fn method325(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure110(
            v0_1: leptos::Memo<Array<string>>,
            v1: leptos::Memo<
                Array<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v2: leptos::Memo<
                Array<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            > = Dice_ui::method285(v1);
            let v4: Array<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v2();
            let v5 = Dice_ui::method286();
            let v6: Array<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            > = Dice_ui::method287(v4);
            let v8: Vec<
                Result<
                    Option<
                        Array<(
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            u32,
                            std::string::String,
                            std::string::String,
                            Array<std::string::String>,
                            bool,
                            f64,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v6.to_vec();
            let v11: Vec<Dice_ui::US46> =
                Dice_ui::method288(v8.iter().map(|x| v5(x.clone())).collect());
            let v13: Array<Dice_ui::US46> = fable_library_rust::NativeArray_::array_from(v11);
            let v14 = Dice_ui::method289();
            let v15: Array<Dice_ui::US46> = Dice_ui::method290(v13);
            let v17: Vec<Dice_ui::US46> = v15.to_vec();
            let v20: Vec<Dice_ui::US47> =
                Dice_ui::method291(v17.iter().map(|x| v14(x.clone())).collect());
            let v22: Array<Dice_ui::US47> = fable_library_rust::NativeArray_::array_from(v20);
            let v23: string = sprintf!("{:?}", v22.clone());
            let v30: string = Dice_ui::method0(append(
                append(
                    string("transactions.render (8) / txns move / root: "),
                    (if length(v23.clone()) <= 400_i32 {
                        v23.clone()
                    } else {
                        append(substring2(v23, 0_i32, 400_i32), string("..."))
                    }),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v30);
            {
                let v32 = Dice_ui::method292();
                let v33: Array<Dice_ui::US47> = Dice_ui::method293(v22.clone());
                let v35: Vec<Dice_ui::US47> = v33.to_vec();
                let v38: Vec<Dice_ui::US47> = Dice_ui::method291(
                    v35.into_iter().filter(|x| v32(x.clone().clone())).collect(),
                );
                let v43: bool =
                    count(fable_library_rust::NativeArray_::array_from(v38)) == count(v22.clone());
                let v169: Dice_ui::US49 = if v43 {
                    Dice_ui::US49::US49_1(Dice_ui::US50::US50_0)
                } else {
                    let v46: leptos::Memo<Array<string>> = Dice_ui::method146(v0_1);
                    let v49 = Dice_ui::method294(v46());
                    let v50: Array<Dice_ui::US47> = Dice_ui::method293(v22);
                    let v52: Vec<Dice_ui::US47> = v50.to_vec();
                    let v55: Vec<Dice_ui::US49> = Dice_ui::method303(
                        v52.iter()
                            .enumerate()
                            .map(|(i, x)| v49(i.try_into().unwrap())(x.clone()))
                            .collect(),
                    );
                    let v57: Array<Dice_ui::US49> =
                        fable_library_rust::NativeArray_::array_from(v55);
                    let v58 = Dice_ui::method304();
                    let v59: Array<Dice_ui::US49> = Dice_ui::method305(v57);
                    let v61: Vec<Dice_ui::US49> = v59.to_vec();
                    let v64: Vec<Dice_ui::US51> =
                        Dice_ui::method306(v61.iter().map(|x| v58(x.clone())).collect());
                    let v66: Array<Dice_ui::US51> =
                        fable_library_rust::NativeArray_::array_from(v64);
                    let v67 = Dice_ui::method307();
                    let v68: Array<Dice_ui::US51> = Dice_ui::method308(v66);
                    let v70: Vec<Dice_ui::US51> = v68.to_vec();
                    let v73: Vec<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = Dice_ui::method309(v70.iter().map(|x| v67(x.clone())).collect());
                    let v75: Array<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = fable_library_rust::NativeArray_::array_from(v73);
                    let v76 = Dice_ui::method310();
                    let v77: Array<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = Dice_ui::method316(v75);
                    let v79: Vec<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = v77.to_vec();
                    let v82: Vec<
                        Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = Dice_ui::method317(v79.iter().map(|x| v76(x.clone())).collect());
                    let v85: Array<
                        Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = Dice_ui::method318(fable_library_rust::NativeArray_::array_from(v82));
                    let v87: Vec<
                        Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = v85.to_vec();
                    let v90: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> = Dice_ui::method314(
                        Dice_ui::method319(new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>()),
                    );
                    let v92: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v90.to_vec();
                    let v93: Vec<
                        Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = Dice_ui::method317(v87);
                    let v95: Array<
                        Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = fable_library_rust::NativeArray_::array_from(v93);
                    let v96: i32 = count(v95.clone());
                    let v98: LrcPtr<Dice_ui::Mut4> = LrcPtr::new(Dice_ui::Mut4 {
                        l0: MutCell::new(0_i32),
                        l1: MutCell::new(Dice_ui::US52::US52_1(v92)),
                    });
                    while Dice_ui::method320(v96, v98.clone()) {
                        let v100: i32 = v98.l0.get().clone();
                        let v101: Dice_ui::US52 = v98.l1.get().clone();
                        let v102: Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        > = v95[v100].clone();
                        let v105: Dice_ui::US53 = match &v102 {
                            Err(v102_1_0) => Dice_ui::closure127((), v102_1_0.clone()),
                            Ok(v102_0_0) => Dice_ui::closure126((), v102_0_0.clone()),
                        };
                        let v114: Dice_ui::US54 = match &v105 {
                            Dice_ui::US53::US53_1(v105_1_0) => Dice_ui::US54::US54_1(defaultValue(
                                Dice_ui::US55::US55_0,
                                map(
                                    Func1::new(
                                        move |v_2: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                                            Dice_ui::closure128((), v_2)
                                        },
                                    ),
                                    v105_1_0.clone(),
                                ),
                            )),
                            Dice_ui::US53::US53_0(v105_0_0) => {
                                Dice_ui::US54::US54_0(v105_0_0.clone())
                            }
                        };
                        let v133: Dice_ui::US52 = if let Dice_ui::US52::US52_1(v101_1_0) = &v101 {
                            match &v114 {
                                Dice_ui::US54::US54_1(v114_1_0) => {
                                    let v116: Dice_ui::US55 = v114_1_0.clone();
                                    if let Dice_ui::US55::US55_1(v116_1_0) = &v116 {
                                        let v118: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                            Dice_ui::method321(match &v116 {
                                                Dice_ui::US55::US55_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            });
                                        let v119: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                            Dice_ui::method322(match &v101 {
                                                Dice_ui::US52::US52_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            });
                                        let mut v119 = v119;
                                        v119.extend(v118);
                                        Dice_ui::US52::US52_1(v119)
                                    } else {
                                        v101.clone()
                                    }
                                }
                                Dice_ui::US54::US54_0(v114_0_0) => {
                                    Dice_ui::US52::US52_0(v114_0_0.clone())
                                }
                            }
                        } else {
                            if let Dice_ui::US54::US54_0(v114_0_0) = &v114 {
                                Dice_ui::US52::US52_0(match &v114 {
                                    Dice_ui::US54::US54_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                v101.clone()
                            }
                        };
                        let v134: i32 = v100 + 1_i32;
                        v98.l0.set(v134);
                        v98.l1.set(v133);
                        ()
                    }
                    {
                        let v135: Dice_ui::US52 = v98.l1.get().clone();
                        let v147: Dice_ui::US52 = match &v135 {
                            Dice_ui::US52::US52_1(v135_1_0) => {
                                let v137: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method323(v135_1_0.clone());
                                let v138 = Dice_ui::method324();
                                let mut v137 = v137;
                                v137.sort_by_key(|x| v138(x.clone()));
                                Dice_ui::US52::US52_1(v137)
                            }
                            Dice_ui::US52::US52_0(v135_0_0) => {
                                Dice_ui::US52::US52_0(v135_0_0.clone())
                            }
                        };
                        let v161: Dice_ui::US56 = match &v147 {
                            Dice_ui::US52::US52_1(v147_1_0) => {
                                let v149: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method325(v147_1_0.clone());
                                let mut v149 = v149;
                                v149.reverse();
                                {
                                    let v154: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        Dice_ui::method302(v149);
                                    Dice_ui::US56::US56_1(
                                        fable_library_rust::NativeArray_::array_from(v154),
                                    )
                                }
                            }
                            Dice_ui::US52::US52_0(v147_0_0) => {
                                Dice_ui::US56::US56_0(v147_0_0.clone())
                            }
                        };
                        match &v161 {
                            Dice_ui::US56::US56_1(v161_1_0) => {
                                Dice_ui::US49::US49_1(Dice_ui::US50::US50_1(v161_1_0.clone()))
                            }
                            Dice_ui::US56::US56_0(v161_0_0) => {
                                Dice_ui::US49::US49_0(v161_0_0.clone())
                            }
                        }
                    }
                };
                let v180: Dice_ui::US51 = match &v169 {
                    Dice_ui::US49::US49_1(v169_1_0) => {
                        let v170: Dice_ui::US50 = v169_1_0.clone();
                        Dice_ui::US51::US51_1(match &v170 {
                            Dice_ui::US50::US50_1(v170_1_0) => Some(v170_1_0.clone()),
                            _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        })
                    }
                    Dice_ui::US49::US49_0(v169_0_0) => Dice_ui::US51::US51_0(v169_0_0.clone()),
                };
                let v186: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = match &v180 {
                    Dice_ui::US51::US51_1(v180_1_0) => Ok::<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >(v180_1_0.clone()),
                    Dice_ui::US51::US51_0(v180_0_0) => Err::<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >(v180_0_0.clone()),
                };
                let v188: string = append(
                    append(
                        append(
                            append(
                                string("use_transactions.render (9) / txns create_memo / result: "),
                                sprintf!("{:?}", v186.clone()),
                            ),
                            string(" / loading: "),
                        ),
                        ofBoolean(v43),
                    ),
                    string(""),
                );
                let v194: string = Dice_ui::method0(if length(v188.clone()) <= 200_i32 {
                    v188.clone()
                } else {
                    append(substring2(v188, 0_i32, 200_i32), string("..."))
                });
                leptos::logging::log!("{}", v194);
                v186
            }
        }
        pub fn method284(
            v0_1: leptos::Memo<Array<string>>,
            v1: leptos::Memo<
                Array<
                    Result<
                        Option<
                            Array<(
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                u32,
                                std::string::String,
                                std::string::String,
                                Array<std::string::String>,
                                bool,
                                f64,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
        ) -> Func0<
            Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure110(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method327(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> leptos::Memo<
            Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure131(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US51 {
            Dice_ui::US51::US51_1(v0_1)
        }
        pub fn closure132(unitVar: (), v0_1: std::string::String) -> Dice_ui::US51 {
            Dice_ui::US51::US51_0(v0_1)
        }
        pub fn closure133(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_1(v0_1)
        }
        pub fn method329() -> string {
            string("2.0")
        }
        pub fn method330() -> string {
            string("dontcare")
        }
        pub fn method331() -> string {
            string("EXPERIMENTAL_tx_status")
        }
        pub fn method332() -> string {
            string("bowen")
        }
        pub fn method333(v0_1: Array<std::string::String>) -> Array<std::string::String> {
            v0_1
        }
        pub fn closure135(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method334() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure135((), v))
        }
        pub fn method335(
            v0_1: Result<std::string::String, serde_json::Error>,
        ) -> Result<std::string::String, serde_json::Error> {
            v0_1
        }
        pub fn method336() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure58((), v))
        }
        pub fn method337(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure136(
            unitVar: (),
            v0_1: string,
        ) -> (bool, string, bool, Dice_ui::US25, string) {
            (
                false,
                v0_1,
                true,
                Dice_ui::US25::US25_1,
                string("https://rpc.mainnet.near.org"),
            )
        }
        pub fn method338() -> Func1<string, (bool, string, bool, Dice_ui::US25, string)> {
            Func1::new(move |v: string| Dice_ui::closure136((), v))
        }
        pub fn method339(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn closure134(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(bool, string, bool, Dice_ui::US25, string), std::string::String> {
            let v4: string = Dice_ui::method6(Dice_ui::method329());
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: string = Dice_ui::method6(Dice_ui::method330());
            let v12: &str = fable_library_rust::String_::LrcStr::as_str(&v10);
            let v14: std::string::String = String::from(v12);
            let v16: string = Dice_ui::method6(Dice_ui::method331());
            let v18: &str = fable_library_rust::String_::LrcStr::as_str(&v16);
            let v20: std::string::String = String::from(v18);
            let v23: string = Dice_ui::method6(Dice_ui::method332());
            let v25: &str = fable_library_rust::String_::LrcStr::as_str(&v23);
            let v30: Array<std::string::String> =
                Dice_ui::method143(Dice_ui::method333(new_array(&[
                    (_arg.2.clone()).l11.clone(),
                    String::from(v25),
                ])));
            let v32: Vec<std::string::String> = v30.to_vec();
            let v34: crate::model::near::rpc::RpcInput = crate::model::near::rpc::RpcInput {
                jsonrpc: v8,
                id: v14,
                method: v20,
                params: v32,
            };
            let v36: Result<std::string::String, serde_json::Error> = serde_json::to_string(&v34);
            let v37 = Dice_ui::method334();
            let v38: Result<std::string::String, serde_json::Error> = Dice_ui::method335(v36);
            let v40: Result<std::string::String, std::string::String> = v38.map_err(|x| v37(x));
            let v41 = Dice_ui::method336();
            let v42: Result<std::string::String, std::string::String> = Dice_ui::method337(v40);
            let v44: Result<string, std::string::String> = v42.map(|x| v41(x));
            let v45 = Dice_ui::method338();
            let v46: Result<string, std::string::String> = Dice_ui::method339(v44);
            v46.map(|x| v45(x))
        }
        pub fn method328() -> Func1<
            (string, usize, LrcPtr<Dice_ui::Heap5>),
            Result<(bool, string, bool, Dice_ui::US25, string), std::string::String>,
        > {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure134((), arg10_0040)
            })
        }
        pub fn method340(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure130(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(bool, string, bool, Dice_ui::US25, string)>>, std::string::String>
        {
            let v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            > = Dice_ui::method327(v0_1);
            let v3: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v1();
            let v6: Dice_ui::US51 = match &v3 {
                Err(v3_1_0) => Dice_ui::closure132((), v3_1_0.clone()),
                Ok(v3_0_0) => Dice_ui::closure131((), v3_0_0.clone()),
            };
            let v15: Dice_ui::US49 = match &v6 {
                Dice_ui::US51::US51_1(v6_1_0) => Dice_ui::US49::US49_1(defaultValue(
                    Dice_ui::US50::US50_0,
                    map(
                        Func1::new(move |v_2: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                            Dice_ui::closure133((), v_2)
                        }),
                        v6_1_0.clone(),
                    ),
                )),
                Dice_ui::US51::US51_0(v6_0_0) => Dice_ui::US49::US49_0(v6_0_0.clone()),
            };
            let v40: Dice_ui::US57 = match &v15 {
                Dice_ui::US49::US49_1(v15_1_0) => {
                    let v16: Dice_ui::US50 = v15_1_0.clone();
                    if let Dice_ui::US50::US50_1(v16_1_0) = &v16 {
                        let v18: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            Dice_ui::method314(match &v16 {
                                Dice_ui::US50::US50_1(x) => x.clone(),
                                _ => unreachable!(),
                            });
                        let v20: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v18.to_vec();
                        let v21 = Dice_ui::method328();
                        let v22: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            Dice_ui::method340(v20);
                        let v24: Vec<
                            Result<
                                (bool, string, bool, Dice_ui::US25, string),
                                std::string::String,
                            >,
                        > = v22.iter().map(|x| v21(x.clone())).collect();
                        let v26: Result<
                            Vec<(bool, string, bool, Dice_ui::US25, string)>,
                            std::string::String,
                        > = v24.into_iter().collect();
                        let v29: Vec<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method154(v26?);
                        Dice_ui::US57::US57_1(Dice_ui::US58::US58_1(
                            fable_library_rust::NativeArray_::array_from(v29),
                        ))
                    } else {
                        Dice_ui::US57::US57_1(Dice_ui::US58::US58_0)
                    }
                }
                Dice_ui::US49::US49_0(v15_0_0) => Dice_ui::US57::US57_0(v15_0_0.clone()),
            };
            let v51: Dice_ui::US59 = match &v40 {
                Dice_ui::US57::US57_1(v40_1_0) => {
                    let v41: Dice_ui::US58 = v40_1_0.clone();
                    Dice_ui::US59::US59_1(match &v41 {
                        Dice_ui::US58::US58_1(v41_1_0) => Some(v41_1_0.clone()),
                        _ => None::<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    })
                }
                Dice_ui::US57::US57_0(v40_0_0) => Dice_ui::US59::US59_0(v40_0_0.clone()),
            };
            let v57: Result<
                Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                std::string::String,
            > = match &v51 {
                Dice_ui::US59::US59_1(v51_1_0) => Ok::<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >(v51_1_0.clone()),
                Dice_ui::US59::US59_0(v51_0_0) => Err::<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >(v51_0_0.clone()),
            };
            let v59: string = append(
                append(
                    string("use_transactions.render (10) / rpc_requests create_memo / result: "),
                    sprintf!("{:?}", v57.clone()),
                ),
                string(""),
            );
            let v65: string = Dice_ui::method0(if length(v59.clone()) <= 200_i32 {
                v59.clone()
            } else {
                append(substring2(v59, 0_i32, 200_i32), string("..."))
            });
            leptos::logging::log!("{}", v65);
            v57
        }
        pub fn method326(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<
            Result<Option<Array<(bool, string, bool, Dice_ui::US25, string)>>, std::string::String>,
        > {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure130(v0_1.clone(), ())
            })
        }
        pub fn method342(
            v0_1: leptos::Memo<
                Result<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >,
            >,
        ) -> leptos::Memo<
            Result<Option<Array<(bool, string, bool, Dice_ui::US25, string)>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure138(
            unitVar: (),
            v0_1: Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
        ) -> Dice_ui::US59 {
            Dice_ui::US59::US59_1(v0_1)
        }
        pub fn closure139(unitVar: (), v0_1: std::string::String) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(v0_1)
        }
        pub fn closure140(
            unitVar: (),
            v0_1: Array<(bool, string, bool, Dice_ui::US25, string)>,
        ) -> Dice_ui::US58 {
            Dice_ui::US58::US58_1(v0_1)
        }
        pub fn closure137(
            v0_1: leptos::Memo<
                Result<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Array<(bool, string, bool, Dice_ui::US25, string)> {
            let v1: leptos::Memo<
                Result<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >,
            > = Dice_ui::method342(v0_1);
            let v3: Result<
                Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                std::string::String,
            > = v1();
            let v6: Dice_ui::US59 = match &v3 {
                Err(v3_1_0) => Dice_ui::closure139((), v3_1_0.clone()),
                Ok(v3_0_0) => Dice_ui::closure138((), v3_0_0.clone()),
            };
            let v15: Dice_ui::US57 = match &v6 {
                Dice_ui::US59::US59_1(v6_1_0) => Dice_ui::US57::US57_1(defaultValue(
                    Dice_ui::US58::US58_0,
                    map(
                        Func1::new(
                            move |v_2: Array<(bool, string, bool, Dice_ui::US25, string)>| {
                                Dice_ui::closure140((), v_2)
                            },
                        ),
                        v6_1_0.clone(),
                    ),
                )),
                Dice_ui::US59::US59_0(v6_0_0) => Dice_ui::US57::US57_0(v6_0_0.clone()),
            };
            let v23: Array<(bool, string, bool, Dice_ui::US25, string)> =
                if let Dice_ui::US57::US57_1(v15_1_0) = &v15 {
                    let v16: Dice_ui::US58 = match &v15 {
                        Dice_ui::US57::US57_1(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US58::US58_1(v16_1_0) = &v16 {
                        match &v16 {
                            Dice_ui::US58::US58_1(x) => x.clone(),
                            _ => unreachable!(),
                        }
                    } else {
                        Dice_ui::method166(
                            new_empty::<(bool, string, bool, Dice_ui::US25, string)>(),
                        )
                    }
                } else {
                    Dice_ui::method166(new_empty::<(bool, string, bool, Dice_ui::US25, string)>())
                };
            let v25: string = append(
                append(
                    string("use_transactions.render (11) / rpc_requests\' create_memo / result: "),
                    sprintf!("{:?}", v23.clone()),
                ),
                string(""),
            );
            let v31: string = Dice_ui::method0(if length(v25.clone()) <= 200_i32 {
                v25.clone()
            } else {
                append(substring2(v25, 0_i32, 200_i32), string("..."))
            });
            leptos::logging::log!("{}", v31);
            v23
        }
        pub fn method341(
            v0_1: leptos::Memo<
                Result<
                    Option<Array<(bool, string, bool, Dice_ui::US25, string)>>,
                    std::string::String,
                >,
            >,
        ) -> Func0<Array<(bool, string, bool, Dice_ui::US25, string)>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure137(v0_1.clone(), ())
            })
        }
        pub fn method345(
            v0_1: Result<crate::model::near::rpc::RpcResponse, serde_json::Error>,
        ) -> Result<crate::model::near::rpc::RpcResponse, serde_json::Error> {
            v0_1
        }
        pub fn closure144(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method346(
        ) -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure144((), v))
        }
        pub fn method347(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure143(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (bool, string, bool, Dice_ui::US25, string),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v38: Dice_ui::US32 = match &v0_1 {
                Dice_ui::US29::US29_1(v0_1_1_0) => {
                    let v8: Dice_ui::US30 = v0_1_1_0.clone();
                    Dice_ui::US32::US32_1(match &v8 {
                        Dice_ui::US30::US30_1(v8_1_0) => {
                            let v13: Dice_ui::US35 = defaultValue(
                                Dice_ui::US35::US35_0,
                                map(
                                    Func1::new(move |v: Dice_ui::US27| Dice_ui::closure85((), v)),
                                    tryItem(v2, v8_1_0.clone()),
                                ),
                            );
                            let v20: Dice_ui::US27 = if let Dice_ui::US35::US35_1(v13_1_0) = &v13 {
                                let v14: Dice_ui::US27 = match &v13 {
                                    Dice_ui::US35::US35_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US27::US27_1(v14_1_0) = &v14 {
                                    Dice_ui::US27::US27_1(match &v14 {
                                        Dice_ui::US27::US27_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US27::US27_0
                                }
                            } else {
                                Dice_ui::US27::US27_0
                            };
                            Dice_ui::US33::US33_1(match &v20 {
                                Dice_ui::US27::US27_1(v20_1_0) => {
                                    let v23: std::string::String =
                                        Dice_ui::method70((v20_1_0).l0.clone());
                                    Dice_ui::US34::US34_1(fable_library_rust::String_::fromString(
                                        v23,
                                    ))
                                }
                                _ => Dice_ui::US34::US34_0,
                            })
                        }
                        Dice_ui::US30::US30_0(v8_0_0) => Dice_ui::US33::US33_0(v8_0_0.clone()),
                    })
                }
                _ => Dice_ui::US32::US32_0,
            };
            let v39: string = sprintf!(
                "{:?}",
                (
                    _arg.0.clone(),
                    _arg.1.clone(),
                    _arg.2.clone(),
                    _arg.3.clone(),
                    _arg.4.clone()
                )
            );
            let v45: string = sprintf!("{:?}", v38.clone());
            let v52: string = Dice_ui::method0(append(
                append(
                    append(
                        append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (if length(v39.clone()) <= 400_i32 {
                                v39.clone()
                            } else {
                                append(substring2(v39, 0_i32, 400_i32), string("..."))
                            }),
                        ),
                        string(" / state_data: "),
                    ),
                    (if length(v45.clone()) <= 400_i32 {
                        v45.clone()
                    } else {
                        append(substring2(v45, 0_i32, 400_i32), string("..."))
                    }),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v52);
            {
                let v54: string = sprintf!("{:?}", v1.clone());
                let v61: string = Dice_ui::method0(append(
                    append(
                        string("state_core.use_request (16) / effect / json: "),
                        (if length(v54.clone()) <= 400_i32 {
                            v54.clone()
                        } else {
                            append(substring2(v54, 0_i32, 400_i32), string("..."))
                        }),
                    ),
                    string(""),
                ));
                leptos::logging::log!("{}", v61);
                {
                    let v78: Dice_ui::US34 = match &v1 {
                        Dice_ui::US42::US42_1(v1_1_0) => {
                            let v67: Dice_ui::US43 = defaultValue(
                                Dice_ui::US43::US43_0,
                                map(
                                    Func1::new(move |v_1: Dice_ui::US34| {
                                        Dice_ui::closure99((), v_1)
                                    }),
                                    tryItem(v2, v1_1_0.clone()),
                                ),
                            );
                            if let Dice_ui::US43::US43_1(v67_1_0) = &v67 {
                                let v68: Dice_ui::US34 = match &v67 {
                                    Dice_ui::US43::US43_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US34::US34_1(v68_1_0) = &v68 {
                                    Dice_ui::US34::US34_1(match &v68 {
                                        Dice_ui::US34::US34_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US34::US34_0
                                }
                            } else {
                                Dice_ui::US34::US34_0
                            }
                        }
                        _ => Dice_ui::US34::US34_0,
                    };
                    if let Dice_ui::US34::US34_1(v78_1_0) = &v78 {
                        let v80: string = Dice_ui::method6(match &v78 {
                            Dice_ui::US34::US34_1(x) => x.clone(),
                            _ => unreachable!(),
                        });
                        let v82: &str = fable_library_rust::String_::LrcStr::as_str(&v80);
                        let v84: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                            serde_json::from_str(&v82);
                        let v85 = Dice_ui::method71();
                        let v86: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                            Dice_ui::method345(v84);
                        let v88: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                            v86.map_err(|x| v85(x));
                        let v89 = Dice_ui::method346();
                        let v90: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                            Dice_ui::method347(v88);
                        v90.map(|x| v89(x))
                    } else {
                        if let Dice_ui::US32::US32_1(v38_1_0) = &v38 {
                            let v93: Dice_ui::US33 = match &v38 {
                                Dice_ui::US32::US32_1(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US33::US33_1(v93_1_0) = &v93 {
                                let v94: Dice_ui::US34 = match &v93 {
                                    Dice_ui::US33::US33_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US34::US34_1(v94_1_0) = &v94 {
                                    let v96: string = Dice_ui::method6(match &v94 {
                                        Dice_ui::US34::US34_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                    let v98: &str =
                                        fable_library_rust::String_::LrcStr::as_str(&v96);
                                    let v100: Result<
                                        crate::model::near::rpc::RpcResponse,
                                        serde_json::Error,
                                    > = serde_json::from_str(&v98);
                                    let v101 = Dice_ui::method71();
                                    let v102: Result<
                                        crate::model::near::rpc::RpcResponse,
                                        serde_json::Error,
                                    > = Dice_ui::method345(v100);
                                    let v104: Result<
                                        crate::model::near::rpc::RpcResponse,
                                        std::string::String,
                                    > = v102.map_err(|x| v101(x));
                                    let v105 = Dice_ui::method346();
                                    let v106: Result<
                                        crate::model::near::rpc::RpcResponse,
                                        std::string::String,
                                    > = Dice_ui::method347(v104);
                                    v106.map(|x| v105(x))
                                } else {
                                    let v111: string =
                                        Dice_ui::method0(append(append(string("state_core.use_request (17) / json Error / value: "),
                                                                       sprintf!("{:?}",
                                                                                (v78.clone(),
                                                                                 v38.clone()))),
                                                                string("")));
                                    leptos::logging::log!("{}", v111);
                                    Ok::<
                                        Option<crate::model::near::rpc::RpcResponse>,
                                        std::string::String,
                                    >(
                                        None::<crate::model::near::rpc::RpcResponse>
                                    )
                                }
                            } else {
                                let v118: string = Dice_ui::method0(append(
                                    append(
                                        string(
                                            "state_core.use_request (17) / json Error / value: ",
                                        ),
                                        sprintf!("{:?}", (v78.clone(), v38.clone())),
                                    ),
                                    string(""),
                                ));
                                leptos::logging::log!("{}", v118);
                                Ok::<
                                    Option<crate::model::near::rpc::RpcResponse>,
                                    std::string::String,
                                >(
                                    None::<crate::model::near::rpc::RpcResponse>
                                )
                            }
                        } else {
                            let v125: string = Dice_ui::method0(append(
                                append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v78, v38)),
                                ),
                                string(""),
                            ));
                            leptos::logging::log!("{}", v125);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    }
                }
            }
        }
        pub fn closure142(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (bool, string, bool, Dice_ui::US25, string),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (bool, string, bool, Dice_ui::US25, string)| {
                    Dice_ui::closure143(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method344(
            v0_1: Dice_ui::US29,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (bool, string, bool, Dice_ui::US25, string),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure142(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn method348(
            v0_1: Vec<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
        ) -> Vec<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            v0_1
        }
        pub fn closure141(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::Resource<
                (
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Array<Option<string>>, std::string::String>,
            >,
            v3: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v4: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>> =
                Dice_ui::method179(v0_1);
            let v6: Array<(bool, string, bool, Dice_ui::US25, string)> = v4();
            let v9: string = Dice_ui::method0(append(
                append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v6.clone()),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v9);
            {
                let v11: leptos::Memo<
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                > = Dice_ui::method201(v1);
                let v16: Dice_ui::US28 = defaultValue(
                    Dice_ui::US28::US28_0,
                    map(
                        Func1::new(
                            move |v: Result<
                                Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >| Dice_ui::closure78((), v),
                        ),
                        v11(),
                    ),
                );
                let v39: Dice_ui::US29 = match &v16 {
                    Dice_ui::US28::US28_1(v16_1_0) => {
                        let v17: Result<
                            Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                            std::string::String,
                        > = v16_1_0.clone();
                        let v20: Dice_ui::US31 = match &v17 {
                            Err(v17_1_0) => Dice_ui::closure80((), v17_1_0.clone()),
                            Ok(v17_0_0) => Dice_ui::closure79((), v17_0_0.clone()),
                        };
                        Dice_ui::US29::US29_1(match &v20 {
                            Dice_ui::US31::US31_1(v20_1_0) => {
                                let v22 = Dice_ui::method205();
                                let v23: Array<Option<LrcPtr<Dice_ui::Heap4>>> =
                                    Dice_ui::method206(v20_1_0.clone());
                                let v25: Vec<Option<LrcPtr<Dice_ui::Heap4>>> = v23.to_vec();
                                let v28: Vec<Dice_ui::US27> = Dice_ui::method207(
                                    v25.iter().map(|x| v22(x.clone())).collect(),
                                );
                                Dice_ui::US30::US30_1(fable_library_rust::NativeArray_::array_from(
                                    v28,
                                ))
                            }
                            Dice_ui::US31::US31_0(v20_0_0) => {
                                Dice_ui::US30::US30_0(v20_0_0.clone())
                            }
                        })
                    }
                    _ => Dice_ui::US29::US29_0,
                };
                let v40: string = sprintf!("{:?}", v39.clone());
                let v47: string = Dice_ui::method0(append(
                    append(
                        string("state_core.use_request (14) / result_memo / state_data: "),
                        (if length(v40.clone()) <= 400_i32 {
                            v40.clone()
                        } else {
                            append(substring2(v40, 0_i32, 400_i32), string("..."))
                        }),
                    ),
                    string(""),
                ));
                leptos::logging::log!("{}", v47);
                {
                    let v49: leptos::Resource<
                        (
                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                            Option<
                                Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                            >,
                        ),
                        Result<Array<Option<string>>, std::string::String>,
                    > = Dice_ui::method241(v2);
                    let v54: Dice_ui::US38 = defaultValue(
                        Dice_ui::US38::US38_0,
                        map(
                            Func1::new(
                                move |v_3: Result<Array<Option<string>>, std::string::String>| {
                                    Dice_ui::closure91((), v_3)
                                },
                            ),
                            leptos::SignalGet::get(&v49),
                        ),
                    );
                    let v62: Dice_ui::US39 = match &v54 {
                        Dice_ui::US38::US38_1(v54_1_0) => {
                            let v55: Result<Array<Option<string>>, std::string::String> =
                                v54_1_0.clone();
                            Dice_ui::US39::US39_1(match &v55 {
                                Err(v55_1_0) => Dice_ui::closure93((), v55_1_0.clone()),
                                Ok(v55_0_0) => Dice_ui::closure92((), v55_0_0.clone()),
                            })
                        }
                        _ => Dice_ui::US39::US39_0,
                    };
                    let v82: Dice_ui::US41 = match &v62 {
                        Dice_ui::US39::US39_1(v62_1_0) => {
                            let v63: Dice_ui::US40 = v62_1_0.clone();
                            Dice_ui::US41::US41_1(match &v63 {
                                Dice_ui::US40::US40_1(v63_1_0) => {
                                    let v65 = Dice_ui::method242();
                                    let v66: Array<Option<string>> =
                                        Dice_ui::method243(v63_1_0.clone());
                                    let v68: Vec<Option<string>> = v66.to_vec();
                                    let v71: Vec<Dice_ui::US34> = Dice_ui::method244(
                                        v68.iter().map(|x| v65(x.clone())).collect(),
                                    );
                                    Dice_ui::US42::US42_1(
                                        fable_library_rust::NativeArray_::array_from(v71),
                                    )
                                }
                                Dice_ui::US40::US40_0(v63_0_0) => {
                                    Dice_ui::US42::US42_0(v63_0_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US41::US41_0,
                    };
                    let v84: Array<Dice_ui::US34> =
                        Dice_ui::method245(new_empty::<Dice_ui::US34>());
                    let v88: Dice_ui::US42 = match &v82 {
                        Dice_ui::US41::US41_1(v82_1_0) => v82_1_0.clone(),
                        _ => Dice_ui::US42::US42_1(v84),
                    };
                    match &v88 {
                        Dice_ui::US42::US42_1(v88_1_0) => {
                            let v90 = Dice_ui::method246(v3);
                            let v91: Array<Dice_ui::US34> = Dice_ui::method249(v88_1_0.clone());
                            let v93: Vec<Dice_ui::US34> = v91.to_vec();
                            let v96: Vec<()> =
                                Dice_ui::method250(v93.iter().map(|x| v90(x.clone())).collect());
                            let v98: Array<()> = fable_library_rust::NativeArray_::array_from(v96);
                            ()
                        }
                        _ => (),
                    }
                    {
                        let v100 = Dice_ui::method344(v39, v88.clone());
                        let v101: Array<(bool, string, bool, Dice_ui::US25, string)> =
                            Dice_ui::method162(v6);
                        let v103: Vec<(bool, string, bool, Dice_ui::US25, string)> = v101.to_vec();
                        let v106: Vec<
                            Result<
                                Option<crate::model::near::rpc::RpcResponse>,
                                std::string::String,
                            >,
                        > = Dice_ui::method348(
                            v103.iter()
                                .enumerate()
                                .map(|(i, x)| v100(i.try_into().unwrap())(x.clone()))
                                .collect(),
                        );
                        let v108: Array<
                            Result<
                                Option<crate::model::near::rpc::RpcResponse>,
                                std::string::String,
                            >,
                        > = fable_library_rust::NativeArray_::array_from(v106);
                        let v110: string = append(
                            append(
                                string(
                                    "state_core.use_requests (18) / result_func func0 / result: ",
                                ),
                                sprintf!("{:?}", v108.clone()),
                            ),
                            string(""),
                        );
                        let v116: string = Dice_ui::method0(if length(v110.clone()) <= 200_i32 {
                            v110.clone()
                        } else {
                            append(substring2(v110, 0_i32, 200_i32), string("..."))
                        });
                        leptos::logging::log!("{}", v116);
                        v108
                    }
                }
            }
        }
        pub fn method343(
            v0_1: leptos::Memo<Array<(bool, string, bool, Dice_ui::US25, string)>>,
            v1: leptos::Memo<
                Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::Resource<
                (
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                    Option<Result<Array<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Array<Option<string>>, std::string::String>,
            >,
            v3: leptos::Action<LrcPtr<Dice_ui::Heap4>, Result<Vec<()>, std::string::String>>,
        ) -> Func0<Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>>
        {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure141(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn method350(
            v0_1: Func0<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
        ) -> Func0<Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>>
        {
            v0_1
        }
        pub fn method353(
            v0_1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            v0_1
        }
        pub fn method355(
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> crate::model::near::rpc::RpcResponse {
            v0_1
        }
        pub fn method356(
            v0_1: Option<crate::model::near::rpc::TransactionStatus>,
        ) -> Option<crate::model::near::rpc::TransactionStatus> {
            v0_1
        }
        pub fn method358(
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> crate::model::near::rpc::TransactionStatus {
            v0_1
        }
        pub fn method359(
            v0_1: Vec<crate::model::near::rpc::Receipt>,
        ) -> Vec<crate::model::near::rpc::Receipt> {
            v0_1
        }
        pub fn method361(
            v0_1: crate::model::near::rpc::Receipt,
        ) -> crate::model::near::rpc::Receipt {
            v0_1
        }
        pub fn method362(
            v0_1: crate::model::near::rpc::ReceiptDetail,
        ) -> crate::model::near::rpc::ReceiptDetail {
            v0_1
        }
        pub fn method363(
            v0_1: crate::model::near::rpc::ActionDetail,
        ) -> crate::model::near::rpc::ActionDetail {
            v0_1
        }
        pub fn method364(
            v0_1: Vec<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            >,
        ) -> Vec<
            std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>,
        > {
            v0_1
        }
        pub fn method367(
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> crate::model::near::rpc::TransferDetail {
            v0_1
        }
        pub fn closure152(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> std::string::String {
            let v1: crate::model::near::rpc::TransferDetail = Dice_ui::method367(v0_1);
            v1.deposit
        }
        pub fn method366() -> Func1<crate::model::near::rpc::TransferDetail, std::string::String> {
            Func1::new(move |v: crate::model::near::rpc::TransferDetail| Dice_ui::closure152((), v))
        }
        pub fn method368(
            v0_1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>
        {
            v0_1
        }
        pub fn closure151(
            unitVar: (),
            v0_1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<std::string::String, std::string::String> {
            let v1 = Dice_ui::method366();
            let v2: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            > = Dice_ui::method368(v0_1);
            v2.into_iter().map(|(k, v)| (k, v1(v))).collect()
        }
        pub fn method365() -> Func1<
            std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>,
            std::collections::HashMap<std::string::String, std::string::String>,
        > {
            Func1::new(
                move |v: std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >| Dice_ui::closure151((), v),
            )
        }
        pub fn method369(
            v0_1: Array<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            >,
        ) -> Array<
            std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>,
        > {
            v0_1
        }
        pub fn method370(
            v0_1: Vec<std::collections::HashMap<std::string::String, std::string::String>>,
        ) -> Vec<std::collections::HashMap<std::string::String, std::string::String>> {
            v0_1
        }
        pub fn closure150(
            unitVar: (),
            v0_1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<std::collections::HashMap<std::string::String, std::string::String>>,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v1: crate::model::near::rpc::Receipt = Dice_ui::method361(v0_1);
            let v3: std::string::String = v1.predecessor_id;
            let v6: crate::model::near::rpc::ReceiptDetail = Dice_ui::method362(v1.receipt);
            let v9: crate::model::near::rpc::ActionDetail = Dice_ui::method363(v6.action);
            let v12: Vec<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            > = Dice_ui::method364(v9.actions);
            let v14: Array<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            > = fable_library_rust::NativeArray_::array_from(v12);
            let v15 = Dice_ui::method365();
            let v16: Array<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            > = Dice_ui::method369(v14);
            let v18: Vec<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            > = v16.to_vec();
            let v21: Vec<std::collections::HashMap<std::string::String, std::string::String>> =
                Dice_ui::method370(v18.iter().map(|x| v15(x.clone())).collect());
            let v23: Array<std::collections::HashMap<std::string::String, std::string::String>> =
                fable_library_rust::NativeArray_::array_from(v21);
            let v25: std::string::String = v9.gas_price;
            let v28: Vec<std::string::String> = Dice_ui::method37(v9.input_data_ids);
            let v30: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v28);
            let v33: Vec<std::string::String> = Dice_ui::method37(v9.output_data_receivers);
            (
                v3,
                v23,
                v25,
                v30,
                fable_library_rust::NativeArray_::array_from(v33),
                v9.signer_id,
                v9.signer_public_key,
                v1.receipt_id,
                v1.receiver_id,
            )
        }
        pub fn method360() -> Func1<
            crate::model::near::rpc::Receipt,
            (
                std::string::String,
                Array<std::collections::HashMap<std::string::String, std::string::String>>,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::Receipt| Dice_ui::closure150((), v))
        }
        pub fn method371(
            v0_1: Array<crate::model::near::rpc::Receipt>,
        ) -> Array<crate::model::near::rpc::Receipt> {
            v0_1
        }
        pub fn method372(
            v0_1: Vec<(
                std::string::String,
                Array<std::collections::HashMap<std::string::String, std::string::String>>,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Vec<(
            std::string::String,
            Array<std::collections::HashMap<std::string::String, std::string::String>>,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            v0_1
        }
        pub fn method373(
            v0_1: Vec<crate::model::near::rpc::ReceiptsOutcome>,
        ) -> Vec<crate::model::near::rpc::ReceiptsOutcome> {
            v0_1
        }
        pub fn method375(
            v0_1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> crate::model::near::rpc::ReceiptsOutcome {
            v0_1
        }
        pub fn method376(
            v0_1: crate::model::near::rpc::OutcomeDetail,
        ) -> crate::model::near::rpc::OutcomeDetail {
            v0_1
        }
        pub fn method377(
            v0_1: crate::model::near::rpc::Metadata,
        ) -> crate::model::near::rpc::Metadata {
            v0_1
        }
        pub fn method378(
            v0_1: Vec<crate::model::near::rpc::GasProfile>,
        ) -> Vec<crate::model::near::rpc::GasProfile> {
            v0_1
        }
        pub fn method380(
            v0_1: crate::model::near::rpc::GasProfile,
        ) -> crate::model::near::rpc::GasProfile {
            v0_1
        }
        pub fn closure154(
            unitVar: (),
            v0_1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v1: crate::model::near::rpc::GasProfile = Dice_ui::method380(v0_1);
            (v1.cost, v1.cost_category, v1.gas_used)
        }
        pub fn method379() -> Func1<
            crate::model::near::rpc::GasProfile,
            (
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::GasProfile| Dice_ui::closure154((), v))
        }
        pub fn method381(
            v0_1: Array<crate::model::near::rpc::GasProfile>,
        ) -> Array<crate::model::near::rpc::GasProfile> {
            v0_1
        }
        pub fn method382(
            v0_1: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
        ) -> Vec<(
            std::string::String,
            std::string::String,
            std::string::String,
        )> {
            v0_1
        }
        pub fn closure153(
            unitVar: (),
            v0_1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
        ) {
            let v1: crate::model::near::rpc::ReceiptsOutcome = Dice_ui::method375(v0_1);
            let v3: std::string::String = v1.block_hash;
            let v5: std::string::String = v1.id;
            let v8: crate::model::near::rpc::OutcomeDetail = Dice_ui::method376(v1.outcome);
            let v10: std::string::String = v8.executor_id;
            let v12: u64 = v8.gas_burnt;
            let v15: Vec<std::string::String> = Dice_ui::method37(v8.logs);
            let v17: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v15);
            let v20: crate::model::near::rpc::Metadata = Dice_ui::method377(v8.metadata);
            let v23: Vec<crate::model::near::rpc::GasProfile> = Dice_ui::method378(v20.gas_profile);
            let v25: Array<crate::model::near::rpc::GasProfile> =
                fable_library_rust::NativeArray_::array_from(v23);
            let v26 = Dice_ui::method379();
            let v27: Array<crate::model::near::rpc::GasProfile> = Dice_ui::method381(v25);
            let v29: Vec<crate::model::near::rpc::GasProfile> = v27.to_vec();
            let v32: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = Dice_ui::method382(v29.iter().map(|x| v26(x.clone())).collect());
            let v34: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v32);
            let v36: u8 = v20.version;
            let v39: Vec<std::string::String> = Dice_ui::method37(v8.receipt_ids);
            (
                v3,
                v5,
                v10,
                v12,
                v17,
                v34,
                v36,
                fable_library_rust::NativeArray_::array_from(v39),
                v8.status,
            )
        }
        pub fn method374() -> Func1<
            crate::model::near::rpc::ReceiptsOutcome,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::ReceiptsOutcome| {
                Dice_ui::closure153((), v)
            })
        }
        pub fn method383(
            v0_1: Array<crate::model::near::rpc::ReceiptsOutcome>,
        ) -> Array<crate::model::near::rpc::ReceiptsOutcome> {
            v0_1
        }
        pub fn method384(
            v0_1: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
            )>,
        ) -> Vec<(
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
        )> {
            v0_1
        }
        pub fn closure149(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<std::collections::HashMap<std::string::String, std::string::String>>,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
            )>,
        ) {
            let v1: crate::model::near::rpc::TransactionStatus = Dice_ui::method358(v0_1);
            let v4: Vec<crate::model::near::rpc::Receipt> = Dice_ui::method359(v1.receipts);
            let v6: Array<crate::model::near::rpc::Receipt> =
                fable_library_rust::NativeArray_::array_from(v4);
            let v7 = Dice_ui::method360();
            let v8: Array<crate::model::near::rpc::Receipt> = Dice_ui::method371(v6);
            let v10: Vec<crate::model::near::rpc::Receipt> = v8.to_vec();
            let v13: Vec<(
                std::string::String,
                Array<std::collections::HashMap<std::string::String, std::string::String>>,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = Dice_ui::method372(v10.iter().map(|x| v7(x.clone())).collect());
            let v15: Array<(
                std::string::String,
                Array<std::collections::HashMap<std::string::String, std::string::String>>,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v13);
            let v18: Vec<crate::model::near::rpc::ReceiptsOutcome> =
                Dice_ui::method373(v1.receipts_outcome);
            let v20: Array<crate::model::near::rpc::ReceiptsOutcome> =
                fable_library_rust::NativeArray_::array_from(v18);
            let v21 = Dice_ui::method374();
            let v22: Array<crate::model::near::rpc::ReceiptsOutcome> = Dice_ui::method383(v20);
            let v24: Vec<crate::model::near::rpc::ReceiptsOutcome> = v22.to_vec();
            let v27: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
            )> = Dice_ui::method384(v24.iter().map(|x| v21(x.clone())).collect());
            (v15, fable_library_rust::NativeArray_::array_from(v27))
        }
        pub fn method357() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<std::collections::HashMap<std::string::String, std::string::String>>,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure149((), v)
            })
        }
        pub fn method385(
            v0_1: Option<crate::model::near::rpc::RpcError>,
        ) -> Option<crate::model::near::rpc::RpcError> {
            v0_1
        }
        pub fn method387(
            v0_1: crate::model::near::rpc::RpcError,
        ) -> crate::model::near::rpc::RpcError {
            v0_1
        }
        pub fn method388(
            v0_1: crate::model::near::rpc::ErrorCause,
        ) -> crate::model::near::rpc::ErrorCause {
            v0_1
        }
        pub fn method389(
            v0_1: Option<crate::model::near::rpc::ErrorCauseInfo>,
        ) -> Option<crate::model::near::rpc::ErrorCauseInfo> {
            v0_1
        }
        pub fn method391(
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> crate::model::near::rpc::ErrorCauseInfo {
            v0_1
        }
        pub fn closure156(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            let v1: crate::model::near::rpc::ErrorCauseInfo = Dice_ui::method391(v0_1);
            (v1.error_message, v1.requested_transaction_hash)
        }
        pub fn method390() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure156((), v))
        }
        pub fn closure155(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            std::string::String,
            i32,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v1: crate::model::near::rpc::RpcError = Dice_ui::method387(v0_1);
            let v3: std::string::String = v1.name;
            let v6: crate::model::near::rpc::ErrorCause = Dice_ui::method388(v1.cause);
            let v8: std::string::String = v6.name;
            let v11: Option<crate::model::near::rpc::ErrorCauseInfo> = Dice_ui::method389(v6.info);
            let v12 = Dice_ui::method390();
            let v14: Option<(Option<std::string::String>, Option<std::string::String>)> =
                v11.map(|x| v12(x));
            let v16: i32 = v1.code;
            let v18: std::string::String = v1.message;
            (v14, v8, v16, v1.data, v18, v3)
        }
        pub fn method386() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure155((), v))
        }
        pub fn closure148(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            Option<(
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<std::collections::HashMap<std::string::String, std::string::String>>,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                )>,
            )>,
        ) {
            let v1: crate::model::near::rpc::RpcResponse = Dice_ui::method355(v0_1);
            let v3: std::string::String = v1.jsonrpc;
            let v6: Option<crate::model::near::rpc::TransactionStatus> =
                Dice_ui::method356(v1.result);
            let v7 = Dice_ui::method357();
            let v9: Option<(
                Array<(
                    std::string::String,
                    Array<std::collections::HashMap<std::string::String, std::string::String>>,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                )>,
            )> = v6.map(|x| v7(x));
            let v12: Option<crate::model::near::rpc::RpcError> = Dice_ui::method385(v1.error);
            let v13 = Dice_ui::method386();
            (v12.map(|x| v13(x)), v1.id, v3, v9)
        }
        pub fn method354() -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<std::collections::HashMap<std::string::String, std::string::String>>,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                    )>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure148((), v))
        }
        pub fn closure147(
            unitVar: (),
            v0_1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            Option<(
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<std::collections::HashMap<std::string::String, std::string::String>>,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                )>,
            )>,
        )> {
            let v1: Option<crate::model::near::rpc::RpcResponse> = Dice_ui::method353(v0_1);
            let v2 = Dice_ui::method354();
            v1.map(|x| v2(x))
        }
        pub fn method352() -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<std::collections::HashMap<std::string::String, std::string::String>>,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                    )>,
                )>,
            )>,
        > {
            Func1::new(move |v: Option<crate::model::near::rpc::RpcResponse>| {
                Dice_ui::closure147((), v)
            })
        }
        pub fn method392(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn closure146(
            unitVar: (),
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<std::collections::HashMap<std::string::String, std::string::String>>,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                    )>,
                )>,
            )>,
            std::string::String,
        > {
            let v1 = Dice_ui::method352();
            let v2: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> =
                Dice_ui::method392(v0_1);
            v2.map(|x| v1(x))
        }
        pub fn method351() -> Func1<
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        > {
            Func1::new(
                move |v: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                >| Dice_ui::closure146((), v),
            )
        }
        pub fn method393(
            v0_1: Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            v0_1
        }
        pub fn method394(
            v0_1: Vec<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> Vec<
            Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure145(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            v1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v2: Func0<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Array<
            Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        > {
            let v3: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method257(v0_1.clone());
            let v6: leptos::Signal<bool> = Dice_ui::method258(leptos::Resource::loading(&v3));
            let v8: bool = leptos::SignalGet::get(&v6);
            let v9: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method259(v1.clone());
            let v12: leptos::Signal<bool> = Dice_ui::method258(leptos::Resource::loading(&v9));
            let v14: bool = leptos::SignalGet::get(&v12);
            let v15: leptos::Resource<Dice_ui::US2, rexie::Rexie> = Dice_ui::method29(v0_1);
            let v20: Dice_ui::US5 = defaultValue(
                Dice_ui::US5::US5_0,
                map(
                    Func1::new(move |v: rexie::Rexie| Dice_ui::closure10((), v)),
                    leptos::SignalGet::get(&v15),
                ),
            );
            let v21: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method194(v1);
            let v26: Dice_ui::US44 = defaultValue(
                Dice_ui::US44::US44_0,
                map(
                    Func1::new(
                        move |v_1: Result<
                            Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                            std::string::String,
                        >| Dice_ui::closure102((), v_1),
                    ),
                    leptos::SignalGet::get(&v21),
                ),
            );
            let v52: Dice_ui::US29 = match &v26 {
                Dice_ui::US44::US44_1(v26_1_0) => {
                    let v27: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        v26_1_0.clone();
                    let v30: Dice_ui::US45 = match &v27 {
                        Err(v27_1_0) => Dice_ui::closure104((), v27_1_0.clone()),
                        Ok(v27_0_0) => Dice_ui::closure103((), v27_0_0.clone()),
                    };
                    Dice_ui::US29::US29_1(match &v30 {
                        Dice_ui::US45::US45_1(v30_1_0) => {
                            let v32: Vec<Option<LrcPtr<Dice_ui::Heap4>>> =
                                Dice_ui::method198(v30_1_0.clone());
                            let v34: Array<Option<LrcPtr<Dice_ui::Heap4>>> =
                                fable_library_rust::NativeArray_::array_from(v32);
                            let v35 = Dice_ui::method205();
                            let v36: Array<Option<LrcPtr<Dice_ui::Heap4>>> =
                                Dice_ui::method206(v34);
                            let v38: Vec<Option<LrcPtr<Dice_ui::Heap4>>> = v36.to_vec();
                            let v41: Vec<Dice_ui::US27> =
                                Dice_ui::method207(v38.iter().map(|x| v35(x.clone())).collect());
                            Dice_ui::US30::US30_1(fable_library_rust::NativeArray_::array_from(v41))
                        }
                        Dice_ui::US45::US45_0(v30_0_0) => Dice_ui::US30::US30_0(v30_0_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_0,
            };
            let v53: string = sprintf!("{:?}", v20);
            let v58: string = if length(v53.clone()) <= 400_i32 {
                v53.clone()
            } else {
                append(substring2(v53, 0_i32, 400_i32), string("..."))
            };
            let v59: string = sprintf!("{:?}", v52);
            let v64: string = if length(v59.clone()) <= 400_i32 {
                v59.clone()
            } else {
                append(substring2(v59, 0_i32, 400_i32), string("..."))
            };
            let v66: string =
                Dice_ui::method0(append(append(append(append(append(append(append(append(string("state_core.use_request (19) / result move / database: "),
                                                                                         v58),
                                                                                  string(" / database_loading: ")),
                                                                           ofBoolean(v8)),
                                                                    string(" / state_data: ")),
                                                             v64),
                                                      string(" / state_data_loading: ")),
                                               ofBoolean(v14)), string("")));
            leptos::logging::log!("{}", v66);
            {
                let v68: Func0<
                    Array<
                        Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                    >,
                > = Dice_ui::method350(v2);
                let v70: Array<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = (move || v68())();
                let v71 = Dice_ui::method351();
                let v72: Array<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = Dice_ui::method393(v70);
                let v74: Vec<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = v72.to_vec();
                let v77: Vec<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                > = Dice_ui::method394(v74.iter().map(|x| v71(x.clone())).collect());
                let v79: Array<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v77);
                let v81: string = append(
                    append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v79.clone()),
                    ),
                    string(""),
                );
                let v87: string = Dice_ui::method0(if length(v81.clone()) <= 200_i32 {
                    v81.clone()
                } else {
                    append(substring2(v81, 0_i32, 200_i32), string("..."))
                });
                leptos::logging::log!("{}", v87);
                v79
            }
        }
        pub fn method349(
            v0_1: leptos::Resource<Dice_ui::US2, rexie::Rexie>,
            v1: leptos::Resource<
                (
                    Option<rexie::Rexie>,
                    Array<(bool, string, bool, Dice_ui::US25, string)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v2: Func0<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
        ) -> Func0<
            Array<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure145(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn method397() -> string {
            string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS")
        }
        pub fn method398() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure158(unitVar: (), v0_1: Dice_ui::US15) -> Dice_ui::US61 {
            Dice_ui::US61::US61_1(v0_1)
        }
        pub fn closure159(unitVar: (), v0_1: std::string::String) -> Dice_ui::US61 {
            Dice_ui::US61::US61_0(v0_1)
        }
        pub fn closure160(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US63 {
            Dice_ui::US63::US63_1(v0_1)
        }
        pub fn closure161(unitVar: (), v0_1: std::string::String) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method399(
            v0_1: Result<Dice_ui::US60, std::string::String>,
        ) -> Result<Dice_ui::US60, std::string::String> {
            v0_1
        }
        pub fn method396() -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US60, std::string::String>>>,
        > {
            let __result = Box::pin(async move {
                //;
                {
                    let v2: string = Dice_ui::method6(Dice_ui::method329());
                    let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
                    let v6: std::string::String = String::from(v4);
                    let v8: string = Dice_ui::method6(Dice_ui::method330());
                    let v10: &str = fable_library_rust::String_::LrcStr::as_str(&v8);
                    let v12: std::string::String = String::from(v10);
                    let v14: string = Dice_ui::method6(Dice_ui::method331());
                    let v16: &str = fable_library_rust::String_::LrcStr::as_str(&v14);
                    let v18: std::string::String = String::from(v16);
                    let v20: string = Dice_ui::method6(Dice_ui::method397());
                    let v22: &str = fable_library_rust::String_::LrcStr::as_str(&v20);
                    let v24: std::string::String = String::from(v22);
                    let v26: string = Dice_ui::method6(Dice_ui::method332());
                    let v28: &str = fable_library_rust::String_::LrcStr::as_str(&v26);
                    let v33: Array<std::string::String> =
                        Dice_ui::method143(Dice_ui::method333(new_array(&[
                            v24,
                            String::from(v28),
                        ])));
                    let v35: Vec<std::string::String> = v33.to_vec();
                    let v37: crate::model::near::rpc::RpcInput =
                        crate::model::near::rpc::RpcInput {
                            jsonrpc: v6,
                            id: v12,
                            method: v18,
                            params: v35,
                        };
                    let v40: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method398()));
                    let v42: &str = fable_library_rust::String_::LrcStr::as_str(&v40);
                    let v45: std::string::String = Dice_ui::method214(String::from(v42));
                    let v47: reqwest_wasm::RequestBuilder = reqwest_wasm::Client::builder()
                        .build()
                        .map_err(|err| err.to_string())?
                        .post(v45);
                    let v50: reqwest_wasm::RequestBuilder =
                        Dice_ui::method217(reqwest_wasm::RequestBuilder::json(v47, &v37));
                    let v52: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::RequestBuilder::send(v50));
                    let v54: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v52.await;
                    let v55 = Dice_ui::method218();
                    let v56: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                        Dice_ui::method219(v54);
                    let v58: Result<reqwest_wasm::Response, std::string::String> =
                        v56.map_err(|x| v55(x));
                    let v60: reqwest_wasm::Response = v58?;
                    let v62: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<std::string::String, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::Response::text(v60));
                    let v64: Result<std::string::String, reqwest_wasm::Error> = v62.await;
                    let v65 = Dice_ui::method218();
                    let v66: Result<std::string::String, reqwest_wasm::Error> =
                        Dice_ui::method220(v64);
                    let v68: Result<std::string::String, std::string::String> =
                        v66.map_err(|x| v65(x));
                    let v72: Result<Dice_ui::US15, std::string::String> =
                        Ok::<Dice_ui::US15, std::string::String>(Dice_ui::US15::US15_1(v68?));
                    let v74: string =
                    append(append(string("dice_view.render (x) / roll_action create_action / result1 / result: "),
                                  sprintf!("{:?}", v72.clone())), string(""));
                    let v80: string = Dice_ui::method0(if length(v74.clone()) <= 200_i32 {
                        v74.clone()
                    } else {
                        append(substring2(v74, 0_i32, 200_i32), string("..."))
                    });
                    leptos::logging::log!("{}", v80);
                    {
                        let v84: Dice_ui::US61 = match &v72 {
                            Err(v72_1_0) => Dice_ui::closure159((), v72_1_0.clone()),
                            Ok(v72_0_0) => Dice_ui::closure158((), v72_0_0.clone()),
                        };
                        let v140: Dice_ui::US62 = if let Dice_ui::US61::US61_1(v84_1_0) = &v84 {
                            let v85: Dice_ui::US15 = match &v84 {
                                Dice_ui::US61::US61_1(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US15::US15_1(v85_1_0) = &v85 {
                                let v87: std::string::String = Dice_ui::method70(match &v85 {
                                    Dice_ui::US15::US15_1(x) => x.clone(),
                                    _ => unreachable!(),
                                });
                                let v90: string =
                                    Dice_ui::method6(fable_library_rust::String_::fromString(v87));
                                let v92: &str = fable_library_rust::String_::LrcStr::as_str(&v90);
                                let v94: Result<
                                    crate::model::near::rpc::RpcResponse,
                                    serde_json::Error,
                                > = serde_json::from_str(&v92);
                                let v95 = Dice_ui::method71();
                                let v96: Result<
                                    crate::model::near::rpc::RpcResponse,
                                    serde_json::Error,
                                > = Dice_ui::method345(v94);
                                let v98: Result<
                                    crate::model::near::rpc::RpcResponse,
                                    std::string::String,
                                > = v96.map_err(|x| v95(x));
                                let v101: Dice_ui::US63 = match &v98 {
                                    Err(v98_1_0) => Dice_ui::closure161((), v98_1_0.clone()),
                                    Ok(v98_0_0) => Dice_ui::closure160((), v98_0_0.clone()),
                                };
                                let v124: Dice_ui::US64 = match &v101 {
                                    Dice_ui::US63::US63_1(v101_1_0) => {
                                        let v103: crate::model::near::rpc::RpcResponse =
                                            Dice_ui::method355(v101_1_0.clone());
                                        let v105: std::string::String = v103.jsonrpc;
                                        let v108: Option<
                                            crate::model::near::rpc::TransactionStatus,
                                        > = Dice_ui::method356(v103.result);
                                        let v109 = Dice_ui::method357();
                                        let v111: Option<(
                                            Array<(
                                                std::string::String,
                                                Array<
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        std::string::String,
                                                    >,
                                                >,
                                                std::string::String,
                                                Array<std::string::String>,
                                                Array<std::string::String>,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u64,
                                                Array<std::string::String>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                u8,
                                                Array<std::string::String>,
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    std::string::String,
                                                >,
                                            )>,
                                        )> = v108.map(|x| v109(x));
                                        let v114: Option<crate::model::near::rpc::RpcError> =
                                            Dice_ui::method385(v103.error);
                                        let v115 = Dice_ui::method386();
                                        Dice_ui::US64::US64_1(
                                            v114.map(|x| v115(x)),
                                            v103.id,
                                            v105,
                                            v111,
                                        )
                                    }
                                    Dice_ui::US63::US63_0(v101_0_0) => {
                                        Dice_ui::US64::US64_0(v101_0_0.clone())
                                    }
                                };
                                match &v124 {
                                    Dice_ui::US64::US64_1(
                                        v124_1_0,
                                        v124_1_1,
                                        v124_1_2,
                                        v124_1_3,
                                    ) => Dice_ui::US62::US62_1(Dice_ui::US60::US60_1(
                                        v124_1_0.clone(),
                                        v124_1_1.clone(),
                                        v124_1_2.clone(),
                                        v124_1_3.clone(),
                                    )),
                                    Dice_ui::US64::US64_0(v124_0_0) => {
                                        Dice_ui::US62::US62_0(v124_0_0.clone())
                                    }
                                }
                            } else {
                                Dice_ui::US62::US62_1(Dice_ui::US60::US60_0)
                            }
                        } else {
                            Dice_ui::US62::US62_1(Dice_ui::US60::US60_0)
                        };
                        let v146: Result<Dice_ui::US60, std::string::String> = match &v140 {
                            Dice_ui::US62::US62_1(v140_1_0) => {
                                Ok::<Dice_ui::US60, std::string::String>(v140_1_0.clone())
                            }
                            Dice_ui::US62::US62_0(v140_0_0) => {
                                Err::<Dice_ui::US60, std::string::String>(v140_0_0.clone())
                            }
                        };
                        let v148: string =
                        append(append(string("dice_view.render (x) / roll_action create_action / result2 / result: "),
                                      sprintf!("{:?}", v146.clone())),
                               string(""));
                        let v154: string = Dice_ui::method0(if length(v148.clone()) <= 200_i32 {
                            v148.clone()
                        } else {
                            append(substring2(v148, 0_i32, 200_i32), string("..."))
                        });
                        leptos::logging::log!("{}", v154);
                        {
                            let v156: Result<Dice_ui::US60, std::string::String> =
                                Dice_ui::method399(v146);
                            v156
                        }
                    }
                }
            });
            {
                {
                    {
                        //;
                        __result
                    }
                }
            }
        }
        pub fn closure157(
            unitVar: (),
            v0_1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US60, std::string::String>>>,
        > {
            let v3: string = Dice_ui::method0(append(
                append(
                    string("dice.render (2) / set_max_action / value: "),
                    sprintf!("{:?}", v0_1),
                ),
                string(""),
            ));
            leptos::logging::log!("{}", v3);
            Dice_ui::method396()
        }
        pub fn method395() -> Func1<
            LrcPtr<Dice_ui::Heap6>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Dice_ui::US60, std::string::String>>>,
            >,
        > {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap6>| Dice_ui::closure157((), v))
        }
        pub fn method401(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
        ) -> leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>
        {
            v0_1
        }
        pub fn method402(
            v0_1: leptos::RwSignal<Option<Result<Dice_ui::US60, std::string::String>>>,
        ) -> leptos::RwSignal<Option<Result<Dice_ui::US60, std::string::String>>> {
            v0_1
        }
        pub fn method403(
            v0_1: Option<Result<Dice_ui::US60, std::string::String>>,
        ) -> Option<Result<Dice_ui::US60, std::string::String>> {
            v0_1
        }
        pub fn closure164(unitVar: (), v0_1: Dice_ui::US60) -> Dice_ui::US62 {
            Dice_ui::US62::US62_1(v0_1)
        }
        pub fn closure165(unitVar: (), v0_1: std::string::String) -> Dice_ui::US62 {
            Dice_ui::US62::US62_0(v0_1)
        }
        pub fn closure163(
            unitVar: (),
            v0_1: Result<Dice_ui::US60, std::string::String>,
        ) -> Dice_ui::US62 {
            match &v0_1 {
                Err(v0_1_1_0) => Dice_ui::closure165((), v0_1_1_0.clone()),
                Ok(v0_1_0_0) => Dice_ui::closure164((), v0_1_0_0.clone()),
            }
        }
        pub fn method404() -> Func1<Result<Dice_ui::US60, std::string::String>, Dice_ui::US62> {
            Func1::new(move |v: Result<Dice_ui::US60, std::string::String>| {
                Dice_ui::closure163((), v)
            })
        }
        pub fn closure166(unitVar: (), v0_1: Dice_ui::US62) -> Dice_ui::US65 {
            Dice_ui::US65::US65_1(v0_1)
        }
        pub fn closure162(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<std::collections::HashMap<std::string::String, std::string::String>>,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                    )>,
                )>,
            )>,
            std::string::String,
        > {
            let v1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            > = Dice_ui::method401(v0_1);
            let v4: leptos::RwSignal<Option<Result<Dice_ui::US60, std::string::String>>> =
                Dice_ui::method402(leptos::Action::value(&v1));
            let v7: Option<Result<Dice_ui::US60, std::string::String>> =
                Dice_ui::method403(leptos::SignalGet::get(&v4));
            let v8 = Dice_ui::method404();
            let v13: Dice_ui::US65 = defaultValue(
                Dice_ui::US65::US65_0,
                map(
                    Func1::new(move |v: Dice_ui::US62| Dice_ui::closure166((), v)),
                    v7.map(|x| v8(x)),
                ),
            );
            let v31: Dice_ui::US62 = if let Dice_ui::US65::US65_1(v13_1_0) = &v13 {
                let v14: Dice_ui::US62 = match &v13 {
                    Dice_ui::US65::US65_1(x) => x.clone(),
                    _ => unreachable!(),
                };
                match &v14 {
                    Dice_ui::US62::US62_1(v14_1_0) => {
                        let v17: Dice_ui::US60 = v14_1_0.clone();
                        if let Dice_ui::US60::US60_1(v17_1_0, v17_1_1, v17_1_2, v17_1_3) = &v17 {
                            Dice_ui::US62::US62_1(Dice_ui::US60::US60_1(
                                match &v17 {
                                    Dice_ui::US60::US60_1(x, _, _, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v17 {
                                    Dice_ui::US60::US60_1(_, x, _, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v17 {
                                    Dice_ui::US60::US60_1(_, _, x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v17 {
                                    Dice_ui::US60::US60_1(_, _, _, x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            ))
                        } else {
                            Dice_ui::US62::US62_1(Dice_ui::US60::US60_0)
                        }
                    }
                    Dice_ui::US62::US62_0(v14_0_0) => Dice_ui::US62::US62_0(v14_0_0.clone()),
                }
            } else {
                Dice_ui::US62::US62_1(Dice_ui::US60::US60_0)
            };
            let v45: Dice_ui::US66 = match &v31 {
                Dice_ui::US62::US62_1(v31_1_0) => {
                    let v32: Dice_ui::US60 = v31_1_0.clone();
                    Dice_ui::US66::US66_1(match &v32 {
                        Dice_ui::US60::US60_1(v32_1_0, v32_1_1, v32_1_2, v32_1_3) => Some((
                            v32_1_0.clone(),
                            v32_1_1.clone(),
                            v32_1_2.clone(),
                            v32_1_3.clone(),
                        )),
                        _ => {
                            None::<(
                                Option<(
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                    )>,
                                )>,
                            )>
                        }
                    })
                }
                Dice_ui::US62::US62_0(v31_0_0) => Dice_ui::US66::US66_0(v31_0_0.clone()),
            };
            let v51: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            > = match &v45 {
                Dice_ui::US66::US66_1(v45_1_0) => Ok::<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >(v45_1_0.clone()),
                Dice_ui::US66::US66_0(v45_0_0) => Err::<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >(v45_0_0.clone()),
            };
            let v53: string = append(
                append(
                    string("dice_view.render (x) / roll create_memo / result: "),
                    sprintf!("{:?}", v51.clone()),
                ),
                string(""),
            );
            let v59: string = Dice_ui::method0(if length(v53.clone()) <= 200_i32 {
                v53.clone()
            } else {
                append(substring2(v53, 0_i32, 200_i32), string("..."))
            });
            leptos::logging::log!("{}", v59);
            v51
        }
        pub fn method400(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
        ) -> Func0<
            Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        > {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure162(v0_1.clone(), ())
            })
        }
        pub fn method406(
            v0_1: leptos::Memo<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> leptos::Memo<
            Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure168(
            unitVar: (),
            v0_1: Option<(
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<std::collections::HashMap<std::string::String, std::string::String>>,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                    )>,
                )>,
            )>,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_1(v0_1)
        }
        pub fn closure169(unitVar: (), v0_1: std::string::String) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn closure170(
            unitVar: (),
            _arg: (
                Option<(
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    std::string::String,
                    i32,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<std::collections::HashMap<std::string::String, std::string::String>>,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                    )>,
                )>,
            ),
        ) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn closure171(
            unitVar: (),
            _arg: (
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                std::string::String,
                i32,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US67 {
            Dice_ui::US67::US67_1(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn closure167(
            v0_1: leptos::Memo<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v1: leptos::Memo<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            > = Dice_ui::method406(v0_1);
            let v3: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            > = v1();
            let v6: Dice_ui::US66 = match &v3 {
                Err(v3_1_0) => Dice_ui::closure169((), v3_1_0.clone()),
                Ok(v3_0_0) => Dice_ui::closure168((), v3_0_0.clone()),
            };
            let v15: Dice_ui::US62 = match &v6 {
                Dice_ui::US66::US66_1(v6_1_0) => Dice_ui::US62::US62_1(defaultValue(
                    Dice_ui::US60::US60_0,
                    map(
                        Func1::new(
                            move |arg10_0040: (
                                Option<(
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                    )>,
                                )>,
                            )| Dice_ui::closure170((), arg10_0040),
                        ),
                        v6_1_0.clone(),
                    ),
                )),
                Dice_ui::US66::US66_0(v6_0_0) => Dice_ui::US62::US62_0(v6_0_0.clone()),
            };
            let v37: Dice_ui::US34 = if let Dice_ui::US62::US62_1(v15_1_0) = &v15 {
                let v16: Dice_ui::US60 = match &v15 {
                    Dice_ui::US62::US62_1(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US60::US60_1(v16_1_0, v16_1_1, v16_1_2, v16_1_3) = &v16 {
                    let v23: Dice_ui::US67 = defaultValue(
                        Dice_ui::US67::US67_0,
                        map(
                            Func1::new(
                                move |arg10_0040_1: (
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )| {
                                    Dice_ui::closure171((), arg10_0040_1)
                                },
                            ),
                            match &v16 {
                                Dice_ui::US60::US60_1(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                    );
                    if let Dice_ui::US67::US67_1(
                        v23_1_0,
                        v23_1_1,
                        v23_1_2,
                        v23_1_3,
                        v23_1_4,
                        v23_1_5,
                    ) = &v23
                    {
                        Dice_ui::US34::US34_1(append(
                            append(
                                append(
                                    append(
                                        append(
                                            append(
                                                append(
                                                    toString(match &v23 {
                                                        Dice_ui::US67::US67_1(_, _, _, _, _, x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    }),
                                                    string(": "),
                                                ),
                                                toString(match &v23 {
                                                    Dice_ui::US67::US67_1(_, _, _, _, x, _) => {
                                                        x.clone()
                                                    }
                                                    _ => unreachable!(),
                                                }),
                                            ),
                                            string(" - "),
                                        ),
                                        toString(match &v23 {
                                            Dice_ui::US67::US67_1(_, _, _, x, _, _) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                    ),
                                    string(" ("),
                                ),
                                toString(match &v23 {
                                    Dice_ui::US67::US67_1(_, x, _, _, _, _) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US34::US34_0
                    }
                } else {
                    Dice_ui::US34::US34_0
                }
            } else {
                Dice_ui::US34::US34_0
            };
            let v42: Option<string> = match &v37 {
                Dice_ui::US34::US34_1(v37_1_0) => Some(v37_1_0.clone()),
                _ => None::<string>,
            };
            let v44: string = append(
                append(
                    string("dice_view.render (x) / error_message create_memo / result: "),
                    sprintf!("{:?}", v42.clone()),
                ),
                string(""),
            );
            let v50: string = Dice_ui::method0(if length(v44.clone()) <= 200_i32 {
                v44.clone()
            } else {
                append(substring2(v44, 0_i32, 200_i32), string("..."))
            });
            leptos::logging::log!("{}", v50);
            v42
        }
        pub fn method405(
            v0_1: leptos::Memo<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> Func0<Option<string>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure167(v0_1.clone(), ())
            })
        }
        pub fn closure172(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US34 {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method97((leptos::SignalGetUntracked::get_untracked(&v2)).l1.clone());
            let v12: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_0,
                map(
                    Func1::new(move |v: std::string::String| Dice_ui::closure30((), v)),
                    (leptos::SignalGet::get(&v6)).l0.clone(),
                ),
            );
            match &v12 {
                Dice_ui::US15::US15_1(v12_1_0) => {
                    let v14: std::string::String = Dice_ui::method70(v12_1_0.clone());
                    Dice_ui::US34::US34_1(fable_library_rust::String_::fromString(v14))
                }
                _ => Dice_ui::US34::US34_0,
            }
        }
        pub fn method407(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<Dice_ui::US34> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure172(v0_1.clone(), ())
            })
        }
        pub fn method410(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure175(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        )> {
            let v2: std::string::String = Dice_ui::method410(v1);
            let patternInput: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ) = leptos::create_signal(v2);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure174(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure175(v0_1, v)
            })
        }
        pub fn method409() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure174((), v))
        }
        pub fn method411(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure173(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Array<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method97((leptos::SignalGetUntracked::get_untracked(&v2)).l1.clone());
            let v10: Vec<LrcPtr<(bool, std::string::String)>> =
                Dice_ui::method136((leptos::SignalGet::get(&v6)).l1.clone());
            let v12: Array<LrcPtr<(bool, std::string::String)>> =
                fable_library_rust::NativeArray_::array_from(v10);
            let v13 = Dice_ui::method137();
            let v14: Array<LrcPtr<(bool, std::string::String)>> = Dice_ui::method11(v12);
            let v16: Vec<LrcPtr<(bool, std::string::String)>> = v14.to_vec();
            let v19: Vec<(bool, std::string::String)> =
                Dice_ui::method138(v16.iter().map(|x| v13(x.clone())).collect());
            let v21: Array<(bool, std::string::String)> =
                fable_library_rust::NativeArray_::array_from(v19);
            let v22 = Dice_ui::method139();
            let v23: Array<(bool, std::string::String)> = Dice_ui::method140(v21);
            let v25: Vec<(bool, std::string::String)> = v23.to_vec();
            let v28: Vec<(bool, std::string::String)> =
                Dice_ui::method138(v25.into_iter().filter(|x| v22(x.clone().clone())).collect());
            let v30: Array<(bool, std::string::String)> =
                fable_library_rust::NativeArray_::array_from(v28);
            let v31 = Dice_ui::method141();
            let v32: Array<(bool, std::string::String)> = Dice_ui::method140(v30);
            let v34: Vec<(bool, std::string::String)> = v32.to_vec();
            let v37: Vec<std::string::String> =
                Dice_ui::method37(v34.iter().map(|x| v31(x.clone())).collect());
            let v39: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v37);
            let v40 = Dice_ui::method409();
            let v41: Array<std::string::String> = Dice_ui::method143(v39);
            let v43: Vec<std::string::String> = v41.to_vec();
            let v46: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            > = Dice_ui::method411(
                v43.iter()
                    .enumerate()
                    .map(|(i, x)| v40(i.try_into().unwrap())(x.clone()))
                    .collect(),
            );
            fable_library_rust::NativeArray_::array_from(v46)
        }
        pub fn method408(
            v0_1: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<
            Array<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure173(v0_1.clone(), ())
            })
        }
        pub fn method413(
            v0_1: leptos::Memo<
                Array<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<std::string::String>,
                            leptos::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
        ) -> leptos::Memo<
            Array<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            v0_1
        }
        pub fn closure177(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::ReadSignal<std::string::String>,
            leptos::WriteSignal<std::string::String>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn method414() -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
            (
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        > {
            Func1::new(
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>| {
                    Dice_ui::closure177((), tupledArg.0.clone(), tupledArg.1.clone())
                },
            )
        }
        pub fn method415(
            v0_1: Array<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        ) -> Array<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method416(
            v0_1: Vec<(
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            )>,
        ) -> Vec<(
            i32,
            leptos::ReadSignal<std::string::String>,
            leptos::WriteSignal<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure178(
            unitVar: (),
            _arg: (
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::ReadSignal<std::string::String>) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn method417() -> Func1<
            (
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            ),
            (i32, leptos::ReadSignal<std::string::String>),
        > {
            Func1::new(
                move |arg10_0040: (
                    i32,
                    leptos::ReadSignal<std::string::String>,
                    leptos::WriteSignal<std::string::String>,
                )| Dice_ui::closure178((), arg10_0040),
            )
        }
        pub fn method418(
            v0_1: Array<(
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            )>,
        ) -> Array<(
            i32,
            leptos::ReadSignal<std::string::String>,
            leptos::WriteSignal<std::string::String>,
        )> {
            v0_1
        }
        pub fn method419(
            v0_1: Vec<(i32, leptos::ReadSignal<std::string::String>)>,
        ) -> Vec<(i32, leptos::ReadSignal<std::string::String>)> {
            v0_1
        }
        pub fn method420(
            v0_1: Array<(i32, leptos::ReadSignal<std::string::String>)>,
        ) -> Array<(i32, leptos::ReadSignal<std::string::String>)> {
            v0_1
        }
        pub fn closure176(
            v0_1: leptos::Memo<
                Array<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<std::string::String>,
                            leptos::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::ReadSignal<std::string::String>)> {
            let v1: leptos::Memo<
                Array<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<std::string::String>,
                            leptos::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            > = Dice_ui::method413(v0_1);
            let v3: Array<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            > = v1();
            let v4 = Dice_ui::method414();
            let v5: Array<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            > = Dice_ui::method415(v3);
            let v7: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<std::string::String>,
                        leptos::WriteSignal<std::string::String>,
                    ),
                )>,
            > = v5.to_vec();
            let v10: Vec<(
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            )> = Dice_ui::method416(v7.iter().map(|x| v4(x.clone())).collect());
            let v12: Array<(
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            )> = fable_library_rust::NativeArray_::array_from(v10);
            let v13 = Dice_ui::method417();
            let v14: Array<(
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            )> = Dice_ui::method418(v12);
            let v16: Vec<(
                i32,
                leptos::ReadSignal<std::string::String>,
                leptos::WriteSignal<std::string::String>,
            )> = v14.to_vec();
            let v19: Vec<(i32, leptos::ReadSignal<std::string::String>)> =
                Dice_ui::method419(v16.iter().map(|x| v13(x.clone())).collect());
            let v22: Array<(i32, leptos::ReadSignal<std::string::String>)> =
                Dice_ui::method420(fable_library_rust::NativeArray_::array_from(v19));
            v22.to_vec()
        }
        pub fn method412(
            v0_1: leptos::Memo<
                Array<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<std::string::String>,
                            leptos::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
        ) -> Func0<Vec<(i32, leptos::ReadSignal<std::string::String>)>> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure176(v0_1.clone(), ())
            })
        }
        pub fn method421(v0_1: Array<leptos::View>) -> Array<leptos::View> {
            v0_1
        }
        pub fn method422(v0_1: Array<leptos::View>) -> Array<leptos::View> {
            v0_1
        }
        pub fn method423(v0_1: Array<leptos::View>) -> Array<leptos::View> {
            v0_1
        }
        pub fn method427() -> string {
            string("Account")
        }
        pub fn closure182(unitVar: (), v0_1: leptos::Memo<Dice_ui::US34>) -> Dice_ui::US68 {
            Dice_ui::US68::US68_1(v0_1)
        }
        pub fn method428(v0_1: leptos::Memo<Dice_ui::US34>) -> leptos::Memo<Dice_ui::US34> {
            v0_1
        }
        pub fn closure185(
            unitVar: (),
            v0_1: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Dice_ui::US69 {
            Dice_ui::US69::US69_1(v0_1)
        }
        pub fn method431(
            v0_1: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> {
            v0_1
        }
        pub fn method432(
            v0_1: Array<(i32, leptos::ReadSignal<std::string::String>)>,
        ) -> Array<(i32, leptos::ReadSignal<std::string::String>)> {
            v0_1
        }
        pub fn method437(v0_1: Array<leptos::View>) -> Array<leptos::View> {
            v0_1
        }
        pub fn closure189(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Array<leptos::View> =
                Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
            let v4: Vec<leptos::View> = v2.to_vec();
            leptos::Fragment::new(v4)
        }
        pub fn method436() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure189((), ()))
        }
        pub fn method438(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn method440(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn method441(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn closure190(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method440(v0_1);
            let v4: Func0<leptos::Fragment> = Dice_ui::method441(Func0::new(move || v1()));
            let v9: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(move || v4()),
            ])));
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method439(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure190(v0_1.clone(), ())
            })
        }
        pub fn method442(
            v0_1: Array<leptos::HtmlElement<leptos::svg::Path>>,
        ) -> Array<leptos::HtmlElement<leptos::svg::Path>> {
            v0_1
        }
        pub fn method444(
            v0_1: leptos::HtmlElement<leptos::svg::Path>,
        ) -> leptos::HtmlElement<leptos::svg::Path> {
            v0_1
        }
        pub fn closure191(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Path>,
        ) -> leptos::View {
            let v1: leptos::HtmlElement<leptos::svg::Path> = Dice_ui::method444(v0_1);
            leptos::IntoView::into_view(v1)
        }
        pub fn method443() -> Func1<leptos::HtmlElement<leptos::svg::Path>, leptos::View> {
            Func1::new(move |v: leptos::HtmlElement<leptos::svg::Path>| Dice_ui::closure191((), v))
        }
        pub fn method445(
            v0_1: Array<leptos::HtmlElement<leptos::svg::Path>>,
        ) -> Array<leptos::HtmlElement<leptos::svg::Path>> {
            v0_1
        }
        pub fn method446(v0_1: Vec<leptos::View>) -> Vec<leptos::View> {
            v0_1
        }
        pub fn closure188(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string = string(
                " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method442(new_array(
                &[
                    leptos::view! {
                        <path
                            d="M6 18L18 6M6 6l12 12"
                            stroke-linejoin="round"
                            stroke-linecap="round"
                        >
                            {v9()}
                        </path>
                    },
                ],
            ));
            let v17 = Dice_ui::method443();
            let v18: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method445(v16);
            let v20: Vec<leptos::HtmlElement<leptos::svg::Path>> = v18.to_vec();
            let v23: Vec<leptos::View> =
                Dice_ui::method446(v20.iter().map(|x| v17(x.clone())).collect());
            let v26: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v23));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method435() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure188((), ()))
        }
        pub fn method447(
            v0_1: leptos::HtmlElement<leptos::svg::Svg>,
        ) -> leptos::HtmlElement<leptos::svg::Svg> {
            v0_1
        }
        pub fn closure187(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v15: string =
                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v17 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method435()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v15), string(">{v17()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                leptos::view! {
                    <svg
                        class="text-red-700"
                        stroke="currentColor"
                        stroke-width="1.5"
                        viewBox="0 0 24 24"
                        height="100%"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        {v17()}
                    </svg>
                },
            );
            let v28: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v23),
            ])));
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method434() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure187((), ()))
        }
        pub fn method448(
            v0_1: leptos::HtmlElement<leptos::html::Span>,
        ) -> leptos::HtmlElement<leptos::html::Span> {
            v0_1
        }
        pub fn method450() -> string {
            string("No data")
        }
        pub fn closure192(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method450()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method449() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure192((), ()))
        }
        pub fn method451(
            v0_1: leptos::HtmlElement<leptos::html::Pre>,
        ) -> leptos::HtmlElement<leptos::html::Pre> {
            v0_1
        }
        pub fn closure186(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"[height:17px]\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method434()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> =
                Dice_ui::method448(leptos::view! { <span class="[height:17px]">{v5()}</span> });
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v18 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method449()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v16), string(">{v18()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Pre> = Dice_ui::method451(
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v18()}</pre> },
            );
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method433() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure186((), ()))
        }
        pub fn method452(
            v0_1: leptos::HtmlElement<leptos::html::Div>,
        ) -> leptos::HtmlElement<leptos::html::Div> {
            v0_1
        }
        pub fn method453(
            v0_1: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> {
            v0_1
        }
        pub fn closure193(
            unitVar: (),
            _arg: (i32, leptos::ReadSignal<std::string::String>),
        ) -> i32 {
            _arg.0.clone()
        }
        pub fn method454() -> Func1<(i32, leptos::ReadSignal<std::string::String>), i32> {
            Func1::new(
                move |arg10_0040: (i32, leptos::ReadSignal<std::string::String>)| {
                    Dice_ui::closure193((), arg10_0040)
                },
            )
        }
        pub fn method456(
            v0_1: leptos::ReadSignal<std::string::String>,
        ) -> leptos::ReadSignal<std::string::String> {
            v0_1
        }
        pub fn method457(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method459(v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            v0_1
        }
        pub fn method460(
            v0_1: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>>,
        ) -> leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> {
            v0_1
        }
        pub fn closure195(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: i32,
            v4: std::string::String,
            unitVar: (),
        ) {
            let v5: std::string::String = Dice_ui::method70(v4);
            let v7: string = fable_library_rust::String_::fromString(v5);
            let v8: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v2.l0.clone();
            let v9: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v8.clone());
            let v13: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method135((leptos::SignalGetUntracked::get_untracked(&v9)).l1.clone());
            let v15: LrcPtr<Dice_ui::Heap0> = leptos::SignalGetUntracked::get_untracked(&v13);
            let v21: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v8);
            let v23: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v21);
            let v26: string = Dice_ui::method6(Dice_ui::method18(v7));
            let v28: &str = fable_library_rust::String_::LrcStr::as_str(&v26);
            let v33: LrcPtr<Dice_ui::Heap0> = Dice_ui::method459(LrcPtr::new(Dice_ui::Heap0 {
                l0: Some(String::from(v28)),
                l1: v15.l1.clone(),
                l2: v15.l2,
                l3: v15.l3,
                l4: v15.l4.clone(),
            }));
            let v34: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> = Dice_ui::method460(v23.l1.clone());
            leptos::SignalSet::set(&v34, v33);
            ()
        }
        pub fn method458(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: i32,
            v4: std::string::String,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure195(v0_1.clone(), v1.clone(), v2.clone(), v3, v4.clone(), ())
                }
            })
        }
        pub fn closure198(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Array<leptos::View> =
                Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
            let v4: Vec<leptos::View> = v2.to_vec();
            leptos::Fragment::new(v4)
        }
        pub fn method463() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure198((), ()))
        }
        pub fn method464(
            v0_1: leptos::HtmlElement<leptos::svg::Circle>,
        ) -> leptos::HtmlElement<leptos::svg::Circle> {
            v0_1
        }
        pub fn closure197(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v11: string = string(
                " stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"",
            );
            let v13 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v11), string(">{v13()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">
                        {v13()}
                    </circle>
                },
            );
            let v21: leptos::View = leptos::IntoView::into_view(v19);
            let v28: string =
                string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v30 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v33: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v28), string(">{v30()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: leptos::HtmlElement<leptos::svg::Path> = Dice_ui::method444(
                leptos::view! {
                    <path d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">
                        {v30()}
                    </path>
                },
            );
            let v41: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v21,
                leptos::IntoView::into_view(v36),
            ])));
            let v43: Vec<leptos::View> = v41.to_vec();
            leptos::Fragment::new(v43)
        }
        pub fn method462() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure197((), ()))
        }
        pub fn method465(v0_1: string) -> string {
            v0_1
        }
        pub fn closure196(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4: std::string::String = Dice_ui::method70(v3);
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v9: Dice_ui::US68 = defaultValue(
                Dice_ui::US68::US68_0,
                map(
                    Func1::new(move |v: leptos::Memo<Dice_ui::US34>| Dice_ui::closure182((), v)),
                    v1,
                ),
            );
            let v17: Dice_ui::US43 = match &v9 {
                Dice_ui::US68::US68_1(v9_1_0) => {
                    let v11: leptos::Memo<Dice_ui::US34> = Dice_ui::method428(v9_1_0.clone());
                    Dice_ui::US43::US43_1(v11())
                }
                _ => Dice_ui::US43::US43_0,
            };
            let v24: Dice_ui::US34 = if let Dice_ui::US43::US43_1(v17_1_0) = &v17 {
                let v18: Dice_ui::US34 = match &v17 {
                    Dice_ui::US43::US43_1(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US34::US34_1(v18_1_0) = &v18 {
                    Dice_ui::US34::US34_1(match &v18 {
                        Dice_ui::US34::US34_1(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Dice_ui::US34::US34_0
                }
            } else {
                Dice_ui::US34::US34_0
            };
            let v70: leptos::View = if let Dice_ui::US34::US34_1(v24_1_0) = &v24 {
                if v6.clone()
                    == match &v24 {
                        Dice_ui::US34::US34_1(x) => x.clone(),
                        _ => unreachable!(),
                    }
                {
                    let v28: string = Dice_ui::method6(string("h-5 w-5"));
                    let v30: &str = fable_library_rust::String_::LrcStr::as_str(&v28);
                    let v32: string = string("r#\"\"#");
                    let v33: &str = r#""#;
                    let v46: string =
                            string(" class=\" \".to_owned() + v30 stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v48 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method462()));
                    let v51: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v46), string(">{v48()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v54: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                        leptos::view! {
                            <svg
                                class=" ".to_owned() + v30
                                stroke="currentColor"
                                stroke-width="1.5"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                {v48()}
                            </svg>
                        },
                    );
                    leptos::IntoView::into_view(v54)
                } else {
                    let v60: Array<leptos::View> =
                        Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<
                            leptos::View,
                        >(
                        ))));
                    leptos::CollectView::collect_view(v60.to_vec())
                }
            } else {
                let v67: Array<leptos::View> =
                    Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<
                        leptos::View,
                    >(
                    ))));
                leptos::CollectView::collect_view(v67.to_vec())
            };
            let v73: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(v6)));
            let v75: &str = fable_library_rust::String_::LrcStr::as_str(&v73);
            let v77: std::string::String = String::from(v75);
            let v79: leptos::leptos_dom::Text = leptos::html::text(v77);
            let v84: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v70,
                leptos::IntoView::into_view(v79),
            ])));
            let v86: Vec<leptos::View> = v84.to_vec();
            leptos::Fragment::new(v86)
        }
        pub fn method461(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure196(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn method466(
            v0_1: Array<leptos::HtmlElement<leptos::html::Button>>,
        ) -> Array<leptos::HtmlElement<leptos::html::Button>> {
            v0_1
        }
        pub fn method468(
            v0_1: leptos::HtmlElement<leptos::html::Button>,
        ) -> leptos::HtmlElement<leptos::html::Button> {
            v0_1
        }
        pub fn closure199(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Button>,
        ) -> leptos::View {
            let v1: leptos::HtmlElement<leptos::html::Button> = Dice_ui::method468(v0_1);
            leptos::IntoView::into_view(v1)
        }
        pub fn method467() -> Func1<leptos::HtmlElement<leptos::html::Button>, leptos::View> {
            Func1::new(move |v: leptos::HtmlElement<leptos::html::Button>| {
                Dice_ui::closure199((), v)
            })
        }
        pub fn method469(
            v0_1: Array<leptos::HtmlElement<leptos::html::Button>>,
        ) -> Array<leptos::HtmlElement<leptos::html::Button>> {
            v0_1
        }
        pub fn closure194(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            _arg: (i32, leptos::ReadSignal<std::string::String>),
        ) -> leptos::Fragment {
            let v5: leptos::ReadSignal<std::string::String> = Dice_ui::method456(_arg.1.clone());
            let v7: std::string::String = leptos::SignalGet::get(&v5);
            let v8: std::string::String = Dice_ui::method457(v7.clone());
            let v9 = Dice_ui::method458(
                v0_1.clone(),
                v1.clone(),
                v2.clone(),
                _arg.0.clone(),
                v7.clone(),
            );
            let v11: Func0<()> = Func0::new(move || v9());
            let v12: string =
                string("class=\"flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
            let v19: string = append(
                append(
                    string(" aria-label=v8"),
                    append(
                        append(
                            string(" on:click=move |_| v11()"),
                            append(append(append(string(" "), v12), string("")), string("")),
                        ),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v21 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method461(v0_1, v1, v2, v7)));
            let v24: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<button "), v19), string(">{v21()}</")),
                            string("button"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: Array<leptos::HtmlElement<leptos::html::Button>> = Dice_ui::method466(
                new_array(&[
                    leptos::view! {
                        <button
                            aria-label=v8
                            on:click=move |_| v11()
                            class="flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500"
                        >
                            {v21()}
                        </button>
                    },
                ]),
            );
            let v29 = Dice_ui::method467();
            let v30: Array<leptos::HtmlElement<leptos::html::Button>> = Dice_ui::method469(v28);
            let v32: Vec<leptos::HtmlElement<leptos::html::Button>> = v30.to_vec();
            let v35: Vec<leptos::View> =
                Dice_ui::method446(v32.iter().map(|x| v29(x.clone())).collect());
            let v38: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v35));
            let v40: Vec<leptos::View> = v38.to_vec();
            leptos::Fragment::new(v40)
        }
        pub fn method455(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func1<(i32, leptos::ReadSignal<std::string::String>), leptos::Fragment> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (i32, leptos::ReadSignal<std::string::String>)| {
                    Dice_ui::closure194(v0_1.clone(), v1.clone(), v2.clone(), arg10_0040)
                }
            })
        }
        pub fn closure184(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3 = Func1::new(
                move |v: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>| {
                    Dice_ui::closure185((), v)
                },
            );
            let v5: Dice_ui::US69 =
                defaultValue(Dice_ui::US69::US69_0, map(v3.clone(), v0_1.clone()));
            let v16: Dice_ui::US70 = match &v5 {
                Dice_ui::US69::US69_1(v5_1_0) => {
                    let v7: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> =
                        Dice_ui::method431(v5_1_0.clone());
                    let v10: Vec<(i32, leptos::ReadSignal<std::string::String>)> =
                        Dice_ui::method419(v7());
                    Dice_ui::US70::US70_1(fable_library_rust::NativeArray_::array_from(v10))
                }
                _ => Dice_ui::US70::US70_0,
            };
            let v18: Array<(i32, leptos::ReadSignal<std::string::String>)> =
                Dice_ui::method432(new_empty::<(i32, leptos::ReadSignal<std::string::String>)>());
            if count(match &v16 {
                Dice_ui::US70::US70_1(v16_1_0) => v16_1_0.clone(),
                _ => v18,
            }) as u64
                == 0_u64
            {
                let v27: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v29 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method433()));
                let v32: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v27), string(">{v29()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v35: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                    leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v29()}</div> },
                );
                let v40: Array<leptos::View> =
                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                        leptos::IntoView::into_view(v35),
                    ])));
                let v42: Vec<leptos::View> = v40.to_vec();
                leptos::Fragment::new(v42)
            } else {
                let v46: Dice_ui::US69 = defaultValue(Dice_ui::US69::US69_0, map(v3, v0_1.clone()));
                match &v46 {
                    Dice_ui::US69::US69_1(v46_1_0) => {
                        let v48: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>> =
                            Dice_ui::method453(v46_1_0.clone());
                        let v49 = Dice_ui::method454();
                        let v50 = Dice_ui::method455(v0_1, v1, v2);
                        let v62: string =
                            string("leptos::IntoView::into_view(leptos::view! { <leptos::For  children=move |x| v50(x) let:x key=move |x| v49(x.to_owned()) each=v48 /> })");
                        let v66: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(
                            new_array(&[leptos::IntoView::into_view(
                                leptos::view! {
                                    <leptos::For
                                        children=move |x| v50(x)
                                        let:x
                                        key=move |x| v49(x.to_owned())
                                        each=v48
                                    ></leptos::For>
                                },
                            )]),
                        ));
                        let v68: Vec<leptos::View> = v66.to_vec();
                        leptos::Fragment::new(v68)
                    }
                    _ => {
                        let v73: Array<leptos::View> =
                            Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
                        let v75: Vec<leptos::View> = v73.to_vec();
                        leptos::Fragment::new(v75)
                    }
                }
            }
        }
        pub fn method430(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure184(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure183(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v6: string = append(append(append(string(" "), v3), string("")), string(""));
            let v8 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method430(v0_1, v1, v2)));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v6), string(">{v8()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! {
                    <div class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">
                        {v8()}
                    </div>
                },
            );
            let v19: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v14),
            ])));
            let v21: Vec<leptos::View> = v19.to_vec();
            leptos::Fragment::new(v21)
        }
        pub fn method429(
            v0_1: Option<leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>>,
            v1: Option<leptos::Memo<Dice_ui::US34>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure183(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure200(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method440(v0_1);
            let v4: Func0<leptos::Fragment> = Dice_ui::method441(Func0::new(move || v1()));
            let v9: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(move || v4()),
            ])));
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method470(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure200(v0_1.clone(), ())
            })
        }
        pub fn closure202(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn method472(v0_1: string) -> Func0<string> {
            Func0::new(move || Dice_ui::closure202((), ()))
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn method473(v0_1: string) -> Func0<bool> {
            Func0::new(move || Dice_ui::closure203((), ()))
        }
        pub fn closure204(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v3: Array<leptos::View> =
                Dice_ui::method437(Dice_ui::method421(new_array(&[v0_1])));
            let v5: Vec<leptos::View> = v3.to_vec();
            leptos::Fragment::new(v5)
        }
        pub fn method474(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure204(v0_1.clone(), ())
            })
        }
        pub fn closure206(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn method476(v0_1: string) -> Func0<string> {
            Func0::new(move || Dice_ui::closure206((), ()))
        }
        pub fn closure209(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(v0_1)));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v14: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v9),
            ])));
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method479(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure209(v0_1.clone(), ())
            })
        }
        pub fn closure208(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method479(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">
                        {v6()}
                    </span>
                },
            );
            let v17: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v12),
            ])));
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method478(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure208(v0_1.clone(), ())
            })
        }
        pub fn closure211(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method442(new_array(
                &[
                    leptos::view! {
                        <path
                            clip-rule="evenodd"
                            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                            fill-rule="evenodd"
                        >
                            {v9()}
                        </path>
                    },
                ],
            ));
            let v17 = Dice_ui::method443();
            let v18: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method445(v16);
            let v20: Vec<leptos::HtmlElement<leptos::svg::Path>> = v18.to_vec();
            let v23: Vec<leptos::View> =
                Dice_ui::method446(v20.iter().map(|x| v17(x.clone())).collect());
            let v26: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v23));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method481() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure211((), ()))
        }
        pub fn closure210(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method6(string("h-5 w-5"));
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: string = string("r#\"\"#");
            let v6: &str = r#""#;
            let v15: string =
                string(" class=\" \".to_owned() + v3 fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v17 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method481()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v15), string(">{v17()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                leptos::view! {
                    <svg
                        class=" ".to_owned() + v3
                        fill="currentColor"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        {v17()}
                    </svg>
                },
            );
            let v28: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v23),
            ])));
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method480() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure210((), ()))
        }
        pub fn closure207(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex items-center gap-2\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method478(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex items-center gap-2">{v6()}</div> },
            );
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method480()));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v17), string(">{v19()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v19()}</span> },
            );
            let v30: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v14,
                leptos::IntoView::into_view(v25),
            ])));
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method477(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure207(v0_1.clone(), ())
            })
        }
        pub fn method482(
            v0_1: leptos::HtmlElement<leptos::html::Summary>,
        ) -> leptos::HtmlElement<leptos::html::Summary> {
            v0_1
        }
        pub fn closure212(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            v0_1()
        }
        pub fn method483(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure212(v0_1.clone(), ())
            })
        }
        pub fn closure205(
            v0_1: string,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method476(v0_1.clone());
            let v7: string = string("r#\"\"#");
            let v8: &'static str = r#""#;
            let v9: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 \".to_owned() + v8 + \" \" + &v2()");
            let v11: string = append(append(append(string(" "), v9), string("")), string(""));
            let v13 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method477(v0_1)));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v11), string(">{v13()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::HtmlElement<leptos::html::Summary> = Dice_ui::method482(
                leptos::view! {
                    <summary class=move || {
                        "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 "
                            .to_owned() + v8 + " " + &v2()
                    }>{v13()}</summary>
                },
            );
            let v21: leptos::View = leptos::IntoView::into_view(v19);
            let v24: string = string(" class=\"flex flex-1 flex-col\"");
            let v26 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method483(v1)));
            let v29: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v24), string(">{v26()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v26()}</div> },
            );
            let v37: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v21,
                leptos::IntoView::into_view(v32),
            ])));
            let v39: Vec<leptos::View> = v37.to_vec();
            leptos::Fragment::new(v39)
        }
        pub fn method475(v0_1: string, v1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure205(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method484(
            v0_1: leptos::HtmlElement<leptos::html::Details>,
        ) -> leptos::HtmlElement<leptos::html::Details> {
            v0_1
        }
        pub fn closure201(
            v0_1: string,
            v1: leptos::View,
            v2: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3 = Dice_ui::method472(v0_1.clone());
            let v4 = Dice_ui::method473(v0_1.clone());
            let v8: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v10 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method474(v1)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v10()}</div> },
            );
            let v18: leptos::View = leptos::IntoView::into_view(v16);
            let v19: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3()");
            let v23: string = append(
                append(
                    string(" open=move || v4()"),
                    append(append(append(string(" "), v19), string("")), string("")),
                ),
                string(""),
            );
            let v25 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method475(v0_1, v2)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v23), string(">{v25()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::HtmlElement<leptos::html::Details> = Dice_ui::method484(
                leptos::view! {
                    <details
                        open=move || v4()
                        class=move || {
                            "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                                .to_owned() + &v3()
                        }
                    >
                        {v25()}
                    </details>
                },
            );
            let v36: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v18,
                leptos::IntoView::into_view(v31),
            ])));
            let v38: Vec<leptos::View> = v36.to_vec();
            leptos::Fragment::new(v38)
        }
        pub fn method471(
            v0_1: string,
            v1: leptos::View,
            v2: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure201(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure181(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Dice_ui::US34>,
            v2: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method427()));
            let v7: &str = fable_library_rust::String_::LrcStr::as_str(&v5);
            let v9: std::string::String = String::from(v7);
            let v11: leptos::leptos_dom::Text = leptos::html::text(v9);
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v17: Option<leptos::Memo<Dice_ui::US34>> = Some(v1);
            let v20: Dice_ui::US68 = defaultValue(
                Dice_ui::US68::US68_0,
                map(
                    Func1::new(move |v: leptos::Memo<Dice_ui::US34>| Dice_ui::closure182((), v)),
                    v17.clone(),
                ),
            );
            let v28: Dice_ui::US43 = match &v20 {
                Dice_ui::US68::US68_1(v20_1_0) => {
                    let v22: leptos::Memo<Dice_ui::US34> = Dice_ui::method428(v20_1_0.clone());
                    Dice_ui::US43::US43_1(v22())
                }
                _ => Dice_ui::US43::US43_0,
            };
            let v35: Dice_ui::US34 = if let Dice_ui::US43::US43_1(v28_1_0) = &v28 {
                let v29: Dice_ui::US34 = match &v28 {
                    Dice_ui::US43::US43_1(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US34::US34_1(v29_1_0) = &v29 {
                    Dice_ui::US34::US34_1(match &v29 {
                        Dice_ui::US34::US34_1(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Dice_ui::US34::US34_0
                }
            } else {
                Dice_ui::US34::US34_0
            };
            let v39: string = match &v35 {
                Dice_ui::US34::US34_1(v35_1_0) => v35_1_0.clone(),
                _ => string("Select..."),
            };
            let v43: Array<leptos::View> =
                Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<
                    leptos::View,
                >())));
            let v51: string = string(" class=\"flex flex-col [position:relative]\"");
            let v53 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method471(
                v39,
                leptos::CollectView::collect_view(v43.to_vec()),
                Dice_ui::method470(Dice_ui::method429(Some(v2), v17, v0_1)),
            )));
            let v56: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v51), string(">{v53()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v59: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-col [position:relative]">{v53()}</div> },
            );
            let v64: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                leptos::IntoView::into_view(v59),
            ])));
            let v66: Vec<leptos::View> = v64.to_vec();
            leptos::Fragment::new(v66)
        }
        pub fn method426(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<Dice_ui::US34>,
            v2: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure181(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn method486() -> string {
            string("Max")
        }
        pub fn closure214(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> i32 {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method135((leptos::SignalGetUntracked::get_untracked(&v2)).l1.clone());
            (leptos::SignalGetUntracked::get_untracked(&v6)).l2
        }
        pub fn method487(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<i32> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure214(v0_1.clone(), ())
            })
        }
        pub fn closure215(v0_1: LrcPtr<Dice_ui::Heap2>, v1: std::string::String) {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v2.clone());
            let v7: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method135((leptos::SignalGetUntracked::get_untracked(&v3)).l1.clone());
            let v9: LrcPtr<Dice_ui::Heap0> = leptos::SignalGetUntracked::get_untracked(&v7);
            let v15: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v2);
            let v17: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v15);
            let v19: string = toString(v1);
            let v24: LrcPtr<Dice_ui::Heap0> = Dice_ui::method459(LrcPtr::new(Dice_ui::Heap0 {
                l0: v9.l0.clone(),
                l1: v9.l1.clone(),
                l2: if string("") == v19.clone() {
                    1_i32
                } else {
                    toInt32(v19)
                },
                l3: v9.l3,
                l4: v9.l4.clone(),
            }));
            let v25: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> = Dice_ui::method460(v17.l1.clone());
            leptos::SignalSet::set(&v25, v24);
            ()
        }
        pub fn method488(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func1<std::string::String, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure215(v0_1.clone(), v)
            })
        }
        pub fn closure216(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method489() -> Func0<string> {
            Func0::new(move || Dice_ui::closure216((), ()))
        }
        pub fn method490(
            v0_1: leptos::HtmlElement<leptos::html::Input>,
        ) -> leptos::HtmlElement<leptos::html::Input> {
            v0_1
        }
        pub fn closure213(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method486()));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v11: leptos::View = leptos::IntoView::into_view(v9);
            let v12 = Dice_ui::method487(v0_1.clone());
            let v13 = Dice_ui::method488(v0_1);
            let v14 = Dice_ui::method489();
            let v24: string =
                string("leptos::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v13(leptos::event_target_value(&event)) prop:value=move || v12() class=move || \"bg-gray-50 h-[27px] \".to_owned() + &v14() /> }");
            let v27: leptos::HtmlElement<leptos::html::Input> = Dice_ui::method490(
                leptos::view! {
                    <input
                        on:keyup=move |event: web_sys::KeyboardEvent| v13(
                            leptos::event_target_value(&event),
                        )
                        prop:value=move || v12()
                        class=move || "bg-gray-50 h-[27px] ".to_owned() + &v14()
                    />
                },
            );
            let v32: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v11,
                leptos::IntoView::into_view(v27),
            ])));
            let v34: Vec<leptos::View> = v32.to_vec();
            leptos::Fragment::new(v34)
        }
        pub fn method485(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure213(v0_1.clone(), ())
            })
        }
        pub fn method493(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
        ) -> leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>
        {
            v0_1
        }
        pub fn closure218(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            > = Dice_ui::method493(v0_1);
            let v4: leptos::ReadSignal<bool> = Dice_ui::method94(leptos::Action::pending(&v1));
            leptos::SignalGet::get(&v4)
        }
        pub fn method492(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure218(v0_1.clone(), ())
            })
        }
        pub fn method494(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn method496(v0_1: LrcPtr<Dice_ui::Heap6>) -> LrcPtr<Dice_ui::Heap6> {
            v0_1
        }
        pub fn method497(
            v0_1: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            >,
        ) -> leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>
        {
            v0_1
        }
        pub fn closure219(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            unitVar: (),
        ) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v7: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method135((leptos::SignalGetUntracked::get_untracked(&v3)).l1.clone());
            let v12: LrcPtr<Dice_ui::Heap6> = Dice_ui::method496(LrcPtr::new(Dice_ui::Heap6 {
                l0: (leptos::SignalGetUntracked::get_untracked(&v7)).l2,
            }));
            let v13: leptos::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US60, std::string::String>,
            > = Dice_ui::method497(v1);
            leptos::Action::dispatch(&v13, v12.clone());
            ()
        }
        pub fn method495(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure219(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method499() -> string {
            string("Roll")
        }
        pub fn method500(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure223(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Array<leptos::View> =
                Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
            let v4: Vec<leptos::View> = v2.to_vec();
            leptos::Fragment::new(v4)
        }
        pub fn method503() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure223((), ()))
        }
        pub fn method504(
            v0_1: leptos::HtmlElement<leptos::svg::Animate>,
        ) -> leptos::HtmlElement<leptos::svg::Animate> {
            v0_1
        }
        pub fn closure222(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0s"
                        values="0.2; 1; .2"
                        attributeType="XML"
                        attributeName="opacity"
                    >
                        {v15()}
                    </animate>
                },
            );
            let v23: leptos::View = leptos::IntoView::into_view(v21);
            let v36: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
            let v38 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v40: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v36), string(">{v38()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0s"
                        values="10; 20; 10"
                        attributeType="XML"
                        attributeName="height"
                    >
                        {v38()}
                    </animate>
                },
            );
            let v45: leptos::View = leptos::IntoView::into_view(v43);
            let v58: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v60 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v62: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v58), string(">{v60()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v65: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0s"
                        values="10; 5; 10"
                        attributeType="XML"
                        attributeName="y"
                    >
                        {v60()}
                    </animate>
                },
            );
            let v70: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v23,
                v45,
                leptos::IntoView::into_view(v65),
            ])));
            let v72: Vec<leptos::View> = v70.to_vec();
            leptos::Fragment::new(v72)
        }
        pub fn method502() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure222((), ()))
        }
        pub fn closure224(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0.15s"
                        values="0.2; 1; .2"
                        attributeType="XML"
                        attributeName="opacity"
                    >
                        {v15()}
                    </animate>
                },
            );
            let v23: leptos::View = leptos::IntoView::into_view(v21);
            let v36: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v38 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v40: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v36), string(">{v38()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0.15s"
                        values="10; 20; 10"
                        attributeType="XML"
                        attributeName="opacity"
                    >
                        {v38()}
                    </animate>
                },
            );
            let v45: leptos::View = leptos::IntoView::into_view(v43);
            let v58: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v60 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v62: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v58), string(">{v60()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v65: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0.15s"
                        values="10; 5; 10"
                        attributeType="XML"
                        attributeName="y"
                    >
                        {v60()}
                    </animate>
                },
            );
            let v70: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v23,
                v45,
                leptos::IntoView::into_view(v65),
            ])));
            let v72: Vec<leptos::View> = v70.to_vec();
            leptos::Fragment::new(v72)
        }
        pub fn method505() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure224((), ()))
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v15 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v13), string(">{v15()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0.3s"
                        values="0.2; 1; .2"
                        attributeType="XML"
                        attributeName="opacity"
                    >
                        {v15()}
                    </animate>
                },
            );
            let v23: leptos::View = leptos::IntoView::into_view(v21);
            let v36: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
            let v38 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v40: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v36), string(">{v38()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0.3s"
                        values="10; 20; 10"
                        attributeType="XML"
                        attributeName="height"
                    >
                        {v38()}
                    </animate>
                },
            );
            let v45: leptos::View = leptos::IntoView::into_view(v43);
            let v58: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v60 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method503()));
            let v62: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<animate "), v58), string(">{v60()}</")),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v65: leptos::HtmlElement<leptos::svg::Animate> = Dice_ui::method504(
                leptos::view! {
                    <animate
                        repeatCount="indefinite"
                        dur="0.6s"
                        begin="0.3s"
                        values="10; 5; 10"
                        attributeType="XML"
                        attributeName="y"
                    >
                        {v60()}
                    </animate>
                },
            );
            let v70: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v23,
                v45,
                leptos::IntoView::into_view(v65),
            ])));
            let v72: Vec<leptos::View> = v70.to_vec();
            leptos::Fragment::new(v72)
        }
        pub fn method506() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure225((), ()))
        }
        pub fn method507(
            v0_1: Array<leptos::HtmlElement<leptos::svg::Rect>>,
        ) -> Array<leptos::HtmlElement<leptos::svg::Rect>> {
            v0_1
        }
        pub fn method509(
            v0_1: leptos::HtmlElement<leptos::svg::Rect>,
        ) -> leptos::HtmlElement<leptos::svg::Rect> {
            v0_1
        }
        pub fn closure226(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Rect>,
        ) -> leptos::View {
            let v1: leptos::HtmlElement<leptos::svg::Rect> = Dice_ui::method509(v0_1);
            leptos::IntoView::into_view(v1)
        }
        pub fn method508() -> Func1<leptos::HtmlElement<leptos::svg::Rect>, leptos::View> {
            Func1::new(move |v: leptos::HtmlElement<leptos::svg::Rect>| Dice_ui::closure226((), v))
        }
        pub fn method510(
            v0_1: Array<leptos::HtmlElement<leptos::svg::Rect>>,
        ) -> Array<leptos::HtmlElement<leptos::svg::Rect>> {
            v0_1
        }
        pub fn closure221(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v13: string =
                string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
            let v15 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method502()));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v13), string(">{v15()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::svg::Rect> = leptos::view! {
                <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">
                    {v15()}
                </rect>
            };
            let v33: string =
                string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
            let v35 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method505()));
            let v37: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v33), string(">{v35()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v39: leptos::HtmlElement<leptos::svg::Rect> = leptos::view! {
                <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">
                    {v35()}
                </rect>
            };
            let v52: string = string(
                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
            );
            let v54 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method506()));
            let v56: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v52), string(">{v54()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v60: Array<leptos::HtmlElement<leptos::svg::Rect>> = Dice_ui::method507(new_array(
                &[
                    v20,
                    v39,
                    leptos::view! {
                        <rect opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">
                            {v54()}
                        </rect>
                    },
                ],
            ));
            let v61 = Dice_ui::method508();
            let v62: Array<leptos::HtmlElement<leptos::svg::Rect>> = Dice_ui::method510(v60);
            let v64: Vec<leptos::HtmlElement<leptos::svg::Rect>> = v62.to_vec();
            let v67: Vec<leptos::View> =
                Dice_ui::method446(v64.iter().map(|x| v61(x.clone())).collect());
            let v70: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v67));
            let v72: Vec<leptos::View> = v70.to_vec();
            leptos::Fragment::new(v72)
        }
        pub fn method501() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure221((), ()))
        }
        pub fn closure220(v0_1: Func0<bool>, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method499()));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v11: leptos::View = leptos::IntoView::into_view(v9);
            let v12: Func0<bool> = Dice_ui::method500(v0_1);
            let v60: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v11,
                if v12() {
                    let v16: string = Dice_ui::method6(string("[width:15px] [height:14px]"));
                    let v18: &str = fable_library_rust::String_::LrcStr::as_str(&v16);
                    let v20: string = string("r#\"\"#");
                    let v21: &str = r#""#;
                    let v40:
                                                                              string =
                                                                          string(" class=\" \".to_owned() + v18 xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                    let v42 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method501()));
                    let v45: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v40), string(">{v42()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v48: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                        leptos::view! {
                            <svg
                                class=" ".to_owned() + v18
                                xml:space="preserve"
                                style="enable-background:new 0 0 50 50;"
                                viewBox="0 0 24 30"
                                y="0px"
                                x="0px"
                                xmlns:xlink="http://www.w3.org/1999/xlink"
                                xmlns="http://www.w3.org/2000/svg"
                                version="1.1"
                            >
                                {v42()}
                            </svg>
                        },
                    );
                    leptos::IntoView::into_view(v48)
                } else {
                    let v54: Array<leptos::View> =
                        Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<
                            leptos::View,
                        >(
                        ))));
                    leptos::CollectView::collect_view(v54.to_vec())
                },
            ])));
            let v62: Vec<leptos::View> = v60.to_vec();
            leptos::Fragment::new(v62)
        }
        pub fn method498(v0_1: Func0<bool>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure220(v0_1.clone(), ())
            })
        }
        pub fn method511(v0_1: leptos::Memo<Option<string>>) -> leptos::Memo<Option<string>> {
            v0_1
        }
        pub fn closure228(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(v0_1)));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v14: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v9),
            ])));
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method513(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure228(v0_1.clone(), ())
            })
        }
        pub fn closure227(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"[height:17px]\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method434()));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> =
                Dice_ui::method448(leptos::view! { <span class="[height:17px]">{v6()}</span> });
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method513(v0_1)));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v17), string(">{v19()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Pre> = Dice_ui::method451(
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v19()}</pre> },
            );
            let v30: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v14,
                leptos::IntoView::into_view(v25),
            ])));
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method512(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure227(v0_1.clone(), ())
            })
        }
        pub fn closure217(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3 = Dice_ui::method492(v1.clone());
            let v5: Func0<bool> = Func0::new(move || v3());
            let v6: Func0<bool> = Dice_ui::method494(v5.clone());
            let v7 = Dice_ui::method495(v0_1, v1);
            let v9: Func0<()> = Func0::new(move || v7());
            let v10: string =
                string("class=\"flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
            let v17: string = append(
                append(
                    string(" on:click=move |_| v9()"),
                    append(
                        append(
                            string(" prop:disabled=move || v6()"),
                            append(append(append(string(" "), v10), string("")), string("")),
                        ),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method498(v5)));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<button "), v17), string(">{v19()}</")),
                            string("button"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Button> = Dice_ui::method468(
                leptos::view! {
                    <button
                        on:click=move |_| v9()
                        prop:disabled=move || v6()
                        class="flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500"
                    >
                        {v19()}
                    </button>
                },
            );
            let v27: leptos::View = leptos::IntoView::into_view(v25);
            let v28: leptos::Memo<Option<string>> = Dice_ui::method511(v2);
            let v33: Dice_ui::US34 = defaultValue(
                Dice_ui::US34::US34_0,
                map(
                    Func1::new(move |v: string| Dice_ui::closure95((), v)),
                    v28(),
                ),
            );
            let v57: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v27,
                if let Dice_ui::US34::US34_1(v33_1_0) = &v33 {
                    let v37: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v39 =
                        Dice_ui::method439(Dice_ui::method438(Dice_ui::method512(match &v33 {
                            Dice_ui::US34::US34_1(x) => x.clone(),
                            _ => unreachable!(),
                        })));
                    let v42: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v37), string(">{v39()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v45: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                        leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v39()}</div> },
                    );
                    leptos::IntoView::into_view(v45)
                } else {
                    let v51: Array<leptos::View> =
                        Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<
                            leptos::View,
                        >(
                        ))));
                    leptos::CollectView::collect_view(v51.to_vec())
                },
            ])));
            let v59: Vec<leptos::View> = v57.to_vec();
            leptos::Fragment::new(v59)
        }
        pub fn method491(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure217(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure180(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US34>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: string =
                string(" class=\"flex [flex-direction:column] [align-items:flex-start]\"");
            let v10 =
                Dice_ui::method439(Dice_ui::method438(Dice_ui::method426(v0_1.clone(), v3, v4)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex [flex-direction:column] [align-items:flex-start]">{v10()}</div> },
            );
            let v18: leptos::View = leptos::IntoView::into_view(v16);
            let v21: string =
                string(" class=\"flex [flex-direction:column] [align-items:flex-start]\"");
            let v23 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method485(v0_1.clone())));
            let v25: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v21), string(">{v23()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex [flex-direction:column] [align-items:flex-start]">{v23()}</div> },
            );
            let v30: leptos::View = leptos::IntoView::into_view(v28);
            let v33: string = string(" class=\"flex\"");
            let v35 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method491(v0_1, v1, v2)));
            let v37: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v33), string(">{v35()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v40: leptos::HtmlElement<leptos::html::Div> =
                Dice_ui::method452(leptos::view! { <div class="flex">{v35()}</div> });
            let v45: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v18,
                v30,
                leptos::IntoView::into_view(v40),
            ])));
            let v47: Vec<leptos::View> = v45.to_vec();
            leptos::Fragment::new(v47)
        }
        pub fn method425(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US34>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure180(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn method514(
            v0_1: Array<leptos::HtmlElement<leptos::html::Div>>,
        ) -> Array<leptos::HtmlElement<leptos::html::Div>> {
            v0_1
        }
        pub fn closure229(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Div>,
        ) -> leptos::View {
            let v1: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(v0_1);
            leptos::IntoView::into_view(v1)
        }
        pub fn method515() -> Func1<leptos::HtmlElement<leptos::html::Div>, leptos::View> {
            Func1::new(move |v: leptos::HtmlElement<leptos::html::Div>| Dice_ui::closure229((), v))
        }
        pub fn method516(
            v0_1: Array<leptos::HtmlElement<leptos::html::Div>>,
        ) -> Array<leptos::HtmlElement<leptos::html::Div>> {
            v0_1
        }
        pub fn closure179(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US34>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: string = string(" class=\"flex flex-col p-[10px] gap-[8px]\"");
            let v10 =
                Dice_ui::method439(Dice_ui::method438(Dice_ui::method425(v0_1, v1, v2, v3, v4)));
            let v13: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v8), string(">{v10()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: Array<leptos::HtmlElement<leptos::html::Div>> =
                Dice_ui::method514(new_array(&[
                    leptos::view! { <div class="flex flex-col p-[10px] gap-[8px]">{v10()}</div> },
                ]));
            let v18 = Dice_ui::method515();
            let v19: Array<leptos::HtmlElement<leptos::html::Div>> = Dice_ui::method516(v17);
            let v21: Vec<leptos::HtmlElement<leptos::html::Div>> = v19.to_vec();
            let v24: Vec<leptos::View> =
                Dice_ui::method446(v21.iter().map(|x| v18(x.clone())).collect());
            let v27: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v24));
            let v29: Vec<leptos::View> = v27.to_vec();
            leptos::Fragment::new(v29)
        }
        pub fn method424(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Action<LrcPtr<Dice_ui::Heap6>, Result<Dice_ui::US60, std::string::String>>,
            v2: leptos::Memo<Option<string>>,
            v3: leptos::Memo<Dice_ui::US34>,
            v4: leptos::Memo<Vec<(i32, leptos::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure179(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure231(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method518() -> Func0<string> {
            Func0::new(move || Dice_ui::closure231((), ()))
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn method519() -> Func0<bool> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn method521() -> Func0<string> {
            Func0::new(move || Dice_ui::closure234((), ()))
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method499()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method524() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method524()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">
                        {v5()}
                    </span>
                },
            );
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method523() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure236((), ()))
        }
        pub fn closure235(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method523()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> },
            );
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method480()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> },
            );
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method522() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure235((), ()))
        }
        pub fn closure233(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method521();
            let v6: string = string("r#\"\"#");
            let v7: &'static str = r#""#;
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 \".to_owned() + v7 + \" \" + &v1()");
            let v10: string = append(append(append(string(" "), v8), string("")), string(""));
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method522()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = Dice_ui::method482(
                leptos::view! {
                    <summary class=move || {
                        "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 "
                            .to_owned() + v7 + " " + &v1()
                    }>{v12()}</summary>
                },
            );
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method483(v0_1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> },
            );
            let v36: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v20,
                leptos::IntoView::into_view(v31),
            ])));
            let v38: Vec<leptos::View> = v36.to_vec();
            leptos::Fragment::new(v38)
        }
        pub fn method520(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure233(v0_1.clone(), ())
            })
        }
        pub fn closure230(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method518();
            let v3 = Dice_ui::method519();
            let v7: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method474(v0_1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">{v9()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v9()}</div> },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v18: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2()");
            let v22: string = append(
                append(
                    string(" open=move || v3()"),
                    append(append(append(string(" "), v18), string("")), string("")),
                ),
                string(""),
            );
            let v24 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method520(v1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v22), string(">{v24()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Details> = Dice_ui::method484(
                leptos::view! {
                    <details
                        open=move || v3()
                        class=move || {
                            "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                                .to_owned() + &v2()
                        }
                    >
                        {v24()}
                    </details>
                },
            );
            let v35: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                leptos::IntoView::into_view(v30),
            ])));
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method517(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure230(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method528() -> string {
            string("No account selected")
        }
        pub fn closure240(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method528()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method527() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure240((), ()))
        }
        pub fn closure239(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"[height:17px]\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method434()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> =
                Dice_ui::method448(leptos::view! { <span class="[height:17px]">{v5()}</span> });
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v18 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method527()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v16), string(">{v18()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Pre> = Dice_ui::method451(
                leptos::view! { <pre class="[overflow-y:auto] [text-wrap:wrap]">{v18()}</pre> },
            );
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method526() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure239((), ()))
        }
        pub fn closure242(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US34) {
            let v2: std::string::String = Dice_ui::method70(_arg.0.clone());
            let v4: string = fable_library_rust::String_::fromString(v2);
            let v7: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_0,
                map(
                    Func1::new(move |v: std::string::String| Dice_ui::closure30((), v)),
                    _arg.1.clone(),
                ),
            );
            (
                v4,
                match &v7 {
                    Dice_ui::US15::US15_1(v7_1_0) => {
                        let v9: std::string::String = Dice_ui::method70(v7_1_0.clone());
                        Dice_ui::US34::US34_1(fable_library_rust::String_::fromString(v9))
                    }
                    _ => Dice_ui::US34::US34_0,
                },
            )
        }
        pub fn method530(
        ) -> Func1<(std::string::String, Option<std::string::String>), (string, Dice_ui::US34)>
        {
            Func1::new(
                move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                    Dice_ui::closure242((), arg10_0040)
                },
            )
        }
        pub fn method531(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn method532(v0_1: Vec<(string, Dice_ui::US34)>) -> Vec<(string, Dice_ui::US34)> {
            v0_1
        }
        pub fn closure243(unitVar: (), _arg: (string, Dice_ui::US34)) -> bool {
            let v1: Dice_ui::US34 = _arg.1.clone();
            if string("FUNCTION_CALL") == _arg.0.clone() {
                if let Dice_ui::US34::US34_1(v1_1_0) = &v1 {
                    string("generate_random_number")
                        == match &v1 {
                            Dice_ui::US34::US34_1(x) => x.clone(),
                            _ => unreachable!(),
                        }
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method533() -> Func1<(string, Dice_ui::US34), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US34)| {
                Dice_ui::closure243((), arg10_0040)
            })
        }
        pub fn method534(v0_1: Array<(string, Dice_ui::US34)>) -> Array<(string, Dice_ui::US34)> {
            v0_1
        }
        pub fn closure241(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v4 = Dice_ui::method530();
            let v5: Array<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method531(v2.l0.clone());
            let v7: Vec<(std::string::String, Option<std::string::String>)> = v5.to_vec();
            let v10: Vec<(string, Dice_ui::US34)> =
                Dice_ui::method532(v7.iter().map(|x| v4(x.clone())).collect());
            let v12: Array<(string, Dice_ui::US34)> =
                fable_library_rust::NativeArray_::array_from(v10);
            let v13 = Dice_ui::method533();
            let v14: Array<(string, Dice_ui::US34)> = Dice_ui::method534(v12);
            let v16: Vec<(string, Dice_ui::US34)> = v14.to_vec();
            let v19: Vec<(string, Dice_ui::US34)> =
                Dice_ui::method532(v16.into_iter().filter(|x| v13(x.clone().clone())).collect());
            let v23: bool = count(fable_library_rust::NativeArray_::array_from(v19)) > 0_i32;
            let v25: std::string::String = Dice_ui::method70(v2.l10.clone());
            if v23 {
                _arg.0.clone() == fable_library_rust::String_::fromString(v25)
            } else {
                false
            }
        }
        pub fn method529() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure241((), arg10_0040)
            })
        }
        pub fn method537() -> string {
            string("Block Timestamp")
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method537()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method536() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn method538(
            v0_1: leptos::HtmlElement<leptos::html::Th>,
        ) -> leptos::HtmlElement<leptos::html::Th> {
            v0_1
        }
        pub fn method540() -> string {
            string("Predecessor")
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method540()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method539() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure246((), ()))
        }
        pub fn method542() -> string {
            string("Receiver")
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method542()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method541() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure247((), ()))
        }
        pub fn method544() -> string {
            string("Fee")
        }
        pub fn closure248(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method544()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method543() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure248((), ()))
        }
        pub fn method546() -> string {
            string("Result")
        }
        pub fn closure249(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method546()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method545() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure249((), ()))
        }
        pub fn method548() -> string {
            string("Status")
        }
        pub fn closure250(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method548()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method547() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure250((), ()))
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method536()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v3), string(">{v5()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v5()}
                    </th>
                },
            );
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v18 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method539()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v16), string(">{v18()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v18()}
                    </th>
                },
            );
            let v25: leptos::View = leptos::IntoView::into_view(v23);
            let v28: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v30 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method541()));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v28), string(">{v30()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v35: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v30()}
                    </th>
                },
            );
            let v37: leptos::View = leptos::IntoView::into_view(v35);
            let v40: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v42 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method543()));
            let v44: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v40), string(">{v42()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v47: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v42()}
                    </th>
                },
            );
            let v49: leptos::View = leptos::IntoView::into_view(v47);
            let v52: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v54 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method545()));
            let v56: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v52), string(">{v54()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v59: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v54()}
                    </th>
                },
            );
            let v61: leptos::View = leptos::IntoView::into_view(v59);
            let v64: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v66 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method547()));
            let v68: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v64), string(">{v66()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v71: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v66()}
                    </th>
                },
            );
            let v76: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                v25,
                v37,
                v49,
                v61,
                leptos::IntoView::into_view(v71),
            ])));
            let v78: Vec<leptos::View> = v76.to_vec();
            leptos::Fragment::new(v78)
        }
        pub fn method535() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure244((), ()))
        }
        pub fn method549(
            v0_1: leptos::HtmlElement<leptos::html::Tr>,
        ) -> leptos::HtmlElement<leptos::html::Tr> {
            v0_1
        }
        pub fn method550(
            v0_1: leptos::Memo<
                Array<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
        ) -> leptos::Memo<
            Array<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            v0_1
        }
        pub fn method554(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method555(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure254(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US71 {
            Dice_ui::US71::US71_1(v0_1)
        }
        pub fn method556(v0_1: chrono::DateTime<chrono::Utc>) -> chrono::DateTime<chrono::Utc> {
            v0_1
        }
        pub fn method557(v0_1: chrono::DateTime<chrono::Local>) -> chrono::DateTime<chrono::Local> {
            v0_1
        }
        pub fn closure253(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method554(v0_1.l3.clone());
            let v5: i64 = Dice_ui::method555(v2.parse().unwrap());
            let v10: Dice_ui::US71 = defaultValue(
                Dice_ui::US71::US71_0,
                map(
                    Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure254((), v)),
                    chrono::DateTime::from_timestamp_micros(v5 / 1000i64),
                ),
            );
            let v29: Dice_ui::US34 = match &v10 {
                Dice_ui::US71::US71_1(v10_1_0) => {
                    let v12: chrono::DateTime<chrono::Utc> = Dice_ui::method556(v10_1_0.clone());
                    let v14: chrono::NaiveDateTime = v12.naive_utc();
                    let v16: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v14);
                    let v18: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v19: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v20: chrono::DateTime<chrono::Local> = Dice_ui::method557(v16);
                    let v23: std::string::String = Dice_ui::method70(v20.format(v19).to_string());
                    Dice_ui::US34::US34_1(fable_library_rust::String_::fromString(v23))
                }
                _ => Dice_ui::US34::US34_0,
            };
            let v35: Dice_ui::US72 = match &v29 {
                Dice_ui::US34::US34_1(v29_1_0) => Dice_ui::US72::US72_1(v29_1_0.clone()),
                _ => Dice_ui::US72::US72_0(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v43: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(match &v35 {
                Dice_ui::US72::US72_1(v35_1_0) => v35_1_0.clone(),
                Dice_ui::US72::US72_0(v35_0_0) => {
                    append(append(string("Error: "), v35_0_0.clone()), string(""))
                }
            })));
            let v45: &str = fable_library_rust::String_::LrcStr::as_str(&v43);
            let v47: std::string::String = String::from(v45);
            let v49: leptos::leptos_dom::Text = leptos::html::text(v47);
            let v54: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v49),
            ])));
            let v56: Vec<leptos::View> = v54.to_vec();
            leptos::Fragment::new(v56)
        }
        pub fn method553(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure253(v0_1.clone(), ())
            })
        }
        pub fn method558(
            v0_1: leptos::HtmlElement<leptos::html::Td>,
        ) -> leptos::HtmlElement<leptos::html::Td> {
            v0_1
        }
        pub fn closure255(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method70(v0_1.l8.clone());
            let v7: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v2),
            )));
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method559(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure255(v0_1.clone(), ())
            })
        }
        pub fn closure256(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method70(v0_1.l10.clone());
            let v7: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v2),
            )));
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method560(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure256(v0_1.clone(), ())
            })
        }
        pub fn closure257(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(toString(v0_1.l7))));
            let v7: &str = fable_library_rust::String_::LrcStr::as_str(&v5);
            let v9: std::string::String = String::from(v7);
            let v11: leptos::leptos_dom::Text = leptos::html::text(v9);
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method561(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure257(v0_1.clone(), ())
            })
        }
        pub fn method563() -> string {
            string("")
        }
        pub fn method564(v0_1: i32, v1: LrcPtr<Dice_ui::Mut5>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure258(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v1: Array<std::string::String> = v0_1.l5.clone();
            if count(v1.clone()) as u64 == 0_u64 {
                let v6: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method563()));
                let v8: &str = fable_library_rust::String_::LrcStr::as_str(&v6);
                let v10: std::string::String = String::from(v8);
                let v12: leptos::leptos_dom::Text = leptos::html::text(v10);
                let v17: Array<leptos::View> =
                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                        leptos::IntoView::into_view(v12),
                    ])));
                let v19: Vec<leptos::View> = v17.to_vec();
                leptos::Fragment::new(v19)
            } else {
                let v22 = Dice_ui::method142();
                let v23: Array<std::string::String> = Dice_ui::method143(v1);
                let v25: Vec<std::string::String> = v23.to_vec();
                let v28: Vec<string> =
                    Dice_ui::method144(v25.iter().map(|x| v22(x.clone())).collect());
                let v30: Array<string> = fable_library_rust::NativeArray_::array_from(v28);
                let v31: i32 = count(v30.clone());
                let v33: LrcPtr<Dice_ui::Mut5> = LrcPtr::new(Dice_ui::Mut5 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(Dice_ui::US34::US34_0),
                });
                while Dice_ui::method564(v31, v33.clone()) {
                    let v35: i32 = v33.l0.get().clone();
                    let v38: i32 = v35.wrapping_neg() + v31 - 1_i32;
                    let v39: Dice_ui::US34 = v33.l1.get().clone();
                    let v42: Array<string> =
                        split(v30[v38].clone(), string(" / result: "), -1_i32, 0_i32);
                    let v49: Dice_ui::US34 = if let Dice_ui::US34::US34_0 = &v39 {
                        if count(v42.clone()) as u64 == 2_u64 {
                            let v45: string = v42[0_i32].clone();
                            Dice_ui::US34::US34_1(v42[1_i32].clone())
                        } else {
                            v39.clone()
                        }
                    } else {
                        v39
                    };
                    let v50: i32 = v35 + 1_i32;
                    v33.l0.set(v50);
                    v33.l1.set(v49);
                    ()
                }
                {
                    let v51: Dice_ui::US34 = v33.l1.get().clone();
                    let v58: string =
                        Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(match &v51 {
                            Dice_ui::US34::US34_1(v51_1_0) => v51_1_0.clone(),
                            _ => string("?"),
                        })));
                    let v60: &str = fable_library_rust::String_::LrcStr::as_str(&v58);
                    let v62: std::string::String = String::from(v60);
                    let v64: leptos::leptos_dom::Text = leptos::html::text(v62);
                    let v69: Array<leptos::View> =
                        Dice_ui::method437(Dice_ui::method421(new_array(&[
                            leptos::IntoView::into_view(v64),
                        ])));
                    let v71: Vec<leptos::View> = v69.to_vec();
                    leptos::Fragment::new(v71)
                }
            }
        }
        pub fn method562(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure258(v0_1.clone(), ())
            })
        }
        pub fn closure259(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = if v0_1.l6 {
                string("Ok")
            } else {
                string("Outcome Error")
            };
            let v8: Dice_ui::US66 = match &v1 {
                Err(v1_1_0) => Dice_ui::closure169((), v1_1_0.clone()),
                Ok(v1_0_0) => Dice_ui::closure168((), v1_0_0.clone()),
            };
            let v17: Dice_ui::US62 = match &v8 {
                Dice_ui::US66::US66_1(v8_1_0) => Dice_ui::US62::US62_1(defaultValue(
                    Dice_ui::US60::US60_0,
                    map(
                        Func1::new(
                            move |arg10_0040: (
                                Option<(
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                    )>,
                                )>,
                            )| Dice_ui::closure170((), arg10_0040),
                        ),
                        v8_1_0.clone(),
                    ),
                )),
                Dice_ui::US66::US66_0(v8_0_0) => Dice_ui::US62::US62_0(v8_0_0.clone()),
            };
            let v62: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(sprintf!(
                "{} / {}",
                v5,
                match &v17 {
                    Dice_ui::US62::US62_1(v17_1_0) => {
                        let v18: Dice_ui::US60 = v17_1_0.clone();
                        if let Dice_ui::US60::US60_1(v18_1_0, v18_1_1, v18_1_2, v18_1_3) = &v18 {
                            let v25: Dice_ui::US67 = defaultValue(
                                Dice_ui::US67::US67_0,
                                map(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            Option<(
                                                Option<std::string::String>,
                                                Option<std::string::String>,
                                            )>,
                                            std::string::String,
                                            i32,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )| {
                                            Dice_ui::closure171((), arg10_0040_1)
                                        },
                                    ),
                                    match &v18 {
                                        Dice_ui::US60::US60_1(x, _, _, _) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                ),
                            );
                            let v35: Dice_ui::US34 = if let Dice_ui::US67::US67_1(
                                v25_1_0,
                                v25_1_1,
                                v25_1_2,
                                v25_1_3,
                                v25_1_4,
                                v25_1_5,
                            ) = &v25
                            {
                                Dice_ui::US34::US34_1(append(
                                    append(
                                        append(
                                            append(
                                                append(
                                                    append(
                                                        append(
                                                            toString(match &v25 {
                                                                Dice_ui::US67::US67_1(
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    x,
                                                                ) => x.clone(),
                                                                _ => unreachable!(),
                                                            }),
                                                            string(": "),
                                                        ),
                                                        toString(match &v25 {
                                                            Dice_ui::US67::US67_1(
                                                                _,
                                                                _,
                                                                _,
                                                                _,
                                                                x,
                                                                _,
                                                            ) => x.clone(),
                                                            _ => unreachable!(),
                                                        }),
                                                    ),
                                                    string(" - "),
                                                ),
                                                toString(match &v25 {
                                                    Dice_ui::US67::US67_1(_, _, _, x, _, _) => {
                                                        x.clone()
                                                    }
                                                    _ => unreachable!(),
                                                }),
                                            ),
                                            string(" ("),
                                        ),
                                        toString(match &v25 {
                                            Dice_ui::US67::US67_1(_, x, _, _, _, _) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                    ),
                                    string(")"),
                                ))
                            } else {
                                Dice_ui::US34::US34_0
                            };
                            match &v35 {
                                Dice_ui::US34::US34_1(v35_1_0) => v35_1_0.clone(),
                                _ => {
                                    let v37: string = sprintf!("{:?}", ());
                                    if length(v37.clone()) <= 400_i32 {
                                        v37.clone()
                                    } else {
                                        append(substring2(v37, 0_i32, 400_i32), string("..."))
                                    }
                                }
                            }
                        } else {
                            let v45: string = sprintf!("{:?}", v17.clone());
                            sprintf!(
                                "RPC Response: {}",
                                if length(v45.clone()) <= 400_i32 {
                                    v45.clone()
                                } else {
                                    append(substring2(v45, 0_i32, 400_i32), string("..."))
                                }
                            )
                        }
                    }
                    Dice_ui::US62::US62_0(v17_0_0) => {
                        let v54: std::string::String = Dice_ui::method70(v17_0_0.clone());
                        fable_library_rust::String_::fromString(v54)
                    }
                }
            ))));
            let v64: &str = fable_library_rust::String_::LrcStr::as_str(&v62);
            let v66: std::string::String = String::from(v64);
            let v68: leptos::leptos_dom::Text = leptos::html::text(v66);
            let v73: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v68),
            ])));
            let v75: Vec<leptos::View> = v73.to_vec();
            leptos::Fragment::new(v75)
        }
        pub fn method565(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure259(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure252(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v7 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method553(v0_1.clone())));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v5), string(">{v7()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v7()}
                    </td>
                },
            );
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v18: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v20 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method559(v0_1.clone())));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v18), string(">{v20()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v20()}
                    </td>
                },
            );
            let v27: leptos::View = leptos::IntoView::into_view(v25);
            let v30: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v32 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method560(v0_1.clone())));
            let v34: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v30), string(">{v32()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v32()}
                    </td>
                },
            );
            let v39: leptos::View = leptos::IntoView::into_view(v37);
            let v42: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v44 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method561(v0_1.clone())));
            let v46: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v42), string(">{v44()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v49: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v44()}
                    </td>
                },
            );
            let v51: leptos::View = leptos::IntoView::into_view(v49);
            let v54: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v56 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method562(v0_1.clone())));
            let v58: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v54), string(">{v56()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v61: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v56()}
                    </td>
                },
            );
            let v63: leptos::View = leptos::IntoView::into_view(v61);
            let v66: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v68 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method565(v0_1, v1)));
            let v70: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v66), string(">{v68()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v73: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v68()}
                    </td>
                },
            );
            let v78: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v15,
                v27,
                v39,
                v51,
                v63,
                leptos::IntoView::into_view(v73),
            ])));
            let v80: Vec<leptos::View> = v78.to_vec();
            leptos::Fragment::new(v80)
        }
        pub fn method552(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    Option<(
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        std::string::String,
                        i32,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<std::string::String, std::string::String>,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                        )>,
                    )>,
                )>,
                std::string::String,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure252(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure251(
            v0_1: Array<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::View {
            let v4: i32 = _arg.1.clone() as i32;
            let v9: string = string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
            let v11 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method552(
                _arg.2.clone(),
                v0_1[v4].clone(),
            )));
            let v14: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<tr "), v9), string(">{v11()}</")),
                            string("tr"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Tr> = Dice_ui::method549(
                leptos::view! { <tr class="odd:bg-gray-50 dark:odd:bg-gray-800/50">{v11()}</tr> },
            );
            leptos::IntoView::into_view(v17)
        }
        pub fn method551(
            v0_1: Array<
                Result<
                    Option<(
                        Option<(
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            std::string::String,
                            i32,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                            )>,
                        )>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), leptos::View> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                    Dice_ui::closure251(v0_1.clone(), arg10_0040)
                }
            })
        }
        pub fn closure261(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method567(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure261(v0_1.clone(), ())
            })
        }
        pub fn method568(
            v0_1: leptos::HtmlElement<leptos::html::Thead>,
        ) -> leptos::HtmlElement<leptos::html::Thead> {
            v0_1
        }
        pub fn closure262(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method569(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure262(v0_1.clone(), ())
            })
        }
        pub fn method570(
            v0_1: leptos::HtmlElement<leptos::html::Tbody>,
        ) -> leptos::HtmlElement<leptos::html::Tbody> {
            v0_1
        }
        pub fn closure260(
            v0_1: leptos::Fragment,
            v1: leptos::Fragment,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = string(" class=\"ltr:text-left rtl:text-right\"");
            let v7 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method567(v0_1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<thead "), v5), string(">{v7()}</")),
                            string("thead"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Thead> = Dice_ui::method568(
                leptos::view! { <thead class="ltr:text-left rtl:text-right">{v7()}</thead> },
            );
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v18: string = string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
            let v20 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method569(v1)));
            let v23: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<tbody "), v18), string(">{v20()}</")),
                            string("tbody"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::HtmlElement<leptos::html::Tbody> = Dice_ui::method570(
                leptos::view! { <tbody class="divide-y divide-gray-200 dark:divide-gray-700">{v20()}</tbody> },
            );
            let v31: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v15,
                leptos::IntoView::into_view(v26),
            ])));
            let v33: Vec<leptos::View> = v31.to_vec();
            leptos::Fragment::new(v33)
        }
        pub fn method566(v0_1: leptos::Fragment, v1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure260(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method571(
            v0_1: leptos::HtmlElement<leptos::html::Table>,
        ) -> leptos::HtmlElement<leptos::html::Table> {
            v0_1
        }
        pub fn closure264(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method6(string("[width:24px] [height:30px]"));
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            let v5: string = string("r#\"\"#");
            let v6: &str = r#""#;
            let v25: string =
                string(" class=\" \".to_owned() + v3 xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
            let v27 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method501()));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v25), string(">{v27()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                leptos::view! {
                    <svg
                        class=" ".to_owned() + v3
                        xml:space="preserve"
                        style="enable-background:new 0 0 50 50;"
                        viewBox="0 0 24 30"
                        y="0px"
                        x="0px"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        xmlns="http://www.w3.org/2000/svg"
                        version="1.1"
                    >
                        {v27()}
                    </svg>
                },
            );
            let v35: leptos::View = leptos::IntoView::into_view(v33);
            let v39: string =
                Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(string("Loading..."))));
            let v41: &str = fable_library_rust::String_::LrcStr::as_str(&v39);
            let v43: std::string::String = String::from(v41);
            let v45: leptos::leptos_dom::Text = leptos::html::text(v43);
            let v50: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v35,
                leptos::IntoView::into_view(v45),
            ])));
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method573() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure264((), ()))
        }
        pub fn closure263(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex flex-1 [gap:4px] items-center\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method573()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 [gap:4px] items-center">{v5()}</div> },
            );
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method572() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure263((), ()))
        }
        pub fn closure238(
            v0_1: leptos::Memo<
                Array<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3: leptos::Memo<
                Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>,
            > = Dice_ui::method157(v2);
            let v135: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                if count(v3()) as u64 == 0_u64 {
                    let v11: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v13 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method526()));
                    let v16: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v11), string(">{v13()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v19: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                        leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v13()}</div> },
                    );
                    leptos::IntoView::into_view(v19)
                } else {
                    let v22: leptos::Memo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = Dice_ui::method327(v1);
                    let v24: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v22();
                    let v27: Dice_ui::US51 = match &v24 {
                        Err(v24_1_0) => Dice_ui::closure132((), v24_1_0.clone()),
                        Ok(v24_0_0) => Dice_ui::closure131((), v24_0_0.clone()),
                    };
                    let v36: Dice_ui::US49 = match &v27 {
                        Dice_ui::US51::US51_1(v27_1_0) => Dice_ui::US49::US49_1(defaultValue(
                            Dice_ui::US50::US50_0,
                            map(
                                Func1::new(
                                    move |v_2: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                                        Dice_ui::closure133((), v_2)
                                    },
                                ),
                                v27_1_0.clone(),
                            ),
                        )),
                        Dice_ui::US51::US51_0(v27_0_0) => Dice_ui::US49::US49_0(v27_0_0.clone()),
                    };
                    match &v36 {
                        Dice_ui::US49::US49_1(v36_1_0) => {
                            let v37: Dice_ui::US50 = v36_1_0.clone();
                            if let Dice_ui::US50::US50_1(v37_1_0) = &v37 {
                                let v39 = Dice_ui::method529();
                                let v40: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method314(match &v37 {
                                        Dice_ui::US50::US50_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                let v42: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v40.to_vec();
                                let v45: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method302(
                                        v42.into_iter()
                                            .filter(|x| v39(x.clone().clone()))
                                            .collect(),
                                    );
                                let v47: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    fable_library_rust::NativeArray_::array_from(v45);
                                let v50 =
                                    Dice_ui::method439(Dice_ui::method438(Dice_ui::method535()));
                                let v54: string = string("leptos::view! { <tr >{v50()}</tr> }");
                                let v57: leptos::HtmlElement<leptos::html::Tr> =
                                    Dice_ui::method549(leptos::view! { <tr>{v50()}</tr> });
                                let v62: Array<leptos::View> =
                                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                                        leptos::IntoView::into_view(v57),
                                    ])));
                                let v64: Vec<leptos::View> = v62.to_vec();
                                let v66: leptos::Fragment = leptos::Fragment::new(v64);
                                let v67: leptos::Memo<
                                    Array<
                                        Result<
                                            Option<(
                                                Option<(
                                                    Option<(
                                                        Option<std::string::String>,
                                                        Option<std::string::String>,
                                                    )>,
                                                    std::string::String,
                                                    i32,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                Option<std::string::String>,
                                                std::string::String,
                                                Option<(
                                                    Array<(
                                                        std::string::String,
                                                        Array<
                                                            std::collections::HashMap<
                                                                std::string::String,
                                                                std::string::String,
                                                            >,
                                                        >,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        Array<std::string::String>,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        u64,
                                                        Array<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        u8,
                                                        Array<std::string::String>,
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            std::string::String,
                                                        >,
                                                    )>,
                                                )>,
                                            )>,
                                            std::string::String,
                                        >,
                                    >,
                                > = Dice_ui::method550(v0_1);
                                let v70 = Dice_ui::method551(v67());
                                let v71: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method314(v47);
                                let v73: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v71.to_vec();
                                let v76: Vec<leptos::View> = Dice_ui::method446(
                                    v73.iter().map(|x| v70(x.clone())).collect(),
                                );
                                let v79: Array<leptos::View> = Dice_ui::method437(
                                    fable_library_rust::NativeArray_::array_from(v76),
                                );
                                let v81: Vec<leptos::View> = v79.to_vec();
                                let v86:
                                                                                          string =
                                                                                      string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v88 = Dice_ui::method439(Dice_ui::method438(
                                    Dice_ui::method566(v66, leptos::Fragment::new(v81)),
                                ));
                                let v91: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<table "), v86),
                                                    string(">{v88()}</"),
                                                ),
                                                string("table"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v94: leptos::HtmlElement<leptos::html::Table> =
                                    Dice_ui::method571(
                                        leptos::view! {
                                            <table class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">
                                                {v88()}
                                            </table>
                                        },
                                    );
                                leptos::IntoView::into_view(v94)
                            } else {
                                let v100: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v102 =
                                    Dice_ui::method439(Dice_ui::method438(Dice_ui::method572()));
                                let v105: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v100),
                                                    string(">{v102()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v108: leptos::HtmlElement<leptos::html::Div> =
                                    Dice_ui::method452(
                                        leptos::view! { <div class="grid place-content-center py-[10vh]">{v102()}</div> },
                                    );
                                leptos::IntoView::into_view(v108)
                            }
                        }
                        Dice_ui::US49::US49_0(v36_0_0) => {
                            let v113: std::string::String = Dice_ui::method70(v36_0_0.clone());
                            let v119: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v121 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method512(
                                fable_library_rust::String_::fromString(v113),
                            )));
                            let v124: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v119),
                                                string(">{v121()}</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v127: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                                leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v121()}</div> },
                            );
                            leptos::IntoView::into_view(v127)
                        }
                    }
                },
            ])));
            let v137: Vec<leptos::View> = v135.to_vec();
            leptos::Fragment::new(v137)
        }
        pub fn method525(
            v0_1: leptos::Memo<
                Array<
                    Result<
                        Option<(
                            Option<(
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                std::string::String,
                                i32,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                )>,
                            )>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure238(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn method575() -> Func0<string> {
            Func0::new(move || Dice_ui::closure231((), ()))
        }
        pub fn method576() -> Func0<bool> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn method578() -> Func0<string> {
            Func0::new(move || Dice_ui::closure267((), ()))
        }
        pub fn method582() -> string {
            string("History")
        }
        pub fn closure270(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method582()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method581() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure270((), ()))
        }
        pub fn closure269(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method581()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">
                        {v5()}
                    </span>
                },
            );
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method580() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure269((), ()))
        }
        pub fn closure268(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method580()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> },
            );
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method480()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> },
            );
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method579() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure268((), ()))
        }
        pub fn closure266(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method578();
            let v6: string = string("r#\"\"#");
            let v7: &'static str = r#""#;
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 \".to_owned() + v7 + \" \" + &v1()");
            let v10: string = append(append(append(string(" "), v8), string("")), string(""));
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method579()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = Dice_ui::method482(
                leptos::view! {
                    <summary class=move || {
                        "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 "
                            .to_owned() + v7 + " " + &v1()
                    }>{v12()}</summary>
                },
            );
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method483(v0_1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> },
            );
            let v36: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v20,
                leptos::IntoView::into_view(v31),
            ])));
            let v38: Vec<leptos::View> = v36.to_vec();
            leptos::Fragment::new(v38)
        }
        pub fn method577(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure266(v0_1.clone(), ())
            })
        }
        pub fn closure265(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method575();
            let v3 = Dice_ui::method576();
            let v7: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method474(v0_1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">{v9()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v9()}</div> },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v18: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2()");
            let v22: string = append(
                append(
                    string(" open=move || v3()"),
                    append(append(append(string(" "), v18), string("")), string("")),
                ),
                string(""),
            );
            let v24 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method577(v1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v22), string(">{v24()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Details> = Dice_ui::method484(
                leptos::view! {
                    <details
                        open=move || v3()
                        class=move || {
                            "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                                .to_owned() + &v2()
                        }
                    >
                        {v24()}
                    </details>
                },
            );
            let v35: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                leptos::IntoView::into_view(v30),
            ])));
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method574(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure265(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method583() -> string {
            string("???")
        }
        pub fn method586(
            v0_: bool,
            v0__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn closure273(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let v1: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v1_, v1__1));
            let v2: LrcPtr<(bool, std::string::String)> =
                Dice_ui::method586(v1.0.clone(), v1.1.clone());
            let patternInput: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::create_signal(v2);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure272(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure273(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method585() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure272((), v))
        }
        pub fn method587(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure271(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method97((leptos::SignalGetUntracked::get_untracked(&v2)).l1.clone());
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::SignalGet::get(&v6);
            let v10 = Dice_ui::method585();
            let v11: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method587(v8.l1.clone());
            v11.iter()
                .enumerate()
                .map(|(i, x)| v10(i.try_into().unwrap())(x.clone()))
                .collect()
        }
        pub fn method584(
            v0_1: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<
            Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure271(v0_1.clone(), ())
            })
        }
        pub fn method588() -> i32 {
            0_i32
        }
        pub fn method590(v0_1: leptos::ReadSignal<i32>) -> leptos::ReadSignal<i32> {
            v0_1
        }
        pub fn method591(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
        ) -> leptos::Memo<
            Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            v0_1
        }
        pub fn closure275(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn method592() -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            (
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            Func1::new(
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure275((), tupledArg.0.clone(), tupledArg.1.clone())
                },
            )
        }
        pub fn method593(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure276(
            v0_1: i32,
            _arg: (
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            (v0_1, _arg.0.clone(), _arg.1.clone())
        }
        pub fn method594(
            v0_1: i32,
        ) -> Func1<
            (
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure276(v0_1, arg10_0040)
            })
        }
        pub fn method595(
            v0_1: Vec<(
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        ) -> Vec<(
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            v0_1
        }
        pub fn closure274(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v2: leptos::ReadSignal<i32> = Dice_ui::method590(v1);
            let v4: i32 = leptos::SignalGet::get(&v2);
            let v5: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            > = Dice_ui::method591(v0_1);
            let v7: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v5();
            let v8 = Dice_ui::method592();
            let v9: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method593(v7);
            let v11: Vec<(
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v9.iter().map(|x| v8(x.clone())).collect();
            let v12 = Dice_ui::method594(v4);
            let v13: Vec<(
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = Dice_ui::method595(v11);
            v13.iter().map(|x| v12(x.clone())).collect()
        }
        pub fn method589(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::ReadSignal<i32>,
        ) -> Func0<
            Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        > {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure274(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method597(
            v0_1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
        ) -> leptos::Memo<
            Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        > {
            v0_1
        }
        pub fn method598(
            v0_1: Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        ) -> Vec<(
            i32,
            i32,
            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            v0_1
        }
        pub fn closure277(
            v0_1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = Dice_ui::method597(v0_1);
            let v4: Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = Dice_ui::method598(v1());
            count(fable_library_rust::NativeArray_::array_from(v4))
        }
        pub fn method596(
            v0_1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
        ) -> Func0<i32> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure277(v0_1.clone(), ())
            })
        }
        pub fn method602(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method603(
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method604(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method606(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> leptos::ReadSignal<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure281(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            let v4: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                Dice_ui::method606(((LrcPtr::new((v0_, v0__1))).1.clone()).0.clone());
            leptos::SignalGet::get(&v4)
        }
        pub fn method605() -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            LrcPtr<(bool, std::string::String)>,
        > {
            Func1::new(
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure281((), tupledArg.0.clone(), tupledArg.1.clone())
                },
            )
        }
        pub fn closure280(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v7: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            > = Dice_ui::method591(v0_1);
            let v9: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v7();
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method602(v9.clone());
            let v13: i32 = count(fable_library_rust::NativeArray_::array_from(v10));
            let v15: string = Dice_ui::method6(Dice_ui::method5());
            let v17: &str = fable_library_rust::String_::LrcStr::as_str(&v15);
            let v20: LrcPtr<(bool, std::string::String)> = LrcPtr::new((false, String::from(v17)));
            let v21: LrcPtr<(bool, std::string::String)> =
                Dice_ui::method586(v20.0.clone(), v20.1.clone());
            let patternInput: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::create_signal(v21);
            let v25: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v13, (patternInput.0.clone(), patternInput.1.clone())));
            let v26: LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method603(v25.0.clone(), v25.1.clone());
            let v27: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method604(v9);
            let mut v27 = v27;
            v27.push(v26);
            {
                let v31: Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                > = v27;
                let v32 = Dice_ui::method605();
                let v33: Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                > = Dice_ui::method593(v31);
                LrcPtr::new(Dice_ui::Heap0 {
                    l0: v1.l0.clone(),
                    l1: v33.iter().map(|x| v32(x.clone())).collect(),
                    l2: v1.l2,
                    l3: v1.l3,
                    l4: v1.l4.clone(),
                })
            }
        }
        pub fn method601(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
        ) -> Func1<LrcPtr<Dice_ui::Heap0>, LrcPtr<Dice_ui::Heap0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure280(v0_1.clone(), v)
            })
        }
        pub fn closure282(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + v0_1
        }
        pub fn method607() -> Func1<i32, i32> {
            Func1::new(move |v: i32| Dice_ui::closure282((), v))
        }
        pub fn method608(v0_1: leptos::WriteSignal<i32>) -> leptos::WriteSignal<i32> {
            v0_1
        }
        pub fn closure279(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v4: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v4);
            let v8 = Dice_ui::method601(v1);
            let v9: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> = Dice_ui::method81(v6.l1.clone());
            leptos::SignalUpdate::update(&v9, |x| *x = v8(x.clone()));
            {
                let v11 = Dice_ui::method607();
                let v12: leptos::WriteSignal<i32> = Dice_ui::method608(v2);
                leptos::SignalUpdate::update(&v12, |x| *x = v11(x.clone()));
                ()
            }
        }
        pub fn method600(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure279(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure278(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v3 = Dice_ui::method600(v0_1, v1, v2);
            let v6: Func0<()> = Dice_ui::method82(Func0::new(move || v3()));
            leptos::batch(move || v6());
            ()
        }
        pub fn method599(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure278(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn method609() -> string {
            string("h-5 w-5")
        }
        pub fn closure283(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method442(new_array(
                &[
                    leptos::view! {
                        <path d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">
                            {v9()}
                        </path>
                    },
                ],
            ));
            let v17 = Dice_ui::method443();
            let v18: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method445(v16);
            let v20: Vec<leptos::HtmlElement<leptos::svg::Path>> = v18.to_vec();
            let v23: Vec<leptos::View> =
                Dice_ui::method446(v20.iter().map(|x| v17(x.clone())).collect());
            let v26: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v23));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method610() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure283((), ()))
        }
        pub fn method612() -> string {
            string(" bg-gray-300")
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v1: string = Dice_ui::method6(Dice_ui::method612());
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            String::from(v3)
        }
        pub fn method611() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure284((), ()))
        }
        pub fn closure285(
            v0_1: leptos::HtmlElement<leptos::svg::Svg>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(v0_1);
            let v6: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v1),
            ])));
            let v8: Vec<leptos::View> = v6.to_vec();
            leptos::Fragment::new(v8)
        }
        pub fn method613(v0_1: leptos::HtmlElement<leptos::svg::Svg>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure285(v0_1.clone(), ())
            })
        }
        pub fn method615(
            v0_1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
        ) -> leptos::Memo<
            Vec<(
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        > {
            v0_1
        }
        pub fn closure287(
            unitVar: (),
            _arg: (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (i32, i32) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn method616() -> Func1<
            (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (i32, i32),
        > {
            Func1::new(
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure287((), arg10_0040),
            )
        }
        pub fn method619(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn closure290(v0_1: i32, unitVar: ()) -> std::string::String {
            let v3: string = Dice_ui::method6(Dice_ui::method18(append(
                append(string("account-"), toString(v0_1)),
                string(""),
            )));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            String::from(v5)
        }
        pub fn method620(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure290(v0_1, ())
            })
        }
        pub fn method624(v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure294(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method624(v1 == v0_1) {
                v2.clone()
            } else {
                LrcPtr::new((v2.0.clone() == false, v2.1.clone()))
            }
        }
        pub fn closure293(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure294(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method623(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure293(v0_1, v)
            })
        }
        pub fn closure292(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v4: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v3.clone());
            let v8: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method135((leptos::SignalGetUntracked::get_untracked(&v4)).l1.clone());
            let v10: LrcPtr<Dice_ui::Heap0> = leptos::SignalGetUntracked::get_untracked(&v8);
            let v16: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v3);
            let v18: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v16);
            let v20 = Dice_ui::method623(v1);
            let v21: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method587(v10.l1.clone());
            let v25: LrcPtr<Dice_ui::Heap0> = Dice_ui::method459(LrcPtr::new(Dice_ui::Heap0 {
                l0: v10.l0.clone(),
                l1: v21
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v20(i.try_into().unwrap())(x.clone()))
                    .collect(),
                l2: v10.l2,
                l3: v10.l3,
                l4: v10.l4.clone(),
            }));
            let v26: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> = Dice_ui::method460(v18.l1.clone());
            leptos::SignalSet::set(&v26, v25);
            ()
        }
        pub fn method622(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32) -> Func1<leptos::ev::Event, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure292(v0_1.clone(), v1, v)
            })
        }
        pub fn closure295(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            let v1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                Dice_ui::method606(v0_1);
            (leptos::SignalGet::get(&v1)).0.clone()
        }
        pub fn method625(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure295(v0_1.clone(), ())
            })
        }
        pub fn method626(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure290(v0_1, ())
            })
        }
        pub fn closure297(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method442(new_array(
                &[
                    leptos::view! {
                        <path
                            clip-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            fill-rule="evenodd"
                        >
                            {v9()}
                        </path>
                    },
                ],
            ));
            let v17 = Dice_ui::method443();
            let v18: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method445(v16);
            let v20: Vec<leptos::HtmlElement<leptos::svg::Path>> = v18.to_vec();
            let v23: Vec<leptos::View> =
                Dice_ui::method446(v20.iter().map(|x| v17(x.clone())).collect());
            let v26: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v23));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method628() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure297((), ()))
        }
        pub fn closure298(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v7: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method442(new_array(
                &[
                    leptos::view! {
                        <path
                            clip-rule="evenodd"
                            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                            fill-rule="evenodd"
                        >
                            {v9()}
                        </path>
                    },
                ],
            ));
            let v17 = Dice_ui::method443();
            let v18: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method445(v16);
            let v20: Vec<leptos::HtmlElement<leptos::svg::Path>> = v18.to_vec();
            let v23: Vec<leptos::View> =
                Dice_ui::method446(v20.iter().map(|x| v17(x.clone())).collect());
            let v26: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v23));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method629() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure298((), ()))
        }
        pub fn method630(
            v0_1: Array<leptos::HtmlElement<leptos::svg::Svg>>,
        ) -> Array<leptos::HtmlElement<leptos::svg::Svg>> {
            v0_1
        }
        pub fn closure299(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::svg::Svg>,
        ) -> leptos::View {
            let v1: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(v0_1);
            leptos::IntoView::into_view(v1)
        }
        pub fn method631() -> Func1<leptos::HtmlElement<leptos::svg::Svg>, leptos::View> {
            Func1::new(move |v: leptos::HtmlElement<leptos::svg::Svg>| Dice_ui::closure299((), v))
        }
        pub fn method632(
            v0_1: Array<leptos::HtmlElement<leptos::svg::Svg>>,
        ) -> Array<leptos::HtmlElement<leptos::svg::Svg>> {
            v0_1
        }
        pub fn closure296(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v11: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v13 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method628()));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v11), string(">{v13()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                <svg
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    class="h-4 w-4"
                    xmlns="http://www.w3.org/2000/svg"
                    data-unchecked-icon
                >
                    {v13()}
                </svg>
            };
            let v29: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v31 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method629()));
            let v33: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v29), string(">{v31()}</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: Array<leptos::HtmlElement<leptos::svg::Svg>> = Dice_ui::method630(new_array(
                &[
                    v18,
                    leptos::view! {
                        <svg
                            fill="currentColor"
                            viewBox="0 0 20 20"
                            class="hidden h-4 w-4"
                            xmlns="http://www.w3.org/2000/svg"
                            data-checked-icon
                        >
                            {v31()}
                        </svg>
                    },
                ],
            ));
            let v38 = Dice_ui::method631();
            let v39: Array<leptos::HtmlElement<leptos::svg::Svg>> = Dice_ui::method632(v37);
            let v41: Vec<leptos::HtmlElement<leptos::svg::Svg>> = v39.to_vec();
            let v44: Vec<leptos::View> =
                Dice_ui::method446(v41.iter().map(|x| v38(x.clone())).collect());
            let v47: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v44));
            let v49: Vec<leptos::View> = v47.to_vec();
            leptos::Fragment::new(v49)
        }
        pub fn method627() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure296((), ()))
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Array<leptos::View> =
                Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
            let v4: Vec<leptos::View> = v2.to_vec();
            leptos::Fragment::new(v4)
        }
        pub fn method633() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure300((), ()))
        }
        pub fn closure291(
            v0_1: i32,
            v1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v3 = Dice_ui::method622(v2, v0_1);
            let v4 = Dice_ui::method625(v1);
            let v5 = Dice_ui::method626(v0_1);
            let v6: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v19: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            string("<input "),
                            append(
                                append(
                                    string(" prop:checked=move || v4()"),
                                    append(
                                        append(
                                            string(" on:change=move |event| v3(event)"),
                                            append(
                                                append(
                                                    string(" id=move || v5()"),
                                                    append(
                                                        append(
                                                            string(" type=\"checkbox\""),
                                                            append(
                                                                append(
                                                                    append(string(" "), v6),
                                                                    string(""),
                                                                ),
                                                                string(""),
                                                            ),
                                                        ),
                                                        string(""),
                                                    ),
                                                ),
                                                string(""),
                                            ),
                                        ),
                                        string(""),
                                    ),
                                ),
                                string(""),
                            ),
                        ),
                        string(" />"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::HtmlElement<leptos::html::Input> = Dice_ui::method490(
                leptos::view! {
                    <input
                        prop:checked=move || v4()
                        on:change=move |event| v3(event)
                        id=move || v5()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                },
            );
            let v24: leptos::View = leptos::IntoView::into_view(v22);
            let v25: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v27: string = append(append(append(string(" "), v25), string("")), string(""));
            let v29 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method627()));
            let v32: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v27), string(">{v29()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v35: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v29()}
                    </span>
                },
            );
            let v37: leptos::View = leptos::IntoView::into_view(v35);
            let v38: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v40: string = append(append(append(string(" "), v38), string("")), string(""));
            let v42 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method633()));
            let v44: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v40), string(">{v42()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v47: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v42()}
                    </span>
                },
            );
            let v52: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v24,
                v37,
                leptos::IntoView::into_view(v47),
            ])));
            let v54: Vec<leptos::View> = v52.to_vec();
            leptos::Fragment::new(v54)
        }
        pub fn method621(
            v0_1: i32,
            v1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure291(v0_1, v1.clone(), v2.clone(), ())
            })
        }
        pub fn method634(
            v0_1: leptos::HtmlElement<leptos::html::Label>,
        ) -> leptos::HtmlElement<leptos::html::Label> {
            v0_1
        }
        pub fn closure301(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> std::string::String {
            let v1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                Dice_ui::method606(v0_1);
            (leptos::SignalGet::get(&v1)).1.clone()
        }
        pub fn method635(
            v0_1: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure301(v0_1.clone(), ())
            })
        }
        pub fn method638(v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure304(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method638(v2 == v0_1) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure303(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure304(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method637(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure303(v0_1, v1.clone(), v)
            })
        }
        pub fn closure302(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: std::string::String) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = v0_1.l0.clone();
            let v4: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v3.clone());
            let v8: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method135((leptos::SignalGetUntracked::get_untracked(&v4)).l1.clone());
            let v10: LrcPtr<Dice_ui::Heap0> = leptos::SignalGetUntracked::get_untracked(&v8);
            let v16: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v3);
            let v18: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v16);
            let v20 = Dice_ui::method637(v1, v2);
            let v21: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method587(v10.l1.clone());
            let v25: LrcPtr<Dice_ui::Heap0> = Dice_ui::method459(LrcPtr::new(Dice_ui::Heap0 {
                l0: v10.l0.clone(),
                l1: v21
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v20(i.try_into().unwrap())(x.clone()))
                    .collect(),
                l2: v10.l2,
                l3: v10.l3,
                l4: v10.l4.clone(),
            }));
            let v26: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> = Dice_ui::method460(v18.l1.clone());
            leptos::SignalSet::set(&v26, v25);
            ()
        }
        pub fn method636(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32) -> Func1<std::string::String, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: std::string::String| Dice_ui::closure302(v0_1.clone(), v1, v)
            })
        }
        pub fn closure305(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method639() -> Func0<string> {
            Func0::new(move || Dice_ui::closure305((), ()))
        }
        pub fn method640(v0_1: leptos::Memo<i32>) -> leptos::Memo<i32> {
            v0_1
        }
        pub fn method644(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure310(unitVar: (), v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn method646() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure310((), v))
        }
        pub fn closure309(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v5: bool = (LrcPtr::new((v1_, v1__1))).0.clone() == v0_1;
            (Dice_ui::method646())(v5)
        }
        pub fn method645(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure309(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure308(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            > = Dice_ui::method591(v0_1);
            let v11: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method644(v8());
            let v12 = Dice_ui::method645(v1);
            let mut v11 = v11;
            v11.retain(|x| v12(x.clone()));
            {
                let v16: Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                > = v11;
                let v17 = Dice_ui::method605();
                let v18: Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                > = Dice_ui::method593(v16);
                LrcPtr::new(Dice_ui::Heap0 {
                    l0: v2.l0.clone(),
                    l1: v18.iter().map(|x| v17(x.clone())).collect(),
                    l2: v2.l2,
                    l3: v2.l3,
                    l4: v2.l4.clone(),
                })
            }
        }
        pub fn method643(
            v0_1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
        ) -> Func1<LrcPtr<Dice_ui::Heap0>, LrcPtr<Dice_ui::Heap0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure308(v0_1.clone(), v1, v)
            })
        }
        pub fn closure307(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v5: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v5);
            let v9 = Dice_ui::method643(v1, v3);
            let v10: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> = Dice_ui::method81(v7.l1.clone());
            leptos::SignalUpdate::update(&v10, |x| *x = v9(x.clone()));
            {
                let v12 = Dice_ui::method607();
                let v13: leptos::WriteSignal<i32> = Dice_ui::method608(v2);
                leptos::SignalUpdate::update(&v13, |x| *x = v12(x.clone()));
                ()
            }
        }
        pub fn method642(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            v3: i32,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure307(v0_1.clone(), v1.clone(), v2.clone(), v3, ())
            })
        }
        pub fn closure306(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v4 = Dice_ui::method642(v0_1, v1, v2, v3);
            let v7: Func0<()> = Dice_ui::method82(Func0::new(move || v4()));
            leptos::batch(move || v7());
            ()
        }
        pub fn method641(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::WriteSignal<i32>,
            v3: i32,
        ) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure306(v0_1.clone(), v1.clone(), v2.clone(), v3, ())
            })
        }
        pub fn closure311(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string = string(
                " d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method442(new_array(
                &[
                    leptos::view! {
                        <path
                            d="M6 6l12 12m0-12L6 18"
                            stroke-linejoin="round"
                            stroke-linecap="round"
                        >
                            {v9()}
                        </path>
                    },
                ],
            ));
            let v17 = Dice_ui::method443();
            let v18: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method445(v16);
            let v20: Vec<leptos::HtmlElement<leptos::svg::Path>> = v18.to_vec();
            let v23: Vec<leptos::View> =
                Dice_ui::method446(v20.iter().map(|x| v17(x.clone())).collect());
            let v26: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v23));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method647() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure311((), ()))
        }
        pub fn method649() -> string {
            string(" pr-[7px] pl-[5px]")
        }
        pub fn closure312(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v1: string = Dice_ui::method6(Dice_ui::method649());
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            String::from(v3)
        }
        pub fn method648() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure312((), ()))
        }
        pub fn closure289(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            v4: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v5: i32,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: i32 = Dice_ui::method619(v5);
            let v7 = Dice_ui::method620(v6);
            let v13: string =
                string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v7()");
            let v15 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method621(
                v6,
                v4.clone(),
                v0_1.clone(),
            )));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<label "), v13), string(">{v15()}</")),
                            string("label"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Label> = Dice_ui::method634(
                leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v7()
                    >
                        {v15()}
                    </label>
                },
            );
            let v23: leptos::View = leptos::IntoView::into_view(v21);
            let v24 = Dice_ui::method635(v4);
            let v25 = Dice_ui::method636(v0_1.clone(), v6);
            let v26 = Dice_ui::method639();
            let v35: string =
                string("leptos::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v25(leptos::event_target_value(&event)) prop:value=move || v24() class=move || \"bg-gray-50 h-[27px] \".to_owned() + &v26() /> }");
            let v38: leptos::HtmlElement<leptos::html::Input> = Dice_ui::method490(
                leptos::view! {
                    <input
                        on:keyup=move |event: web_sys::KeyboardEvent| v25(
                            leptos::event_target_value(&event),
                        )
                        prop:value=move || v24()
                        class=move || "bg-gray-50 h-[27px] ".to_owned() + &v26()
                    />
                },
            );
            let v40: leptos::View = leptos::IntoView::into_view(v38);
            let v41: leptos::Memo<i32> = Dice_ui::method640(v1);
            let v98: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v23,
                v40,
                if v41() == 1_i32 {
                    let v48: Array<leptos::View> =
                        Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<
                            leptos::View,
                        >(
                        ))));
                    leptos::CollectView::collect_view(v48.to_vec())
                } else {
                    let v51 = Dice_ui::method641(v0_1, v2, v3, v6);
                    let v52: string = Dice_ui::method609();
                    let v54: &str = fable_library_rust::String_::LrcStr::as_str(&v52);
                    let v55: string = string("r#\"\"#");
                    let v56: &str = r#""#;
                    let v69:
                                                                              string =
                                                                          string(" class=\" \".to_owned() + v54 stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v71 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method647()));
                    let v74: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v69), string(">{v71()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v76: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                        <svg
                            class=" ".to_owned() + v54
                            stroke="currentColor"
                            stroke-width="1.5"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            {v71()}
                        </svg>
                    };
                    let v79 = Dice_ui::method648();
                    let v80:
                                                                              string =
                                                                          string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[9px] px-[12px] \".to_owned() + &v79()");
                    let v84: string = append(
                        append(
                            string(" aria-label=\"Delete\""),
                            append(
                                append(
                                    string(" on:click=move |_| v51()"),
                                    append(
                                        append(append(string(" "), v80), string("")),
                                        string(""),
                                    ),
                                ),
                                string(""),
                            ),
                        ),
                        string(""),
                    );
                    let v86 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method613(v76)));
                    let v89: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<button "), v84), string(">{v86()}</")),
                                    string("button"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v92: leptos::HtmlElement<leptos::html::Button> = Dice_ui::method468(
                        leptos::view! {
                            <button
                                aria-label="Delete"
                                on:click=move |_| v51()
                                class=move || {
                                    "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[9px] px-[12px] "
                                        .to_owned() + &v79()
                                }
                            >
                                {v86()}
                            </button>
                        },
                    );
                    leptos::IntoView::into_view(v92)
                },
            ])));
            let v100: Vec<leptos::View> = v98.to_vec();
            leptos::Fragment::new(v100)
        }
        pub fn method618(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            v4: leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v5: i32,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                move || {
                    Dice_ui::closure289(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5,
                        (),
                    )
                }
            })
        }
        pub fn closure288(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
            _arg: (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::Fragment {
            let v10: string = string(
                " class=\"px-[10px] py-[7px] gap-[7px] [display:flex] [align-items:center]\"",
            );
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method618(
                v0_1,
                v1,
                v2,
                v3,
                _arg.2.clone(),
                _arg.1.clone(),
            )));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">{v12()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! {
                    <div class="px-[10px] py-[7px] gap-[7px] [display:flex] [align-items:center]">
                        {v12()}
                    </div>
                },
            );
            let v23: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v18),
            ])));
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method617(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<i32>,
            v2: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::WriteSignal<i32>,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::Fragment,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| {
                    Dice_ui::closure288(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        arg10_0040,
                    )
                }
            })
        }
        pub fn closure286(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = Dice_ui::method615(v1);
            let v6 = Dice_ui::method616();
            let v7 = Dice_ui::method617(v0_1, v2, v3, v4);
            let v19: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos::For  children=move |x| v7(x) let:x key=move |x| v6(x.to_owned()) each=v5 /> })");
            let v23: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(
                    leptos::view! {
                        <leptos::For
                            children=move |x| v7(x)
                            let:x
                            key=move |x| v6(x.to_owned())
                            each=v5
                        ></leptos::For>
                    },
                ),
            ])));
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method614(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::Memo<i32>,
            v3: leptos::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::WriteSignal<i32>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure286(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn method651(v0_1: leptos::View) -> Func0<string> {
            Func0::new(move || Dice_ui::closure231((), ()))
        }
        pub fn method652(v0_1: leptos::View) -> Func0<bool> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure315(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn method654(v0_1: leptos::View) -> Func0<string> {
            Func0::new(move || Dice_ui::closure315((), ()))
        }
        pub fn method658() -> string {
            string("Accounts")
        }
        pub fn closure318(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method658()));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v14: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v9),
            ])));
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method657(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure318(v0_1.clone(), ())
            })
        }
        pub fn closure317(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method657(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">
                        {v6()}
                    </span>
                },
            );
            let v17: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v12),
            ])));
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method656(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure317(v0_1.clone(), ())
            })
        }
        pub fn closure316(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex items-center gap-2\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method656(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex items-center gap-2">{v6()}</div> },
            );
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method480()));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v17), string(">{v19()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v19()}</span> },
            );
            let v30: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v14,
                leptos::IntoView::into_view(v25),
            ])));
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method655(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure316(v0_1.clone(), ())
            })
        }
        pub fn closure314(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method654(v0_1.clone());
            let v7: string = string("r#\"[margin-right:40px]\"#");
            let v8: &'static str = r#"[margin-right:40px]"#;
            let v9: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 \".to_owned() + v8 + \" \" + &v2()");
            let v12: string = append(append(append(string(" "), v9), string("")), string(""));
            let v14 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method655(v0_1)));
            let v17: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v12), string(">{v14()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::html::Summary> = Dice_ui::method482(
                leptos::view! {
                    <summary class=move || {
                        "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 "
                            .to_owned() + v8 + " " + &v2()
                    }>{v14()}</summary>
                },
            );
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v25: string = string(" class=\"flex flex-1 flex-col\"");
            let v27 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method483(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v25), string(">{v27()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v27()}</div> },
            );
            let v38: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v22,
                leptos::IntoView::into_view(v33),
            ])));
            let v40: Vec<leptos::View> = v38.to_vec();
            leptos::Fragment::new(v40)
        }
        pub fn method653(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure314(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure313(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method651(v0_1.clone());
            let v3 = Dice_ui::method652(v0_1.clone());
            let v7: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method474(v0_1.clone())));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">{v9()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v9()}</div> },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v18: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2()");
            let v22: string = append(
                append(
                    string(" open=move || v3()"),
                    append(append(append(string(" "), v18), string("")), string("")),
                ),
                string(""),
            );
            let v24 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method653(v0_1, v1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v22), string(">{v24()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Details> = Dice_ui::method484(
                leptos::view! {
                    <details
                        open=move || v3()
                        class=move || {
                            "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                                .to_owned() + &v2()
                        }
                    >
                        {v24()}
                    </details>
                },
            );
            let v35: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                leptos::IntoView::into_view(v30),
            ])));
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method650(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure313(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure320(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn method660() -> Func0<string> {
            Func0::new(move || Dice_ui::closure320((), ()))
        }
        pub fn method661(v0_1: Func0<string>) -> Func0<string> {
            v0_1
        }
        pub fn closure321(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn method662() -> Func0<string> {
            Func0::new(move || Dice_ui::closure321((), ()))
        }
        pub fn closure322(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn method663() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method665() -> string {
            string("Dark Mode")
        }
        pub fn closure323(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method665()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method664() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure323((), ()))
        }
        pub fn method668() -> string {
            string("dark-mode")
        }
        pub fn closure325(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v1: string = Dice_ui::method6(Dice_ui::method668());
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            String::from(v3)
        }
        pub fn method667() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure325((), ()))
        }
        pub fn closure328(unitVar: (), v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn method671() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure328((), v))
        }
        pub fn closure327(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3);
            let v7 = Dice_ui::method671();
            let v8: leptos::RwSignal<bool> = Dice_ui::method76(v5.l0.clone());
            leptos::SignalUpdate::update(&v8, |x| *x = v7(x.clone()));
            ()
        }
        pub fn method670(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func1<leptos::ev::Event, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure327(v0_1.clone(), v)
            })
        }
        pub fn closure329(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<bool> =
                Dice_ui::method95((leptos::SignalGetUntracked::get_untracked(&v2)).l0.clone());
            leptos::SignalGet::get(&v6)
        }
        pub fn method672(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure329(v0_1.clone(), ())
            })
        }
        pub fn method673() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure325((), ()))
        }
        pub fn closure326(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method670(v0_1.clone());
            let v2 = Dice_ui::method672(v0_1);
            let v3 = Dice_ui::method673();
            let v4: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v17: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            string("<input "),
                            append(
                                append(
                                    string(" prop:checked=move || v2()"),
                                    append(
                                        append(
                                            string(" on:change=move |event| v1(event)"),
                                            append(
                                                append(
                                                    string(" id=move || v3()"),
                                                    append(
                                                        append(
                                                            string(" type=\"checkbox\""),
                                                            append(
                                                                append(
                                                                    append(string(" "), v4),
                                                                    string(""),
                                                                ),
                                                                string(""),
                                                            ),
                                                        ),
                                                        string(""),
                                                    ),
                                                ),
                                                string(""),
                                            ),
                                        ),
                                        string(""),
                                    ),
                                ),
                                string(""),
                            ),
                        ),
                        string(" />"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::html::Input> = Dice_ui::method490(
                leptos::view! {
                    <input
                        prop:checked=move || v2()
                        on:change=move |event| v1(event)
                        id=move || v3()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                },
            );
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v23: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v25: string = append(append(append(string(" "), v23), string("")), string(""));
            let v27 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method627()));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v25), string(">{v27()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                },
            );
            let v35: leptos::View = leptos::IntoView::into_view(v33);
            let v36: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v38: string = append(append(append(string(" "), v36), string("")), string(""));
            let v40 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method633()));
            let v42: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v38), string(">{v40()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v40()}
                    </span>
                },
            );
            let v50: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v22,
                v35,
                leptos::IntoView::into_view(v45),
            ])));
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method669(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure326(v0_1.clone(), ())
            })
        }
        pub fn closure324(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method667();
            let v7: string =
                string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method669(v0_1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<label "), v7), string(">{v9()}</")),
                            string("label"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Label> = Dice_ui::method634(
                leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v9()}
                    </label>
                },
            );
            let v20: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v15),
            ])));
            let v22: Vec<leptos::View> = v20.to_vec();
            leptos::Fragment::new(v22)
        }
        pub fn method666(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure324(v0_1.clone(), ())
            })
        }
        pub fn method675(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn method676(
            v0_1: leptos::HtmlElement<leptos::html::Dt>,
        ) -> leptos::HtmlElement<leptos::html::Dt> {
            v0_1
        }
        pub fn method677(
            v0_1: leptos::HtmlElement<leptos::html::Dd>,
        ) -> leptos::HtmlElement<leptos::html::Dd> {
            v0_1
        }
        pub fn closure330(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v7 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method675(v0_1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v5), string(">{v7()}</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Dt> = Dice_ui::method676(
                leptos::view! { <dt class="[font-size:12px] text-gray-400">{v7()}</dt> },
            );
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v18: string =
                string(" class=\"[overflow:auto] text-gray-700 sm:col-span-2 flex flex-1\"");
            let v20 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method675(v1)));
            let v23: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v18), string(">{v20()}</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::HtmlElement<leptos::html::Dd> = Dice_ui::method677(
                leptos::view! { <dd class="[overflow:auto] text-gray-700 sm:col-span-2 flex flex-1">{v20()}</dd> },
            );
            let v31: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v15,
                leptos::IntoView::into_view(v26),
            ])));
            let v33: Vec<leptos::View> = v31.to_vec();
            leptos::Fragment::new(v33)
        }
        pub fn method674(
            v0_1: Func0<leptos::Fragment>,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure330(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure331(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn method678() -> Func0<string> {
            Func0::new(move || Dice_ui::closure331((), ()))
        }
        pub fn method679() -> Func0<string> {
            Func0::new(move || Dice_ui::closure321((), ()))
        }
        pub fn method680() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method682() -> string {
            string("Debug")
        }
        pub fn closure332(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method682()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method681() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure332((), ()))
        }
        pub fn method685() -> string {
            string("debug")
        }
        pub fn closure334(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v1: string = Dice_ui::method6(Dice_ui::method685());
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            String::from(v3)
        }
        pub fn method684() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure334((), ()))
        }
        pub fn closure336(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3);
            let v7 = Dice_ui::method671();
            let v8: leptos::RwSignal<bool> = Dice_ui::method76(v5.l2.clone());
            leptos::SignalUpdate::update(&v8, |x| *x = v7(x.clone()));
            ()
        }
        pub fn method687(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func1<leptos::ev::Event, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure336(v0_1.clone(), v)
            })
        }
        pub fn closure337(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<bool> =
                Dice_ui::method95((leptos::SignalGetUntracked::get_untracked(&v2)).l2.clone());
            leptos::SignalGet::get(&v6)
        }
        pub fn method688(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure337(v0_1.clone(), ())
            })
        }
        pub fn method689() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure334((), ()))
        }
        pub fn closure335(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method687(v0_1.clone());
            let v2 = Dice_ui::method688(v0_1);
            let v3 = Dice_ui::method689();
            let v4: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v17: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            string("<input "),
                            append(
                                append(
                                    string(" prop:checked=move || v2()"),
                                    append(
                                        append(
                                            string(" on:change=move |event| v1(event)"),
                                            append(
                                                append(
                                                    string(" id=move || v3()"),
                                                    append(
                                                        append(
                                                            string(" type=\"checkbox\""),
                                                            append(
                                                                append(
                                                                    append(string(" "), v4),
                                                                    string(""),
                                                                ),
                                                                string(""),
                                                            ),
                                                        ),
                                                        string(""),
                                                    ),
                                                ),
                                                string(""),
                                            ),
                                        ),
                                        string(""),
                                    ),
                                ),
                                string(""),
                            ),
                        ),
                        string(" />"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::html::Input> = Dice_ui::method490(
                leptos::view! {
                    <input
                        prop:checked=move || v2()
                        on:change=move |event| v1(event)
                        id=move || v3()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                },
            );
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v23: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v25: string = append(append(append(string(" "), v23), string("")), string(""));
            let v27 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method627()));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v25), string(">{v27()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                },
            );
            let v35: leptos::View = leptos::IntoView::into_view(v33);
            let v36: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v38: string = append(append(append(string(" "), v36), string("")), string(""));
            let v40 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method633()));
            let v42: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v38), string(">{v40()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v40()}
                    </span>
                },
            );
            let v50: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v22,
                v35,
                leptos::IntoView::into_view(v45),
            ])));
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method686(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure335(v0_1.clone(), ())
            })
        }
        pub fn closure333(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method684();
            let v7: string =
                string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method686(v0_1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<label "), v7), string(">{v9()}</")),
                            string("label"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Label> = Dice_ui::method634(
                leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v9()}
                    </label>
                },
            );
            let v20: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v15),
            ])));
            let v22: Vec<leptos::View> = v20.to_vec();
            leptos::Fragment::new(v22)
        }
        pub fn method683(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure333(v0_1.clone(), ())
            })
        }
        pub fn method690(
            v0_1: Array<leptos::HtmlElement<leptos::html::Dl>>,
        ) -> Array<leptos::HtmlElement<leptos::html::Dl>> {
            v0_1
        }
        pub fn method692(
            v0_1: leptos::HtmlElement<leptos::html::Dl>,
        ) -> leptos::HtmlElement<leptos::html::Dl> {
            v0_1
        }
        pub fn closure338(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Dl>,
        ) -> leptos::View {
            let v1: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(v0_1);
            leptos::IntoView::into_view(v1)
        }
        pub fn method691() -> Func1<leptos::HtmlElement<leptos::html::Dl>, leptos::View> {
            Func1::new(move |v: leptos::HtmlElement<leptos::html::Dl>| Dice_ui::closure338((), v))
        }
        pub fn method693(
            v0_1: Array<leptos::HtmlElement<leptos::html::Dl>>,
        ) -> Array<leptos::HtmlElement<leptos::html::Dl>> {
            v0_1
        }
        pub fn closure319(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v2 = Dice_ui::method661(Dice_ui::method660());
            let v3 = Dice_ui::method662();
            let v4 = Dice_ui::method663();
            let v7: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v4() + \" \" + &v3() + \" \" + &v2()");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method664(),
                Dice_ui::method666(v0_1.clone()),
            )));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v10), string(">{v12()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Dl> = leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                        .to_owned() + &v4() + " " + &v3() + " " + &v2()
                }>{v12()}</dl>
            };
            let v19 = Dice_ui::method661(Dice_ui::method678());
            let v20 = Dice_ui::method679();
            let v21 = Dice_ui::method680();
            let v24: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v21() + \" \" + &v20() + \" \" + &v19()");
            let v26: string = append(append(append(string(" "), v24), string("")), string(""));
            let v28 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method681(),
                Dice_ui::method683(v0_1),
            )));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v26), string(">{v28()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: Array<leptos::HtmlElement<leptos::html::Dl>> = Dice_ui::method690(new_array(
                &[
                    v17,
                    leptos::view! {
                        <dl class=move || {
                            "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                                .to_owned() + &v21() + " " + &v20() + " " + &v19()
                        }>{v28()}</dl>
                    },
                ],
            ));
            let v35 = Dice_ui::method691();
            let v36: Array<leptos::HtmlElement<leptos::html::Dl>> = Dice_ui::method693(v34);
            let v38: Vec<leptos::HtmlElement<leptos::html::Dl>> = v36.to_vec();
            let v41: Vec<leptos::View> =
                Dice_ui::method446(v38.iter().map(|x| v35(x.clone())).collect());
            let v44: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v41));
            let v46: Vec<leptos::View> = v44.to_vec();
            leptos::Fragment::new(v46)
        }
        pub fn method659(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure319(v0_1.clone(), ())
            })
        }
        pub fn method695() -> Func0<string> {
            Func0::new(move || Dice_ui::closure231((), ()))
        }
        pub fn method696() -> Func0<bool> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure341(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn method698() -> Func0<string> {
            Func0::new(move || Dice_ui::closure341((), ()))
        }
        pub fn method702() -> string {
            string("View")
        }
        pub fn closure344(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method702()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method701() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure344((), ()))
        }
        pub fn closure343(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method701()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">
                        {v5()}
                    </span>
                },
            );
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method700() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure343((), ()))
        }
        pub fn closure342(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method700()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> },
            );
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method480()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> },
            );
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method699() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure342((), ()))
        }
        pub fn closure340(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method698();
            let v6: string = string("r#\"\"#");
            let v7: &'static str = r#""#;
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 \".to_owned() + v7 + \" \" + &v1()");
            let v10: string = append(append(append(string(" "), v8), string("")), string(""));
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method699()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = Dice_ui::method482(
                leptos::view! {
                    <summary class=move || {
                        "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 "
                            .to_owned() + v7 + " " + &v1()
                    }>{v12()}</summary>
                },
            );
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method483(v0_1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> },
            );
            let v36: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v20,
                leptos::IntoView::into_view(v31),
            ])));
            let v38: Vec<leptos::View> = v36.to_vec();
            leptos::Fragment::new(v38)
        }
        pub fn method697(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure340(v0_1.clone(), ())
            })
        }
        pub fn closure339(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method695();
            let v3 = Dice_ui::method696();
            let v7: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method474(v0_1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">{v9()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v9()}</div> },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v18: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2()");
            let v22: string = append(
                append(
                    string(" open=move || v3()"),
                    append(append(append(string(" "), v18), string("")), string("")),
                ),
                string(""),
            );
            let v24 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method697(v1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v22), string(">{v24()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Details> = Dice_ui::method484(
                leptos::view! {
                    <details
                        open=move || v3()
                        class=move || {
                            "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                                .to_owned() + &v2()
                        }
                    >
                        {v24()}
                    </details>
                },
            );
            let v35: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                leptos::IntoView::into_view(v30),
            ])));
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method694(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure339(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure346(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method704() -> Func0<string> {
            Func0::new(move || Dice_ui::closure346((), ()))
        }
        pub fn method705() -> Func0<string> {
            Func0::new(move || Dice_ui::closure321((), ()))
        }
        pub fn method706() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method708() -> string {
            string("Global State")
        }
        pub fn closure347(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method708()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method707() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure347((), ()))
        }
        pub fn method711(v0_1: LrcPtr<Dice_ui::Heap2>) -> LrcPtr<Dice_ui::Heap2> {
            v0_1
        }
        pub fn closure350(unitVar: (), v0_1: std::string::String) -> Dice_ui::US73 {
            Dice_ui::US73::US73_1(v0_1)
        }
        pub fn closure351(unitVar: (), v0_1: std::string::String) -> Dice_ui::US73 {
            Dice_ui::US73::US73_0(v0_1)
        }
        pub fn closure349(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v2: string = Dice_ui::method0(string(
                "settings.global_state_log_render () / global_state_json memo",
            ));
            leptos::logging::log!("{}", v2);
            {
                let v4: LrcPtr<Dice_ui::Heap2> = Dice_ui::method711(v0_1);
                let v6: Result<std::string::String, std::string::String> =
                    serde_json::to_string_pretty(&v4).map_err(|x| x.to_string());
                let v9: Dice_ui::US73 = match &v6 {
                    Err(v6_1_0) => Dice_ui::closure351((), v6_1_0.clone()),
                    Ok(v6_0_0) => Dice_ui::closure350((), v6_0_0.clone()),
                };
                match &v9 {
                    Dice_ui::US73::US73_1(v9_1_0) => {
                        let v11: std::string::String = Dice_ui::method70(v9_1_0.clone());
                        fable_library_rust::String_::fromString(v11)
                    }
                    Dice_ui::US73::US73_0(v9_0_0) => append(
                        append(string("Error: "), toString(v9_0_0.clone())),
                        string(""),
                    ),
                }
            }
        }
        pub fn method710(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure349(v0_1.clone(), ())
            })
        }
        pub fn method712(v0_1: leptos::Memo<string>) -> leptos::Memo<string> {
            v0_1
        }
        pub fn closure352(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method713() -> Func0<string> {
            Func0::new(move || Dice_ui::closure352((), ()))
        }
        pub fn closure353(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(v0_1)));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v14: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v9),
            ])));
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method714(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure353(v0_1.clone(), ())
            })
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method0(string("settings.global_state_log_render ()"));
            leptos::logging::log!("{}", v1);
            {
                let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v7 = Dice_ui::method710(v4.unwrap());
                let v10: leptos::Memo<string> =
                    Dice_ui::method712(leptos::create_memo(move |_| v7()));
                let v12: string = v10();
                let v13 = Dice_ui::method713();
                let v14: string =
                    string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v13()");
                let v17: string = append(append(append(string(" "), v14), string("")), string(""));
                let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method714(v12)));
                let v22: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<pre "), v17), string(">{v19()}</")),
                                string("pre"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v25: leptos::HtmlElement<leptos::html::Pre> = Dice_ui::method451(
                    leptos::view! {
                        <pre class=move || {
                            "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                                .to_owned() + &v13()
                        }>{v19()}</pre>
                    },
                );
                let v30: Array<leptos::View> =
                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                        leptos::IntoView::into_view(v25),
                    ])));
                let v32: Vec<leptos::View> = v30.to_vec();
                leptos::Fragment::new(v32)
            }
        }
        pub fn method709() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure348((), ()))
        }
        pub fn closure345(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method661(Dice_ui::method704());
            let v2 = Dice_ui::method705();
            let v3 = Dice_ui::method706();
            let v6: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v3() + \" \" + &v2() + \" \" + &v1()");
            let v9: string = append(append(append(string(" "), v6), string("")), string(""));
            let v11 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method707(),
                Dice_ui::method709(),
            )));
            let v14: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v9), string(">{v11()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v3() + " " + &v2() + " " + &v1()
                    }>{v11()}</dl>
                },
            );
            let v22: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v17),
            ])));
            let v24: Vec<leptos::View> = v22.to_vec();
            leptos::Fragment::new(v24)
        }
        pub fn method703() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure345((), ()))
        }
        pub fn method716() -> Func0<string> {
            Func0::new(move || Dice_ui::closure231((), ()))
        }
        pub fn method717() -> Func0<bool> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure356(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn method719() -> Func0<string> {
            Func0::new(move || Dice_ui::closure356((), ()))
        }
        pub fn closure359(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method682()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method722() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure359((), ()))
        }
        pub fn closure358(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method722()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">
                        {v5()}
                    </span>
                },
            );
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method721() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure358((), ()))
        }
        pub fn closure357(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method721()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> },
            );
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method480()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> },
            );
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method720() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure357((), ()))
        }
        pub fn closure355(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method719();
            let v6: string = string("r#\"\"#");
            let v7: &'static str = r#""#;
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 \".to_owned() + v7 + \" \" + &v1()");
            let v10: string = append(append(append(string(" "), v8), string("")), string(""));
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method720()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = Dice_ui::method482(
                leptos::view! {
                    <summary class=move || {
                        "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 "
                            .to_owned() + v7 + " " + &v1()
                    }>{v12()}</summary>
                },
            );
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method483(v0_1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> },
            );
            let v36: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v20,
                leptos::IntoView::into_view(v31),
            ])));
            let v38: Vec<leptos::View> = v36.to_vec();
            leptos::Fragment::new(v38)
        }
        pub fn method718(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure355(v0_1.clone(), ())
            })
        }
        pub fn closure354(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method716();
            let v3 = Dice_ui::method717();
            let v7: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method474(v0_1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">{v9()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v9()}</div> },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v18: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2()");
            let v22: string = append(
                append(
                    string(" open=move || v3()"),
                    append(append(append(string(" "), v18), string("")), string("")),
                ),
                string(""),
            );
            let v24 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method718(v1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v22), string(">{v24()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Details> = Dice_ui::method484(
                leptos::view! {
                    <details
                        open=move || v3()
                        class=move || {
                            "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                                .to_owned() + &v2()
                        }
                    >
                        {v24()}
                    </details>
                },
            );
            let v35: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                leptos::IntoView::into_view(v30),
            ])));
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method715(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure354(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure360(v0_1: leptos::WriteSignal<bool>, unitVar: ()) {
            let v1 = Dice_ui::method671();
            let v2: leptos::WriteSignal<bool> = Dice_ui::method102(v0_1);
            leptos::SignalUpdate::update(&v2, |x| *x = v1(x.clone()));
            ()
        }
        pub fn method723(v0_1: leptos::WriteSignal<bool>) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure360(v0_1.clone(), ())
            })
        }
        pub fn closure361(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v7: string = append(
                append(
                    append(string(" "), v2),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                ),
                string(""),
            );
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::svg::Path> = Dice_ui::method444(
                leptos::view! {
                    <path
                        d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z"
                        stroke-linejoin="round"
                        stroke-linecap="round"
                    >
                        {v9()}
                    </path>
                },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v24: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v26 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v24), string(">{v26()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::HtmlElement<leptos::svg::Path> = Dice_ui::method444(
                leptos::view! {
                    <path
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                        stroke-linejoin="round"
                        stroke-linecap="round"
                    >
                        {v26()}
                    </path>
                },
            );
            let v36: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                leptos::IntoView::into_view(v31),
            ])));
            let v38: Vec<leptos::View> = v36.to_vec();
            leptos::Fragment::new(v38)
        }
        pub fn method724() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure361((), ()))
        }
        pub fn method726(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure362(v0_1: leptos::ReadSignal<bool>, unitVar: ()) -> std::string::String {
            let v1: leptos::ReadSignal<bool> = Dice_ui::method94(v0_1);
            let v11: &'static str = Dice_ui::method726(if leptos::SignalGet::get(&v1) {
                let v5: string = string("r#\"\"#");
                r#""#
            } else {
                let v8: string = string("r#\"bg-gray-300\"#");
                r#"bg-gray-300"#
            });
            v11.to_owned() + " hover:bg-gray-200"
        }
        pub fn method725(v0_1: leptos::ReadSignal<bool>) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure362(v0_1.clone(), ())
            })
        }
        pub fn method730() -> string {
            string("Settings")
        }
        pub fn closure365(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method730()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method729() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure365((), ()))
        }
        pub fn closure366(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method440(v0_1);
            let v4: Func0<leptos::Fragment> = Dice_ui::method441(Func0::new(move || v1()));
            let v9: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(move || v4()),
            ])));
            let v11: Vec<leptos::View> = v9.to_vec();
            leptos::Fragment::new(v11)
        }
        pub fn method731(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure366(v0_1.clone(), ())
            })
        }
        pub fn closure368(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            v0_1()
        }
        pub fn method733(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure368(v0_1.clone(), ())
            })
        }
        pub fn closure369(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Array<leptos::View> =
                Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
            let v4: Vec<leptos::View> = v2.to_vec();
            leptos::Fragment::new(v4)
        }
        pub fn method734() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure369((), ()))
        }
        pub fn closure367(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"pr-[15px] [font-size:13px]\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method733(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="pr-[15px] [font-size:13px]">{v6()}</span> },
            );
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(" class=\"h-px flex-1 bg-gray-300\"");
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method734()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v17), string(">{v19()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="h-px flex-1 bg-gray-300">{v19()}</span> },
            );
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v14,
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method732(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure367(v0_1.clone(), ())
            })
        }
        pub fn closure370(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn method735() -> Func0<string> {
            Func0::new(move || Dice_ui::closure370((), ()))
        }
        pub fn method736() -> Func0<string> {
            Func0::new(move || Dice_ui::closure321((), ()))
        }
        pub fn method737() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method739() -> string {
            string("Table View")
        }
        pub fn closure371(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method739()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method738() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure371((), ()))
        }
        pub fn method742() -> string {
            string("table-view")
        }
        pub fn closure373(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v1: string = Dice_ui::method6(Dice_ui::method742());
            let v3: &str = fable_library_rust::String_::LrcStr::as_str(&v1);
            String::from(v3)
        }
        pub fn method741() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure373((), ()))
        }
        pub fn closure376(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn method745() -> Func1<LrcPtr<Dice_ui::Heap0>, LrcPtr<Dice_ui::Heap0>> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure376((), v))
        }
        pub fn closure375(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v3: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::SignalGetUntracked::get_untracked(&v3);
            let v7 = Dice_ui::method745();
            let v8: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> = Dice_ui::method81(v5.l1.clone());
            leptos::SignalUpdate::update(&v8, |x| *x = v7(x.clone()));
            ()
        }
        pub fn method744(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func1<leptos::ev::Event, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure375(v0_1.clone(), v)
            })
        }
        pub fn closure377(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v2: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = Dice_ui::method74(v0_1.l0.clone());
            let v6: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                Dice_ui::method97((leptos::SignalGetUntracked::get_untracked(&v2)).l1.clone());
            if let Dice_ui::US1::US1_1 = &(leptos::SignalGet::get(&v6)).l4 {
                true
            } else {
                false
            }
        }
        pub fn method746(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure377(v0_1.clone(), ())
            })
        }
        pub fn method747() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure373((), ()))
        }
        pub fn closure374(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method744(v0_1.clone());
            let v2 = Dice_ui::method746(v0_1);
            let v3 = Dice_ui::method747();
            let v4: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v17: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            string("<input "),
                            append(
                                append(
                                    string(" prop:checked=move || v2()"),
                                    append(
                                        append(
                                            string(" on:change=move |event| v1(event)"),
                                            append(
                                                append(
                                                    string(" id=move || v3()"),
                                                    append(
                                                        append(
                                                            string(" type=\"checkbox\""),
                                                            append(
                                                                append(
                                                                    append(string(" "), v4),
                                                                    string(""),
                                                                ),
                                                                string(""),
                                                            ),
                                                        ),
                                                        string(""),
                                                    ),
                                                ),
                                                string(""),
                                            ),
                                        ),
                                        string(""),
                                    ),
                                ),
                                string(""),
                            ),
                        ),
                        string(" />"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::html::Input> = Dice_ui::method490(
                leptos::view! {
                    <input
                        prop:checked=move || v2()
                        on:change=move |event| v1(event)
                        id=move || v3()
                        type="checkbox"
                        class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden"
                    />
                },
            );
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v23: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v25: string = append(append(append(string(" "), v23), string("")), string(""));
            let v27 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method627()));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v25), string(">{v27()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">
                        {v27()}
                    </span>
                },
            );
            let v35: leptos::View = leptos::IntoView::into_view(v33);
            let v36: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v38: string = append(append(append(string(" "), v36), string("")), string(""));
            let v40 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method633()));
            let v42: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v38), string(">{v40()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">
                        {v40()}
                    </span>
                },
            );
            let v50: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v22,
                v35,
                leptos::IntoView::into_view(v45),
            ])));
            let v52: Vec<leptos::View> = v50.to_vec();
            leptos::Fragment::new(v52)
        }
        pub fn method743(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure374(v0_1.clone(), ())
            })
        }
        pub fn closure372(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method741();
            let v7: string =
                string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method743(v0_1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<label "), v7), string(">{v9()}</")),
                            string("label"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Label> = Dice_ui::method634(
                leptos::view! {
                    <label
                        class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]"
                        for=move || v1()
                    >
                        {v9()}
                    </label>
                },
            );
            let v20: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v15),
            ])));
            let v22: Vec<leptos::View> = v20.to_vec();
            leptos::Fragment::new(v22)
        }
        pub fn method740(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure372(v0_1.clone(), ())
            })
        }
        pub fn closure364(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::Fragment {
            let v6: string = string(" class=\"flex items-center pb-[6px]\"");
            let v8 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method732(
                Dice_ui::method731(Dice_ui::method729()),
            )));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v6), string(">{v8()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="flex items-center pb-[6px]">{v8()}</span> },
            );
            let v16: leptos::View = leptos::IntoView::into_view(v14);
            let v18 = Dice_ui::method661(Dice_ui::method735());
            let v19 = Dice_ui::method736();
            let v20 = Dice_ui::method737();
            let v23: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v20() + \" \" + &v19() + \" \" + &v18()");
            let v25: string = append(append(append(string(" "), v23), string("")), string(""));
            let v27 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method738(),
                Dice_ui::method740(v0_1),
            )));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v25), string(">{v27()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v20() + " " + &v19() + " " + &v18()
                    }>{v27()}</dl>
                },
            );
            let v38: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v16,
                leptos::IntoView::into_view(v33),
            ])));
            let v40: Vec<leptos::View> = v38.to_vec();
            leptos::Fragment::new(v40)
        }
        pub fn method728(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure364(v0_1.clone(), ())
            })
        }
        pub fn closure381(v0_1: i64, unitVar: ()) -> leptos::Fragment {
            let v4: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(append(
                append(string("Transaction "), toString(v0_1 + 1_i64)),
                string(""),
            ))));
            let v6: &str = fable_library_rust::String_::LrcStr::as_str(&v4);
            let v8: std::string::String = String::from(v6);
            let v10: leptos::leptos_dom::Text = leptos::html::text(v8);
            let v15: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v10),
            ])));
            let v17: Vec<leptos::View> = v15.to_vec();
            leptos::Fragment::new(v17)
        }
        pub fn method751(v0_1: i64) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure381(v0_1, ())
            })
        }
        pub fn closure383(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method753() -> Func0<string> {
            Func0::new(move || Dice_ui::closure383((), ()))
        }
        pub fn closure384(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method754() -> Func0<string> {
            Func0::new(move || Dice_ui::closure384((), ()))
        }
        pub fn method755() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure385(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method427()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method756() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure385((), ()))
        }
        pub fn closure386(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(v0_1)));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v14: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v9),
            ])));
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method757(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure386(v0_1.clone(), ())
            })
        }
        pub fn closure387(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method758() -> Func0<string> {
            Func0::new(move || Dice_ui::closure387((), ()))
        }
        pub fn closure388(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method759() -> Func0<string> {
            Func0::new(move || Dice_ui::closure388((), ()))
        }
        pub fn method760() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure389(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method537()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method761() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure389((), ()))
        }
        pub fn closure390(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12: std::string::String = Dice_ui::method554(v3);
            let v15: i64 = Dice_ui::method555(v12.parse().unwrap());
            let v20: Dice_ui::US71 = defaultValue(
                Dice_ui::US71::US71_0,
                map(
                    Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure254((), v)),
                    chrono::DateTime::from_timestamp_micros(v15 / 1000i64),
                ),
            );
            let v39: Dice_ui::US34 = match &v20 {
                Dice_ui::US71::US71_1(v20_1_0) => {
                    let v22: chrono::DateTime<chrono::Utc> = Dice_ui::method556(v20_1_0.clone());
                    let v24: chrono::NaiveDateTime = v22.naive_utc();
                    let v26: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v24);
                    let v28: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v29: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v30: chrono::DateTime<chrono::Local> = Dice_ui::method557(v26);
                    let v33: std::string::String = Dice_ui::method70(v30.format(v29).to_string());
                    Dice_ui::US34::US34_1(fable_library_rust::String_::fromString(v33))
                }
                _ => Dice_ui::US34::US34_0,
            };
            let v45: Dice_ui::US72 = match &v39 {
                Dice_ui::US34::US34_1(v39_1_0) => Dice_ui::US72::US72_1(v39_1_0.clone()),
                _ => Dice_ui::US72::US72_0(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v53: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(match &v45 {
                Dice_ui::US72::US72_1(v45_1_0) => v45_1_0.clone(),
                Dice_ui::US72::US72_0(v45_0_0) => {
                    append(append(string("Error: "), v45_0_0.clone()), string(""))
                }
            })));
            let v55: &str = fable_library_rust::String_::LrcStr::as_str(&v53);
            let v57: std::string::String = String::from(v55);
            let v59: leptos::leptos_dom::Text = leptos::html::text(v57);
            let v64: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v59),
            ])));
            let v66: Vec<leptos::View> = v64.to_vec();
            leptos::Fragment::new(v66)
        }
        pub fn method762(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure390(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure391(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method763() -> Func0<string> {
            Func0::new(move || Dice_ui::closure391((), ()))
        }
        pub fn closure392(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method764() -> Func0<string> {
            Func0::new(move || Dice_ui::closure392((), ()))
        }
        pub fn method765() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure393(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method540()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method766() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure393((), ()))
        }
        pub fn closure394(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12: std::string::String = Dice_ui::method70(v8);
            let v17: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v12),
            )));
            let v19: &str = fable_library_rust::String_::LrcStr::as_str(&v17);
            let v21: std::string::String = String::from(v19);
            let v23: leptos::leptos_dom::Text = leptos::html::text(v21);
            let v28: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v23),
            ])));
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method767(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure394(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure395(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method768() -> Func0<string> {
            Func0::new(move || Dice_ui::closure395((), ()))
        }
        pub fn closure396(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method769() -> Func0<string> {
            Func0::new(move || Dice_ui::closure396((), ()))
        }
        pub fn method770() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure397(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method542()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method771() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure397((), ()))
        }
        pub fn closure398(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12: std::string::String = Dice_ui::method70(v10);
            let v17: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v12),
            )));
            let v19: &str = fable_library_rust::String_::LrcStr::as_str(&v17);
            let v21: std::string::String = String::from(v19);
            let v23: leptos::leptos_dom::Text = leptos::html::text(v21);
            let v28: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v23),
            ])));
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method772(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure398(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure399(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method773() -> Func0<string> {
            Func0::new(move || Dice_ui::closure399((), ()))
        }
        pub fn closure400(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn method774() -> Func0<string> {
            Func0::new(move || Dice_ui::closure400((), ()))
        }
        pub fn method775() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method777() -> string {
            string("Actions")
        }
        pub fn closure401(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method777()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method776() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure401((), ()))
        }
        pub fn closure404(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method780() -> Func0<string> {
            Func0::new(move || Dice_ui::closure404((), ()))
        }
        pub fn closure405(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn method781() -> Func0<string> {
            Func0::new(move || Dice_ui::closure405((), ()))
        }
        pub fn closure406(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method782() -> Func0<string> {
            Func0::new(move || Dice_ui::closure406((), ()))
        }
        pub fn closure407(v0_1: std::string::String, unitVar: ()) -> leptos::Fragment {
            let v1: std::string::String = Dice_ui::method70(v0_1);
            let v3: string = fable_library_rust::String_::fromString(v1);
            let v15: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                if string("FUNCTION_CALL") == v3.clone() {
                    string("Function Call:")
                } else {
                    if string("DEPLOY_CONTRACT") == v3.clone() {
                        string("Contract Deploy:")
                    } else {
                        if string("TRANSFER") == v3.clone() {
                            string("Transfer:")
                        } else {
                            v3
                        }
                    }
                },
            )));
            let v17: &str = fable_library_rust::String_::LrcStr::as_str(&v15);
            let v19: std::string::String = String::from(v17);
            let v21: leptos::leptos_dom::Text = leptos::html::text(v19);
            let v26: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v21),
            ])));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method783(v0_1: std::string::String) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure407(v0_1.clone(), ())
            })
        }
        pub fn closure410(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method786() -> Func0<string> {
            Func0::new(move || Dice_ui::closure410((), ()))
        }
        pub fn closure411(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method787() -> Func0<string> {
            Func0::new(move || Dice_ui::closure411((), ()))
        }
        pub fn method788() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method790() -> string {
            string("Method")
        }
        pub fn closure412(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method790()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method789() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure412((), ()))
        }
        pub fn method792() -> string {
            string("None")
        }
        pub fn closure413(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v3: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_0,
                map(
                    Func1::new(move |v: std::string::String| Dice_ui::closure30((), v)),
                    v0_1,
                ),
            );
            match &v3 {
                Dice_ui::US15::US15_1(v3_1_0) => {
                    let v5: std::string::String = Dice_ui::method70(v3_1_0.clone());
                    let v10: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                        fable_library_rust::String_::fromString(v5),
                    )));
                    let v12: &str = fable_library_rust::String_::LrcStr::as_str(&v10);
                    let v14: std::string::String = String::from(v12);
                    let v16: leptos::leptos_dom::Text = leptos::html::text(v14);
                    let v21: Array<leptos::View> =
                        Dice_ui::method437(Dice_ui::method421(new_array(&[
                            leptos::IntoView::into_view(v16),
                        ])));
                    let v23: Vec<leptos::View> = v21.to_vec();
                    leptos::Fragment::new(v23)
                }
                _ => {
                    let v28: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method792()));
                    let v30: &str = fable_library_rust::String_::LrcStr::as_str(&v28);
                    let v32: std::string::String = String::from(v30);
                    let v34: leptos::leptos_dom::Text = leptos::html::text(v32);
                    let v39: Array<leptos::View> =
                        Dice_ui::method437(Dice_ui::method421(new_array(&[
                            leptos::IntoView::into_view(v34),
                        ])));
                    let v41: Vec<leptos::View> = v39.to_vec();
                    leptos::Fragment::new(v41)
                }
            }
        }
        pub fn method791(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure413(v0_1.clone(), ())
            })
        }
        pub fn closure409(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v2 = Dice_ui::method661(Dice_ui::method786());
            let v3 = Dice_ui::method787();
            let v4 = Dice_ui::method788();
            let v7: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v4() + \" \" + &v3() + \" \" + &v2()");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method789(),
                Dice_ui::method791(v0_1),
            )));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v10), string(">{v12()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v4() + " " + &v3() + " " + &v2()
                    }>{v12()}</dl>
                },
            );
            let v23: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v18),
            ])));
            let v25: Vec<leptos::View> = v23.to_vec();
            leptos::Fragment::new(v25)
        }
        pub fn method785(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure409(v0_1.clone(), ())
            })
        }
        pub fn closure408(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex flex-1 flex-col\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method785(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v6()}</div> },
            );
            let v17: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v12),
            ])));
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method784(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure408(v0_1.clone(), ())
            })
        }
        pub fn closure403(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> leptos::HtmlElement<leptos::html::Dl> {
            let v3 = Dice_ui::method661(Dice_ui::method780());
            let v4 = Dice_ui::method781();
            let v5 = Dice_ui::method782();
            let v8: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v5() + \" \" + &v4() + \" \" + &v3()");
            let v11: string = append(append(append(string(" "), v8), string("")), string(""));
            let v13 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method783(_arg.0.clone()),
                Dice_ui::method784(_arg.1.clone()),
            )));
            let v16: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v11), string(">{v13()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            leptos::view! {
                <dl class=move || {
                    "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                        .to_owned() + &v5() + " " + &v4() + " " + &v3()
                }>{v13()}</dl>
            }
        }
        pub fn method779() -> Func1<
            (std::string::String, Option<std::string::String>),
            leptos::HtmlElement<leptos::html::Dl>,
        > {
            Func1::new(
                move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                    Dice_ui::closure403((), arg10_0040)
                },
            )
        }
        pub fn method793(
            v0_1: Vec<leptos::HtmlElement<leptos::html::Dl>>,
        ) -> Vec<leptos::HtmlElement<leptos::html::Dl>> {
            v0_1
        }
        pub fn closure402(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12 = Dice_ui::method779();
            let v13: Array<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method531(v0_1);
            let v15: Vec<(std::string::String, Option<std::string::String>)> = v13.to_vec();
            let v18: Vec<leptos::HtmlElement<leptos::html::Dl>> =
                Dice_ui::method793(v15.iter().map(|x| v12(x.clone())).collect());
            let v20: Array<leptos::HtmlElement<leptos::html::Dl>> =
                fable_library_rust::NativeArray_::array_from(v18);
            let v21 = Dice_ui::method691();
            let v22: Array<leptos::HtmlElement<leptos::html::Dl>> = Dice_ui::method693(v20);
            let v24: Vec<leptos::HtmlElement<leptos::html::Dl>> = v22.to_vec();
            let v27: Vec<leptos::View> =
                Dice_ui::method446(v24.iter().map(|x| v21(x.clone())).collect());
            let v30: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v27));
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method778(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure402(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure414(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method794() -> Func0<string> {
            Func0::new(move || Dice_ui::closure414((), ()))
        }
        pub fn closure415(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method795() -> Func0<string> {
            Func0::new(move || Dice_ui::closure415((), ()))
        }
        pub fn method796() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method798() -> string {
            string("Deposit")
        }
        pub fn closure416(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method798()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method797() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure416((), ()))
        }
        pub fn closure417(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v15: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(toString(v1))));
            let v17: &str = fable_library_rust::String_::LrcStr::as_str(&v15);
            let v19: std::string::String = String::from(v17);
            let v21: leptos::leptos_dom::Text = leptos::html::text(v19);
            let v26: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v21),
            ])));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method799(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure417(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure418(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method800() -> Func0<string> {
            Func0::new(move || Dice_ui::closure418((), ()))
        }
        pub fn closure419(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method801() -> Func0<string> {
            Func0::new(move || Dice_ui::closure419((), ()))
        }
        pub fn method802() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method804() -> string {
            string("Outcome Status")
        }
        pub fn closure420(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method804()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method803() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure420((), ()))
        }
        pub fn closure421(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v15: string =
                Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(ofBoolean(v6))));
            let v17: &str = fable_library_rust::String_::LrcStr::as_str(&v15);
            let v19: std::string::String = String::from(v17);
            let v21: leptos::leptos_dom::Text = leptos::html::text(v19);
            let v26: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v21),
            ])));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method805(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure421(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure422(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method806() -> Func0<string> {
            Func0::new(move || Dice_ui::closure422((), ()))
        }
        pub fn closure423(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method807() -> Func0<string> {
            Func0::new(move || Dice_ui::closure423((), ()))
        }
        pub fn method808() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure424(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method544()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method809() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure424((), ()))
        }
        pub fn closure425(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v15: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(toString(v7))));
            let v17: &str = fable_library_rust::String_::LrcStr::as_str(&v15);
            let v19: std::string::String = String::from(v17);
            let v21: leptos::leptos_dom::Text = leptos::html::text(v19);
            let v26: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v21),
            ])));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method810(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure425(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure426(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method811() -> Func0<string> {
            Func0::new(move || Dice_ui::closure426((), ()))
        }
        pub fn closure427(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method812() -> Func0<string> {
            Func0::new(move || Dice_ui::closure427((), ()))
        }
        pub fn method813() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method815() -> string {
            string("Block Height")
        }
        pub fn closure428(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method815()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method814() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure428((), ()))
        }
        pub fn closure429(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v15: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(toString(v2))));
            let v17: &str = fable_library_rust::String_::LrcStr::as_str(&v15);
            let v19: std::string::String = String::from(v17);
            let v21: leptos::leptos_dom::Text = leptos::html::text(v19);
            let v26: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v21),
            ])));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method816(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure429(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure430(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method817() -> Func0<string> {
            Func0::new(move || Dice_ui::closure430((), ()))
        }
        pub fn closure431(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method818() -> Func0<string> {
            Func0::new(move || Dice_ui::closure431((), ()))
        }
        pub fn method819() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method821() -> string {
            string("Hash")
        }
        pub fn closure432(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method821()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method820() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure432((), ()))
        }
        pub fn closure433(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12: std::string::String = Dice_ui::method70(v11);
            let v17: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v12),
            )));
            let v19: &str = fable_library_rust::String_::LrcStr::as_str(&v17);
            let v21: std::string::String = String::from(v19);
            let v23: leptos::leptos_dom::Text = leptos::html::text(v21);
            let v28: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v23),
            ])));
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method822(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure433(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure434(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method823() -> Func0<string> {
            Func0::new(move || Dice_ui::closure434((), ()))
        }
        pub fn closure435(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method824() -> Func0<string> {
            Func0::new(move || Dice_ui::closure435((), ()))
        }
        pub fn method825() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method827() -> string {
            string("Block Hash")
        }
        pub fn closure436(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method827()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method826() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure436((), ()))
        }
        pub fn closure437(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12: std::string::String = Dice_ui::method70(v4);
            let v17: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v12),
            )));
            let v19: &str = fable_library_rust::String_::LrcStr::as_str(&v17);
            let v21: std::string::String = String::from(v19);
            let v23: leptos::leptos_dom::Text = leptos::html::text(v21);
            let v28: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v23),
            ])));
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method828(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure437(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure438(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method829() -> Func0<string> {
            Func0::new(move || Dice_ui::closure438((), ()))
        }
        pub fn closure439(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method830() -> Func0<string> {
            Func0::new(move || Dice_ui::closure439((), ()))
        }
        pub fn method831() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method833() -> string {
            string("Receipt ID")
        }
        pub fn closure440(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method833()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method832() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure440((), ()))
        }
        pub fn closure441(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12: std::string::String = Dice_ui::method70(v9);
            let v17: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v12),
            )));
            let v19: &str = fable_library_rust::String_::LrcStr::as_str(&v17);
            let v21: std::string::String = String::from(v19);
            let v23: leptos::leptos_dom::Text = leptos::html::text(v21);
            let v28: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v23),
            ])));
            let v30: Vec<leptos::View> = v28.to_vec();
            leptos::Fragment::new(v30)
        }
        pub fn method834(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure441(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure442(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn method835() -> Func0<string> {
            Func0::new(move || Dice_ui::closure442((), ()))
        }
        pub fn closure443(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method836() -> Func0<string> {
            Func0::new(move || Dice_ui::closure443((), ()))
        }
        pub fn method837() -> Func0<string> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn method839() -> string {
            string("Logs")
        }
        pub fn closure444(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method839()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method838() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure444((), ()))
        }
        pub fn closure446(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn method841() -> Func0<string> {
            Func0::new(move || Dice_ui::closure446((), ()))
        }
        pub fn closure445(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v12 = Dice_ui::method142();
            let v13: Array<std::string::String> = Dice_ui::method143(v5);
            let v15: Vec<std::string::String> = v13.to_vec();
            let v18: Vec<string> = Dice_ui::method144(v15.iter().map(|x| v12(x.clone())).collect());
            let v24: string = replace(
                join(
                    string("\n"),
                    toArray(ofArray(fable_library_rust::NativeArray_::array_from(v18))),
                ),
                string("\\n"),
                string("\n"),
            );
            let v25 = Dice_ui::method841();
            let v26: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v25()");
            let v29: string = append(append(append(string(" "), v26), string("")), string(""));
            let v31 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method714(v24)));
            let v34: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v29), string(">{v31()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::HtmlElement<leptos::html::Pre> = Dice_ui::method451(
                leptos::view! {
                    <pre class=move || {
                        "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                            .to_owned() + &v25()
                    }>{v31()}</pre>
                },
            );
            let v42: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v37),
            ])));
            let v44: Vec<leptos::View> = v42.to_vec();
            leptos::Fragment::new(v44)
        }
        pub fn method840(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
            v1: f64,
            v2: u32,
            v3: std::string::String,
            v4: std::string::String,
            v5: Array<std::string::String>,
            v6: bool,
            v7: f64,
            v8: std::string::String,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure445(
                        v0_1.clone(),
                        v1,
                        v2,
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7,
                        v8.clone(),
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure382(
            v0_1: string,
            v1: Array<(std::string::String, Option<std::string::String>)>,
            v2: f64,
            v3: u32,
            v4: std::string::String,
            v5: std::string::String,
            v6: Array<std::string::String>,
            v7: bool,
            v8: f64,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            v12: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v14 = Dice_ui::method661(Dice_ui::method753());
            let v15 = Dice_ui::method754();
            let v16 = Dice_ui::method755();
            let v19: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v16() + \" \" + &v15() + \" \" + &v14()");
            let v22: string = append(append(append(string(" "), v19), string("")), string(""));
            let v24 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method756(),
                Dice_ui::method757(v0_1),
            )));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v22), string(">{v24()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v16() + " " + &v15() + " " + &v14()
                    }>{v24()}</dl>
                },
            );
            let v32: leptos::View = leptos::IntoView::into_view(v30);
            let v34 = Dice_ui::method661(Dice_ui::method758());
            let v35 = Dice_ui::method759();
            let v36 = Dice_ui::method760();
            let v39: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v36() + \" \" + &v35() + \" \" + &v34()");
            let v41: string = append(append(append(string(" "), v39), string("")), string(""));
            let v43 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method761(),
                Dice_ui::method762(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v45: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v41), string(">{v43()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v48: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v36() + " " + &v35() + " " + &v34()
                    }>{v43()}</dl>
                },
            );
            let v50: leptos::View = leptos::IntoView::into_view(v48);
            let v52 = Dice_ui::method661(Dice_ui::method763());
            let v53 = Dice_ui::method764();
            let v54 = Dice_ui::method765();
            let v57: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v54() + \" \" + &v53() + \" \" + &v52()");
            let v59: string = append(append(append(string(" "), v57), string("")), string(""));
            let v61 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method766(),
                Dice_ui::method767(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v63: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v59), string(">{v61()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v66: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v54() + " " + &v53() + " " + &v52()
                    }>{v61()}</dl>
                },
            );
            let v68: leptos::View = leptos::IntoView::into_view(v66);
            let v70 = Dice_ui::method661(Dice_ui::method768());
            let v71 = Dice_ui::method769();
            let v72 = Dice_ui::method770();
            let v75: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v72() + \" \" + &v71() + \" \" + &v70()");
            let v77: string = append(append(append(string(" "), v75), string("")), string(""));
            let v79 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method771(),
                Dice_ui::method772(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v81: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v77), string(">{v79()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v84: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v72() + " " + &v71() + " " + &v70()
                    }>{v79()}</dl>
                },
            );
            let v86: leptos::View = leptos::IntoView::into_view(v84);
            let v88 = Dice_ui::method661(Dice_ui::method773());
            let v89 = Dice_ui::method774();
            let v90 = Dice_ui::method775();
            let v93: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v90() + \" \" + &v89() + \" \" + &v88()");
            let v95: string = append(append(append(string(" "), v93), string("")), string(""));
            let v97 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method776(),
                Dice_ui::method778(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v99: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v95), string(">{v97()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v102: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v90() + " " + &v89() + " " + &v88()
                    }>{v97()}</dl>
                },
            );
            let v104: leptos::View = leptos::IntoView::into_view(v102);
            let v106 = Dice_ui::method661(Dice_ui::method794());
            let v107 = Dice_ui::method795();
            let v108 = Dice_ui::method796();
            let v111: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v108() + \" \" + &v107() + \" \" + &v106()");
            let v113: string = append(append(append(string(" "), v111), string("")), string(""));
            let v115 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method797(),
                Dice_ui::method799(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v117: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v113), string(">{v115()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v120: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v108() + " " + &v107() + " " + &v106()
                    }>{v115()}</dl>
                },
            );
            let v122: leptos::View = leptos::IntoView::into_view(v120);
            let v124 = Dice_ui::method661(Dice_ui::method800());
            let v125 = Dice_ui::method801();
            let v126 = Dice_ui::method802();
            let v129: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v126() + \" \" + &v125() + \" \" + &v124()");
            let v131: string = append(append(append(string(" "), v129), string("")), string(""));
            let v133 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method803(),
                Dice_ui::method805(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v135: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v131), string(">{v133()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v138: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v126() + " " + &v125() + " " + &v124()
                    }>{v133()}</dl>
                },
            );
            let v140: leptos::View = leptos::IntoView::into_view(v138);
            let v142 = Dice_ui::method661(Dice_ui::method806());
            let v143 = Dice_ui::method807();
            let v144 = Dice_ui::method808();
            let v147: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v144() + \" \" + &v143() + \" \" + &v142()");
            let v149: string = append(append(append(string(" "), v147), string("")), string(""));
            let v151 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method809(),
                Dice_ui::method810(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v153: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v149), string(">{v151()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v156: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v144() + " " + &v143() + " " + &v142()
                    }>{v151()}</dl>
                },
            );
            let v158: leptos::View = leptos::IntoView::into_view(v156);
            let v160 = Dice_ui::method661(Dice_ui::method811());
            let v161 = Dice_ui::method812();
            let v162 = Dice_ui::method813();
            let v165: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v162() + \" \" + &v161() + \" \" + &v160()");
            let v167: string = append(append(append(string(" "), v165), string("")), string(""));
            let v169 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method814(),
                Dice_ui::method816(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v171: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v167), string(">{v169()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v174: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v162() + " " + &v161() + " " + &v160()
                    }>{v169()}</dl>
                },
            );
            let v176: leptos::View = leptos::IntoView::into_view(v174);
            let v178 = Dice_ui::method661(Dice_ui::method817());
            let v179 = Dice_ui::method818();
            let v180 = Dice_ui::method819();
            let v183: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v180() + \" \" + &v179() + \" \" + &v178()");
            let v185: string = append(append(append(string(" "), v183), string("")), string(""));
            let v187 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method820(),
                Dice_ui::method822(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v189: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v185), string(">{v187()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v192: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v180() + " " + &v179() + " " + &v178()
                    }>{v187()}</dl>
                },
            );
            let v194: leptos::View = leptos::IntoView::into_view(v192);
            let v196 = Dice_ui::method661(Dice_ui::method823());
            let v197 = Dice_ui::method824();
            let v198 = Dice_ui::method825();
            let v201: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v198() + \" \" + &v197() + \" \" + &v196()");
            let v203: string = append(append(append(string(" "), v201), string("")), string(""));
            let v205 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method826(),
                Dice_ui::method828(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v207: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v203), string(">{v205()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v210: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v198() + " " + &v197() + " " + &v196()
                    }>{v205()}</dl>
                },
            );
            let v212: leptos::View = leptos::IntoView::into_view(v210);
            let v214 = Dice_ui::method661(Dice_ui::method829());
            let v215 = Dice_ui::method830();
            let v216 = Dice_ui::method831();
            let v219: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v216() + \" \" + &v215() + \" \" + &v214()");
            let v221: string = append(append(append(string(" "), v219), string("")), string(""));
            let v223 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method832(),
                Dice_ui::method834(
                    v1.clone(),
                    v2,
                    v3,
                    v4.clone(),
                    v5.clone(),
                    v6.clone(),
                    v7,
                    v8,
                    v9.clone(),
                    v10.clone(),
                    v11.clone(),
                    v12.clone(),
                ),
            )));
            let v225: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v221), string(">{v223()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v228: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                leptos::view! {
                    <dl class=move || {
                        "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                            .to_owned() + &v216() + " " + &v215() + " " + &v214()
                    }>{v223()}</dl>
                },
            );
            let v260: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v32,
                v50,
                v68,
                v86,
                v104,
                v122,
                v140,
                v158,
                v176,
                v194,
                v212,
                leptos::IntoView::into_view(v228),
                if count(v6.clone()) as u64 == 0_u64 {
                    let v236: Array<leptos::View> =
                        Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<
                            leptos::View,
                        >(
                        ))));
                    leptos::CollectView::collect_view(v236.to_vec())
                } else {
                    let v240 = Dice_ui::method661(Dice_ui::method835());
                    let v241 = Dice_ui::method836();
                    let v242 = Dice_ui::method837();
                    let v245:
                                                                              string =
                                                                          string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v242() + \" \" + &v241() + \" \" + &v240()");
                    let v247: string =
                        append(append(append(string(" "), v245), string("")), string(""));
                    let v249 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                        Dice_ui::method838(),
                        Dice_ui::method840(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12),
                    )));
                    let v251: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<dl "), v247), string(">{v249()}</")),
                                    string("dl"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v254: leptos::HtmlElement<leptos::html::Dl> = Dice_ui::method692(
                        leptos::view! {
                            <dl class=move || {
                                "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                                    .to_owned() + &v242() + " " + &v241() + " " + &v240()
                            }>{v249()}</dl>
                        },
                    );
                    leptos::IntoView::into_view(v254)
                },
            ])));
            let v262: Vec<leptos::View> = v260.to_vec();
            leptos::Fragment::new(v262)
        }
        pub fn method752(
            v0_1: string,
            v1: Array<(std::string::String, Option<std::string::String>)>,
            v2: f64,
            v3: u32,
            v4: std::string::String,
            v5: std::string::String,
            v6: Array<std::string::String>,
            v7: bool,
            v8: f64,
            v9: std::string::String,
            v10: std::string::String,
            v11: std::string::String,
            v12: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v12 = v12.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure382(
                        v0_1.clone(),
                        v1.clone(),
                        v2,
                        v3,
                        v4.clone(),
                        v5.clone(),
                        v6.clone(),
                        v7,
                        v8,
                        v9.clone(),
                        v10.clone(),
                        v11.clone(),
                        v12.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure380(
            v0_1: string,
            v1: i64,
            v2: Array<(std::string::String, Option<std::string::String>)>,
            v3: f64,
            v4: u32,
            v5: std::string::String,
            v6: std::string::String,
            v7: Array<std::string::String>,
            v8: bool,
            v9: f64,
            v10: std::string::String,
            v11: std::string::String,
            v12: std::string::String,
            v13: std::string::String,
            unitVar: (),
        ) -> leptos::Fragment {
            let v19: string = string(" class=\"flex items-center pb-[6px]\"");
            let v21 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method732(
                Dice_ui::method731(Dice_ui::method751(v1)),
            )));
            let v24: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v19), string(">{v21()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="flex items-center pb-[6px]">{v21()}</span> },
            );
            let v29: leptos::View = leptos::IntoView::into_view(v27);
            let v32: string = string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
            let v34 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method752(
                v0_1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13,
            )));
            let v37: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v32), string(">{v34()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v40: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">{v34()}</div> },
            );
            let v45: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v29,
                leptos::IntoView::into_view(v40),
            ])));
            let v47: Vec<leptos::View> = v45.to_vec();
            leptos::Fragment::new(v47)
        }
        pub fn method750(
            v0_1: string,
            v1: i64,
            v2: Array<(std::string::String, Option<std::string::String>)>,
            v3: f64,
            v4: u32,
            v5: std::string::String,
            v6: std::string::String,
            v7: Array<std::string::String>,
            v8: bool,
            v9: f64,
            v10: std::string::String,
            v11: std::string::String,
            v12: std::string::String,
            v13: std::string::String,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v12 = v12.clone();
                let v13 = v13.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure380(
                        v0_1.clone(),
                        v1,
                        v2.clone(),
                        v3,
                        v4,
                        v5.clone(),
                        v6.clone(),
                        v7.clone(),
                        v8,
                        v9,
                        v10.clone(),
                        v11.clone(),
                        v12.clone(),
                        v13.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure379(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::View {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v15: i64 = _arg.1.clone() as i64;
            let v17: Option<LrcPtr<Dice_ui::Heap2>> = leptos::use_context::<std::rc::Rc<Heap2>>();
            let v19: LrcPtr<Dice_ui::Heap2> = v17.unwrap();
            let v23: string = string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
            let v25 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method750(
                _arg.0.clone(),
                v15,
                v2.l0.clone(),
                v2.l1,
                v2.l2,
                v2.l3.clone(),
                v2.l4.clone(),
                v2.l5.clone(),
                v2.l6,
                v2.l7,
                v2.l8.clone(),
                v2.l9.clone(),
                v2.l10.clone(),
                v2.l11.clone(),
            )));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col overflow-x-auto">{v25()}</div> },
            );
            leptos::IntoView::into_view(v31)
        }
        pub fn method749() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), leptos::View> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure379((), arg10_0040)
            })
        }
        pub fn closure378(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1 = Dice_ui::method749();
            let v2: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> = Dice_ui::method314(v0_1);
            let v4: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v2.to_vec();
            let v7: Vec<leptos::View> =
                Dice_ui::method446(v4.iter().map(|x| v1(x.clone())).collect());
            let v10: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v7));
            let v12: Vec<leptos::View> = v10.to_vec();
            leptos::Fragment::new(v12)
        }
        pub fn method748(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure378(v0_1.clone(), ())
            })
        }
        pub fn closure449(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(v0_1)));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v14: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v9),
            ])));
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method844(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure449(v0_1.clone(), ())
            })
        }
        pub fn closure450(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method554(v0_1.l3.clone());
            let v5: i64 = Dice_ui::method555(v2.parse().unwrap());
            let v10: Dice_ui::US71 = defaultValue(
                Dice_ui::US71::US71_0,
                map(
                    Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure254((), v)),
                    chrono::DateTime::from_timestamp_micros(v5 / 1000i64),
                ),
            );
            let v29: Dice_ui::US34 = match &v10 {
                Dice_ui::US71::US71_1(v10_1_0) => {
                    let v12: chrono::DateTime<chrono::Utc> = Dice_ui::method556(v10_1_0.clone());
                    let v14: chrono::NaiveDateTime = v12.naive_utc();
                    let v16: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v14);
                    let v18: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v19: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v20: chrono::DateTime<chrono::Local> = Dice_ui::method557(v16);
                    let v23: std::string::String = Dice_ui::method70(v20.format(v19).to_string());
                    Dice_ui::US34::US34_1(fable_library_rust::String_::fromString(v23))
                }
                _ => Dice_ui::US34::US34_0,
            };
            let v35: Dice_ui::US72 = match &v29 {
                Dice_ui::US34::US34_1(v29_1_0) => Dice_ui::US72::US72_1(v29_1_0.clone()),
                _ => Dice_ui::US72::US72_0(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v43: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(match &v35 {
                Dice_ui::US72::US72_1(v35_1_0) => v35_1_0.clone(),
                Dice_ui::US72::US72_0(v35_0_0) => {
                    append(append(string("Error: "), v35_0_0.clone()), string(""))
                }
            })));
            let v45: &str = fable_library_rust::String_::LrcStr::as_str(&v43);
            let v47: std::string::String = String::from(v45);
            let v49: leptos::leptos_dom::Text = leptos::html::text(v47);
            let v54: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v49),
            ])));
            let v56: Vec<leptos::View> = v54.to_vec();
            leptos::Fragment::new(v56)
        }
        pub fn method845(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure450(v0_1.clone(), ())
            })
        }
        pub fn closure451(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method70(v0_1.l8.clone());
            let v7: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v2),
            )));
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method846(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure451(v0_1.clone(), ())
            })
        }
        pub fn closure452(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method70(v0_1.l10.clone());
            let v7: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v2),
            )));
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method847(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure452(v0_1.clone(), ())
            })
        }
        pub fn closure454(v0_1: std::string::String, unitVar: ()) -> leptos::Fragment {
            let v1: std::string::String = Dice_ui::method70(v0_1);
            let v3: string = fable_library_rust::String_::fromString(v1);
            let v15: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                if string("FUNCTION_CALL") == v3.clone() {
                    string("Function Call")
                } else {
                    if string("DEPLOY_CONTRACT") == v3.clone() {
                        string("Contract Deploy")
                    } else {
                        if string("TRANSFER") == v3.clone() {
                            string("Transfer")
                        } else {
                            v3
                        }
                    }
                },
            )));
            let v17: &str = fable_library_rust::String_::LrcStr::as_str(&v15);
            let v19: std::string::String = String::from(v17);
            let v21: leptos::leptos_dom::Text = leptos::html::text(v19);
            let v26: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v21),
            ])));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method849(v0_1: std::string::String) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure454(v0_1.clone(), ())
            })
        }
        pub fn closure455(v0_1: Option<std::string::String>, unitVar: ()) -> leptos::Fragment {
            let v3: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_0,
                map(
                    Func1::new(move |v: std::string::String| Dice_ui::closure30((), v)),
                    v0_1,
                ),
            );
            let v11: Dice_ui::US34 = match &v3 {
                Dice_ui::US15::US15_1(v3_1_0) => {
                    let v5: std::string::String = Dice_ui::method70(v3_1_0.clone());
                    Dice_ui::US34::US34_1(fable_library_rust::String_::fromString(v5))
                }
                _ => Dice_ui::US34::US34_0,
            };
            let v18: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(match &v11 {
                Dice_ui::US34::US34_1(v11_1_0) => v11_1_0.clone(),
                _ => string("None"),
            })));
            let v20: &str = fable_library_rust::String_::LrcStr::as_str(&v18);
            let v22: std::string::String = String::from(v20);
            let v24: leptos::leptos_dom::Text = leptos::html::text(v22);
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method850(v0_1: Option<std::string::String>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure455(v0_1.clone(), ())
            })
        }
        pub fn closure453(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> leptos::Fragment {
            let v5: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v7 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method849(_arg.0.clone())));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v5), string(">{v7()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v7()}
                    </td>
                },
            );
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v18: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v20 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method850(_arg.1.clone())));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v18), string(">{v20()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v20()}
                    </td>
                },
            );
            let v30: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v15,
                leptos::IntoView::into_view(v25),
            ])));
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method848(
        ) -> Func1<(std::string::String, Option<std::string::String>), leptos::Fragment> {
            Func1::new(
                move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                    Dice_ui::closure453((), arg10_0040)
                },
            )
        }
        pub fn method851(v0_1: Vec<leptos::Fragment>) -> Vec<leptos::Fragment> {
            v0_1
        }
        pub fn method853(v0_1: leptos::Fragment) -> leptos::Fragment {
            v0_1
        }
        pub fn closure456(unitVar: (), v0_1: leptos::Fragment) -> leptos::View {
            let v1: leptos::Fragment = Dice_ui::method853(v0_1);
            leptos::IntoView::into_view(v1)
        }
        pub fn method852() -> Func1<leptos::Fragment, leptos::View> {
            Func1::new(move |v: leptos::Fragment| Dice_ui::closure456((), v))
        }
        pub fn method854(v0_1: Array<leptos::Fragment>) -> Array<leptos::Fragment> {
            v0_1
        }
        pub fn closure457(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(toString(v0_1.l1))));
            let v7: &str = fable_library_rust::String_::LrcStr::as_str(&v5);
            let v9: std::string::String = String::from(v7);
            let v11: leptos::leptos_dom::Text = leptos::html::text(v9);
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method855(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure457(v0_1.clone(), ())
            })
        }
        pub fn closure458(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(toString(v0_1.l7))));
            let v7: &str = fable_library_rust::String_::LrcStr::as_str(&v5);
            let v9: std::string::String = String::from(v7);
            let v11: leptos::leptos_dom::Text = leptos::html::text(v9);
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method856(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure458(v0_1.clone(), ())
            })
        }
        pub fn closure459(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(toString(v0_1.l2))));
            let v7: &str = fable_library_rust::String_::LrcStr::as_str(&v5);
            let v9: std::string::String = String::from(v7);
            let v11: leptos::leptos_dom::Text = leptos::html::text(v9);
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method857(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure459(v0_1.clone(), ())
            })
        }
        pub fn closure461(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn method859() -> Func0<string> {
            Func0::new(move || Dice_ui::closure461((), ()))
        }
        pub fn closure460(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v1: Array<std::string::String> = v0_1.l5.clone();
            if count(v1.clone()) as u64 == 0_u64 {
                let v6: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method563()));
                let v8: &str = fable_library_rust::String_::LrcStr::as_str(&v6);
                let v10: std::string::String = String::from(v8);
                let v12: leptos::leptos_dom::Text = leptos::html::text(v10);
                let v17: Array<leptos::View> =
                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                        leptos::IntoView::into_view(v12),
                    ])));
                let v19: Vec<leptos::View> = v17.to_vec();
                leptos::Fragment::new(v19)
            } else {
                let v22 = Dice_ui::method142();
                let v23: Array<std::string::String> = Dice_ui::method143(v1);
                let v25: Vec<std::string::String> = v23.to_vec();
                let v28: Vec<string> =
                    Dice_ui::method144(v25.iter().map(|x| v22(x.clone())).collect());
                let v34: string = replace(
                    join(
                        string("\n"),
                        toArray(ofArray(fable_library_rust::NativeArray_::array_from(v28))),
                    ),
                    string("\\n"),
                    string("\n"),
                );
                let v35 = Dice_ui::method859();
                let v36: string =
                    string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v35()");
                let v39: string = append(append(append(string(" "), v36), string("")), string(""));
                let v41 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method714(v34)));
                let v44: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<pre "), v39), string(">{v41()}</")),
                                string("pre"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v47: leptos::HtmlElement<leptos::html::Pre> = Dice_ui::method451(
                    leptos::view! {
                        <pre class=move || {
                            "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                                .to_owned() + &v35()
                        }>{v41()}</pre>
                    },
                );
                let v52: Array<leptos::View> =
                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                        leptos::IntoView::into_view(v47),
                    ])));
                let v54: Vec<leptos::View> = v52.to_vec();
                leptos::Fragment::new(v54)
            }
        }
        pub fn method858(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure460(v0_1.clone(), ())
            })
        }
        pub fn closure462(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v5: string =
                Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(ofBoolean(v0_1.l6))));
            let v7: &str = fable_library_rust::String_::LrcStr::as_str(&v5);
            let v9: std::string::String = String::from(v7);
            let v11: leptos::leptos_dom::Text = leptos::html::text(v9);
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method860(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure462(v0_1.clone(), ())
            })
        }
        pub fn closure463(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method70(v0_1.l11.clone());
            let v7: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v2),
            )));
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method861(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure463(v0_1.clone(), ())
            })
        }
        pub fn closure464(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method70(v0_1.l4.clone());
            let v7: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v2),
            )));
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method862(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure464(v0_1.clone(), ())
            })
        }
        pub fn closure465(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::Fragment {
            let v2: std::string::String = Dice_ui::method70(v0_1.l9.clone());
            let v7: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                fable_library_rust::String_::fromString(v2),
            )));
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method863(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure465(v0_1.clone(), ())
            })
        }
        pub fn closure448(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: string,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v7 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method844(v1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v5), string(">{v7()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v7()}
                    </td>
                },
            );
            let v15: leptos::View = leptos::IntoView::into_view(v13);
            let v18: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v20 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method845(v0_1.clone())));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v18), string(">{v20()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v20()}
                    </td>
                },
            );
            let v27: leptos::View = leptos::IntoView::into_view(v25);
            let v30: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v32 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method846(v0_1.clone())));
            let v34: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v30), string(">{v32()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v32()}
                    </td>
                },
            );
            let v39: leptos::View = leptos::IntoView::into_view(v37);
            let v42: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v44 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method847(v0_1.clone())));
            let v46: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v42), string(">{v44()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v49: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v44()}
                    </td>
                },
            );
            let v51: leptos::View = leptos::IntoView::into_view(v49);
            let v53 = Dice_ui::method848();
            let v54: Array<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method531(v0_1.l0.clone());
            let v56: Vec<(std::string::String, Option<std::string::String>)> = v54.to_vec();
            let v59: Vec<leptos::Fragment> =
                Dice_ui::method851(v56.iter().map(|x| v53(x.clone())).collect());
            let v61: Array<leptos::Fragment> = fable_library_rust::NativeArray_::array_from(v59);
            let v62 = Dice_ui::method852();
            let v63: Array<leptos::Fragment> = Dice_ui::method854(v61);
            let v65: Vec<leptos::Fragment> = v63.to_vec();
            let v68: Vec<leptos::View> =
                Dice_ui::method446(v65.iter().map(|x| v62(x.clone())).collect());
            let v71: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v68));
            let v73: Vec<leptos::View> = v71.to_vec();
            let v76: leptos::Fragment = Dice_ui::method853(leptos::Fragment::new(v73));
            let v78: leptos::View = leptos::IntoView::into_view(v76);
            let v81: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v83 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method855(v0_1.clone())));
            let v85: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v81), string(">{v83()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v88: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v83()}
                    </td>
                },
            );
            let v90: leptos::View = leptos::IntoView::into_view(v88);
            let v93: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v95 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method856(v0_1.clone())));
            let v97: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v93), string(">{v95()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v100: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v95()}
                    </td>
                },
            );
            let v102: leptos::View = leptos::IntoView::into_view(v100);
            let v105: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v107 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method857(v0_1.clone())));
            let v109: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v105), string(">{v107()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v112: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v107()}
                    </td>
                },
            );
            let v114: leptos::View = leptos::IntoView::into_view(v112);
            let v117: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
            let v119 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method858(v0_1.clone())));
            let v121: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v117), string(">{v119()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v124: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">
                        {v119()}
                    </td>
                },
            );
            let v126: leptos::View = leptos::IntoView::into_view(v124);
            let v129: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v131 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method860(v0_1.clone())));
            let v133: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v129), string(">{v131()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v136: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v131()}
                    </td>
                },
            );
            let v138: leptos::View = leptos::IntoView::into_view(v136);
            let v141: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v143 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method861(v0_1.clone())));
            let v145: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v141), string(">{v143()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v148: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v143()}
                    </td>
                },
            );
            let v150: leptos::View = leptos::IntoView::into_view(v148);
            let v153: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v155 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method862(v0_1.clone())));
            let v157: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v153), string(">{v155()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v160: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v155()}
                    </td>
                },
            );
            let v162: leptos::View = leptos::IntoView::into_view(v160);
            let v165: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v167 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method863(v0_1)));
            let v169: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v165), string(">{v167()}</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v172: leptos::HtmlElement<leptos::html::Td> = Dice_ui::method558(
                leptos::view! {
                    <td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">
                        {v167()}
                    </td>
                },
            );
            let v177: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v15,
                v27,
                v39,
                v51,
                v78,
                v90,
                v102,
                v114,
                v126,
                v138,
                v150,
                v162,
                leptos::IntoView::into_view(v172),
            ])));
            let v179: Vec<leptos::View> = v177.to_vec();
            leptos::Fragment::new(v179)
        }
        pub fn method843(v0_1: LrcPtr<Dice_ui::Heap5>, v1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure448(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure447(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::HtmlElement<leptos::html::Tr> {
            let v6: string = string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
            let v8 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method843(
                _arg.2.clone(),
                _arg.0.clone(),
            )));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<tr "), v6), string(">{v8()}</")),
                            string("tr"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            leptos::view! { <tr class="odd:bg-gray-50 dark:odd:bg-gray-800/50">{v8()}</tr> }
        }
        pub fn method842(
        ) -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), leptos::HtmlElement<leptos::html::Tr>>
        {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure447((), arg10_0040)
            })
        }
        pub fn method864(
            v0_1: Vec<leptos::HtmlElement<leptos::html::Tr>>,
        ) -> Vec<leptos::HtmlElement<leptos::html::Tr>> {
            v0_1
        }
        pub fn closure466(
            unitVar: (),
            v0_1: leptos::HtmlElement<leptos::html::Tr>,
        ) -> leptos::View {
            let v1: leptos::HtmlElement<leptos::html::Tr> = Dice_ui::method549(v0_1);
            leptos::IntoView::into_view(v1)
        }
        pub fn method865() -> Func1<leptos::HtmlElement<leptos::html::Tr>, leptos::View> {
            Func1::new(move |v: leptos::HtmlElement<leptos::html::Tr>| Dice_ui::closure466((), v))
        }
        pub fn method866(
            v0_1: Array<leptos::HtmlElement<leptos::html::Tr>>,
        ) -> Array<leptos::HtmlElement<leptos::html::Tr>> {
            v0_1
        }
        pub fn closure468(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method427()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method868() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure468((), ()))
        }
        pub fn closure469(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method537()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method869() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure469((), ()))
        }
        pub fn closure470(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method540()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method870() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure470((), ()))
        }
        pub fn closure471(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method542()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method871() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure471((), ()))
        }
        pub fn method873() -> string {
            string("Action")
        }
        pub fn closure472(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method873()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method872() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure472((), ()))
        }
        pub fn method875() -> string {
            string("Action Method")
        }
        pub fn closure473(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method875()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method874() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure473((), ()))
        }
        pub fn closure474(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method798()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method876() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure474((), ()))
        }
        pub fn closure475(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method544()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method877() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure475((), ()))
        }
        pub fn closure476(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method815()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method878() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure476((), ()))
        }
        pub fn method881(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method881: loop {
                break '_method881 (if v1.get().clone() < count(v0_1.get().clone()) {
                    let v5: std::string::String = Dice_ui::method70(v0_1[v1.get().clone()].clone());
                    if length(fable_library_rust::String_::fromString(v5)) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = v1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method881;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method880(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method880: loop {
                break '_method880 (if v1.get().clone() < count(v0_1.get().clone()) {
                    if Dice_ui::method881(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l5.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = v1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method880;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure477(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v9: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(
                if false == Dice_ui::method880(v0_1, 0_i32) {
                    string("")
                } else {
                    string("Logs")
                },
            )));
            let v11: &str = fable_library_rust::String_::LrcStr::as_str(&v9);
            let v13: std::string::String = String::from(v11);
            let v15: leptos::leptos_dom::Text = leptos::html::text(v13);
            let v20: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v15),
            ])));
            let v22: Vec<leptos::View> = v20.to_vec();
            leptos::Fragment::new(v22)
        }
        pub fn method879(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure477(v0_1.clone(), ())
            })
        }
        pub fn closure478(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method804()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method882() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure478((), ()))
        }
        pub fn closure479(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method821()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method883() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure479((), ()))
        }
        pub fn closure480(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method827()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method884() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure480((), ()))
        }
        pub fn closure481(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method833()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method885() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure481((), ()))
        }
        pub fn closure467(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method868()));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v4), string(">{v6()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v6()}
                    </th>
                },
            );
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method869()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v17), string(">{v19()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v19()}
                    </th>
                },
            );
            let v26: leptos::View = leptos::IntoView::into_view(v24);
            let v29: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v31 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method870()));
            let v33: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v29), string(">{v31()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v31()}
                    </th>
                },
            );
            let v38: leptos::View = leptos::IntoView::into_view(v36);
            let v41: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v43 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method871()));
            let v45: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v41), string(">{v43()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v48: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v43()}
                    </th>
                },
            );
            let v50: leptos::View = leptos::IntoView::into_view(v48);
            let v53: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v55 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method872()));
            let v57: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v53), string(">{v55()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v60: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v55()}
                    </th>
                },
            );
            let v62: leptos::View = leptos::IntoView::into_view(v60);
            let v65: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v67 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method874()));
            let v69: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v65), string(">{v67()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v72: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v67()}
                    </th>
                },
            );
            let v74: leptos::View = leptos::IntoView::into_view(v72);
            let v77: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v79 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method876()));
            let v81: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v77), string(">{v79()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v84: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v79()}
                    </th>
                },
            );
            let v86: leptos::View = leptos::IntoView::into_view(v84);
            let v89: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v91 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method877()));
            let v93: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v89), string(">{v91()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v96: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v91()}
                    </th>
                },
            );
            let v98: leptos::View = leptos::IntoView::into_view(v96);
            let v101: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v103 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method878()));
            let v105: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v101), string(">{v103()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v108: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v103()}
                    </th>
                },
            );
            let v110: leptos::View = leptos::IntoView::into_view(v108);
            let v113: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v115 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method879(v0_1)));
            let v117: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v113), string(">{v115()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v120: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v115()}
                    </th>
                },
            );
            let v122: leptos::View = leptos::IntoView::into_view(v120);
            let v125: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v127 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method882()));
            let v129: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v125), string(">{v127()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v132: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v127()}
                    </th>
                },
            );
            let v134: leptos::View = leptos::IntoView::into_view(v132);
            let v137: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v139 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method883()));
            let v141: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v137), string(">{v139()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v144: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v139()}
                    </th>
                },
            );
            let v146: leptos::View = leptos::IntoView::into_view(v144);
            let v149: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v151 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method884()));
            let v153: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v149), string(">{v151()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v156: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v151()}
                    </th>
                },
            );
            let v158: leptos::View = leptos::IntoView::into_view(v156);
            let v161: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v163 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method885()));
            let v165: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v161), string(">{v163()}</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v168: leptos::HtmlElement<leptos::html::Th> = Dice_ui::method538(
                leptos::view! {
                    <th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
                        {v163()}
                    </th>
                },
            );
            let v173: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v14,
                v26,
                v38,
                v50,
                v62,
                v74,
                v86,
                v98,
                v110,
                v122,
                v134,
                v146,
                v158,
                leptos::IntoView::into_view(v168),
            ])));
            let v175: Vec<leptos::View> = v173.to_vec();
            leptos::Fragment::new(v175)
        }
        pub fn method867(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure467(v0_1.clone(), ())
            })
        }
        pub fn closure363(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
            v3: leptos::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v4: leptos::ReadSignal<bool> = Dice_ui::method94(v3);
            let v27: leptos::View = if leptos::SignalGet::get(&v4) {
                let v10: string = string(" class=\"px-[12px] py-[10px]\"");
                let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method728(v0_1.clone())));
                let v15: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v10), string(">{v12()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v18: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                    leptos::view! { <div class="px-[12px] py-[10px]">{v12()}</div> },
                );
                leptos::IntoView::into_view(v18)
            } else {
                let v24: Array<leptos::View> =
                    Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<
                        leptos::View,
                    >(
                    ))));
                leptos::CollectView::collect_view(v24.to_vec())
            };
            let v28: leptos::Memo<
                Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>,
            > = Dice_ui::method157(v2);
            let v183: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v27,
                if count(v28()) as u64 == 0_u64 {
                    let v36: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v38 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method526()));
                    let v41: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<div "), v36), string(">{v38()}</")),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v44: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                        leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v38()}</div> },
                    );
                    leptos::IntoView::into_view(v44)
                } else {
                    let v47: leptos::Memo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = Dice_ui::method327(v1);
                    let v49: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v47();
                    let v52: Dice_ui::US51 = match &v49 {
                        Err(v49_1_0) => Dice_ui::closure132((), v49_1_0.clone()),
                        Ok(v49_0_0) => Dice_ui::closure131((), v49_0_0.clone()),
                    };
                    let v61: Dice_ui::US49 = match &v52 {
                        Dice_ui::US51::US51_1(v52_1_0) => Dice_ui::US49::US49_1(defaultValue(
                            Dice_ui::US50::US50_0,
                            map(
                                Func1::new(
                                    move |v_2: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                                        Dice_ui::closure133((), v_2)
                                    },
                                ),
                                v52_1_0.clone(),
                            ),
                        )),
                        Dice_ui::US51::US51_0(v52_0_0) => Dice_ui::US49::US49_0(v52_0_0.clone()),
                    };
                    match &v61 {
                        Dice_ui::US49::US49_1(v61_1_0) => {
                            let v62: Dice_ui::US50 = v61_1_0.clone();
                            if let Dice_ui::US50::US50_1(v62_1_0) = &v62 {
                                let v63: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> = match &v62
                                {
                                    Dice_ui::US50::US50_1(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                let v65: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> =
                                    Dice_ui::method74(v0_1.l0.clone());
                                let v69: leptos::RwSignal<LrcPtr<Dice_ui::Heap0>> =
                                    Dice_ui::method97(
                                        (leptos::SignalGetUntracked::get_untracked(&v65))
                                            .l1
                                            .clone(),
                                    );
                                if if let Dice_ui::US1::US1_0 = &(leptos::SignalGet::get(&v69)).l4 {
                                    true
                                } else {
                                    false
                                } {
                                    let v75:
                                                                                              string =
                                                                                          string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                    let v78: string = append(
                                        append(append(string(" "), v75), string("")),
                                        string(""),
                                    );
                                    let v80 = Dice_ui::method439(Dice_ui::method438(
                                        Dice_ui::method748(v63.clone()),
                                    ));
                                    let v83: string = append(
                                        append(
                                            string("leptos::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<div "), v78),
                                                        string(">{v80()}</"),
                                                    ),
                                                    string("div"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v86: leptos::HtmlElement<leptos::html::Div> =
                                        Dice_ui::method452(
                                            leptos::view! {
                                                <div class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">
                                                    {v80()}
                                                </div>
                                            },
                                        );
                                    leptos::IntoView::into_view(v86)
                                } else {
                                    let v89 = Dice_ui::method842();
                                    let v90: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        Dice_ui::method314(v63.clone());
                                    let v92: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        v90.to_vec();
                                    let v95: Vec<leptos::HtmlElement<leptos::html::Tr>> =
                                        Dice_ui::method864(
                                            v92.iter().map(|x| v89(x.clone())).collect(),
                                        );
                                    let v97: Array<leptos::HtmlElement<leptos::html::Tr>> =
                                        fable_library_rust::NativeArray_::array_from(v95);
                                    let v98 = Dice_ui::method865();
                                    let v99: Array<leptos::HtmlElement<leptos::html::Tr>> =
                                        Dice_ui::method866(v97);
                                    let v101: Vec<leptos::HtmlElement<leptos::html::Tr>> =
                                        v99.to_vec();
                                    let v104: Vec<leptos::View> = Dice_ui::method446(
                                        v101.iter().map(|x| v98(x.clone())).collect(),
                                    );
                                    let v107: Array<leptos::View> = Dice_ui::method437(
                                        fable_library_rust::NativeArray_::array_from(v104),
                                    );
                                    let v109: Vec<leptos::View> = v107.to_vec();
                                    let v111: leptos::Fragment = leptos::Fragment::new(v109);
                                    let v114 = Dice_ui::method439(Dice_ui::method438(
                                        Dice_ui::method867(v63),
                                    ));
                                    let v118: string =
                                        string("leptos::view! { <tr >{v114()}</tr> }");
                                    let v121: leptos::HtmlElement<leptos::html::Tr> =
                                        Dice_ui::method549(leptos::view! { <tr>{v114()}</tr> });
                                    let v126: Array<leptos::View> =
                                        Dice_ui::method437(Dice_ui::method421(new_array(&[
                                            leptos::IntoView::into_view(v121),
                                        ])));
                                    let v128: Vec<leptos::View> = v126.to_vec();
                                    let v133:
                                                                                              string =
                                                                                          string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                    let v135 = Dice_ui::method439(Dice_ui::method438(
                                        Dice_ui::method566(leptos::Fragment::new(v128), v111),
                                    ));
                                    let v138: string = append(
                                        append(
                                            string("leptos::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<table "), v133),
                                                        string(">{v135()}</"),
                                                    ),
                                                    string("table"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v141: leptos::HtmlElement<leptos::html::Table> =
                                        Dice_ui::method571(
                                            leptos::view! {
                                                <table class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">
                                                    {v135()}
                                                </table>
                                            },
                                        );
                                    leptos::IntoView::into_view(v141)
                                }
                            } else {
                                let v148: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v150 =
                                    Dice_ui::method439(Dice_ui::method438(Dice_ui::method572()));
                                let v153: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v148),
                                                    string(">{v150()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v156: leptos::HtmlElement<leptos::html::Div> =
                                    Dice_ui::method452(
                                        leptos::view! { <div class="grid place-content-center py-[10vh]">{v150()}</div> },
                                    );
                                leptos::IntoView::into_view(v156)
                            }
                        }
                        Dice_ui::US49::US49_0(v61_0_0) => {
                            let v161: std::string::String = Dice_ui::method70(v61_0_0.clone());
                            let v167: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v169 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method512(
                                fable_library_rust::String_::fromString(v161),
                            )));
                            let v172: string = append(
                                append(
                                    string("leptos::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v167),
                                                string(">{v169()}</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v175: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                                leptos::view! { <div class="flex flex-1 items-center [gap:4px] [padding:5px]">{v169()}</div> },
                            );
                            leptos::IntoView::into_view(v175)
                        }
                    }
                },
            ])));
            let v185: Vec<leptos::View> = v183.to_vec();
            leptos::Fragment::new(v185)
        }
        pub fn method727(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::Memo<Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>>,
            v3: leptos::ReadSignal<bool>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure363(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn method887(v0_1: leptos::View) -> Func0<string> {
            Func0::new(move || Dice_ui::closure231((), ()))
        }
        pub fn method888(v0_1: leptos::View) -> Func0<bool> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure484(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn method890(v0_1: leptos::View) -> Func0<string> {
            Func0::new(move || Dice_ui::closure484((), ()))
        }
        pub fn method894() -> string {
            string("Transactions")
        }
        pub fn closure487(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method894()));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v14: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v9),
            ])));
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method893(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure487(v0_1.clone(), ())
            })
        }
        pub fn closure486(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method893(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">{v6()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">
                        {v6()}
                    </span>
                },
            );
            let v17: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v12),
            ])));
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method892(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure486(v0_1.clone(), ())
            })
        }
        pub fn closure485(v0_1: leptos::View, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex items-center gap-2\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method892(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex items-center gap-2">{v6()}</div> },
            );
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method480()));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v17), string(">{v19()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v19()}</span> },
            );
            let v30: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v14,
                leptos::IntoView::into_view(v25),
            ])));
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method891(v0_1: leptos::View) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure485(v0_1.clone(), ())
            })
        }
        pub fn closure483(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method890(v0_1.clone());
            let v7: string = string("r#\"[margin-right:40px]\"#");
            let v8: &'static str = r#"[margin-right:40px]"#;
            let v9: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 \".to_owned() + v8 + \" \" + &v2()");
            let v12: string = append(append(append(string(" "), v9), string("")), string(""));
            let v14 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method891(v0_1)));
            let v17: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v12), string(">{v14()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::HtmlElement<leptos::html::Summary> = Dice_ui::method482(
                leptos::view! {
                    <summary class=move || {
                        "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 "
                            .to_owned() + v8 + " " + &v2()
                    }>{v14()}</summary>
                },
            );
            let v22: leptos::View = leptos::IntoView::into_view(v20);
            let v25: string = string(" class=\"flex flex-1 flex-col\"");
            let v27 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method483(v1)));
            let v30: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v25), string(">{v27()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v33: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v27()}</div> },
            );
            let v38: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v22,
                leptos::IntoView::into_view(v33),
            ])));
            let v40: Vec<leptos::View> = v38.to_vec();
            leptos::Fragment::new(v40)
        }
        pub fn method889(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure483(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure482(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method887(v0_1.clone());
            let v3 = Dice_ui::method888(v0_1.clone());
            let v7: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method474(v0_1.clone())));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">{v9()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v9()}</div> },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v18: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2()");
            let v22: string = append(
                append(
                    string(" open=move || v3()"),
                    append(append(append(string(" "), v18), string("")), string("")),
                ),
                string(""),
            );
            let v24 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method889(v0_1, v1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v22), string(">{v24()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Details> = Dice_ui::method484(
                leptos::view! {
                    <details
                        open=move || v3()
                        class=move || {
                            "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                                .to_owned() + &v2()
                        }
                    >
                        {v24()}
                    </details>
                },
            );
            let v35: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                leptos::IntoView::into_view(v30),
            ])));
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method886(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure482(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure489(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method894()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method896() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure489((), ()))
        }
        pub fn closure491(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn method898() -> Func0<string> {
            Func0::new(move || Dice_ui::closure491((), ()))
        }
        pub fn closure490(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            > = Dice_ui::method327(v0_1);
            let v3: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v1();
            let v6: std::string::String = Dice_ui::method70(format!("{:#?}", v3));
            let v8: string = fable_library_rust::String_::fromString(v6);
            let v9 = Dice_ui::method898();
            let v10: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v9()");
            let v13: string = append(append(append(string(" "), v10), string("")), string(""));
            let v15 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method714(v8)));
            let v18: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v13), string(">{v15()}</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::HtmlElement<leptos::html::Pre> = Dice_ui::method451(
                leptos::view! {
                    <pre class=move || {
                        "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] "
                            .to_owned() + &v9()
                    }>{v15()}</pre>
                },
            );
            let v26: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v21),
            ])));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method897(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure490(v0_1.clone(), ())
            })
        }
        pub fn closure488(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method661(Dice_ui::method704());
            let v3 = Dice_ui::method705();
            let v4 = Dice_ui::method706();
            let v7: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] \".to_owned() + &v4() + \" \" + &v3() + \" \" + &v2()");
            let v10: string = append(append(append(string(" "), v7), string("")), string(""));
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method674(
                Dice_ui::method896(),
                Dice_ui::method897(v0_1),
            )));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v10), string(">{v12()}</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: Array<leptos::HtmlElement<leptos::html::Dl>> = Dice_ui::method690(new_array(
                &[
                    leptos::view! {
                        <dl class=move || {
                            "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] "
                                .to_owned() + &v4() + " " + &v3() + " " + &v2()
                        }>{v12()}</dl>
                    },
                ],
            ));
            let v20 = Dice_ui::method691();
            let v21: Array<leptos::HtmlElement<leptos::html::Dl>> = Dice_ui::method693(v19);
            let v23: Vec<leptos::HtmlElement<leptos::html::Dl>> = v21.to_vec();
            let v26: Vec<leptos::View> =
                Dice_ui::method446(v23.iter().map(|x| v20(x.clone())).collect());
            let v29: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v26));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method895(
            v0_1: leptos::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure488(v0_1.clone(), ())
            })
        }
        pub fn method900() -> Func0<string> {
            Func0::new(move || Dice_ui::closure231((), ()))
        }
        pub fn method901() -> Func0<bool> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure494(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn method903() -> Func0<string> {
            Func0::new(move || Dice_ui::closure494((), ()))
        }
        pub fn closure497(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method682()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method906() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure497((), ()))
        }
        pub fn closure496(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method906()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">{v5()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! {
                    <span class="[font-size:14px] [line-height:21px] [padding-right:11px]">
                        {v5()}
                    </span>
                },
            );
            let v16: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v11),
            ])));
            let v18: Vec<leptos::View> = v16.to_vec();
            leptos::Fragment::new(v18)
        }
        pub fn method905() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure496((), ()))
        }
        pub fn closure495(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v5 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method905()));
            let v8: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">{v5()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex items-center gap-2">{v5()}</div> },
            );
            let v13: leptos::View = leptos::IntoView::into_view(v11);
            let v16: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v18 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method480()));
            let v21: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v16), string(">{v18()}</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::HtmlElement<leptos::html::Span> = Dice_ui::method448(
                leptos::view! { <span class="shrink-0 transition duration-300 pt-[2px]">{v18()}</span> },
            );
            let v29: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v13,
                leptos::IntoView::into_view(v24),
            ])));
            let v31: Vec<leptos::View> = v29.to_vec();
            leptos::Fragment::new(v31)
        }
        pub fn method904() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure495((), ()))
        }
        pub fn closure493(v0_1: Func0<leptos::Fragment>, unitVar: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method903();
            let v6: string = string("r#\"\"#");
            let v7: &'static str = r#""#;
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 \".to_owned() + v7 + \" \" + &v1()");
            let v10: string = append(append(append(string(" "), v8), string("")), string(""));
            let v12 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method904()));
            let v15: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<summary "), v10), string(">{v12()}</")),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::HtmlElement<leptos::html::Summary> = Dice_ui::method482(
                leptos::view! {
                    <summary class=move || {
                        "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 bg-gray-300 hover:bg-gray-200 hover:text-gray-700 "
                            .to_owned() + v7 + " " + &v1()
                    }>{v12()}</summary>
                },
            );
            let v20: leptos::View = leptos::IntoView::into_view(v18);
            let v23: string = string(" class=\"flex flex-1 flex-col\"");
            let v25 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method483(v0_1)));
            let v28: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v23), string(">{v25()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 flex-col">{v25()}</div> },
            );
            let v36: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v20,
                leptos::IntoView::into_view(v31),
            ])));
            let v38: Vec<leptos::View> = v36.to_vec();
            leptos::Fragment::new(v38)
        }
        pub fn method902(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure493(v0_1.clone(), ())
            })
        }
        pub fn closure492(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2 = Dice_ui::method900();
            let v3 = Dice_ui::method901();
            let v7: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method474(v0_1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">{v9()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="[position:absolute] [right:0] [top:0]">{v9()}</div> },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v18: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2()");
            let v22: string = append(
                append(
                    string(" open=move || v3()"),
                    append(append(append(string(" "), v18), string("")), string("")),
                ),
                string(""),
            );
            let v24 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method902(v1)));
            let v27: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<details "), v22), string(">{v24()}</")),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::HtmlElement<leptos::html::Details> = Dice_ui::method484(
                leptos::view! {
                    <details
                        open=move || v3()
                        class=move || {
                            "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 "
                                .to_owned() + &v2()
                        }
                    >
                        {v24()}
                    </details>
                },
            );
            let v35: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                leptos::IntoView::into_view(v30),
            ])));
            let v37: Vec<leptos::View> = v35.to_vec();
            leptos::Fragment::new(v37)
        }
        pub fn method899(
            v0_1: leptos::View,
            v1: Func0<leptos::Fragment>,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure492(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure498(v0_1: leptos::Fragment, unitVar: ()) -> leptos::Fragment {
            v0_1
        }
        pub fn method907(v0_1: leptos::Fragment) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure498(v0_1.clone(), ())
            })
        }
        pub fn closure53(v0_1: leptos::ReadSignal<Dice_ui::US20>, unitVar: ()) -> leptos::Fragment {
            let v1: leptos::ReadSignal<Dice_ui::US20> = Dice_ui::method133(v0_1);
            let v3: Dice_ui::US20 = leptos::SignalGet::get(&v1);
            let v580: Dice_ui::US24 = match &v3 {
                Dice_ui::US20::US20_1(v3_1_0) => {
                    let v6: string = Dice_ui::method0(string("dice.render (1)"));
                    leptos::logging::log!("{}", v6);
                    {
                        let v9: Option<LrcPtr<Dice_ui::Heap2>> =
                            leptos::use_context::<std::rc::Rc<Heap2>>();
                        let v11: LrcPtr<Dice_ui::Heap2> = v9.unwrap();
                        let v13: string = Dice_ui::method0(string("use_transactions.render (1)"));
                        leptos::logging::log!("{}", v13);
                        {
                            let v15 = Dice_ui::method134(v11.clone());
                            let v17: leptos::Memo<Array<string>> =
                                leptos::create_memo(move |_| v15());
                            let v18 = Dice_ui::method145(v17.clone());
                            let v20: leptos::Memo<
                                Array<(string, bool, string, bool, Dice_ui::US25, string)>,
                            > = leptos::create_memo(move |_| v18());
                            let v21 = Dice_ui::method149(v11.clone(), v17);
                            let v23: leptos::Memo<
                                Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>,
                            > = leptos::create_memo(move |_| v21());
                            let v24 = Dice_ui::method156(v23.clone());
                            let v26: leptos::Memo<
                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                            > = leptos::create_memo(move |_| v24());
                            let v27 = Dice_ui::method170(v23.clone());
                            let v29: leptos::Memo<Array<string>> =
                                leptos::create_memo(move |_| v27());
                            let v31: string =
                                Dice_ui::method0(string("state_core.use_requests (1)"));
                            leptos::logging::log!("{}", v31);
                            {
                                let v34: string =
                                    Dice_ui::method0(string("state_core.use_database (1)"));
                                leptos::logging::log!("{}", v34);
                                {
                                    let v37: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                                        Dice_ui::method21(Dice_ui::method20());
                                    let v38 = Dice_ui::method177(v37.clone());
                                    let v40: leptos::Memo<Option<rexie::Rexie>> =
                                        leptos::create_memo(move |_| v38());
                                    let v42: leptos::Resource<
                                        (
                                            Option<rexie::Rexie>,
                                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                                        ),
                                        Result<
                                            Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                            std::string::String,
                                        >,
                                    > = Dice_ui::method180(Dice_ui::method178(
                                        v26.clone(),
                                        v37.clone(),
                                    ));
                                    let v43 = Dice_ui::method193(v42.clone());
                                    let v45: leptos::Memo<
                                        Option<
                                            Result<
                                                Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                std::string::String,
                                            >,
                                        >,
                                    > = leptos::create_memo(move |_| v43());
                                    let v47: leptos::Resource<
                                        (
                                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                                            Option<
                                                Result<
                                                    Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        ),
                                        Result<Array<Option<string>>, std::string::String>,
                                    > = Dice_ui::method202(Dice_ui::method200(
                                        v26.clone(),
                                        v45.clone(),
                                    ));
                                    let v48 = Dice_ui::method227(v26.clone(), v40);
                                    let v51 = Dice_ui::method240(
                                        v26,
                                        v45,
                                        v47,
                                        leptos::create_action(move |value: &std::rc::Rc<Heap4>| {
                                            v48(value.clone())
                                        }),
                                    );
                                    let v54 =
                                        Dice_ui::method256(v37, v42, Func0::new(move || v51()));
                                    let v56: leptos::Memo<
                                        Array<
                                            Result<
                                                Option<
                                                    Array<(
                                                        Array<(
                                                            std::string::String,
                                                            Option<std::string::String>,
                                                        )>,
                                                        f64,
                                                        u32,
                                                        std::string::String,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        bool,
                                                        f64,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                >,
                                                std::string::String,
                                            >,
                                        >,
                                    > = leptos::create_memo(move |_| v54());
                                    let v58: string =
                                            append(append(string("use_transactions.render (7) / root func0 / result: "),
                                                          sprintf!("{:?}",
                                                                   v56.clone())),
                                                   string(""));
                                    let v64: string =
                                        Dice_ui::method0(if length(v58.clone()) <= 200_i32 {
                                            v58.clone()
                                        } else {
                                            append(substring2(v58, 0_i32, 200_i32), string("..."))
                                        });
                                    leptos::logging::log!("{}", v64);
                                    {
                                        let v66 = Dice_ui::method284(v29, v56);
                                        let v68: leptos::Memo<
                                            Result<
                                                Option<
                                                    Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
                                                >,
                                                std::string::String,
                                            >,
                                        > = leptos::create_memo(move |_| v66());
                                        let v69 = Dice_ui::method326(v68.clone());
                                        let v72 =
                                            Dice_ui::method341(leptos::create_memo(move |_| v69()));
                                        let v74: leptos::Memo<
                                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                                        > = leptos::create_memo(move |_| v72());
                                        let v76: string =
                                            Dice_ui::method0(string("state_core.use_requests (1)"));
                                        leptos::logging::log!("{}", v76);
                                        {
                                            let v79: string = Dice_ui::method0(string(
                                                "state_core.use_database (1)",
                                            ));
                                            leptos::logging::log!("{}", v79);
                                            {
                                                let v82: leptos::Resource<
                                                    Dice_ui::US2,
                                                    rexie::Rexie,
                                                > = Dice_ui::method21(Dice_ui::method20());
                                                let v83 = Dice_ui::method177(v82.clone());
                                                let v85: leptos::Memo<Option<rexie::Rexie>> =
                                                    leptos::create_memo(move |_| v83());
                                                let v87: leptos::Resource<
                                                    (
                                                        Option<rexie::Rexie>,
                                                        Array<(
                                                            bool,
                                                            string,
                                                            bool,
                                                            Dice_ui::US25,
                                                            string,
                                                        )>,
                                                    ),
                                                    Result<
                                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                        std::string::String,
                                                    >,
                                                > = Dice_ui::method180(Dice_ui::method178(
                                                    v74.clone(),
                                                    v82.clone(),
                                                ));
                                                let v88 = Dice_ui::method193(v87.clone());
                                                let v90: leptos::Memo<
                                                    Option<
                                                        Result<
                                                            Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                            std::string::String,
                                                        >,
                                                    >,
                                                > = leptos::create_memo(move |_| v88());
                                                let v92: leptos::Resource<
                                                    (
                                                        Array<(
                                                            bool,
                                                            string,
                                                            bool,
                                                            Dice_ui::US25,
                                                            string,
                                                        )>,
                                                        Option<
                                                            Result<
                                                                Array<
                                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                                >,
                                                                std::string::String,
                                                            >,
                                                        >,
                                                    ),
                                                    Result<
                                                        Array<Option<string>>,
                                                        std::string::String,
                                                    >,
                                                > = Dice_ui::method202(Dice_ui::method200(
                                                    v74.clone(),
                                                    v90.clone(),
                                                ));
                                                let v93 = Dice_ui::method227(v74.clone(), v85);
                                                let v96 = Dice_ui::method343(
                                                    v74,
                                                    v90,
                                                    v92,
                                                    leptos::create_action(
                                                        move |value: &std::rc::Rc<Heap4>| {
                                                            v93(value.clone())
                                                        },
                                                    ),
                                                );
                                                let v99 = Dice_ui::method349(
                                                    v82,
                                                    v87,
                                                    Func0::new(move || v96()),
                                                );
                                                let v101:
                                                            leptos::Memo<Array<Result<Option<(Option<(Option<(Option<std::string::String>,
                                                                                                              Option<std::string::String>)>,
                                                                                                      std::string::String,
                                                                                                      i32,
                                                                                                      std::string::String,
                                                                                                      std::string::String,
                                                                                                      std::string::String)>,
                                                                                              Option<std::string::String>,
                                                                                              std::string::String,
                                                                                              Option<(Array<(std::string::String,
                                                                                                             Array<std::collections::HashMap<std::string::String, std::string::String>>,
                                                                                                             std::string::String,
                                                                                                             Array<std::string::String>,
                                                                                                             Array<std::string::String>,
                                                                                                             std::string::String,
                                                                                                             std::string::String,
                                                                                                             std::string::String,
                                                                                                             std::string::String)>,
                                                                                                      Array<(std::string::String,
                                                                                                             std::string::String,
                                                                                                             std::string::String,
                                                                                                             u64,
                                                                                                             Array<std::string::String>,
                                                                                                             Array<(std::string::String,
                                                                                                                    std::string::String,
                                                                                                                    std::string::String)>,
                                                                                                             u8,
                                                                                                             Array<std::string::String>,
                                                                                                             std::collections::HashMap<std::string::String, std::string::String>)>)>)>,
                                                                                      std::string::String>>> =
                                                        leptos::create_memo(move |_| { v99() });
                                                let v103: string =
                                                        append(append(string("use_transactions.render (12) / rpc_response func0 / result: "),
                                                                      sprintf!("{:?}",
                                                                               v101.clone())),
                                                               string(""));
                                                let v109: string = Dice_ui::method0(
                                                    if length(v103.clone()) <= 200_i32 {
                                                        v103.clone()
                                                    } else {
                                                        append(
                                                            substring2(v103, 0_i32, 200_i32),
                                                            string("..."),
                                                        )
                                                    },
                                                );
                                                leptos::logging::log!("{}", v109);
                                                {
                                                    let v111 = Dice_ui::method395();
                                                    let v113: leptos::Action<
                                                        LrcPtr<Dice_ui::Heap6>,
                                                        Result<Dice_ui::US60, std::string::String>,
                                                    > = leptos::create_action(
                                                        move |value: &std::rc::Rc<Heap6>| {
                                                            v111(value.clone())
                                                        },
                                                    );
                                                    let v114 = Dice_ui::method400(v113.clone());
                                                    let v117 = Dice_ui::method405(
                                                        leptos::create_memo(move |_| v114()),
                                                    );
                                                    let v119: leptos::Memo<Option<string>> =
                                                        leptos::create_memo(move |_| v117());
                                                    let v120 = Dice_ui::method407(v11.clone());
                                                    let v122: leptos::Memo<Dice_ui::US34> =
                                                        leptos::create_memo(move |_| v120());
                                                    let v123 = Dice_ui::method408(v11.clone());
                                                    let v126 = Dice_ui::method412(
                                                        leptos::create_memo(move |_| v123()),
                                                    );
                                                    let v128: leptos::Memo<
                                                        Vec<(
                                                            i32,
                                                            leptos::ReadSignal<std::string::String>,
                                                        )>,
                                                    > = leptos::create_memo(move |_| v126());
                                                    let v132: Array<leptos::View> =
                                                        Dice_ui::method423(Dice_ui::method422(
                                                            Dice_ui::method421(new_empty::<
                                                                leptos::View,
                                                            >(
                                                            )),
                                                        ));
                                                    let v140: string =
                                                            string(" class=\"flex flex-col [position:relative]\"");
                                                    let v142 = Dice_ui::method439(
                                                        Dice_ui::method438(Dice_ui::method517(
                                                            leptos::CollectView::collect_view(
                                                                v132.to_vec(),
                                                            ),
                                                            Dice_ui::method470(Dice_ui::method424(
                                                                v11, v113, v119, v122, v128,
                                                            )),
                                                        )),
                                                    );
                                                    let v145: string = append(
                                                        append(
                                                            string("leptos::view! { "),
                                                            append(
                                                                append(
                                                                    append(
                                                                        append(
                                                                            string("<div "),
                                                                            v140,
                                                                        ),
                                                                        string(">{v142()}</"),
                                                                    ),
                                                                    string("div"),
                                                                ),
                                                                string(">"),
                                                            ),
                                                        ),
                                                        string(" }"),
                                                    );
                                                    let v148: leptos::HtmlElement<
                                                        leptos::html::Div,
                                                    > = Dice_ui::method452(
                                                        leptos::view! { <div class="flex flex-col [position:relative]">{v142()}</div> },
                                                    );
                                                    let v150: leptos::View =
                                                        leptos::IntoView::into_view(v148);
                                                    let v154: Array<leptos::View> =
                                                        Dice_ui::method423(Dice_ui::method422(
                                                            Dice_ui::method421(new_empty::<
                                                                leptos::View,
                                                            >(
                                                            )),
                                                        ));
                                                    let v161: string =
                                                            string(" class=\"flex flex-col [position:relative]\"");
                                                    let v163 = Dice_ui::method439(
                                                        Dice_ui::method438(Dice_ui::method574(
                                                            leptos::CollectView::collect_view(
                                                                v154.to_vec(),
                                                            ),
                                                            Dice_ui::method470(Dice_ui::method525(
                                                                v101, v68, v23,
                                                            )),
                                                        )),
                                                    );
                                                    let v165: string = append(
                                                        append(
                                                            string("leptos::view! { "),
                                                            append(
                                                                append(
                                                                    append(
                                                                        append(
                                                                            string("<div "),
                                                                            v161,
                                                                        ),
                                                                        string(">{v163()}</"),
                                                                    ),
                                                                    string("div"),
                                                                ),
                                                                string(">"),
                                                            ),
                                                        ),
                                                        string(" }"),
                                                    );
                                                    let v168: leptos::HtmlElement<
                                                        leptos::html::Div,
                                                    > = Dice_ui::method452(
                                                        leptos::view! { <div class="flex flex-col [position:relative]">{v163()}</div> },
                                                    );
                                                    let v173: Array<leptos::View> =
                                                        Dice_ui::method437(Dice_ui::method421(
                                                            new_array(&[
                                                                v150,
                                                                leptos::IntoView::into_view(v168),
                                                            ]),
                                                        ));
                                                    let v175: Vec<leptos::View> = v173.to_vec();
                                                    Dice_ui::US24::US24_1(leptos::Fragment::new(
                                                        v175,
                                                    ))
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Dice_ui::US20::US20_2 => {
                    let v180: string = Dice_ui::method0(string("lists.render ()"));
                    leptos::logging::log!("{}", v180);
                    {
                        let v183: Option<LrcPtr<Dice_ui::Heap2>> =
                            leptos::use_context::<std::rc::Rc<Heap2>>();
                        let v185: LrcPtr<Dice_ui::Heap2> = v183.unwrap();
                        let v188: string =
                            Dice_ui::method6(Dice_ui::method18(Dice_ui::method583()));
                        let v190: &str = fable_library_rust::String_::LrcStr::as_str(&v188);
                        let v192: std::string::String = String::from(v190);
                        let v194: leptos::leptos_dom::Text = leptos::html::text(v192);
                        let v199: Array<leptos::View> =
                            Dice_ui::method437(Dice_ui::method421(new_array(&[
                                leptos::IntoView::into_view(v194),
                            ])));
                        let v201: Vec<leptos::View> = v199.to_vec();
                        Dice_ui::US24::US24_1(leptos::Fragment::new(v201))
                    }
                }
                Dice_ui::US20::US20_3 => {
                    let v428: string = Dice_ui::method0(string("settings.render ()"));
                    leptos::logging::log!("{}", v428);
                    {
                        let v431: Option<LrcPtr<Dice_ui::Heap2>> =
                            leptos::use_context::<std::rc::Rc<Heap2>>();
                        let v433: LrcPtr<Dice_ui::Heap2> = v431.unwrap();
                        let v434 = Dice_ui::method584(v433.clone());
                        let v436: leptos::Memo<
                            Vec<
                                LrcPtr<(
                                    i32,
                                    (
                                        leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                        leptos::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                                    ),
                                )>,
                            >,
                        > = leptos::create_memo(move |_| v434());
                        let v437: i32 = Dice_ui::method588();
                        let patternInput: (leptos::ReadSignal<i32>, leptos::WriteSignal<i32>) =
                            leptos::create_signal(v437);
                        let v440: leptos::WriteSignal<i32> = patternInput.1.clone();
                        let v441 = Dice_ui::method589(v436.clone(), patternInput.0.clone());
                        let v443: leptos::Memo<
                            Vec<(
                                i32,
                                i32,
                                leptos::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            )>,
                        > = leptos::create_memo(move |_| v441());
                        let v444 = Dice_ui::method596(v443.clone());
                        let v446: leptos::Memo<i32> = leptos::create_memo(move |_| v444());
                        let v447 = Dice_ui::method599(v433.clone(), v436.clone(), v440.clone());
                        let v448: string = Dice_ui::method609();
                        let v450: &str = fable_library_rust::String_::LrcStr::as_str(&v448);
                        let v452: string = string("r#\"\"#");
                        let v453: &str = r#""#;
                        let v466: string =
                                string(" class=\" \".to_owned() + v450 stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v468 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method610()));
                        let v471: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<svg "), v466),
                                            string(">{v468()}</"),
                                        ),
                                        string("svg"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v473: leptos::HtmlElement<leptos::svg::Svg> = leptos::view! {
                            <svg
                                class=" ".to_owned() + v450
                                stroke="currentColor"
                                stroke-width="1.5"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                {v468()}
                            </svg>
                        };
                        let v476 = Dice_ui::method611();
                        let v477: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[9px] px-[12px] \".to_owned() + &v476()");
                        let v481: string = append(
                            append(
                                string(" aria-label=\"Add\""),
                                append(
                                    append(
                                        string(" on:click=move |_| v447()"),
                                        append(
                                            append(append(string(" "), v477), string("")),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(""),
                        );
                        let v483 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method613(v473)));
                        let v486: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<button "), v481),
                                            string(">{v483()}</"),
                                        ),
                                        string("button"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v489: leptos::HtmlElement<leptos::html::Button> = Dice_ui::method468(
                            leptos::view! {
                                <button
                                    aria-label="Add"
                                    on:click=move |_| v447()
                                    class=move || {
                                        "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[9px] px-[12px] "
                                            .to_owned() + &v476()
                                    }
                                >
                                    {v483()}
                                </button>
                            },
                        );
                        let v491: leptos::View = leptos::IntoView::into_view(v489);
                        let v495: Array<leptos::View> = Dice_ui::method423(Dice_ui::method422(
                            Dice_ui::method421(new_empty::<leptos::View>()),
                        ));
                        let v497: leptos::View = leptos::CollectView::collect_view(v495.to_vec());
                        let v502: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v504 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method650(
                            v491,
                            Dice_ui::method470(Dice_ui::method614(
                                v433.clone(),
                                v443,
                                v446,
                                v436,
                                v440,
                            )),
                        )));
                        let v507: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v502),
                                            string(">{v504()}</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v510: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                            leptos::view! { <div class="flex flex-col [position:relative]">{v504()}</div> },
                        );
                        let v512: leptos::View = leptos::IntoView::into_view(v510);
                        let v516: Array<leptos::View> = Dice_ui::method423(Dice_ui::method422(
                            Dice_ui::method421(new_empty::<leptos::View>()),
                        ));
                        let v523: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v525 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method694(
                            leptos::CollectView::collect_view(v516.to_vec()),
                            Dice_ui::method470(Dice_ui::method659(v433.clone())),
                        )));
                        let v527: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v523),
                                            string(">{v525()}</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v530: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                            leptos::view! { <div class="flex flex-col [position:relative]">{v525()}</div> },
                        );
                        let v532: leptos::View = leptos::IntoView::into_view(v530);
                        let v534: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> =
                            Dice_ui::method74(v433.l0.clone());
                        let v538: leptos::RwSignal<bool> = Dice_ui::method95(
                            (leptos::SignalGetUntracked::get_untracked(&v534))
                                .l2
                                .clone(),
                        );
                        let v570: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(
                            new_array(&[
                                v512,
                                v532,
                                if leptos::SignalGet::get(&v538) {
                                    let v544: Array<leptos::View> =
                                        Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(
                                            new_empty::<leptos::View>(),
                                        )));
                                    let v551: string =
                                        string(" class=\"flex flex-col [position:relative]\"");
                                    let v553 =
                                        Dice_ui::method439(Dice_ui::method438(Dice_ui::method715(
                                            leptos::CollectView::collect_view(v544.to_vec()),
                                            Dice_ui::method470(Dice_ui::method703()),
                                        )));
                                    let v555: string = append(
                                        append(
                                            string("leptos::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<div "), v551),
                                                        string(">{v553()}</"),
                                                    ),
                                                    string("div"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v558: leptos::HtmlElement<leptos::html::Div> =
                                        Dice_ui::method452(
                                            leptos::view! { <div class="flex flex-col [position:relative]">{v553()}</div> },
                                        );
                                    leptos::IntoView::into_view(v558)
                                } else {
                                    let v564: Array<leptos::View> =
                                        Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(
                                            new_empty::<leptos::View>(),
                                        )));
                                    leptos::CollectView::collect_view(v564.to_vec())
                                },
                            ]),
                        ));
                        let v572: Vec<leptos::View> = v570.to_vec();
                        Dice_ui::US24::US24_1(leptos::Fragment::new(v572))
                    }
                }
                Dice_ui::US20::US20_4 => {
                    let v206: string = Dice_ui::method0(string("transactions.render (1)"));
                    leptos::logging::log!("{}", v206);
                    {
                        let v209: Option<LrcPtr<Dice_ui::Heap2>> =
                            leptos::use_context::<std::rc::Rc<Heap2>>();
                        let v211: LrcPtr<Dice_ui::Heap2> = v209.unwrap();
                        let v213: string = Dice_ui::method0(string("use_transactions.render (1)"));
                        leptos::logging::log!("{}", v213);
                        {
                            let v215 = Dice_ui::method134(v211.clone());
                            let v217: leptos::Memo<Array<string>> =
                                leptos::create_memo(move |_| v215());
                            let v218 = Dice_ui::method145(v217.clone());
                            let v220: leptos::Memo<
                                Array<(string, bool, string, bool, Dice_ui::US25, string)>,
                            > = leptos::create_memo(move |_| v218());
                            let v221 = Dice_ui::method149(v211.clone(), v217);
                            let v223: leptos::Memo<
                                Array<(string, Array<(bool, string, bool, Dice_ui::US25, string)>)>,
                            > = leptos::create_memo(move |_| v221());
                            let v224 = Dice_ui::method156(v223.clone());
                            let v226: leptos::Memo<
                                Array<(bool, string, bool, Dice_ui::US25, string)>,
                            > = leptos::create_memo(move |_| v224());
                            let v227 = Dice_ui::method170(v223.clone());
                            let v229: leptos::Memo<Array<string>> =
                                leptos::create_memo(move |_| v227());
                            let v231: string =
                                Dice_ui::method0(string("state_core.use_requests (1)"));
                            leptos::logging::log!("{}", v231);
                            {
                                let v234: string =
                                    Dice_ui::method0(string("state_core.use_database (1)"));
                                leptos::logging::log!("{}", v234);
                                {
                                    let v237: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                                        Dice_ui::method21(Dice_ui::method20());
                                    let v238 = Dice_ui::method177(v237.clone());
                                    let v240: leptos::Memo<Option<rexie::Rexie>> =
                                        leptos::create_memo(move |_| v238());
                                    let v242: leptos::Resource<
                                        (
                                            Option<rexie::Rexie>,
                                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                                        ),
                                        Result<
                                            Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                            std::string::String,
                                        >,
                                    > = Dice_ui::method180(Dice_ui::method178(
                                        v226.clone(),
                                        v237.clone(),
                                    ));
                                    let v243 = Dice_ui::method193(v242.clone());
                                    let v245: leptos::Memo<
                                        Option<
                                            Result<
                                                Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                std::string::String,
                                            >,
                                        >,
                                    > = leptos::create_memo(move |_| v243());
                                    let v247: leptos::Resource<
                                        (
                                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                                            Option<
                                                Result<
                                                    Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        ),
                                        Result<Array<Option<string>>, std::string::String>,
                                    > = Dice_ui::method202(Dice_ui::method200(
                                        v226.clone(),
                                        v245.clone(),
                                    ));
                                    let v248 = Dice_ui::method227(v226.clone(), v240);
                                    let v251 = Dice_ui::method240(
                                        v226,
                                        v245,
                                        v247,
                                        leptos::create_action(move |value: &std::rc::Rc<Heap4>| {
                                            v248(value.clone())
                                        }),
                                    );
                                    let v254 =
                                        Dice_ui::method256(v237, v242, Func0::new(move || v251()));
                                    let v256: leptos::Memo<
                                        Array<
                                            Result<
                                                Option<
                                                    Array<(
                                                        Array<(
                                                            std::string::String,
                                                            Option<std::string::String>,
                                                        )>,
                                                        f64,
                                                        u32,
                                                        std::string::String,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        bool,
                                                        f64,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                >,
                                                std::string::String,
                                            >,
                                        >,
                                    > = leptos::create_memo(move |_| v254());
                                    let v258: string =
                                            append(append(string("use_transactions.render (7) / root func0 / result: "),
                                                          sprintf!("{:?}",
                                                                   v256.clone())),
                                                   string(""));
                                    let v264: string =
                                        Dice_ui::method0(if length(v258.clone()) <= 200_i32 {
                                            v258.clone()
                                        } else {
                                            append(substring2(v258, 0_i32, 200_i32), string("..."))
                                        });
                                    leptos::logging::log!("{}", v264);
                                    {
                                        let v266 = Dice_ui::method284(v229, v256);
                                        let v268: leptos::Memo<
                                            Result<
                                                Option<
                                                    Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
                                                >,
                                                std::string::String,
                                            >,
                                        > = leptos::create_memo(move |_| v266());
                                        let v269 = Dice_ui::method326(v268.clone());
                                        let v272 =
                                            Dice_ui::method341(leptos::create_memo(move |_| {
                                                v269()
                                            }));
                                        let v274: leptos::Memo<
                                            Array<(bool, string, bool, Dice_ui::US25, string)>,
                                        > = leptos::create_memo(move |_| v272());
                                        let v276: string =
                                            Dice_ui::method0(string("state_core.use_requests (1)"));
                                        leptos::logging::log!("{}", v276);
                                        {
                                            let v279: string = Dice_ui::method0(string(
                                                "state_core.use_database (1)",
                                            ));
                                            leptos::logging::log!("{}", v279);
                                            {
                                                let v282: leptos::Resource<
                                                    Dice_ui::US2,
                                                    rexie::Rexie,
                                                > = Dice_ui::method21(Dice_ui::method20());
                                                let v283 = Dice_ui::method177(v282.clone());
                                                let v285: leptos::Memo<Option<rexie::Rexie>> =
                                                    leptos::create_memo(move |_| v283());
                                                let v287: leptos::Resource<
                                                    (
                                                        Option<rexie::Rexie>,
                                                        Array<(
                                                            bool,
                                                            string,
                                                            bool,
                                                            Dice_ui::US25,
                                                            string,
                                                        )>,
                                                    ),
                                                    Result<
                                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                        std::string::String,
                                                    >,
                                                > = Dice_ui::method180(Dice_ui::method178(
                                                    v274.clone(),
                                                    v282.clone(),
                                                ));
                                                let v288 = Dice_ui::method193(v287.clone());
                                                let v290: leptos::Memo<
                                                    Option<
                                                        Result<
                                                            Array<Option<LrcPtr<Dice_ui::Heap4>>>,
                                                            std::string::String,
                                                        >,
                                                    >,
                                                > = leptos::create_memo(move |_| v288());
                                                let v292: leptos::Resource<
                                                    (
                                                        Array<(
                                                            bool,
                                                            string,
                                                            bool,
                                                            Dice_ui::US25,
                                                            string,
                                                        )>,
                                                        Option<
                                                            Result<
                                                                Array<
                                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                                >,
                                                                std::string::String,
                                                            >,
                                                        >,
                                                    ),
                                                    Result<
                                                        Array<Option<string>>,
                                                        std::string::String,
                                                    >,
                                                > = Dice_ui::method202(Dice_ui::method200(
                                                    v274.clone(),
                                                    v290.clone(),
                                                ));
                                                let v293 = Dice_ui::method227(v274.clone(), v285);
                                                let v296 = Dice_ui::method343(
                                                    v274,
                                                    v290,
                                                    v292,
                                                    leptos::create_action(
                                                        move |value: &std::rc::Rc<Heap4>| {
                                                            v293(value.clone())
                                                        },
                                                    ),
                                                );
                                                let v299 = Dice_ui::method349(
                                                    v282,
                                                    v287,
                                                    Func0::new(move || v296()),
                                                );
                                                let v303: string =
                                                        append(append(string("use_transactions.render (12) / rpc_response func0 / result: "),
                                                                      sprintf!("{:?}",
                                                                               leptos::create_memo(move |_| { v299() }))),
                                                               string(""));
                                                let v309: string = Dice_ui::method0(
                                                    if length(v303.clone()) <= 200_i32 {
                                                        v303.clone()
                                                    } else {
                                                        append(
                                                            substring2(v303, 0_i32, 200_i32),
                                                            string("..."),
                                                        )
                                                    },
                                                );
                                                leptos::logging::log!("{}", v309);
                                                {
                                                    let v311: bool = Dice_ui::method85();
                                                    let patternInput_1: (
                                                        leptos::ReadSignal<bool>,
                                                        leptos::WriteSignal<bool>,
                                                    ) = leptos::create_signal(v311);
                                                    let v313: leptos::ReadSignal<bool> =
                                                        patternInput_1.0.clone();
                                                    let v315 = Dice_ui::method723(
                                                        patternInput_1.1.clone(),
                                                    );
                                                    let v317: Func0<()> =
                                                        Func0::new(move || v315());
                                                    let v319: string =
                                                        Dice_ui::method6(string("h-5 w-5"));
                                                    let v321: &str =
                                                        fable_library_rust::String_::LrcStr::as_str(
                                                            &v319,
                                                        );
                                                    let v323: string = string("r#\"\"#");
                                                    let v324: &str = r#""#;
                                                    let v337: string =
                                                            string(" class=\" \".to_owned() + v321 stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                                                    let v339 = Dice_ui::method439(
                                                        Dice_ui::method438(Dice_ui::method724()),
                                                    );
                                                    let v342: string = append(
                                                        append(
                                                            string("leptos::view! { "),
                                                            append(
                                                                append(
                                                                    append(
                                                                        append(
                                                                            string("<svg "),
                                                                            v337,
                                                                        ),
                                                                        string(">{v339()}</"),
                                                                    ),
                                                                    string("svg"),
                                                                ),
                                                                string(">"),
                                                            ),
                                                        ),
                                                        string(" }"),
                                                    );
                                                    let v344: leptos::HtmlElement<
                                                        leptos::svg::Svg,
                                                    > = leptos::view! {
                                                        <svg
                                                            class=" ".to_owned() + v321
                                                            stroke="currentColor"
                                                            stroke-width="1.5"
                                                            viewBox="0 0 24 24"
                                                            fill="none"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                            {v339()}
                                                        </svg>
                                                    };
                                                    let v347 = Dice_ui::method725(v313.clone());
                                                    let v348: string =
                                                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[9px] px-[12px] \".to_owned() + &v347()");
                                                    let v352: string = append(
                                                        append(
                                                            string(" aria-label=\"Settings\""),
                                                            append(
                                                                append(
                                                                    string(
                                                                        " on:click=move |_| v317()",
                                                                    ),
                                                                    append(
                                                                        append(
                                                                            append(
                                                                                string(" "),
                                                                                v348,
                                                                            ),
                                                                            string(""),
                                                                        ),
                                                                        string(""),
                                                                    ),
                                                                ),
                                                                string(""),
                                                            ),
                                                        ),
                                                        string(""),
                                                    );
                                                    let v354 =
                                                        Dice_ui::method439(Dice_ui::method438(
                                                            Dice_ui::method613(v344),
                                                        ));
                                                    let v357: string = append(
                                                        append(
                                                            string("leptos::view! { "),
                                                            append(
                                                                append(
                                                                    append(
                                                                        append(
                                                                            string("<button "),
                                                                            v352,
                                                                        ),
                                                                        string(">{v354()}</"),
                                                                    ),
                                                                    string("button"),
                                                                ),
                                                                string(">"),
                                                            ),
                                                        ),
                                                        string(" }"),
                                                    );
                                                    let v360: leptos::HtmlElement<
                                                        leptos::html::Button,
                                                    > = Dice_ui::method468(
                                                        leptos::view! {
                                                            <button
                                                                aria-label="Settings"
                                                                on:click=move |_| v317()
                                                                class=move || {
                                                                    "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[9px] px-[12px] "
                                                                        .to_owned() + &v347()
                                                                }
                                                            >
                                                                {v354()}
                                                            </button>
                                                        },
                                                    );
                                                    let v362: leptos::View =
                                                        leptos::IntoView::into_view(v360);
                                                    let v366: Array<leptos::View> =
                                                        Dice_ui::method423(Dice_ui::method422(
                                                            Dice_ui::method421(new_empty::<
                                                                leptos::View,
                                                            >(
                                                            )),
                                                        ));
                                                    let v368: leptos::View =
                                                        leptos::CollectView::collect_view(
                                                            v366.to_vec(),
                                                        );
                                                    let v373: string =
                                                            string(" class=\"flex flex-col [position:relative]\"");
                                                    let v375 = Dice_ui::method439(
                                                        Dice_ui::method438(Dice_ui::method886(
                                                            v362,
                                                            Dice_ui::method470(Dice_ui::method727(
                                                                v211.clone(),
                                                                v268.clone(),
                                                                v223,
                                                                v313,
                                                            )),
                                                        )),
                                                    );
                                                    let v378: string = append(
                                                        append(
                                                            string("leptos::view! { "),
                                                            append(
                                                                append(
                                                                    append(
                                                                        append(
                                                                            string("<div "),
                                                                            v373,
                                                                        ),
                                                                        string(">{v375()}</"),
                                                                    ),
                                                                    string("div"),
                                                                ),
                                                                string(">"),
                                                            ),
                                                        ),
                                                        string(" }"),
                                                    );
                                                    let v381: leptos::HtmlElement<
                                                        leptos::html::Div,
                                                    > = Dice_ui::method452(
                                                        leptos::view! { <div class="flex flex-col [position:relative]">{v375()}</div> },
                                                    );
                                                    let v383: leptos::View =
                                                        leptos::IntoView::into_view(v381);
                                                    let v385: leptos::RwSignal<
                                                        LrcPtr<Dice_ui::Heap1>,
                                                    > = Dice_ui::method74(v211.l0.clone());
                                                    let v389:
                                                                leptos::RwSignal<bool> =
                                                            Dice_ui::method95((leptos::SignalGetUntracked::get_untracked(&v385)).l2.clone());
                                                    let v421: Array<leptos::View> =
                                                        Dice_ui::method437(Dice_ui::method421(
                                                            new_array(&[
                                                                v383,
                                                                if leptos::SignalGet::get(&v389) {
                                                                    let v395:
                                                                                                                          Array<leptos::View> =
                                                                                                                      Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<leptos::View>())));
                                                                    let v402:
                                                                                                                          string =
                                                                                                                      string(" class=\"flex flex-col [position:relative]\"");
                                                                    let v404 =
                                                                                                                      Dice_ui::method439(Dice_ui::method438(Dice_ui::method899(leptos::CollectView::collect_view(v395.to_vec()),
                                                                                                                                                                               Dice_ui::method470(Dice_ui::method895(v268)))));
                                                                    let v406:
                                                                                                                          string =
                                                                                                                      append(append(string("leptos::view! { "),
                                                                                                                                    append(append(append(append(string("<div "),
                                                                                                                                                                v402),
                                                                                                                                                         string(">{v404()}</")),
                                                                                                                                                  string("div")),
                                                                                                                                           string(">"))),
                                                                                                                             string(" }"));
                                                                    let v409: leptos::HtmlElement<
                                                                        leptos::html::Div,
                                                                    > = Dice_ui::method452(
                                                                        leptos::view! { <div class="flex flex-col [position:relative]">{v404()}</div> },
                                                                    );
                                                                    leptos::IntoView::into_view(
                                                                        v409,
                                                                    )
                                                                } else {
                                                                    let v415:
                                                                                                                          Array<leptos::View> =
                                                                                                                      Dice_ui::method423(Dice_ui::method422(Dice_ui::method421(new_empty::<leptos::View>())));
                                                                    leptos::CollectView::collect_view(v415.to_vec())
                                                                },
                                                            ]),
                                                        ));
                                                    let v423: Vec<leptos::View> = v421.to_vec();
                                                    Dice_ui::US24::US24_1(leptos::Fragment::new(
                                                        v423,
                                                    ))
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                _ => Dice_ui::US24::US24_0,
            };
            let v606: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                match &v580 {
                    Dice_ui::US24::US24_1(v580_1_0) => {
                        let v585: string =
                            string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                        let v587 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method907(
                            v580_1_0.clone(),
                        )));
                        let v590: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v585),
                                            string(">{v587()}</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v593: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                            leptos::view! { <div class="flex flex-1 flex-col [overflow-y:auto]">{v587()}</div> },
                        );
                        leptos::IntoView::into_view(v593)
                    }
                    _ => {
                        let v599: Array<leptos::View> = Dice_ui::method423(Dice_ui::method422(
                            Dice_ui::method421(new_empty::<leptos::View>()),
                        ));
                        leptos::CollectView::collect_view(v599.to_vec())
                    }
                },
            ])));
            let v608: Vec<leptos::View> = v606.to_vec();
            leptos::Fragment::new(v608)
        }
        pub fn method132(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure53(v0_1.clone(), ())
            })
        }
        pub fn method908(
            v0_1: leptos::HtmlElement<leptos::html::Main>,
        ) -> leptos::HtmlElement<leptos::html::Main> {
            v0_1
        }
        pub fn method912() -> string {
            string("Tab")
        }
        pub fn closure501(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method912()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v8: leptos::leptos_dom::Text = leptos::html::text(v6);
            let v13: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v8),
            ])));
            let v15: Vec<leptos::View> = v13.to_vec();
            leptos::Fragment::new(v15)
        }
        pub fn method911() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure501((), ()))
        }
        pub fn closure504(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
            unitVar: (),
        ) -> bool {
            let v2: leptos::ReadSignal<Dice_ui::US20> = Dice_ui::method133(v0_1);
            let v4: Dice_ui::US20 = leptos::SignalGet::get(&v2);
            {
                let copyOfStruct: Dice_ui::US20 = v4;
                if let Dice_ui::US20::US20_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US20 = v1.clone();
                    if let Dice_ui::US20::US20_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US20::US20_2 = &copyOfStruct {
                        if let Dice_ui::US20::US20_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US20::US20_3 = &copyOfStruct {
                            if let Dice_ui::US20::US20_3 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US20::US20_4 = &copyOfStruct {
                                if let Dice_ui::US20::US20_4 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US20::US20_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn method915(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure504(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure505(v0_1: string, unitVar: ()) -> leptos::Fragment {
            let v3: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(v0_1)));
            let v5: &str = fable_library_rust::String_::LrcStr::as_str(&v3);
            let v7: std::string::String = String::from(v5);
            let v9: leptos::leptos_dom::Text = leptos::html::text(v7);
            let v14: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v9),
            ])));
            let v16: Vec<leptos::View> = v14.to_vec();
            leptos::Fragment::new(v16)
        }
        pub fn method916(v0_1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure505(v0_1.clone(), ())
            })
        }
        pub fn method917(
            v0_1: leptos::HtmlElement<leptos::html::Option_>,
        ) -> leptos::HtmlElement<leptos::html::Option_> {
            v0_1
        }
        pub fn closure503(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
        ) -> leptos::View {
            let v12: string = match &v1 {
                Dice_ui::US20::US20_1(v1_1_0) => string("Dice"),
                Dice_ui::US20::US20_2 => string("Lists"),
                Dice_ui::US20::US20_3 => string("Settings"),
                Dice_ui::US20::US20_4 => string("Transactions"),
                _ => string(""),
            };
            let v13 = Dice_ui::method915(v0_1, v1.clone());
            let v17: string = string(" select=v13()");
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method916(v12)));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<option "), v17), string(">{v19()}</")),
                            string("option"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Option_> =
                Dice_ui::method917(leptos::view! { <option select=v13()>{v19()}</option> });
            leptos::IntoView::into_view(v25)
        }
        pub fn method914(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
        ) -> Func1<Dice_ui::US20, leptos::View> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: Dice_ui::US20| Dice_ui::closure503(v0_1.clone(), v)
            })
        }
        pub fn method918(v0_1: Array<Dice_ui::US20>) -> Array<Dice_ui::US20> {
            v0_1
        }
        pub fn closure502(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v7: Array<Dice_ui::US20> = Dice_ui::method124(new_array(&[
                Dice_ui::US20::US20_1(Dice_ui::US21::US21_0),
                Dice_ui::US20::US20_2,
                Dice_ui::US20::US20_4,
                Dice_ui::US20::US20_3,
            ]));
            let v8 = Dice_ui::method914(v0_1);
            let v9: Array<Dice_ui::US20> = Dice_ui::method918(v7);
            let v11: Vec<Dice_ui::US20> = v9.to_vec();
            let v14: Vec<leptos::View> =
                Dice_ui::method446(v11.iter().map(|x| v8(x.clone())).collect());
            let v17: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v14));
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method913(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure502(v0_1.clone(), ())
            })
        }
        pub fn method919(
            v0_1: leptos::HtmlElement<leptos::html::Select>,
        ) -> leptos::HtmlElement<leptos::html::Select> {
            v0_1
        }
        pub fn closure500(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v6: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v8 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method911()));
            let v11: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<label "), v6), string(">{v8()}</")),
                            string("label"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v14: leptos::HtmlElement<leptos::html::Label> = Dice_ui::method634(
                leptos::view! {
                    <label class="sr-only" for="Tab">
                        {v8()}
                    </label>
                },
            );
            let v16: leptos::View = leptos::IntoView::into_view(v14);
            let v21: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v23 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method913(v0_1)));
            let v26: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<select "), v21), string(">{v23()}</")),
                            string("select"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v29: leptos::HtmlElement<leptos::html::Select> = Dice_ui::method919(
                leptos::view! {
                    <select class="w-full rounded-md border-gray-200" id="Tab">
                        {v23()}
                    </select>
                },
            );
            let v34: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v16,
                leptos::IntoView::into_view(v29),
            ])));
            let v36: Vec<leptos::View> = v34.to_vec();
            leptos::Fragment::new(v36)
        }
        pub fn method910(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure500(v0_1.clone(), ())
            })
        }
        pub fn closure511(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Array<leptos::View> =
                Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
            let v4: Vec<leptos::View> = v2.to_vec();
            leptos::Fragment::new(v4)
        }
        pub fn method925() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure511((), ()))
        }
        pub fn closure510(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v15: string =
                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
            let v17 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method925()));
            let v20: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<rect "), v15), string(">{v17()}</")),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::HtmlElement<leptos::svg::Rect> = Dice_ui::method509(
                leptos::view! {
                    <rect
                        stroke-linejoin="round"
                        stroke-linecap="round"
                        rx="2"
                        height="18"
                        width="18"
                        y="3"
                        x="3"
                    >
                        {v17()}
                    </rect>
                },
            );
            let v25: leptos::View = leptos::IntoView::into_view(v23);
            let v34: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
            let v36 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v39: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v34), string(">{v36()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v42: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle fill="currentColor" r="1.5" cy="7.5" cx="7.5">
                        {v36()}
                    </circle>
                },
            );
            let v44: leptos::View = leptos::IntoView::into_view(v42);
            let v53: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
            let v55 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v57: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v53), string(">{v55()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v60: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle fill="currentColor" r="1.5" cy="7.5" cx="16.5">
                        {v55()}
                    </circle>
                },
            );
            let v62: leptos::View = leptos::IntoView::into_view(v60);
            let v71: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
            let v73 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v75: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v71), string(">{v73()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v78: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle fill="currentColor" r="1.5" cy="12" cx="12">
                        {v73()}
                    </circle>
                },
            );
            let v80: leptos::View = leptos::IntoView::into_view(v78);
            let v89: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
            let v91 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v93: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v89), string(">{v91()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v96: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle fill="currentColor" r="1.5" cy="16.5" cx="7.5">
                        {v91()}
                    </circle>
                },
            );
            let v98: leptos::View = leptos::IntoView::into_view(v96);
            let v107: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
            let v109 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v111: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v107), string(">{v109()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v114: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle fill="currentColor" r="1.5" cy="16.5" cx="16.5">
                        {v109()}
                    </circle>
                },
            );
            let v119: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v25,
                v44,
                v62,
                v80,
                v98,
                leptos::IntoView::into_view(v114),
            ])));
            let v121: Vec<leptos::View> = v119.to_vec();
            leptos::Fragment::new(v121)
        }
        pub fn method924() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure510((), ()))
        }
        pub fn closure512(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::svg::Path> = Dice_ui::method444(
                leptos::view! {
                    <path
                        d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5"
                        stroke-linejoin="round"
                        stroke-linecap="round"
                    >
                        {v9()}
                    </path>
                },
            );
            let v17: leptos::View = leptos::IntoView::into_view(v15);
            let v26: string = string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
            let v28 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v31: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v26), string(">{v28()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle fill="currentColor" r="1" cy="6.75" cx="3">
                        {v28()}
                    </circle>
                },
            );
            let v36: leptos::View = leptos::IntoView::into_view(v34);
            let v45: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
            let v47 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v49: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v45), string(">{v47()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v52: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle fill="currentColor" r="1" cy="12" cx="3">
                        {v47()}
                    </circle>
                },
            );
            let v54: leptos::View = leptos::IntoView::into_view(v52);
            let v63: string = string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
            let v65 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method463()));
            let v67: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<circle "), v63), string(">{v65()}</")),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v70: leptos::HtmlElement<leptos::svg::Circle> = Dice_ui::method464(
                leptos::view! {
                    <circle fill="currentColor" r="1" cy="17.25" cx="3">
                        {v65()}
                    </circle>
                },
            );
            let v75: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v17,
                v36,
                v54,
                leptos::IntoView::into_view(v70),
            ])));
            let v77: Vec<leptos::View> = v75.to_vec();
            leptos::Fragment::new(v77)
        }
        pub fn method926() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure512((), ()))
        }
        pub fn closure513(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v7: string =
                string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method436()));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v7), string(">{v9()}</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method442(new_array(
                &[
                    leptos::view! {
                        <path
                            d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7"
                            stroke-linejoin="round"
                            stroke-linecap="round"
                        >
                            {v9()}
                        </path>
                    },
                ],
            ));
            let v17 = Dice_ui::method443();
            let v18: Array<leptos::HtmlElement<leptos::svg::Path>> = Dice_ui::method445(v16);
            let v20: Vec<leptos::HtmlElement<leptos::svg::Path>> = v18.to_vec();
            let v23: Vec<leptos::View> =
                Dice_ui::method446(v20.iter().map(|x| v17(x.clone())).collect());
            let v26: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v23));
            let v28: Vec<leptos::View> = v26.to_vec();
            leptos::Fragment::new(v28)
        }
        pub fn method927() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure513((), ()))
        }
        pub fn closure514(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
            unitVar: (),
        ) -> bool {
            let v2: leptos::ReadSignal<Dice_ui::US20> = Dice_ui::method133(v0_1);
            let v4: Dice_ui::US20 = leptos::SignalGet::get(&v2);
            {
                let copyOfStruct: Dice_ui::US20 = v4;
                if let Dice_ui::US20::US20_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US20 = v1.clone();
                    if let Dice_ui::US20::US20_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US20::US20_2 = &copyOfStruct {
                        if let Dice_ui::US20::US20_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US20::US20_3 = &copyOfStruct {
                            if let Dice_ui::US20::US20_3 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US20::US20_4 = &copyOfStruct {
                                if let Dice_ui::US20::US20_4 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US20::US20_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn method928(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure514(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure515(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
            unitVar: (),
        ) -> &'static str {
            let v2: leptos::ReadSignal<Dice_ui::US20> = Dice_ui::method133(v0_1);
            let v4: Dice_ui::US20 = leptos::SignalGet::get(&v2);
            if {
                let copyOfStruct: Dice_ui::US20 = v4;
                if let Dice_ui::US20::US20_1(copyOfStruct_1_0) = &copyOfStruct {
                    let copyOfStruct_1: Dice_ui::US20 = v1.clone();
                    if let Dice_ui::US20::US20_1(copyOfStruct_1_1_0) = &copyOfStruct_1 {
                        true
                    } else {
                        false
                    }
                } else {
                    if let Dice_ui::US20::US20_2 = &copyOfStruct {
                        if let Dice_ui::US20::US20_2 = &v1 {
                            true
                        } else {
                            false
                        }
                    } else {
                        if let Dice_ui::US20::US20_3 = &copyOfStruct {
                            if let Dice_ui::US20::US20_3 = &v1 {
                                true
                            } else {
                                false
                            }
                        } else {
                            if let Dice_ui::US20::US20_4 = &copyOfStruct {
                                if let Dice_ui::US20::US20_4 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                if let Dice_ui::US20::US20_0 = &v1 {
                                    true
                                } else {
                                    false
                                }
                            }
                        }
                    }
                }
            } {
                let v10: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v13: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn method929(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: Dice_ui::US20,
        ) -> Func0<&'static str> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure515(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure516(v0_1: leptos::Fragment, v1: string, unitVar: ()) -> leptos::Fragment {
            let v2: leptos::Fragment = Dice_ui::method853(v0_1);
            let v4: leptos::View = leptos::IntoView::into_view(v2);
            let v7: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method465(v1)));
            let v9: &str = fable_library_rust::String_::LrcStr::as_str(&v7);
            let v11: std::string::String = String::from(v9);
            let v13: leptos::leptos_dom::Text = leptos::html::text(v11);
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v4,
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method930(v0_1: leptos::Fragment, v1: string) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure516(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method931(
            v0_1: leptos::HtmlElement<leptos::html::A>,
        ) -> leptos::HtmlElement<leptos::html::A> {
            v0_1
        }
        pub fn closure509(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: string,
            v2: Dice_ui::US20,
        ) -> leptos::View {
            let v15: string = append(
                append(
                    append(v1, string("#/")),
                    match &v2 {
                        Dice_ui::US20::US20_1(v2_1_0) => string("dice"),
                        Dice_ui::US20::US20_2 => string("lists"),
                        Dice_ui::US20::US20_3 => string("settings"),
                        Dice_ui::US20::US20_4 => string("transactions"),
                        _ => string(""),
                    },
                ),
                string(""),
            );
            let v175: leptos::Fragment = match &v2 {
                Dice_ui::US20::US20_1(v2_1_0) => {
                    let v17: string = Dice_ui::method6(string("h-5 w-5"));
                    let v19: &str = fable_library_rust::String_::LrcStr::as_str(&v17);
                    let v21: string = string("r#\"\"#");
                    let v22: &str = r#""#;
                    let v35: string =
                            string(" class=\" \".to_owned() + v19 stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v37 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method924()));
                    let v40: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v35), string(">{v37()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v43: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                        leptos::view! {
                            <svg
                                class=" ".to_owned() + v19
                                stroke="currentColor"
                                stroke-width="1.5"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                {v37()}
                            </svg>
                        },
                    );
                    let v48: Array<leptos::View> =
                        Dice_ui::method437(Dice_ui::method421(new_array(&[
                            leptos::IntoView::into_view(v43),
                        ])));
                    let v50: Vec<leptos::View> = v48.to_vec();
                    leptos::Fragment::new(v50)
                }
                Dice_ui::US20::US20_2 => {
                    let v53: string = Dice_ui::method6(string("h-5 w-5"));
                    let v55: &str = fable_library_rust::String_::LrcStr::as_str(&v53);
                    let v57: string = string("r#\"\"#");
                    let v58: &str = r#""#;
                    let v73: string =
                            string(" class=\"text-gray-700 \".to_owned() + v55 stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v75 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method926()));
                    let v78: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v73), string(">{v75()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v81: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                        leptos::view! {
                            <svg
                                class="text-gray-700 ".to_owned() + v55
                                stroke="currentColor"
                                stroke-width="1.5"
                                viewBox="0 0 24 24"
                                height="100%"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                {v75()}
                            </svg>
                        },
                    );
                    let v86: Array<leptos::View> =
                        Dice_ui::method437(Dice_ui::method421(new_array(&[
                            leptos::IntoView::into_view(v81),
                        ])));
                    let v88: Vec<leptos::View> = v86.to_vec();
                    leptos::Fragment::new(v88)
                }
                Dice_ui::US20::US20_3 => {
                    let v129: string = Dice_ui::method6(string("h-5 w-5"));
                    let v131: &str = fable_library_rust::String_::LrcStr::as_str(&v129);
                    let v133: string = string("r#\"\"#");
                    let v134: &str = r#""#;
                    let v147: string =
                            string(" class=\" \".to_owned() + v131 stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v149 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method724()));
                    let v152: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v147), string(">{v149()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v155: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                        leptos::view! {
                            <svg
                                class=" ".to_owned() + v131
                                stroke="currentColor"
                                stroke-width="1.5"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                {v149()}
                            </svg>
                        },
                    );
                    let v160: Array<leptos::View> =
                        Dice_ui::method437(Dice_ui::method421(new_array(&[
                            leptos::IntoView::into_view(v155),
                        ])));
                    let v162: Vec<leptos::View> = v160.to_vec();
                    leptos::Fragment::new(v162)
                }
                Dice_ui::US20::US20_4 => {
                    let v91: string = Dice_ui::method6(string("h-5 w-5"));
                    let v93: &str = fable_library_rust::String_::LrcStr::as_str(&v91);
                    let v95: string = string("r#\"\"#");
                    let v96: &str = r#""#;
                    let v111: string =
                            string(" class=\"text-gray-700 \".to_owned() + v93 stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v113 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method927()));
                    let v116: string = append(
                        append(
                            string("leptos::view! { "),
                            append(
                                append(
                                    append(append(string("<svg "), v111), string(">{v113()}</")),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v119: leptos::HtmlElement<leptos::svg::Svg> = Dice_ui::method447(
                        leptos::view! {
                            <svg
                                class="text-gray-700 ".to_owned() + v93
                                stroke="currentColor"
                                stroke-width="1.5"
                                viewBox="0 0 24 24"
                                height="100%"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                {v113()}
                            </svg>
                        },
                    );
                    let v124: Array<leptos::View> =
                        Dice_ui::method437(Dice_ui::method421(new_array(&[
                            leptos::IntoView::into_view(v119),
                        ])));
                    let v126: Vec<leptos::View> = v124.to_vec();
                    leptos::Fragment::new(v126)
                }
                _ => {
                    let v167: Array<leptos::View> =
                        Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
                    let v169: Vec<leptos::View> = v167.to_vec();
                    leptos::Fragment::new(v169)
                }
            };
            let v186: string = match &v2 {
                Dice_ui::US20::US20_1(v2_1_0) => string("Dice"),
                Dice_ui::US20::US20_2 => string("Lists"),
                Dice_ui::US20::US20_3 => string("Settings"),
                Dice_ui::US20::US20_4 => string("Transactions"),
                _ => string(""),
            };
            let v188: string = Dice_ui::method6(Dice_ui::method18(v15));
            let v190: &str = fable_library_rust::String_::LrcStr::as_str(&v188);
            let v192: std::string::String = String::from(v190);
            let v193 = Dice_ui::method928(v0_1.clone(), v2.clone());
            let v194 = Dice_ui::method929(v0_1, v2.clone());
            let v196: string =
                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v194()");
            let v202: string = append(
                append(
                    string(" aria-current=move || if v193() { \"page\" } else { \"\" }"),
                    append(
                        append(append(string(" "), v196), string(" href=v192")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v204 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method930(v175, v186)));
            let v207: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<a "), v202), string(">{v204()}</")),
                            string("a"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v210: leptos::HtmlElement<leptos::html::A> = Dice_ui::method931(
                leptos::view! {
                    <a
                        aria-current=move || if v193() { "page" } else { "" }
                        class=move || {
                            "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium "
                                .to_owned() + v194()
                        }
                        href=v192
                    >
                        {v204()}
                    </a>
                },
            );
            leptos::IntoView::into_view(v210)
        }
        pub fn method923(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: string,
        ) -> Func1<Dice_ui::US20, leptos::View> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US20| Dice_ui::closure509(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure508(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: string,
            unitVar: (),
        ) -> leptos::Fragment {
            let v8: Array<Dice_ui::US20> = Dice_ui::method124(new_array(&[
                Dice_ui::US20::US20_1(Dice_ui::US21::US21_0),
                Dice_ui::US20::US20_2,
                Dice_ui::US20::US20_4,
                Dice_ui::US20::US20_3,
            ]));
            let v9 = Dice_ui::method923(v0_1, v1);
            let v10: Array<Dice_ui::US20> = Dice_ui::method918(v8);
            let v12: Vec<Dice_ui::US20> = v10.to_vec();
            let v15: Vec<leptos::View> =
                Dice_ui::method446(v12.iter().map(|x| v9(x.clone())).collect());
            let v18: Array<leptos::View> =
                Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v15));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method922(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: string,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure508(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn method932(
            v0_1: leptos::HtmlElement<leptos::html::Nav>,
        ) -> leptos::HtmlElement<leptos::html::Nav> {
            v0_1
        }
        pub fn closure507(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: string,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v7: string = append(
                append(
                    string(" aria-label=\"Tabs\""),
                    append(append(append(string(" "), v2), string("")), string("")),
                ),
                string(""),
            );
            let v9 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method922(v0_1, v1)));
            let v12: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<nav "), v7), string(">{v9()}</")),
                            string("nav"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::HtmlElement<leptos::html::Nav> = Dice_ui::method932(
                leptos::view! {
                    <nav
                        aria-label="Tabs"
                        class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]"
                    >
                        {v9()}
                    </nav>
                },
            );
            let v20: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v15),
            ])));
            let v22: Vec<leptos::View> = v20.to_vec();
            leptos::Fragment::new(v22)
        }
        pub fn method921(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: string,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure507(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure506(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: string,
            unitVar: (),
        ) -> leptos::Fragment {
            let v5: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v7 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method921(v0_1, v1)));
            let v10: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v5), string(">{v7()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! { <div class="flex flex-1 border-t border-gray-200">{v7()}</div> },
            );
            let v18: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v13),
            ])));
            let v20: Vec<leptos::View> = v18.to_vec();
            leptos::Fragment::new(v20)
        }
        pub fn method920(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            v1: string,
        ) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure506(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure499(
            v0_1: leptos::ReadSignal<Dice_ui::US20>,
            unitVar: (),
        ) -> leptos::Fragment {
            let v2: string = Dice_ui::method0(string("menu_tabs.render ()"));
            leptos::logging::log!("{}", v2);
            {
                let v5: leptos_router::Location = leptos_router::use_location();
                let v6: leptos_router::Location = Dice_ui::method110(v5.clone());
                let v9: leptos::Memo<std::string::String> = Dice_ui::method111(v6.pathname);
                let v12: std::string::String = Dice_ui::method70(v9());
                let v14: string = fable_library_rust::String_::fromString(v12);
                let v15: leptos_router::Location = Dice_ui::method112(v5);
                let v18: leptos::Memo<std::string::String> = Dice_ui::method111(v15.search);
                let v21: std::string::String = Dice_ui::method70(v18());
                let v23: string = fable_library_rust::String_::fromString(v21);
                let v29: string = append(
                    v14,
                    (if v23.clone() == string("") {
                        string("")
                    } else {
                        sprintf!("?{}", v23)
                    }),
                );
                let v33: string = string(" class=\"hidden\"");
                let v35 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method910(v0_1.clone())));
                let v38: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v33), string(">{v35()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v40: leptos::HtmlElement<leptos::html::Div> =
                    leptos::view! { <div class="hidden">{v35()}</div> };
                let v43: string =
                    string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
                let v45 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method920(v0_1, v29)));
                let v47: string = append(
                    append(
                        string("leptos::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v43), string(">{v45()}</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v51: Array<leptos::HtmlElement<leptos::html::Div>> = Dice_ui::method514(
                    new_array(&[
                        v40,
                        leptos::view! { <div class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">{v45()}</div> },
                    ]),
                );
                let v52 = Dice_ui::method515();
                let v53: Array<leptos::HtmlElement<leptos::html::Div>> = Dice_ui::method516(v51);
                let v55: Vec<leptos::HtmlElement<leptos::html::Div>> = v53.to_vec();
                let v58: Vec<leptos::View> =
                    Dice_ui::method446(v55.iter().map(|x| v52(x.clone())).collect());
                let v61: Array<leptos::View> =
                    Dice_ui::method437(fable_library_rust::NativeArray_::array_from(v58));
                let v63: Vec<leptos::View> = v61.to_vec();
                leptos::Fragment::new(v63)
            }
        }
        pub fn method909(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure499(v0_1.clone(), ())
            })
        }
        pub fn closure52(v0_1: leptos::ReadSignal<Dice_ui::US20>, unitVar: ()) -> leptos::Fragment {
            let v4: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method132(v0_1.clone())));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<main "), v4), string(">{v6()}</")),
                            string("main"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Main> = Dice_ui::method908(
                leptos::view! { <main class="flex flex-1 flex-col [overflow:hidden]">{v6()}</main> },
            );
            let v14: leptos::View = leptos::IntoView::into_view(v12);
            let v17: string = string(" class=\"flex\"");
            let v19 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method909(v0_1)));
            let v22: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v17), string(">{v19()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::HtmlElement<leptos::html::Div> =
                Dice_ui::method452(leptos::view! { <div class="flex">{v19()}</div> });
            let v30: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v14,
                leptos::IntoView::into_view(v25),
            ])));
            let v32: Vec<leptos::View> = v30.to_vec();
            leptos::Fragment::new(v32)
        }
        pub fn method131(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure52(v0_1.clone(), ())
            })
        }
        pub fn closure51(v0_1: leptos::ReadSignal<Dice_ui::US20>, unitVar: ()) -> leptos::Fragment {
            let v1: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v4: string = append(append(append(string(" "), v1), string("")), string(""));
            let v6 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method131(v0_1)));
            let v9: string = append(
                append(
                    string("leptos::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">{v6()}</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                leptos::view! {
                    <div class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">
                        {v6()}
                    </div>
                },
            );
            let v17: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(v12),
            ])));
            let v19: Vec<leptos::View> = v17.to_vec();
            leptos::Fragment::new(v19)
        }
        pub fn method130(v0_1: leptos::ReadSignal<Dice_ui::US20>) -> Func0<leptos::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure51(v0_1.clone(), ())
            })
        }
        pub fn closure46(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method0(string("content.render ()"));
            leptos::logging::log!("{}", v1);
            {
                let v4: leptos_router::Location = leptos_router::use_location();
                let v6: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                    std::sync::Arc::new(leptos_router::use_navigate());
                let v8: leptos_router::Location = leptos_router::use_location();
                let v9: leptos_router::Location = Dice_ui::method110(v8.clone());
                let v12: leptos::Memo<std::string::String> = Dice_ui::method111(v9.pathname);
                let v15: std::string::String = Dice_ui::method70(v12());
                let v17: string = fable_library_rust::String_::fromString(v15);
                let v18: leptos_router::Location = Dice_ui::method112(v8);
                let v21: leptos::Memo<std::string::String> = Dice_ui::method111(v18.search);
                let v24: std::string::String = Dice_ui::method70(v21());
                let v26: string = fable_library_rust::String_::fromString(v24);
                let v32: string = append(
                    v17,
                    (if v26.clone() == string("") {
                        string("")
                    } else {
                        sprintf!("?{}", v26)
                    }),
                );
                let v34: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v36: LrcPtr<Dice_ui::Heap2> = v34.unwrap();
                let v37: Dice_ui::US20 = Dice_ui::method113();
                let patternInput: (
                    leptos::ReadSignal<Dice_ui::US20>,
                    leptos::WriteSignal<Dice_ui::US20>,
                ) = leptos::create_signal(v37);
                let v41: bool = Dice_ui::method85();
                let patternInput_1: (leptos::ReadSignal<bool>, leptos::WriteSignal<bool>) =
                    leptos::create_signal(v41);
                let v45 = Dice_ui::method114(
                    v4.clone(),
                    v6,
                    v32,
                    v36,
                    patternInput_1.1.clone(),
                    patternInput_1.0.clone(),
                );
                leptos::create_effect(move |_| v45());
                {
                    let v47 = Dice_ui::method121(v4, patternInput.1.clone());
                    leptos::create_effect(move |_| v47());
                    {
                        let v52: string =
                            string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
                        let v54 = Dice_ui::method439(Dice_ui::method438(Dice_ui::method130(
                            patternInput.0.clone(),
                        )));
                        let v57: string = append(
                            append(
                                string("leptos::view! { "),
                                append(
                                    append(
                                        append(append(string("<div "), v52), string(">{v54()}</")),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v60: leptos::HtmlElement<leptos::html::Div> = Dice_ui::method452(
                            leptos::view! { <div class="flex flex-1 max-[100px]:[overflow-x:auto]">{v54()}</div> },
                        );
                        let v65: Array<leptos::View> =
                            Dice_ui::method437(Dice_ui::method421(new_array(&[
                                leptos::IntoView::into_view(v60),
                            ])));
                        let v67: Vec<leptos::View> = v65.to_vec();
                        leptos::Fragment::new(v67)
                    }
                }
            }
        }
        pub fn method109() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure46((), ()))
        }
        pub fn closure5(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method0(append(
                append(string("home.render () / router: "), toString(1_i32)),
                string(""),
            ));
            leptos::logging::log!("{}", v1);
            {
                let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
                let v8: string = Dice_ui::method0(string("state_core.use_database (1)"));
                leptos::logging::log!("{}", v8);
                {
                    let v11: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                        Dice_ui::method21(Dice_ui::method20());
                    let v13: string = Dice_ui::method0(string("state_core.use_core_database (1)"));
                    leptos::logging::log!("{}", v13);
                    {
                        let v17 = Dice_ui::method60(
                            v6.clone(),
                            Dice_ui::method30(Dice_ui::method28(v11.clone())),
                        );
                        leptos::create_effect(move |_| v17());
                        {
                            let v19 = Dice_ui::method83(v6.clone());
                            let v21: leptos::Memo<
                                std::collections::HashMap<
                                    std::string::String,
                                    leptos::RwSignal<bool>,
                                >,
                            > = leptos::create_memo(move |_| v19());
                            let v22: bool = Dice_ui::method85();
                            let patternInput: (
                                leptos::ReadSignal<bool>,
                                leptos::WriteSignal<bool>,
                            ) = leptos::create_signal(v22);
                            let v26 = Dice_ui::method86(v11);
                            let v29 = Dice_ui::method93(
                                v6.clone(),
                                v21,
                                patternInput.1.clone(),
                                patternInput.0.clone(),
                                leptos::create_action(move |value: &std::rc::Rc<Heap3>| {
                                    v26(value.clone())
                                }),
                            );
                            leptos::create_effect(move |_| v29());
                            {
                                let v32 = Dice_ui::method108(v6);
                                let v38: string =
                                    string(" class:dark={move || v32()} class=\"flex flex-1\"");
                                let v40 =
                                    Dice_ui::method439(Dice_ui::method438(Dice_ui::method109()));
                                let v43: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v38),
                                                    string(">{v40()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v46: leptos::HtmlElement<leptos::html::Div> =
                                    Dice_ui::method452(
                                        leptos::view! {
                                            <div class:dark=move || v32() class="flex flex-1">
                                                {v40()}
                                            </div>
                                        },
                                    );
                                let v51: Array<leptos::View> =
                                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                                        leptos::IntoView::into_view(v46),
                                    ])));
                                let v53: Vec<leptos::View> = v51.to_vec();
                                leptos::Fragment::new(v53)
                            }
                        }
                    }
                }
            }
        }
        pub fn method19() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure5((), ()))
        }
        pub fn closure517(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: Array<leptos::View> =
                Dice_ui::method437(Dice_ui::method421(new_empty::<leptos::View>()));
            let v4: Vec<leptos::View> = v2.to_vec();
            leptos::Fragment::new(v4)
        }
        pub fn method933() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure517((), ()))
        }
        pub fn method934() -> string {
            string("/")
        }
        pub fn closure518(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method0(append(
                append(string("home.render () / router: "), toString(2_i32)),
                string(""),
            ));
            leptos::logging::log!("{}", v1);
            {
                let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
                let v8: string = Dice_ui::method0(string("state_core.use_database (1)"));
                leptos::logging::log!("{}", v8);
                {
                    let v11: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                        Dice_ui::method21(Dice_ui::method20());
                    let v13: string = Dice_ui::method0(string("state_core.use_core_database (1)"));
                    leptos::logging::log!("{}", v13);
                    {
                        let v17 = Dice_ui::method60(
                            v6.clone(),
                            Dice_ui::method30(Dice_ui::method28(v11.clone())),
                        );
                        leptos::create_effect(move |_| v17());
                        {
                            let v19 = Dice_ui::method83(v6.clone());
                            let v21: leptos::Memo<
                                std::collections::HashMap<
                                    std::string::String,
                                    leptos::RwSignal<bool>,
                                >,
                            > = leptos::create_memo(move |_| v19());
                            let v22: bool = Dice_ui::method85();
                            let patternInput: (
                                leptos::ReadSignal<bool>,
                                leptos::WriteSignal<bool>,
                            ) = leptos::create_signal(v22);
                            let v26 = Dice_ui::method86(v11);
                            let v29 = Dice_ui::method93(
                                v6.clone(),
                                v21,
                                patternInput.1.clone(),
                                patternInput.0.clone(),
                                leptos::create_action(move |value: &std::rc::Rc<Heap3>| {
                                    v26(value.clone())
                                }),
                            );
                            leptos::create_effect(move |_| v29());
                            {
                                let v32 = Dice_ui::method108(v6);
                                let v38: string =
                                    string(" class:dark={move || v32()} class=\"flex flex-1\"");
                                let v40 =
                                    Dice_ui::method439(Dice_ui::method438(Dice_ui::method109()));
                                let v43: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v38),
                                                    string(">{v40()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v46: leptos::HtmlElement<leptos::html::Div> =
                                    Dice_ui::method452(
                                        leptos::view! {
                                            <div class:dark=move || v32() class="flex flex-1">
                                                {v40()}
                                            </div>
                                        },
                                    );
                                let v51: Array<leptos::View> =
                                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                                        leptos::IntoView::into_view(v46),
                                    ])));
                                let v53: Vec<leptos::View> = v51.to_vec();
                                leptos::Fragment::new(v53)
                            }
                        }
                    }
                }
            }
        }
        pub fn method935() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure518((), ()))
        }
        pub fn method936() -> string {
            string("/*")
        }
        pub fn closure519(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method0(append(
                append(string("home.render () / router: "), toString(3_i32)),
                string(""),
            ));
            leptos::logging::log!("{}", v1);
            {
                let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
                let v8: string = Dice_ui::method0(string("state_core.use_database (1)"));
                leptos::logging::log!("{}", v8);
                {
                    let v11: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                        Dice_ui::method21(Dice_ui::method20());
                    let v13: string = Dice_ui::method0(string("state_core.use_core_database (1)"));
                    leptos::logging::log!("{}", v13);
                    {
                        let v17 = Dice_ui::method60(
                            v6.clone(),
                            Dice_ui::method30(Dice_ui::method28(v11.clone())),
                        );
                        leptos::create_effect(move |_| v17());
                        {
                            let v19 = Dice_ui::method83(v6.clone());
                            let v21: leptos::Memo<
                                std::collections::HashMap<
                                    std::string::String,
                                    leptos::RwSignal<bool>,
                                >,
                            > = leptos::create_memo(move |_| v19());
                            let v22: bool = Dice_ui::method85();
                            let patternInput: (
                                leptos::ReadSignal<bool>,
                                leptos::WriteSignal<bool>,
                            ) = leptos::create_signal(v22);
                            let v26 = Dice_ui::method86(v11);
                            let v29 = Dice_ui::method93(
                                v6.clone(),
                                v21,
                                patternInput.1.clone(),
                                patternInput.0.clone(),
                                leptos::create_action(move |value: &std::rc::Rc<Heap3>| {
                                    v26(value.clone())
                                }),
                            );
                            leptos::create_effect(move |_| v29());
                            {
                                let v32 = Dice_ui::method108(v6);
                                let v38: string =
                                    string(" class:dark={move || v32()} class=\"flex flex-1\"");
                                let v40 =
                                    Dice_ui::method439(Dice_ui::method438(Dice_ui::method109()));
                                let v43: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v38),
                                                    string(">{v40()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v46: leptos::HtmlElement<leptos::html::Div> =
                                    Dice_ui::method452(
                                        leptos::view! {
                                            <div class:dark=move || v32() class="flex flex-1">
                                                {v40()}
                                            </div>
                                        },
                                    );
                                let v51: Array<leptos::View> =
                                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                                        leptos::IntoView::into_view(v46),
                                    ])));
                                let v53: Vec<leptos::View> = v51.to_vec();
                                leptos::Fragment::new(v53)
                            }
                        }
                    }
                }
            }
        }
        pub fn method937() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure519((), ()))
        }
        pub fn method938() -> string {
            string("*")
        }
        pub fn closure520(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1: string = Dice_ui::method0(append(
                append(string("home.render () / router: "), toString(4_i32)),
                string(""),
            ));
            leptos::logging::log!("{}", v1);
            {
                let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                    leptos::use_context::<std::rc::Rc<Heap2>>();
                let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
                let v8: string = Dice_ui::method0(string("state_core.use_database (1)"));
                leptos::logging::log!("{}", v8);
                {
                    let v11: leptos::Resource<Dice_ui::US2, rexie::Rexie> =
                        Dice_ui::method21(Dice_ui::method20());
                    let v13: string = Dice_ui::method0(string("state_core.use_core_database (1)"));
                    leptos::logging::log!("{}", v13);
                    {
                        let v17 = Dice_ui::method60(
                            v6.clone(),
                            Dice_ui::method30(Dice_ui::method28(v11.clone())),
                        );
                        leptos::create_effect(move |_| v17());
                        {
                            let v19 = Dice_ui::method83(v6.clone());
                            let v21: leptos::Memo<
                                std::collections::HashMap<
                                    std::string::String,
                                    leptos::RwSignal<bool>,
                                >,
                            > = leptos::create_memo(move |_| v19());
                            let v22: bool = Dice_ui::method85();
                            let patternInput: (
                                leptos::ReadSignal<bool>,
                                leptos::WriteSignal<bool>,
                            ) = leptos::create_signal(v22);
                            let v26 = Dice_ui::method86(v11);
                            let v29 = Dice_ui::method93(
                                v6.clone(),
                                v21,
                                patternInput.1.clone(),
                                patternInput.0.clone(),
                                leptos::create_action(move |value: &std::rc::Rc<Heap3>| {
                                    v26(value.clone())
                                }),
                            );
                            leptos::create_effect(move |_| v29());
                            {
                                let v32 = Dice_ui::method108(v6);
                                let v38: string =
                                    string(" class:dark={move || v32()} class=\"flex flex-1\"");
                                let v40 =
                                    Dice_ui::method439(Dice_ui::method438(Dice_ui::method109()));
                                let v43: string = append(
                                    append(
                                        string("leptos::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v38),
                                                    string(">{v40()}</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v46: leptos::HtmlElement<leptos::html::Div> =
                                    Dice_ui::method452(
                                        leptos::view! {
                                            <div class:dark=move || v32() class="flex flex-1">
                                                {v40()}
                                            </div>
                                        },
                                    );
                                let v51: Array<leptos::View> =
                                    Dice_ui::method437(Dice_ui::method421(new_array(&[
                                        leptos::IntoView::into_view(v46),
                                    ])));
                                let v53: Vec<leptos::View> = v51.to_vec();
                                leptos::Fragment::new(v53)
                            }
                        }
                    }
                }
            }
        }
        pub fn method939() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure520((), ()))
        }
        pub fn closure4(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v2: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method17()));
            let v4: &str = fable_library_rust::String_::LrcStr::as_str(&v2);
            let v6: std::string::String = String::from(v4);
            let v7 = Dice_ui::method19();
            let v8 = Dice_ui::method933();
            let v18: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v8()) view=move || v7() path=v6 /> })");
            let v19: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v8())
                        view=move || v7()
                        path=v6
                    ></leptos_router::Route>
                },
            );
            let v22: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method934()));
            let v24: &str = fable_library_rust::String_::LrcStr::as_str(&v22);
            let v26: std::string::String = String::from(v24);
            let v27 = Dice_ui::method935();
            let v28 = Dice_ui::method933();
            let v36: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v28()) view=move || v27() path=v26 /> })");
            let v37: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v28())
                        view=move || v27()
                        path=v26
                    ></leptos_router::Route>
                },
            );
            let v40: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method936()));
            let v42: &str = fable_library_rust::String_::LrcStr::as_str(&v40);
            let v44: std::string::String = String::from(v42);
            let v45 = Dice_ui::method937();
            let v46 = Dice_ui::method933();
            let v54: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v46()) view=move || v45() path=v44 /> })");
            let v55: leptos::View = leptos::IntoView::into_view(
                leptos::view! {
                    <leptos_router::Route
                        children=Box::new(move || v46())
                        view=move || v45()
                        path=v44
                    ></leptos_router::Route>
                },
            );
            let v58: string = Dice_ui::method6(Dice_ui::method18(Dice_ui::method938()));
            let v60: &str = fable_library_rust::String_::LrcStr::as_str(&v58);
            let v62: std::string::String = String::from(v60);
            let v63 = Dice_ui::method939();
            let v64 = Dice_ui::method933();
            let v72: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Route  children=Box::new(move || v64()) view=move || v63() path=v62 /> })");
            let v76: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                v19,
                v37,
                v55,
                leptos::IntoView::into_view(
                    leptos::view! {
                        <leptos_router::Route
                            children=Box::new(move || v64())
                            view=move || v63()
                            path=v62
                        ></leptos_router::Route>
                    },
                ),
            ])));
            let v78: Vec<leptos::View> = v76.to_vec();
            leptos::Fragment::new(v78)
        }
        pub fn method16() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method940(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::Fragment {
            let v1 = Dice_ui::method940(Dice_ui::method16());
            let v7: string =
                string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Routes  children=Box::new(move || v1()) /> })");
            let v11: Array<leptos::View> = Dice_ui::method437(Dice_ui::method421(new_array(&[
                leptos::IntoView::into_view(
                    leptos::view! { <leptos_router::Routes children=Box::new(move || v1())></leptos_router::Routes> },
                ),
            ])));
            let v13: Vec<leptos::View> = v11.to_vec();
            leptos::Fragment::new(v13)
        }
        pub fn method15() -> Func0<leptos::Fragment> {
            Func0::new(move || Dice_ui::closure3((), ()))
        }
        pub fn method941(v0_1: Func0<leptos::Fragment>) -> Func0<leptos::Fragment> {
            v0_1
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v1: string = Dice_ui::method0(string("app.render ()"));
            leptos::logging::log!("{}", v1);
            leptos_meta::provide_meta_context();
            {
                let v4: bool = Dice_ui::method4();
                let v6: leptos::RwSignal<bool> = leptos::create_rw_signal(v4);
                let v7: bool = Dice_ui::method4();
                let v9: leptos::RwSignal<bool> = leptos::create_rw_signal(v7);
                let v11: string = Dice_ui::method6(Dice_ui::method5());
                let v13: &str = fable_library_rust::String_::LrcStr::as_str(&v11);
                let v16: std::string::String = Dice_ui::method7(String::from(v13));
                let v18: leptos::RwSignal<std::string::String> = leptos::create_rw_signal(v16);
                let v20: string = Dice_ui::method6(Dice_ui::method8());
                let v22: &str = fable_library_rust::String_::LrcStr::as_str(&v20);
                let v24: std::string::String = String::from(v22);
                let v27: string = Dice_ui::method6(Dice_ui::method9());
                let v29: &str = fable_library_rust::String_::LrcStr::as_str(&v27);
                let v35: Array<LrcPtr<(bool, std::string::String)>> =
                    Dice_ui::method11(Dice_ui::method10(new_array(&[
                        LrcPtr::new((true, v24)),
                        LrcPtr::new((true, String::from(v29))),
                    ])));
                let v41: LrcPtr<Dice_ui::Heap0> = Dice_ui::method12(LrcPtr::new(Dice_ui::Heap0 {
                    l0: None::<std::string::String>,
                    l1: v35.to_vec(),
                    l2: 1_i32,
                    l3: 1_i32,
                    l4: Dice_ui::US1::US1_0,
                }));
                let v45: LrcPtr<Dice_ui::Heap1> = Dice_ui::method13(LrcPtr::new(Dice_ui::Heap1 {
                    l0: v6,
                    l1: leptos::create_rw_signal(v41),
                    l2: v9,
                    l3: v18,
                }));
                let v47: leptos::RwSignal<LrcPtr<Dice_ui::Heap1>> = leptos::create_rw_signal(v45);
                let v50: std::collections::HashMap<std::string::String, leptos::RwSignal<bool>> =
                    Dice_ui::method14(std::collections::HashMap::new());
                let v53: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                    l0: v47,
                    l1: leptos::create_rw_signal(v50),
                });
                leptos::provide_context::<std::rc::Rc<Heap2>>(v53);
                {
                    let v56 = Dice_ui::method941(Dice_ui::method15());
                    let v62: string =
                        string("leptos::IntoView::into_view(leptos::view! { <leptos_router::Router  children=Box::new(move || v56()) /> })");
                    leptos::IntoView::into_view(
                        leptos::view! { <leptos_router::Router children=Box::new(move || v56())></leptos_router::Router> },
                    )
                }
            }
        }
        pub fn method3() {
            leptos::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))());
            ()
        }
        pub fn closure521(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method942() -> Func0<()> {
            Func0::new(move || Dice_ui::closure521((), ()))
        }
        pub fn method943(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v2: string = Dice_ui::method0(append(
                append(string("main / args: "), toString(v0_1)),
                string(""),
            ));
            leptos::logging::log!("{}", v2);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v10: Dice_ui::US0 = defaultValue(
                    Dice_ui::US0::US0_0,
                    map(
                        Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v)),
                        leptos::document().body(),
                    ),
                );
                let v13: string = Dice_ui::method0(append(
                    append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v10.clone()),
                    ),
                    string(""),
                ));
                leptos::logging::log!("{}", v13);
                if let Dice_ui::US0::US0_1(v10_1_0) = &v10 {
                    let v16: string = Dice_ui::method1();
                    let v18: &str = fable_library_rust::String_::LrcStr::as_str(&v16);
                    let v19: web_sys::HtmlElement = Dice_ui::method2(match &v10 {
                        Dice_ui::US0::US0_1(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    v19.set_inner_html(v18);
                    Dice_ui::method3()
                } else {
                    let v21 = Dice_ui::method942();
                    let v24: Box<dyn Fn()> = Dice_ui::method943(Box::new(move || v21()));
                    let v26: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v24);
                    let v28: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v26);
                    let v30: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v28);
                    leptos::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v30)
                        .unwrap();
                    v26.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_insert_with(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_eef1bd43::*;
#[path = "../../../polyglot/lib/fsharp/CommonWasm.rs"]
mod module_8cb3e09e;
pub use module_8cb3e09e::*;
pub mod Polyglot {
    // pub use crate::module_8cb3e09e::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
